<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classlbann_1_1_layer" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>lbann::Layer</compoundname>
    <includes refid="layer_8hpp" local="no">layer.hpp</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classlbann_1_1_layer_1a5de05c52f22e0bbd7c703bec3ad4dbf2" prot="protected" static="no" mutable="no">
        <type>lbann_comm *</type>
        <definition>lbann_comm* lbann::Layer::m_comm</definition>
        <argsstring></argsstring>
        <name>m_comm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reference to LBANN communicator. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="357" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="357" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlbann_1_1_layer_1abb34bb8031f57a483e2e327a5f229f48" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt;int&gt; lbann::Layer::m_neuron_dims</definition>
        <argsstring></argsstring>
        <name>m_neuron_dims</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dimensions of activation tensor. If a derived class has more than one activation tensor, it is responsible for its own interpretation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="363" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="363" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlbann_1_1_layer_1a6b5ebc8a7d9329d8a773ed787e7b41d8" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int lbann::Layer::m_num_neurons</definition>
        <argsstring></argsstring>
        <name>m_num_neurons</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Size of activation tensor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="365" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="365" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlbann_1_1_layer_1adfd6178d21498c9095cd947ae1eb2d6a" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int lbann::Layer::m_num_neuron_dims</definition>
        <argsstring></argsstring>
        <name>m_num_neuron_dims</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of dimensions of activation tensor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="367" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="367" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlbann_1_1_layer_1ae204d1a2a79606eaa117273857ff62a3" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt;int&gt; lbann::Layer::m_prev_neuron_dims</definition>
        <argsstring></argsstring>
        <name>m_prev_neuron_dims</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dimensions of previous activation tensor. If a derived class has more than one previous activation tensor, it is responsible for its own interpretation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="372" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="372" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlbann_1_1_layer_1ac7b30f4e28d58204bfcbb76886f9136d" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int lbann::Layer::m_num_prev_neurons</definition>
        <argsstring></argsstring>
        <name>m_num_prev_neurons</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Size of previous activation tensor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="374" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="374" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlbann_1_1_layer_1adc052afb38f170e839db00d3c8151d1e" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int lbann::Layer::m_num_prev_neuron_dims</definition>
        <argsstring></argsstring>
        <name>m_num_prev_neuron_dims</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of dimensions of previous activation tensor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="376" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="376" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlbann_1_1_layer_1a52314601c3458268f56e017dc2ade357" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; AbsDistMat * &gt;</type>
        <definition>std::vector&lt;AbsDistMat*&gt; lbann::Layer::m_prev_activations</definition>
        <argsstring></argsstring>
        <name>m_prev_activations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Previous activation matrices. Forward propagation inputs from each parent layer. These are typically matrix views where each column is a flattened tensor corresponding to a mini-batch sample. The matrices are owned by the layer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="384" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="384" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlbann_1_1_layer_1a7caf08e938141d1584e6939cefa4baed" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; AbsDistMat * &gt;</type>
        <definition>std::vector&lt;AbsDistMat*&gt; lbann::Layer::m_activations</definition>
        <argsstring></argsstring>
        <name>m_activations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Activation matrices. Forward propagation outputs to each child layer. These are typically matrices where each column is a flattened tensor corresponding to a mini-batch sample. The matrices are owned by the layer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="391" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="391" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlbann_1_1_layer_1a6fdcbf884150d0b20cffe678fefd7caa" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; AbsDistMat * &gt;</type>
        <definition>std::vector&lt;AbsDistMat*&gt; lbann::Layer::m_prev_error_signals</definition>
        <argsstring></argsstring>
        <name>m_prev_error_signals</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Error signal matrices. Backward propagation inputs from each child layer. These are typically matrix views where each column is a flattened tensor corresponding to a mini-batch sample. The matrices are owned by the layer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="398" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="398" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlbann_1_1_layer_1a452e22ac81c1a799f0614b3e942ea726" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; AbsDistMat * &gt;</type>
        <definition>std::vector&lt;AbsDistMat*&gt; lbann::Layer::m_error_signals</definition>
        <argsstring></argsstring>
        <name>m_error_signals</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Error signal matrices. Backward propagation outputs to each parent layer. These are typically matrices where each column is a flattened tensor corresponding to a mini-batch sample. The matrices are owned by the layer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="405" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="405" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlbann_1_1_layer_1a7954e30fbf9100a6ba4b56d02767a469" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; weights * &gt;</type>
        <definition>std::vector&lt;weights*&gt; lbann::Layer::m_weights</definition>
        <argsstring></argsstring>
        <name>m_weights</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>References to layer weights. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="408" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="408" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlbann_1_1_layer_1a3fa7c6cf1a22bb14ab0e85e3dc6027c5" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; const <ref refid="classlbann_1_1_layer" kindref="compound">Layer</ref> * &gt;</type>
        <definition>std::vector&lt;const Layer*&gt; lbann::Layer::m_parent_layers</definition>
        <argsstring></argsstring>
        <name>m_parent_layers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>References to parent layers. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="411" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="411" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlbann_1_1_layer_1ae348c0d2b4d05f74d809d09debb633c0" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; const <ref refid="classlbann_1_1_layer" kindref="compound">Layer</ref> * &gt;</type>
        <definition>std::vector&lt;const Layer*&gt; lbann::Layer::m_child_layers</definition>
        <argsstring></argsstring>
        <name>m_child_layers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>References to child layers. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="413" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="413" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlbann_1_1_layer_1a841b96b25555247f52921c7f13ae1dfa" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int lbann::Layer::m_expected_num_parent_layers</definition>
        <argsstring></argsstring>
        <name>m_expected_num_parent_layers</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Expected number of parent layers. A negative value indicates no limit. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="418" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="418" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlbann_1_1_layer_1ac08f133dddd150319650e220ab9a523a" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int lbann::Layer::m_expected_num_child_layers</definition>
        <argsstring></argsstring>
        <name>m_expected_num_child_layers</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Expected number of child layers. A negative value indicates no limit. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="422" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="422" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlbann_1_1_layer_1a3d9315e99574166f2f33e37b572021d2" prot="protected" static="no" mutable="no">
        <type>model *</type>
        <definition>model* lbann::Layer::m_model</definition>
        <argsstring></argsstring>
        <name>m_model</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reference to model managing this layer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="425" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="425" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlbann_1_1_layer_1af7881cb5eff5207c15fa835d65462e8f" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool lbann::Layer::m_using_gpus</definition>
        <argsstring></argsstring>
        <name>m_using_gpus</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether current layer is using a GPU implementation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="486" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="486" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlbann_1_1_layer_1a08dbb94239e3b8c96329786c57c72e21" prot="protected" static="no" mutable="no">
        <type>cudnn::cudnn_manager *</type>
        <definition>cudnn::cudnn_manager* lbann::Layer::m_cudnn</definition>
        <argsstring></argsstring>
        <name>m_cudnn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reference to cuDNN manager. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="489" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="489" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlbann_1_1_layer_1afdc60df9731a3ecdeeeb8175fa483676" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool lbann::Layer::m_frozen</definition>
        <argsstring></argsstring>
        <name>m_frozen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Avoid back prop if frozen </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="492" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="492" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlbann_1_1_layer_1ab1bd9ab0a6f9e554f4dc936d8316028e" prot="protected" static="no" mutable="no">
        <type>EvalType</type>
        <definition>EvalType lbann::Layer::m_fp_time</definition>
        <argsstring></argsstring>
        <name>m_fp_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Time spent in forward propagation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="522" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="522" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlbann_1_1_layer_1aa4e439c1d6a656e709dc4736c9380476" prot="protected" static="no" mutable="no">
        <type>EvalType</type>
        <definition>EvalType lbann::Layer::m_fp_compute_time</definition>
        <argsstring></argsstring>
        <name>m_fp_compute_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Time spent in the forward propagation computation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="524" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="524" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlbann_1_1_layer_1aa60fc41627bcaa9c345775bf5737bb45" prot="protected" static="no" mutable="no">
        <type>EvalType</type>
        <definition>EvalType lbann::Layer::m_bp_time</definition>
        <argsstring></argsstring>
        <name>m_bp_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Time spent in backward propagation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="526" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="526" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlbann_1_1_layer_1ae28626457a58943b25e7a2920fc271f0" prot="protected" static="no" mutable="no">
        <type>EvalType</type>
        <definition>EvalType lbann::Layer::m_bp_compute_time</definition>
        <argsstring></argsstring>
        <name>m_bp_compute_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Time spent in the backward propagation computation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="528" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="528" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlbann_1_1_layer_1ab7d84533662b02d01ba6685ad6f20935" prot="protected" static="no" mutable="no">
        <type>EvalType</type>
        <definition>EvalType lbann::Layer::m_update_time</definition>
        <argsstring></argsstring>
        <name>m_update_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Time spent in updates. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="530" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="530" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlbann_1_1_layer_1aa47109ad09b399142fa92f9d3702189f" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string lbann::Layer::m_name</definition>
        <argsstring></argsstring>
        <name>m_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classlbann_1_1_layer" kindref="compound">Layer</ref> instance&apos;s name. Each layer in a model should have a unique, preferably human-readable, name. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="536" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="536" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classlbann_1_1_layer_1a24e9c82354a0a2af1b70cbca2211e7d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>lbann::Layer::Layer</definition>
        <argsstring>(lbann_comm *comm)</argsstring>
        <name>Layer</name>
        <param>
          <type>lbann_comm *</type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a247cc68c730284f10a2cb42985fe5f3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>lbann::Layer::Layer</definition>
        <argsstring>(const Layer &amp;other)</argsstring>
        <name>Layer</name>
        <param>
          <type>const <ref refid="classlbann_1_1_layer" kindref="compound">Layer</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a88d2cb939f013462f1150ffc3aafa615" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classlbann_1_1_layer" kindref="compound">Layer</ref> &amp;</type>
        <definition>Layer&amp; lbann::Layer::operator=</definition>
        <argsstring>(const Layer &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classlbann_1_1_layer" kindref="compound">Layer</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a7cb1c05be02f72ba81bca10930964aa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual lbann::Layer::~Layer</definition>
        <argsstring>()</argsstring>
        <name>~Layer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1af420f22bbac801c85483ade84588a23f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classlbann_1_1_layer" kindref="compound">Layer</ref> *</type>
        <definition>virtual Layer* lbann::Layer::copy</definition>
        <argsstring>() const =0</argsstring>
        <name>copy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy function. This function dynamically allocates memory for a layer instance and instantiates a copy. The caller is responsible for deallocating the instance. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a0fa0ea9160b490c151c0a17fde4f7239" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::string</type>
        <definition>virtual std::string lbann::Layer::get_type</definition>
        <argsstring>() const =0</argsstring>
        <name>get_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the layer type&apos;s name. A layer type name should be brief, human-readable description of the layer&apos;s mathematical operation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a80027550202fa7dbb1dd55fa8a66c84b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string lbann::Layer::get_name</definition>
        <argsstring>() const</argsstring>
        <name>get_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the layer instance&apos;s name. Each layer in a model should have a unique, preferably human-readable, name. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="85" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="85" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a82d8a038861b0af0d54fbf44ce715839" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::Layer::set_name</definition>
        <argsstring>(const std::string name)</argsstring>
        <name>set_name</name>
        <param>
          <type>const std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the layer instance&apos;s name. Each layer in a model should have a unique, preferably human-readable, name. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="90" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a703a3d43978c8e596bfba0b70948505a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string lbann::Layer::get_description</definition>
        <argsstring>() const</argsstring>
        <name>get_description</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a human-readable description of the layer parameters. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="93" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1aa3000ef00ed77ecf0fc732e0a9b601ac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string lbann::Layer::get_topo_description</definition>
        <argsstring>() const</argsstring>
        <name>get_topo_description</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a human-readable description of the activation tensors. Activation tensors are stored in distributed matrices where each column corresponds to a mini-batch sample. Within each column, the data is packed w.r.t. the last tensor dimension, then w.r.t. the penultimate dimension, and so on. 3D tensors are assumed to be 2D images in NCHW format. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a8713a4fdbf3f5927ce95ed6e842fd3d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void lbann::Layer::forward_prop</definition>
        <argsstring>()</argsstring>
        <name>forward_prop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Forward propagation step. Apply a mathematical operation to the previous activations to obtain the activations. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a9bffae62bcbfa3d3c6dc2d99f6e514e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void lbann::Layer::back_prop</definition>
        <argsstring>()</argsstring>
        <name>back_prop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Backward propagation step. Given the objective function gradients w.r.t. the activations (the previous error signals), compute the gradients w.r.t. the previous activations (the error signals) and w.r.t. the weights. This is essentially an application of the chain rule. Note that the objective function may have terms that are independent of the activations, so we add to the gradients rather than overwriting them. This means the error signals and weight gradients must be cleared before performing backward propagation (see the clear_error_signals function). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="119" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a0fbb376cebdaa4692fdc92df34bb366c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool lbann::Layer::update</definition>
        <argsstring>()</argsstring>
        <name>update</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update step. Update the layer&apos;s internal members. Note that the optimization step for the weights happens elsewhere. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a11ed3c01c552e7309277470b3fc053b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void lbann::Layer::clear_error_signals</definition>
        <argsstring>(int mini_batch_size)</argsstring>
        <name>clear_error_signals</name>
        <param>
          <type>int</type>
          <declname>mini_batch_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the error signal tensors to zero. The error signals are resized for the current mini-batch size. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="129" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1ad7b34f319977084f1c0bd6f05c3534bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void lbann::Layer::summarize_stats</definition>
        <argsstring>(lbann_summary &amp;summarizer, int step)</argsstring>
        <name>summarize_stats</name>
        <param>
          <type>lbann_summary &amp;</type>
          <declname>summarizer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>step</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a2885c73cf8d85420a44ac9ee8f744972" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void lbann::Layer::summarize_matrices</definition>
        <argsstring>(lbann_summary &amp;summarizer, int step)</argsstring>
        <name>summarize_matrices</name>
        <param>
          <type>lbann_summary &amp;</type>
          <declname>summarizer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>step</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1aee795848cd9668ad42726b0d374e7c84" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void lbann::Layer::setup</definition>
        <argsstring>()</argsstring>
        <name>setup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Setup layer members. By default, this calls the setup_pointers, setup_dims, setup_matrices, setup_data, and setup_gpu (if needed) functions. Unless the setup_pointers function has been replaced in an inherited class, it is assumed that pointers to parent/child layers have already been initialized.</para><para>If the layer has already been setup, this function should destroy all layer members and reinitialize them. However, it is not guaranteed that derived classes will obey this behavior. Caveat emptor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="146" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1abf5196ae4a2787ed16577302429d2bec" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void lbann::Layer::check_setup</definition>
        <argsstring>()</argsstring>
        <name>check_setup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check that the setup is reasonable. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="148" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a5dfb66e81fc085997402a5e2241316bd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>data_layout</type>
        <definition>virtual data_layout lbann::Layer::get_data_layout</definition>
        <argsstring>() const =0</argsstring>
        <name>get_data_layout</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get data layout of the data tensors. We assume that the data layouts of the previous activations, activations, previous error signals, and error signals are the same. Each concrete layer that is templated on its data layout should override this function to return its template parameter. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1ae3f4a5602df821f4221614b1e3782dc1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string lbann::Layer::get_data_layout_string</definition>
        <argsstring>(data_layout d) const</argsstring>
        <name>get_data_layout_string</name>
        <param>
          <type>data_layout</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a human-readable description of the data_layout </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a1acc0fa44acdeffbac158fdac3467973" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>virtual std::vector&lt;int&gt; lbann::Layer::get_prev_neuron_dims</definition>
        <argsstring>(int parent_index=0) const</argsstring>
        <name>get_prev_neuron_dims</name>
        <param>
          <type>int</type>
          <declname>parent_index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the dimensions of a previous activations tensor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="161" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="161" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a27112eb70bbfbd7f3c3e749960400dec" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>int</type>
        <definition>virtual int lbann::Layer::get_num_prev_neurons</definition>
        <argsstring>(int parent_index=0) const</argsstring>
        <name>get_num_prev_neurons</name>
        <param>
          <type>int</type>
          <declname>parent_index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the size of a previous activations tensor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="165" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="165" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1ace32c7df942a8d97d7a25cb8ff8ce71d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>int</type>
        <definition>virtual int lbann::Layer::get_num_prev_neuron_dims</definition>
        <argsstring>(int parent_index=0) const</argsstring>
        <name>get_num_prev_neuron_dims</name>
        <param>
          <type>int</type>
          <declname>parent_index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of dimensions of a previous activations tensor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="169" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="169" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a54f53393fadbfdc73b4e72489c868433" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>virtual std::vector&lt;int&gt; lbann::Layer::get_neuron_dims</definition>
        <argsstring>(int child_index=0) const</argsstring>
        <name>get_neuron_dims</name>
        <param>
          <type>int</type>
          <declname>child_index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the dimensions of an activations tensor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="173" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="173" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1aa4de686cc6c2dd38166f42faf874f227" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>int</type>
        <definition>virtual int lbann::Layer::get_num_neurons</definition>
        <argsstring>(int child_index=0) const</argsstring>
        <name>get_num_neurons</name>
        <param>
          <type>int</type>
          <declname>child_index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the size of an activations tensor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="177" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="177" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1aa35561e662de84deae26045ccb53d862" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>int</type>
        <definition>virtual int lbann::Layer::get_num_neuron_dims</definition>
        <argsstring>(int child_index=0) const</argsstring>
        <name>get_num_neuron_dims</name>
        <param>
          <type>int</type>
          <declname>child_index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of dimensions of an activations tensor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="181" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="181" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a0a0f8e32e2b17953f87652f855ccfbf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void lbann::Layer::reset_counters</definition>
        <argsstring>()</argsstring>
        <name>reset_counters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reset layer stat counters. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="186" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a6a75532bdaa2ca3879034f2a76085a06" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool lbann::Layer::using_gpus</definition>
        <argsstring>() const</argsstring>
        <name>using_gpus</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the layer is using a GPU implementation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="189" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="189" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1aa30dbf20929aaa58b5be98b98217ca88" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int lbann::Layer::get_expected_num_parent_layers</definition>
        <argsstring>() const</argsstring>
        <name>get_expected_num_parent_layers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get expected number of parent layers. A negative value indicates no limit. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="194" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="194" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1aaeef8c7631204fc415a94dcdfbcfe93d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int lbann::Layer::get_expected_num_child_layers</definition>
        <argsstring>() const</argsstring>
        <name>get_expected_num_child_layers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get expected number of child layers. A negative value indicates no limit. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="198" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="198" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1afcfb6f55d12c728a59d107fe2d2fff0d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>model *</type>
        <definition>model* lbann::Layer::get_model</definition>
        <argsstring>() const</argsstring>
        <name>get_model</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the model that manages this layer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="201" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="201" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a8eed87b25ea902b223c6b7a23abf78b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::Layer::set_model</definition>
        <argsstring>(model *m)</argsstring>
        <name>set_model</name>
        <param>
          <type>model *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the model that manages this layer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="203" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="203" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a0ac13af6f5ee8316d64c550bef919ee0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>El::Matrix&lt; El::Int &gt; *</type>
        <definition>virtual El::Matrix&lt;El::Int&gt;* lbann::Layer::get_sample_indices_per_mb</definition>
        <argsstring>()</argsstring>
        <name>get_sample_indices_per_mb</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="205" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="205" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a131876b692c0e68c95d9ae1a86c446df" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool lbann::Layer::saveToFile</definition>
        <argsstring>(int fd, const char *filename) const</argsstring>
        <name>saveToFile</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="207" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="207" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a1ae0e6015dd427c63236a07f8cbd3878" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool lbann::Layer::loadFromFile</definition>
        <argsstring>(int fd, const char *filename)</argsstring>
        <name>loadFromFile</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="208" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="208" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1ae3e1760f2b331afe9bee2b90be748132" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool lbann::Layer::saveToCheckpoint</definition>
        <argsstring>(int fd, const char *filename, size_t *bytes) const</argsstring>
        <name>saveToCheckpoint</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="210" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a96665201188ff727ac490bafa9e1bf8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool lbann::Layer::loadFromCheckpoint</definition>
        <argsstring>(int fd, const char *filename, size_t *bytes)</argsstring>
        <name>loadFromCheckpoint</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="211" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1aa902d03e4aeee6a845842e00e32a9e3c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool lbann::Layer::save_to_checkpoint_shared</definition>
        <argsstring>(persist &amp;p, bool val_end) const</argsstring>
        <name>save_to_checkpoint_shared</name>
        <param>
          <type>persist &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>val_end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="213" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1ac51dde033c47ef8c47df3332ed7c2c28" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool lbann::Layer::load_from_checkpoint_shared</definition>
        <argsstring>(persist &amp;p)</argsstring>
        <name>load_from_checkpoint_shared</name>
        <param>
          <type>persist &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="214" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a91682736d7689bbe4fb2355579be982d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void lbann::Layer::write_proto</definition>
        <argsstring>(lbann_data::Layer *proto) const</argsstring>
        <name>write_proto</name>
        <param>
          <type>lbann_data::Layer *</type>
          <declname>proto</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write layer to proto file </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="217" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a09e9e16843467b5a89739f06c6c8f027" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void lbann::Layer::get_fp_output</definition>
        <argsstring>(AbsDistMat &amp;fp_output, const Layer *child) const</argsstring>
        <name>get_fp_output</name>
        <param>
          <type>AbsDistMat &amp;</type>
          <declname>fp_output</declname>
        </param>
        <param>
          <type>const <ref refid="classlbann_1_1_layer" kindref="compound">Layer</ref> *</type>
          <declname>child</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send forward propagation output to a child layer. On output, fp_output is either a matrix view or copy of the appropriate activation tensor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="223" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1ac9d620c9ca0a14e7c16a6719c4fd35b8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void lbann::Layer::get_bp_output</definition>
        <argsstring>(AbsDistMat &amp;bp_output, const Layer *parent) const</argsstring>
        <name>get_bp_output</name>
        <param>
          <type>AbsDistMat &amp;</type>
          <declname>bp_output</declname>
        </param>
        <param>
          <type>const <ref refid="classlbann_1_1_layer" kindref="compound">Layer</ref> *</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send backward propagation output to a parent layer. On output, bp_output is either a matrix view or copy of the appropriate error signal tensor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="228" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a22d31298912405660ebb210c0d7c5373" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>virtual std::vector&lt;int&gt; lbann::Layer::fp_output_dims</definition>
        <argsstring>(const Layer *child=nullptr) const</argsstring>
        <name>fp_output_dims</name>
        <param>
          <type>const <ref refid="classlbann_1_1_layer" kindref="compound">Layer</ref> *</type>
          <declname>child</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get dimensions of forward propagation output to a child layer. Returns the dimensions of the appropriate activations tensor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="250" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="250" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a8d942eb2cd37c346edc5ff473e0494a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void lbann::Layer::add_to_error_signal</definition>
        <argsstring>(const AbsDistMat &amp;error_signals, DataType scale=DataType(1), int parent_index=0)</argsstring>
        <name>add_to_error_signal</name>
        <param>
          <type>const AbsDistMat &amp;</type>
          <declname>error_signals</declname>
        </param>
        <param>
          <type>DataType</type>
          <declname>scale</declname>
          <defval>DataType(1)</defval>
        </param>
        <param>
          <type>int</type>
          <declname>parent_index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add to the layer&apos;s error signal. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="253" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="253" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a898e72b93752abf52d35b06459cd360e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; const <ref refid="classlbann_1_1_layer" kindref="compound">Layer</ref> * &gt; &amp;</type>
        <definition>std::vector&lt;const Layer*&gt;&amp; lbann::Layer::get_parent_layers</definition>
        <argsstring>()</argsstring>
        <name>get_parent_layers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get parent layers. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="260" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="260" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a233ceaf4e6c6b5c24dd097ffff511579" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; const <ref refid="classlbann_1_1_layer" kindref="compound">Layer</ref> * &gt; &amp;</type>
        <definition>const std::vector&lt;const Layer*&gt;&amp; lbann::Layer::get_parent_layers</definition>
        <argsstring>() const</argsstring>
        <name>get_parent_layers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get parent layers. (const) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="262" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="262" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1aa0058c8ec4913efc3e4de5d6f61eb8db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; const <ref refid="classlbann_1_1_layer" kindref="compound">Layer</ref> * &gt; &amp;</type>
        <definition>std::vector&lt;const Layer*&gt;&amp; lbann::Layer::get_child_layers</definition>
        <argsstring>()</argsstring>
        <name>get_child_layers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get child layers. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="264" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="264" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a0ad6c5253a4545a7322766d586a4bd33" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; const <ref refid="classlbann_1_1_layer" kindref="compound">Layer</ref> * &gt; &amp;</type>
        <definition>const std::vector&lt;const Layer*&gt;&amp; lbann::Layer::get_child_layers</definition>
        <argsstring>() const</argsstring>
        <name>get_child_layers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get child layers. (const) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="266" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="266" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1ac9290d4a6453ccda5f6b4d8b57b49ba3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int lbann::Layer::get_num_parents</definition>
        <argsstring>() const</argsstring>
        <name>get_num_parents</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get number of parent layers. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="269" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="269" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a1409a117c31a7ea4f2c7a4d22a3e86c3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int lbann::Layer::get_num_children</definition>
        <argsstring>() const</argsstring>
        <name>get_num_children</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get number of child layers. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="271" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="271" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1afc7bf4e2a61a6f47f9e1f185bf92439a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string lbann::Layer::get_child_names</definition>
        <argsstring>() const</argsstring>
        <name>get_child_names</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="275" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="275" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1afdf36947beec676a71ecd6167c3bb724" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string lbann::Layer::get_parent_names</definition>
        <argsstring>() const</argsstring>
        <name>get_parent_names</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="276" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="276" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a326668ce624a9bcc719a463820b2e3a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::Layer::add_parent_layer</definition>
        <argsstring>(const Layer *parent)</argsstring>
        <name>add_parent_layer</name>
        <param>
          <type>const <ref refid="classlbann_1_1_layer" kindref="compound">Layer</ref> *</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a parent layer. Does nothing if parent is a null pointer, the same layer, or already a parent. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="282" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1ace0346ac56fd7ce7b6b44f27f224f35e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::Layer::add_child_layer</definition>
        <argsstring>(const Layer *child)</argsstring>
        <name>add_child_layer</name>
        <param>
          <type>const <ref refid="classlbann_1_1_layer" kindref="compound">Layer</ref> *</type>
          <declname>child</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a child layer. Does nothing if child is a null pointer, the same layer, or already a child. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="287" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a7336909c78e438ba5332c6c1bddeadd2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::Layer::clear_parent_layers</definition>
        <argsstring>()</argsstring>
        <name>clear_parent_layers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove all parent layers. Parent layers are not deallocated. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="292" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="292" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a040bf53e261b1ef796739c09b3362a3a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::Layer::clear_child_layers</definition>
        <argsstring>()</argsstring>
        <name>clear_child_layers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove all child layers. Child layers are not deallocated. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="296" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="296" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a85ec84f2b2581550aab97d50734233e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; <ref refid="classlbann_1_1_layer" kindref="compound">Layer</ref> * &gt;</type>
        <definition>virtual std::vector&lt;Layer*&gt; lbann::Layer::get_layer_pointers</definition>
        <argsstring>()</argsstring>
        <name>get_layer_pointers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get list of pointers to other layers. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="299" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1aa8779721c2fb17770f27a7db5924ba18" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void lbann::Layer::set_layer_pointers</definition>
        <argsstring>(std::vector&lt; Layer *&gt; layers)</argsstring>
        <name>set_layer_pointers</name>
        <param>
          <type>std::vector&lt; <ref refid="classlbann_1_1_layer" kindref="compound">Layer</ref> *&gt;</type>
          <declname>layers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set list of pointers to other layers. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="301" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a4ee78d42284421519dd18d27b4da0957" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; weights * &gt; &amp;</type>
        <definition>std::vector&lt;weights*&gt;&amp; lbann::Layer::get_weights</definition>
        <argsstring>()</argsstring>
        <name>get_weights</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get references to weights. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="304" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="304" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1ab9fe05ad8d21ba5d6dd4d22ee2e0dca0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; weights * &gt; &amp;</type>
        <definition>const std::vector&lt;weights*&gt;&amp; lbann::Layer::get_weights</definition>
        <argsstring>() const</argsstring>
        <name>get_weights</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get references to weights. (const) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="306" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="306" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a524a78dc6a812ae92834a9e1aa83434b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::Layer::set_weights</definition>
        <argsstring>(std::vector&lt; weights *&gt; w)</argsstring>
        <name>set_weights</name>
        <param>
          <type>std::vector&lt; weights *&gt;</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set list of pointers to weights. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="308" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="308" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1ae9df4e0b0fe7c276c79575f9e11c53af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::Layer::replace_weights</definition>
        <argsstring>(Layer *other_layer)</argsstring>
        <name>replace_weights</name>
        <param>
          <type><ref refid="classlbann_1_1_layer" kindref="compound">Layer</ref> *</type>
          <declname>other_layer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Replace weights with another <ref refid="classlbann_1_1_layer" kindref="compound">Layer</ref>&apos;s weights </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="310" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a174d419739aaa76efa1bae14973662de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AbsDistMat &amp;</type>
        <definition>AbsDistMat&amp; lbann::Layer::get_prev_activations</definition>
        <argsstring>(int parent_index=0)</argsstring>
        <name>get_prev_activations</name>
        <param>
          <type>int</type>
          <declname>parent_index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get previous activation tensor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="313" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1ab727ffb6cac5cd58cda8f610461246a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AbsDistMat &amp;</type>
        <definition>AbsDistMat&amp; lbann::Layer::get_activations</definition>
        <argsstring>(int child_index=0)</argsstring>
        <name>get_activations</name>
        <param>
          <type>int</type>
          <declname>child_index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get activation tensor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="315" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1ad0c955adcaad15087727352eb24e70b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AbsDistMat &amp;</type>
        <definition>AbsDistMat&amp; lbann::Layer::get_prev_error_signals</definition>
        <argsstring>(int child_index=0)</argsstring>
        <name>get_prev_error_signals</name>
        <param>
          <type>int</type>
          <declname>child_index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get previous error signal tensor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="317" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a8cfd7eda38d6228ee0a37377addf558a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AbsDistMat &amp;</type>
        <definition>AbsDistMat&amp; lbann::Layer::get_error_signals</definition>
        <argsstring>(int parent_index=0)</argsstring>
        <name>get_error_signals</name>
        <param>
          <type>int</type>
          <declname>parent_index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get error signal tensor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="319" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a5b22008ef3b21a58ad2172422ce6a0b0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const AbsDistMat &amp;</type>
        <definition>const AbsDistMat&amp; lbann::Layer::get_prev_activations</definition>
        <argsstring>(int parent_index=0) const</argsstring>
        <name>get_prev_activations</name>
        <param>
          <type>int</type>
          <declname>parent_index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get previous activation tensor. (const) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="321" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a44bca060e29a7f8d3b556658b4169249" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const AbsDistMat &amp;</type>
        <definition>const AbsDistMat&amp; lbann::Layer::get_activations</definition>
        <argsstring>(int child_index=0) const</argsstring>
        <name>get_activations</name>
        <param>
          <type>int</type>
          <declname>child_index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get activation tensor. (const) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="323" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a824e5b94c6726f36ecd1cfd37cbaa16d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const AbsDistMat &amp;</type>
        <definition>const AbsDistMat&amp; lbann::Layer::get_prev_error_signals</definition>
        <argsstring>(int child_index=0) const</argsstring>
        <name>get_prev_error_signals</name>
        <param>
          <type>int</type>
          <declname>child_index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get previous error signal tensor. (const) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="325" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1af9a8dcffec102554efe73916c8ad48a7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const AbsDistMat &amp;</type>
        <definition>const AbsDistMat&amp; lbann::Layer::get_error_signals</definition>
        <argsstring>(int parent_index=0) const</argsstring>
        <name>get_error_signals</name>
        <param>
          <type>int</type>
          <declname>parent_index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get error signal tensor. (const) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="327" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a185f48a1e0c4f0290178d7b14dad488a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Mat &amp;</type>
        <definition>Mat&amp; lbann::Layer::get_local_prev_activations</definition>
        <argsstring>(int parent_index=0)</argsstring>
        <name>get_local_prev_activations</name>
        <param>
          <type>int</type>
          <declname>parent_index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get local portion of previous activation tensor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="329" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a5d9df9409574260963b25231ca1ff4f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Mat &amp;</type>
        <definition>Mat&amp; lbann::Layer::get_local_activations</definition>
        <argsstring>(int child_index=0)</argsstring>
        <name>get_local_activations</name>
        <param>
          <type>int</type>
          <declname>child_index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get local portion of activation tensor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="331" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a4e97915dd63ae4ac28a4538c1fc3b716" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Mat &amp;</type>
        <definition>Mat&amp; lbann::Layer::get_local_prev_error_signals</definition>
        <argsstring>(int child_index=0)</argsstring>
        <name>get_local_prev_error_signals</name>
        <param>
          <type>int</type>
          <declname>child_index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get local portion of previous error signal tensor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="333" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a4f56e4d1349a4b5d91dceca344910c1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Mat &amp;</type>
        <definition>Mat&amp; lbann::Layer::get_local_error_signals</definition>
        <argsstring>(int parent_index=0)</argsstring>
        <name>get_local_error_signals</name>
        <param>
          <type>int</type>
          <declname>parent_index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get local portion of error signal tensor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="335" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1af277dd7d6e7083ff52e1ce28f2833d65" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const Mat &amp;</type>
        <definition>const Mat&amp; lbann::Layer::get_local_prev_activations</definition>
        <argsstring>(int parent_index=0) const</argsstring>
        <name>get_local_prev_activations</name>
        <param>
          <type>int</type>
          <declname>parent_index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get local portion of previous activation tensor. (const) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="337" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1aeb908086b74a1c3c387bc2dc55c68c73" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const Mat &amp;</type>
        <definition>const Mat&amp; lbann::Layer::get_local_activations</definition>
        <argsstring>(int child_index=0) const</argsstring>
        <name>get_local_activations</name>
        <param>
          <type>int</type>
          <declname>child_index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get local portion of activation tensor. (const) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="339" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1abeb8f181dbf2ea0e7025232340b82158" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const Mat &amp;</type>
        <definition>const Mat&amp; lbann::Layer::get_local_prev_error_signals</definition>
        <argsstring>(int child_index=0) const</argsstring>
        <name>get_local_prev_error_signals</name>
        <param>
          <type>int</type>
          <declname>child_index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get local portion of previous error signal tensor. (const) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="341" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1aa49239264473346858497d884b5348d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const Mat &amp;</type>
        <definition>const Mat&amp; lbann::Layer::get_local_error_signals</definition>
        <argsstring>(int parent_index=0) const</argsstring>
        <name>get_local_error_signals</name>
        <param>
          <type>int</type>
          <declname>parent_index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get local portion of error signal tensor. (const) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="343" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a1b528e5872357a82176ee487596b363c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>lbann_comm *</type>
        <definition>lbann_comm* lbann::Layer::get_comm</definition>
        <argsstring>() const</argsstring>
        <name>get_comm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get reference to LBANN communicator. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="346" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="346" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a63c694744d9360208642a35412a4e8ee" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>cudnn::cudnn_manager *</type>
        <definition>cudnn::cudnn_manager* lbann::Layer::get_cudnn_manager</definition>
        <argsstring>() const</argsstring>
        <name>get_cudnn_manager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get reference to cuDNN manager. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="348" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="348" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1ad55c455dbae0d082cedfa68511709aae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::Layer::freeze</definition>
        <argsstring>()</argsstring>
        <name>freeze</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="350" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1aa43ecf9fc67eb1d596c1a69cf35d1245" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::Layer::unfreeze</definition>
        <argsstring>()</argsstring>
        <name>unfreeze</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="351" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1af3c0f9f32eb631f4fdf34ad040ef8637" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lbann::Layer::is_frozen</definition>
        <argsstring>() const</argsstring>
        <name>is_frozen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="352" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classlbann_1_1_layer_1ab00780b81a50f0b404d348ae4b4a86dc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string lbann::Layer::get_layer_names</definition>
        <argsstring>(const std::vector&lt; const Layer *&gt; &amp;list)</argsstring>
        <name>get_layer_names</name>
        <param>
          <type>const std::vector&lt; const <ref refid="classlbann_1_1_layer" kindref="compound">Layer</ref> *&gt; &amp;</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get names in a particular list of layers </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="274" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classlbann_1_1_layer_1a3940d00d4aa789de92453d8a4a5a860b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void lbann::Layer::fp_setup_data</definition>
        <argsstring>(int mini_batch_size)</argsstring>
        <name>fp_setup_data</name>
        <param>
          <type>int</type>
          <declname>mini_batch_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Setup data for forward propagation. Base method gets previous activations from parent layers and resizes activations for the current mini-batch size. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="431" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1aab9d2de8aca20f6674c6f089b1fffd87" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void lbann::Layer::bp_setup_data</definition>
        <argsstring>(int mini_batch_size)</argsstring>
        <name>bp_setup_data</name>
        <param>
          <type>int</type>
          <declname>mini_batch_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Setup data for forward propagation. Base method gets previous error signals from child layers. The error signals are resized for the current mini-batch size in the clear_error_signals function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="437" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a66baf6b96d3c7de0ebbb326d123e7973" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void lbann::Layer::setup_pointers</definition>
        <argsstring>()</argsstring>
        <name>setup_pointers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Setup pointers to parent and child layers. Called by the setup function. The base method checks that the number of parents and children are valid. Pointers to the parent/child layers are assumed to be already initialized. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="448" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a701c553c00dc310ccdc8f7bf5453abcc" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void lbann::Layer::setup_dims</definition>
        <argsstring>()</argsstring>
        <name>setup_dims</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Setup tensor dimensions Called by the setup function. The base method sets the dimensions of the activation tensors equal to the dimensions of the first previous activation tensor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="454" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a175ee47076dd3c80e201f705f2c751db" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void lbann::Layer::setup_matrices</definition>
        <argsstring>(const El::Grid &amp;grid)</argsstring>
        <name>setup_matrices</name>
        <param>
          <type>const El::Grid &amp;</type>
          <declname>grid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Instantiate distributed matrices. If the layer has already been setup, this function should destroy all matrices and reinstantiate them. However, it is not guaranteed that derived classes will obey this behavior. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="460" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a6333bc7c2e0471afb91a5c7c2470b794" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void lbann::Layer::setup_data</definition>
        <argsstring>()</argsstring>
        <name>setup_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Setup layer data. Called by the setup function. The base method sets the previous activation, activation, previous error signal, and error signal matrices to zero matrices with the proper dimensions. Matrix buffers are pinned if needed for GPU transfers. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="467" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1afb36e044c33677718466ea146ec7a290" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void lbann::Layer::setup_gpu</definition>
        <argsstring>()</argsstring>
        <name>setup_gpu</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Setup GPU objects. Called by the setup function if GPUs are enabled. The base method initializes GPU matrices for the previous activations, activations, previous error signals, and error signals. It also initializes cuDNN tensor descriptors. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="474" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a523319dd1bd87a0612afa1912bb5aad7" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void lbann::Layer::fp_compute</definition>
        <argsstring>()=0</argsstring>
        <name>fp_compute</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform the computation for the forward propagation step. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="477" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a7442e01f9ee1294df2de811efcf5171e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void lbann::Layer::bp_compute</definition>
        <argsstring>()=0</argsstring>
        <name>bp_compute</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform the computation for the backward propagation step. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="479" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a70e08fc96a612f67ade6ba3809536d85" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool lbann::Layer::update_compute</definition>
        <argsstring>()</argsstring>
        <name>update_compute</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform the computation for the update step. Returns false if the layer must reset for a new training epoch. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="483" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="483" bodyend="483"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classlbann_1_1_layer_1a2d50e9af2a9aa7e6741deb555641c30c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>data_layout</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void lbann::Layer::instantiate_matrices</definition>
        <argsstring>(const El::Grid &amp;grid)</argsstring>
        <name>instantiate_matrices</name>
        <param>
          <type>const El::Grid &amp;</type>
          <declname>grid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Instantiate distributed matrices. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="542" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1_layer_1a888392d6ac6906093a8125c6a37de075" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::Layer::deallocate_matrices</definition>
        <argsstring>()</argsstring>
        <name>deallocate_matrices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deallocate distributed matrices. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="545" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Abstract base class for neural network layers. A layer takes input tensors (&quot;previous activations&quot;) and applies a mathematical operation to obtain output tensors (&quot;activations&quot;). This operation often has trainable parameters called &quot;weights.&quot; The previous activations are recieved from &quot;parent layers&quot; and the activations are sent to &quot;child layers,&quot; making each layer a node in a directed graph. The layer graph and the weights are managed by a neural network model class. A layer should also be able to take objective function gradients w.r.t. the activations (&quot;previous error signals&quot;) and compute the objective function gradients w.r.t. the previous activations (&quot;error signals&quot;) and w.r.t. the weights. This allows the model to perform automatic differentiation and to apply first-order optimization methods to the weights. </para>    </detaileddescription>
    <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" line="62" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/layer.hpp" bodystart="62" bodyend="547"/>
    <listofallmembers>
      <member refid="classlbann_1_1_layer_1ace0346ac56fd7ce7b6b44f27f224f35e" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>add_child_layer</name></member>
      <member refid="classlbann_1_1_layer_1a326668ce624a9bcc719a463820b2e3a4" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>add_parent_layer</name></member>
      <member refid="classlbann_1_1_layer_1a8d942eb2cd37c346edc5ff473e0494a2" prot="public" virt="virtual"><scope>lbann::Layer</scope><name>add_to_error_signal</name></member>
      <member refid="classlbann_1_1_layer_1a9bffae62bcbfa3d3c6dc2d99f6e514e3" prot="public" virt="virtual"><scope>lbann::Layer</scope><name>back_prop</name></member>
      <member refid="classlbann_1_1_layer_1a7442e01f9ee1294df2de811efcf5171e" prot="protected" virt="pure-virtual"><scope>lbann::Layer</scope><name>bp_compute</name></member>
      <member refid="classlbann_1_1_layer_1aab9d2de8aca20f6674c6f089b1fffd87" prot="protected" virt="virtual"><scope>lbann::Layer</scope><name>bp_setup_data</name></member>
      <member refid="classlbann_1_1_layer_1abf5196ae4a2787ed16577302429d2bec" prot="public" virt="virtual"><scope>lbann::Layer</scope><name>check_setup</name></member>
      <member refid="classlbann_1_1_layer_1a040bf53e261b1ef796739c09b3362a3a" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>clear_child_layers</name></member>
      <member refid="classlbann_1_1_layer_1a11ed3c01c552e7309277470b3fc053b9" prot="public" virt="virtual"><scope>lbann::Layer</scope><name>clear_error_signals</name></member>
      <member refid="classlbann_1_1_layer_1a7336909c78e438ba5332c6c1bddeadd2" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>clear_parent_layers</name></member>
      <member refid="classlbann_1_1_layer_1af420f22bbac801c85483ade84588a23f" prot="public" virt="pure-virtual"><scope>lbann::Layer</scope><name>copy</name></member>
      <member refid="classlbann_1_1_layer_1a888392d6ac6906093a8125c6a37de075" prot="private" virt="non-virtual"><scope>lbann::Layer</scope><name>deallocate_matrices</name></member>
      <member refid="classlbann_1_1_layer_1a8713a4fdbf3f5927ce95ed6e842fd3d8" prot="public" virt="virtual"><scope>lbann::Layer</scope><name>forward_prop</name></member>
      <member refid="classlbann_1_1_layer_1a523319dd1bd87a0612afa1912bb5aad7" prot="protected" virt="pure-virtual"><scope>lbann::Layer</scope><name>fp_compute</name></member>
      <member refid="classlbann_1_1_layer_1a22d31298912405660ebb210c0d7c5373" prot="public" virt="virtual"><scope>lbann::Layer</scope><name>fp_output_dims</name></member>
      <member refid="classlbann_1_1_layer_1a3940d00d4aa789de92453d8a4a5a860b" prot="protected" virt="virtual"><scope>lbann::Layer</scope><name>fp_setup_data</name></member>
      <member refid="classlbann_1_1_layer_1ad55c455dbae0d082cedfa68511709aae" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>freeze</name></member>
      <member refid="classlbann_1_1_layer_1ab727ffb6cac5cd58cda8f610461246a4" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>get_activations</name></member>
      <member refid="classlbann_1_1_layer_1a44bca060e29a7f8d3b556658b4169249" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>get_activations</name></member>
      <member refid="classlbann_1_1_layer_1ac9d620c9ca0a14e7c16a6719c4fd35b8" prot="public" virt="virtual"><scope>lbann::Layer</scope><name>get_bp_output</name></member>
      <member refid="classlbann_1_1_layer_1aa0058c8ec4913efc3e4de5d6f61eb8db" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>get_child_layers</name></member>
      <member refid="classlbann_1_1_layer_1a0ad6c5253a4545a7322766d586a4bd33" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>get_child_layers</name></member>
      <member refid="classlbann_1_1_layer_1afc7bf4e2a61a6f47f9e1f185bf92439a" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>get_child_names</name></member>
      <member refid="classlbann_1_1_layer_1a1b528e5872357a82176ee487596b363c" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>get_comm</name></member>
      <member refid="classlbann_1_1_layer_1a63c694744d9360208642a35412a4e8ee" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>get_cudnn_manager</name></member>
      <member refid="classlbann_1_1_layer_1a5dfb66e81fc085997402a5e2241316bd" prot="public" virt="pure-virtual"><scope>lbann::Layer</scope><name>get_data_layout</name></member>
      <member refid="classlbann_1_1_layer_1ae3f4a5602df821f4221614b1e3782dc1" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>get_data_layout_string</name></member>
      <member refid="classlbann_1_1_layer_1a703a3d43978c8e596bfba0b70948505a" prot="public" virt="virtual"><scope>lbann::Layer</scope><name>get_description</name></member>
      <member refid="classlbann_1_1_layer_1a8cfd7eda38d6228ee0a37377addf558a" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>get_error_signals</name></member>
      <member refid="classlbann_1_1_layer_1af9a8dcffec102554efe73916c8ad48a7" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>get_error_signals</name></member>
      <member refid="classlbann_1_1_layer_1aaeef8c7631204fc415a94dcdfbcfe93d" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>get_expected_num_child_layers</name></member>
      <member refid="classlbann_1_1_layer_1aa30dbf20929aaa58b5be98b98217ca88" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>get_expected_num_parent_layers</name></member>
      <member refid="classlbann_1_1_layer_1a09e9e16843467b5a89739f06c6c8f027" prot="public" virt="virtual"><scope>lbann::Layer</scope><name>get_fp_output</name></member>
      <member refid="classlbann_1_1_layer_1ab00780b81a50f0b404d348ae4b4a86dc" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>get_layer_names</name></member>
      <member refid="classlbann_1_1_layer_1a85ec84f2b2581550aab97d50734233e5" prot="public" virt="virtual"><scope>lbann::Layer</scope><name>get_layer_pointers</name></member>
      <member refid="classlbann_1_1_layer_1a5d9df9409574260963b25231ca1ff4f7" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>get_local_activations</name></member>
      <member refid="classlbann_1_1_layer_1aeb908086b74a1c3c387bc2dc55c68c73" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>get_local_activations</name></member>
      <member refid="classlbann_1_1_layer_1a4f56e4d1349a4b5d91dceca344910c1e" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>get_local_error_signals</name></member>
      <member refid="classlbann_1_1_layer_1aa49239264473346858497d884b5348d2" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>get_local_error_signals</name></member>
      <member refid="classlbann_1_1_layer_1a185f48a1e0c4f0290178d7b14dad488a" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>get_local_prev_activations</name></member>
      <member refid="classlbann_1_1_layer_1af277dd7d6e7083ff52e1ce28f2833d65" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>get_local_prev_activations</name></member>
      <member refid="classlbann_1_1_layer_1a4e97915dd63ae4ac28a4538c1fc3b716" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>get_local_prev_error_signals</name></member>
      <member refid="classlbann_1_1_layer_1abeb8f181dbf2ea0e7025232340b82158" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>get_local_prev_error_signals</name></member>
      <member refid="classlbann_1_1_layer_1afcfb6f55d12c728a59d107fe2d2fff0d" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>get_model</name></member>
      <member refid="classlbann_1_1_layer_1a80027550202fa7dbb1dd55fa8a66c84b" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>get_name</name></member>
      <member refid="classlbann_1_1_layer_1a54f53393fadbfdc73b4e72489c868433" prot="public" virt="virtual"><scope>lbann::Layer</scope><name>get_neuron_dims</name></member>
      <member refid="classlbann_1_1_layer_1a1409a117c31a7ea4f2c7a4d22a3e86c3" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>get_num_children</name></member>
      <member refid="classlbann_1_1_layer_1aa35561e662de84deae26045ccb53d862" prot="public" virt="virtual"><scope>lbann::Layer</scope><name>get_num_neuron_dims</name></member>
      <member refid="classlbann_1_1_layer_1aa4de686cc6c2dd38166f42faf874f227" prot="public" virt="virtual"><scope>lbann::Layer</scope><name>get_num_neurons</name></member>
      <member refid="classlbann_1_1_layer_1ac9290d4a6453ccda5f6b4d8b57b49ba3" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>get_num_parents</name></member>
      <member refid="classlbann_1_1_layer_1ace32c7df942a8d97d7a25cb8ff8ce71d" prot="public" virt="virtual"><scope>lbann::Layer</scope><name>get_num_prev_neuron_dims</name></member>
      <member refid="classlbann_1_1_layer_1a27112eb70bbfbd7f3c3e749960400dec" prot="public" virt="virtual"><scope>lbann::Layer</scope><name>get_num_prev_neurons</name></member>
      <member refid="classlbann_1_1_layer_1a898e72b93752abf52d35b06459cd360e" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>get_parent_layers</name></member>
      <member refid="classlbann_1_1_layer_1a233ceaf4e6c6b5c24dd097ffff511579" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>get_parent_layers</name></member>
      <member refid="classlbann_1_1_layer_1afdf36947beec676a71ecd6167c3bb724" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>get_parent_names</name></member>
      <member refid="classlbann_1_1_layer_1a174d419739aaa76efa1bae14973662de" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>get_prev_activations</name></member>
      <member refid="classlbann_1_1_layer_1a5b22008ef3b21a58ad2172422ce6a0b0" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>get_prev_activations</name></member>
      <member refid="classlbann_1_1_layer_1ad0c955adcaad15087727352eb24e70b6" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>get_prev_error_signals</name></member>
      <member refid="classlbann_1_1_layer_1a824e5b94c6726f36ecd1cfd37cbaa16d" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>get_prev_error_signals</name></member>
      <member refid="classlbann_1_1_layer_1a1acc0fa44acdeffbac158fdac3467973" prot="public" virt="virtual"><scope>lbann::Layer</scope><name>get_prev_neuron_dims</name></member>
      <member refid="classlbann_1_1_layer_1a0ac13af6f5ee8316d64c550bef919ee0" prot="public" virt="virtual"><scope>lbann::Layer</scope><name>get_sample_indices_per_mb</name></member>
      <member refid="classlbann_1_1_layer_1aa3000ef00ed77ecf0fc732e0a9b601ac" prot="public" virt="virtual"><scope>lbann::Layer</scope><name>get_topo_description</name></member>
      <member refid="classlbann_1_1_layer_1a0fa0ea9160b490c151c0a17fde4f7239" prot="public" virt="pure-virtual"><scope>lbann::Layer</scope><name>get_type</name></member>
      <member refid="classlbann_1_1_layer_1a4ee78d42284421519dd18d27b4da0957" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>get_weights</name></member>
      <member refid="classlbann_1_1_layer_1ab9fe05ad8d21ba5d6dd4d22ee2e0dca0" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>get_weights</name></member>
      <member refid="classlbann_1_1_layer_1a2d50e9af2a9aa7e6741deb555641c30c" prot="private" virt="non-virtual"><scope>lbann::Layer</scope><name>instantiate_matrices</name></member>
      <member refid="classlbann_1_1_layer_1af3c0f9f32eb631f4fdf34ad040ef8637" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>is_frozen</name></member>
      <member refid="classlbann_1_1_layer_1a24e9c82354a0a2af1b70cbca2211e7d4" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>Layer</name></member>
      <member refid="classlbann_1_1_layer_1a247cc68c730284f10a2cb42985fe5f3a" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>Layer</name></member>
      <member refid="classlbann_1_1_layer_1ac51dde033c47ef8c47df3332ed7c2c28" prot="public" virt="virtual"><scope>lbann::Layer</scope><name>load_from_checkpoint_shared</name></member>
      <member refid="classlbann_1_1_layer_1a96665201188ff727ac490bafa9e1bf8f" prot="public" virt="virtual"><scope>lbann::Layer</scope><name>loadFromCheckpoint</name></member>
      <member refid="classlbann_1_1_layer_1a1ae0e6015dd427c63236a07f8cbd3878" prot="public" virt="virtual"><scope>lbann::Layer</scope><name>loadFromFile</name></member>
      <member refid="classlbann_1_1_layer_1a7caf08e938141d1584e6939cefa4baed" prot="protected" virt="non-virtual"><scope>lbann::Layer</scope><name>m_activations</name></member>
      <member refid="classlbann_1_1_layer_1ae28626457a58943b25e7a2920fc271f0" prot="protected" virt="non-virtual"><scope>lbann::Layer</scope><name>m_bp_compute_time</name></member>
      <member refid="classlbann_1_1_layer_1aa60fc41627bcaa9c345775bf5737bb45" prot="protected" virt="non-virtual"><scope>lbann::Layer</scope><name>m_bp_time</name></member>
      <member refid="classlbann_1_1_layer_1ae348c0d2b4d05f74d809d09debb633c0" prot="protected" virt="non-virtual"><scope>lbann::Layer</scope><name>m_child_layers</name></member>
      <member refid="classlbann_1_1_layer_1a5de05c52f22e0bbd7c703bec3ad4dbf2" prot="protected" virt="non-virtual"><scope>lbann::Layer</scope><name>m_comm</name></member>
      <member refid="classlbann_1_1_layer_1a08dbb94239e3b8c96329786c57c72e21" prot="protected" virt="non-virtual"><scope>lbann::Layer</scope><name>m_cudnn</name></member>
      <member refid="classlbann_1_1_layer_1a452e22ac81c1a799f0614b3e942ea726" prot="protected" virt="non-virtual"><scope>lbann::Layer</scope><name>m_error_signals</name></member>
      <member refid="classlbann_1_1_layer_1ac08f133dddd150319650e220ab9a523a" prot="protected" virt="non-virtual"><scope>lbann::Layer</scope><name>m_expected_num_child_layers</name></member>
      <member refid="classlbann_1_1_layer_1a841b96b25555247f52921c7f13ae1dfa" prot="protected" virt="non-virtual"><scope>lbann::Layer</scope><name>m_expected_num_parent_layers</name></member>
      <member refid="classlbann_1_1_layer_1aa4e439c1d6a656e709dc4736c9380476" prot="protected" virt="non-virtual"><scope>lbann::Layer</scope><name>m_fp_compute_time</name></member>
      <member refid="classlbann_1_1_layer_1ab1bd9ab0a6f9e554f4dc936d8316028e" prot="protected" virt="non-virtual"><scope>lbann::Layer</scope><name>m_fp_time</name></member>
      <member refid="classlbann_1_1_layer_1afdc60df9731a3ecdeeeb8175fa483676" prot="protected" virt="non-virtual"><scope>lbann::Layer</scope><name>m_frozen</name></member>
      <member refid="classlbann_1_1_layer_1a3d9315e99574166f2f33e37b572021d2" prot="protected" virt="non-virtual"><scope>lbann::Layer</scope><name>m_model</name></member>
      <member refid="classlbann_1_1_layer_1aa47109ad09b399142fa92f9d3702189f" prot="protected" virt="non-virtual"><scope>lbann::Layer</scope><name>m_name</name></member>
      <member refid="classlbann_1_1_layer_1abb34bb8031f57a483e2e327a5f229f48" prot="protected" virt="non-virtual"><scope>lbann::Layer</scope><name>m_neuron_dims</name></member>
      <member refid="classlbann_1_1_layer_1adfd6178d21498c9095cd947ae1eb2d6a" prot="protected" virt="non-virtual"><scope>lbann::Layer</scope><name>m_num_neuron_dims</name></member>
      <member refid="classlbann_1_1_layer_1a6b5ebc8a7d9329d8a773ed787e7b41d8" prot="protected" virt="non-virtual"><scope>lbann::Layer</scope><name>m_num_neurons</name></member>
      <member refid="classlbann_1_1_layer_1adc052afb38f170e839db00d3c8151d1e" prot="protected" virt="non-virtual"><scope>lbann::Layer</scope><name>m_num_prev_neuron_dims</name></member>
      <member refid="classlbann_1_1_layer_1ac7b30f4e28d58204bfcbb76886f9136d" prot="protected" virt="non-virtual"><scope>lbann::Layer</scope><name>m_num_prev_neurons</name></member>
      <member refid="classlbann_1_1_layer_1a3fa7c6cf1a22bb14ab0e85e3dc6027c5" prot="protected" virt="non-virtual"><scope>lbann::Layer</scope><name>m_parent_layers</name></member>
      <member refid="classlbann_1_1_layer_1a52314601c3458268f56e017dc2ade357" prot="protected" virt="non-virtual"><scope>lbann::Layer</scope><name>m_prev_activations</name></member>
      <member refid="classlbann_1_1_layer_1a6fdcbf884150d0b20cffe678fefd7caa" prot="protected" virt="non-virtual"><scope>lbann::Layer</scope><name>m_prev_error_signals</name></member>
      <member refid="classlbann_1_1_layer_1ae204d1a2a79606eaa117273857ff62a3" prot="protected" virt="non-virtual"><scope>lbann::Layer</scope><name>m_prev_neuron_dims</name></member>
      <member refid="classlbann_1_1_layer_1ab7d84533662b02d01ba6685ad6f20935" prot="protected" virt="non-virtual"><scope>lbann::Layer</scope><name>m_update_time</name></member>
      <member refid="classlbann_1_1_layer_1af7881cb5eff5207c15fa835d65462e8f" prot="protected" virt="non-virtual"><scope>lbann::Layer</scope><name>m_using_gpus</name></member>
      <member refid="classlbann_1_1_layer_1a7954e30fbf9100a6ba4b56d02767a469" prot="protected" virt="non-virtual"><scope>lbann::Layer</scope><name>m_weights</name></member>
      <member refid="classlbann_1_1_layer_1a88d2cb939f013462f1150ffc3aafa615" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>operator=</name></member>
      <member refid="classlbann_1_1_layer_1ae9df4e0b0fe7c276c79575f9e11c53af" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>replace_weights</name></member>
      <member refid="classlbann_1_1_layer_1a0a0f8e32e2b17953f87652f855ccfbf9" prot="public" virt="virtual"><scope>lbann::Layer</scope><name>reset_counters</name></member>
      <member refid="classlbann_1_1_layer_1aa902d03e4aeee6a845842e00e32a9e3c" prot="public" virt="virtual"><scope>lbann::Layer</scope><name>save_to_checkpoint_shared</name></member>
      <member refid="classlbann_1_1_layer_1ae3e1760f2b331afe9bee2b90be748132" prot="public" virt="virtual"><scope>lbann::Layer</scope><name>saveToCheckpoint</name></member>
      <member refid="classlbann_1_1_layer_1a131876b692c0e68c95d9ae1a86c446df" prot="public" virt="virtual"><scope>lbann::Layer</scope><name>saveToFile</name></member>
      <member refid="classlbann_1_1_layer_1aa8779721c2fb17770f27a7db5924ba18" prot="public" virt="virtual"><scope>lbann::Layer</scope><name>set_layer_pointers</name></member>
      <member refid="classlbann_1_1_layer_1a8eed87b25ea902b223c6b7a23abf78b3" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>set_model</name></member>
      <member refid="classlbann_1_1_layer_1a82d8a038861b0af0d54fbf44ce715839" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>set_name</name></member>
      <member refid="classlbann_1_1_layer_1a524a78dc6a812ae92834a9e1aa83434b" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>set_weights</name></member>
      <member refid="classlbann_1_1_layer_1aee795848cd9668ad42726b0d374e7c84" prot="public" virt="virtual"><scope>lbann::Layer</scope><name>setup</name></member>
      <member refid="classlbann_1_1_layer_1a6333bc7c2e0471afb91a5c7c2470b794" prot="protected" virt="virtual"><scope>lbann::Layer</scope><name>setup_data</name></member>
      <member refid="classlbann_1_1_layer_1a701c553c00dc310ccdc8f7bf5453abcc" prot="protected" virt="virtual"><scope>lbann::Layer</scope><name>setup_dims</name></member>
      <member refid="classlbann_1_1_layer_1afb36e044c33677718466ea146ec7a290" prot="protected" virt="virtual"><scope>lbann::Layer</scope><name>setup_gpu</name></member>
      <member refid="classlbann_1_1_layer_1a175ee47076dd3c80e201f705f2c751db" prot="protected" virt="virtual"><scope>lbann::Layer</scope><name>setup_matrices</name></member>
      <member refid="classlbann_1_1_layer_1a66baf6b96d3c7de0ebbb326d123e7973" prot="protected" virt="virtual"><scope>lbann::Layer</scope><name>setup_pointers</name></member>
      <member refid="classlbann_1_1_layer_1a2885c73cf8d85420a44ac9ee8f744972" prot="public" virt="virtual"><scope>lbann::Layer</scope><name>summarize_matrices</name></member>
      <member refid="classlbann_1_1_layer_1ad7b34f319977084f1c0bd6f05c3534bb" prot="public" virt="virtual"><scope>lbann::Layer</scope><name>summarize_stats</name></member>
      <member refid="classlbann_1_1_layer_1aa43ecf9fc67eb1d596c1a69cf35d1245" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>unfreeze</name></member>
      <member refid="classlbann_1_1_layer_1a0fbb376cebdaa4692fdc92df34bb366c" prot="public" virt="virtual"><scope>lbann::Layer</scope><name>update</name></member>
      <member refid="classlbann_1_1_layer_1a70e08fc96a612f67ade6ba3809536d85" prot="protected" virt="virtual"><scope>lbann::Layer</scope><name>update_compute</name></member>
      <member refid="classlbann_1_1_layer_1a6a75532bdaa2ca3879034f2a76085a06" prot="public" virt="non-virtual"><scope>lbann::Layer</scope><name>using_gpus</name></member>
      <member refid="classlbann_1_1_layer_1a91682736d7689bbe4fb2355579be982d" prot="public" virt="virtual"><scope>lbann::Layer</scope><name>write_proto</name></member>
      <member refid="classlbann_1_1_layer_1a7cb1c05be02f72ba81bca10930964aa9" prot="public" virt="virtual"><scope>lbann::Layer</scope><name>~Layer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
