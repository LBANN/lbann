<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="top__k__categorical__accuracy_8cpp" kind="file" language="C++">
    <compoundname>top_k_categorical_accuracy.cpp</compoundname>
    <includes refid="top__k__categorical__accuracy_8hpp" local="yes">lbann/metrics/top_k_categorical_accuracy.hpp</includes>
    <incdepgraph>
      <node id="21447">
        <label>lbann/io/persist.hpp</label>
        <link refid="persist_8hpp"/>
        <childnode refid="21428" relation="include">
        </childnode>
        <childnode refid="21429" relation="include">
        </childnode>
      </node>
      <node id="21425">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/metrics/top_k_categorical_accuracy.cpp</label>
        <link refid="top__k__categorical__accuracy_8cpp"/>
        <childnode refid="21426" relation="include">
        </childnode>
      </node>
      <node id="21429">
        <label>El.hpp</label>
      </node>
      <node id="21428">
        <label>lbann/base.hpp</label>
        <link refid="base_8hpp"/>
        <childnode refid="21429" relation="include">
        </childnode>
        <childnode refid="21430" relation="include">
        </childnode>
        <childnode refid="21431" relation="include">
        </childnode>
        <childnode refid="21436" relation="include">
        </childnode>
      </node>
      <node id="21427">
        <label>lbann/metrics/metric.hpp</label>
        <link refid="metric_8hpp"/>
        <childnode refid="21428" relation="include">
        </childnode>
        <childnode refid="21437" relation="include">
        </childnode>
        <childnode refid="21441" relation="include">
        </childnode>
        <childnode refid="21447" relation="include">
        </childnode>
      </node>
      <node id="21444">
        <label>string</label>
      </node>
      <node id="21439">
        <label>map</label>
      </node>
      <node id="21446">
        <label>exception</label>
      </node>
      <node id="21426">
        <label>lbann/metrics/top_k_categorical_accuracy.hpp</label>
        <link refid="top__k__categorical__accuracy_8hpp"/>
        <childnode refid="21427" relation="include">
        </childnode>
      </node>
      <node id="21433">
        <label>cstdio</label>
      </node>
      <node id="21442">
        <label>lbann/utils/stack_trace.hpp</label>
        <link refid="stack__trace_8hpp"/>
        <childnode refid="21443" relation="include">
        </childnode>
        <childnode refid="21444" relation="include">
        </childnode>
      </node>
      <node id="21435">
        <label>cxxabi.h</label>
      </node>
      <node id="21441">
        <label>lbann/utils/exception.hpp</label>
        <link refid="exception_8hpp"/>
        <childnode refid="21428" relation="include">
        </childnode>
        <childnode refid="21437" relation="include">
        </childnode>
        <childnode refid="21442" relation="include">
        </childnode>
        <childnode refid="21445" relation="include">
        </childnode>
        <childnode refid="21446" relation="include">
        </childnode>
      </node>
      <node id="21438">
        <label>vector</label>
      </node>
      <node id="21437">
        <label>lbann/comm.hpp</label>
        <link refid="comm_8hpp"/>
        <childnode refid="21438" relation="include">
        </childnode>
        <childnode refid="21439" relation="include">
        </childnode>
        <childnode refid="21440" relation="include">
        </childnode>
        <childnode refid="21428" relation="include">
        </childnode>
      </node>
      <node id="21432">
        <label>cstdlib</label>
      </node>
      <node id="21445">
        <label>iostream</label>
      </node>
      <node id="21443">
        <label>csignal</label>
      </node>
      <node id="21436">
        <label>lbann_config.hpp</label>
      </node>
      <node id="21431">
        <label>lbann/utils/cyg_profile.hpp</label>
        <link refid="cyg__profile_8hpp"/>
        <childnode refid="21432" relation="include">
        </childnode>
        <childnode refid="21433" relation="include">
        </childnode>
        <childnode refid="21434" relation="include">
        </childnode>
        <childnode refid="21435" relation="include">
        </childnode>
      </node>
      <node id="21430">
        <label>lbann/Elemental_extensions.hpp</label>
        <link refid="Elemental__extensions_8hpp"/>
        <childnode refid="21429" relation="include">
        </childnode>
      </node>
      <node id="21440">
        <label>typeindex</label>
      </node>
      <node id="21434">
        <label>dlfcn.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacelbann">lbann</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2014-2016,<sp/>Lawrence<sp/>Livermore<sp/>National<sp/>Security,<sp/>LLC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Produced<sp/>at<sp/>the<sp/>Lawrence<sp/>Livermore<sp/>National<sp/>Laboratory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Written<sp/>by<sp/>the<sp/>LBANN<sp/>Research<sp/>Team<sp/>(B.<sp/>Van<sp/>Essen,<sp/>et<sp/>al.)<sp/>listed<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>CONTRIBUTORS<sp/>file.<sp/>&lt;lbann-dev@llnl.gov&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LLNL-CODE-697807.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>LBANN:<sp/>Livermore<sp/>Big<sp/>Artificial<sp/>Neural<sp/>Network</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Toolkit.<sp/>For<sp/>details,<sp/>see<sp/>http://software.llnl.gov/LBANN<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://github.com/LLNL/LBANN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;Licensee&quot;);<sp/>you</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implied.<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>license.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="top__k__categorical__accuracy_8hpp" kindref="compound">lbann/metrics/top_k_categorical_accuracy.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacelbann" kindref="compound">lbann</ref><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="classlbann_1_1top__k__categorical__accuracy__metric_1a3896f230e2972c01b746fc808c51462e" refkind="member"><highlight class="normal"><ref refid="classlbann_1_1top__k__categorical__accuracy__metric_1a3896f230e2972c01b746fc808c51462e" kindref="member">top_k_categorical_accuracy_metric::top_k_categorical_accuracy_metric</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>top_k,</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1lbann__comm" kindref="compound">lbann_comm</ref><sp/>*<ref refid="file__io_8cpp_1ab048c6f9fcbcfaa57ce68b00263dbebe" kindref="member">comm</ref>)<sp/></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>:<sp/><ref refid="classlbann_1_1metric" kindref="compound">metric</ref>(comm),<sp/>m_top_k(top_k)<sp/>{}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="classlbann_1_1top__k__categorical__accuracy__metric_1a3449bdb835e7e5bd7d17cd001fb4ae38" refkind="member"><highlight class="normal"><ref refid="base_8hpp_1a3266f5ac18504bbadea983c109566867" kindref="member">EvalType</ref><sp/><ref refid="classlbann_1_1top__k__categorical__accuracy__metric_1a3449bdb835e7e5bd7d17cd001fb4ae38" kindref="member">top_k_categorical_accuracy_metric::evaluate_compute</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref>&amp;<sp/>prediction,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref>&amp;<sp/>ground_truth)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>first<sp/>computes<sp/>the<sp/>top<sp/>k<sp/>predictions<sp/>within<sp/>each<sp/>column<sp/>locally,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>each<sp/>column<sp/>master<sp/>gathers<sp/>these,<sp/>computes<sp/>the<sp/>global<sp/>top<sp/>k,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>determines<sp/>if<sp/>an<sp/>error<sp/>was<sp/>made.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>El::Int<sp/>num_errors<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>assumes<sp/>structure<sp/>is<sp/>packed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">top_k_ele<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DataType<sp/>val;<sp/><sp/></highlight><highlight class="comment">//<sp/>Predicted<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DataType<sp/>gt;<sp/><sp/></highlight><highlight class="comment">//<sp/>Ground<sp/>truth.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Int<sp/>local_width<sp/>=<sp/>prediction.LocalWidth();<sp/><sp/></highlight><highlight class="comment">//<sp/>minibatch<sp/>dim</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Int<sp/>local_height<sp/>=<sp/>prediction.LocalHeight();<sp/><sp/></highlight><highlight class="comment">//<sp/>class<sp/>dim</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pack<sp/>the<sp/>top<sp/>k<sp/>predictions<sp/>for<sp/>each<sp/>local<sp/>column<sp/>together.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;top_k_ele&gt;<sp/>local_top_k(<ref refid="classlbann_1_1top__k__categorical__accuracy__metric_1a6cc172f6799bffac44de06d0657efdeb" kindref="member">m_top_k</ref><sp/>*<sp/>local_width);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>top<sp/>k<sp/>entries<sp/>locally.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;El::Int&gt;<sp/>local_indices(local_height);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>std::iota(local_indices.begin(),<sp/>local_indices.end(),<sp/>0);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(El::Int<sp/>mb_idx<sp/>=<sp/>0;<sp/>mb_idx<sp/>&lt;<sp/>local_width;<sp/>++mb_idx)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>the<sp/>top<sp/>k<sp/>local<sp/>entries<sp/>in<sp/>this<sp/>column.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::partial_sort(</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_indices.begin(),<sp/>local_indices.begin()<sp/>+<sp/><ref refid="classlbann_1_1top__k__categorical__accuracy__metric_1a6cc172f6799bffac44de06d0657efdeb" kindref="member">m_top_k</ref>,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_indices.end(),</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[mb_idx,<sp/>&amp;prediction]<sp/>(El::Int<sp/>a,<sp/>El::Int<sp/>b)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>prediction.GetLocal(a,<sp/>mb_idx)<sp/>&gt;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prediction.GetLocal(b,<sp/>mb_idx);<sp/>});</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(El::Int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classlbann_1_1top__k__categorical__accuracy__metric_1a6cc172f6799bffac44de06d0657efdeb" kindref="member">m_top_k</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>El::Int<sp/>idx<sp/>=<sp/>mb_idx*m_top_k<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_top_k[idx].val<sp/>=<sp/>prediction.GetLocal(local_indices[i],<sp/>mb_idx);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_top_k[idx].gt<sp/>=<sp/>ground_truth.GetLocal(local_indices[i],<sp/>mb_idx);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Gather<sp/>the<sp/>data<sp/>for<sp/>each<sp/>column<sp/>to<sp/>rank<sp/>0<sp/>within<sp/>that<sp/>column.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>El::mpi::Comm<sp/>col_comm<sp/>=<sp/>prediction.ColComm();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col_comm_size<sp/>=<sp/>El::mpi::Size(col_comm);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(El::mpi::Rank(col_comm)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>vector<sp/>ends<sp/>up<sp/>being<sp/>the<sp/>concatenation<sp/>of<sp/>each<sp/>local_top_k,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>therefore<sp/>accessing<sp/>data<sp/>for<sp/>a<sp/>single<sp/>mini-batch<sp/>requires<sp/>computing<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>appropriate<sp/>strides.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;top_k_ele&gt;<sp/>global_top_k(</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1top__k__categorical__accuracy__metric_1a6cc172f6799bffac44de06d0657efdeb" kindref="member">m_top_k</ref><sp/>*<sp/>local_width<sp/>*<sp/>col_comm_size);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1metric_1a464120720df6bfdf91bffe353e562964" kindref="member">get_comm</ref>().<ref refid="classlbann_1_1lbann__comm_1aa784298e6ed0f9f01a20b179d5110df9" kindref="member">gather</ref>((DataType*)<sp/>local_top_k.data(),<sp/>2*local_top_k.size(),</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(DataType*)<sp/>global_top_k.data(),<sp/>col_comm);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>global<sp/>top<sp/>k<sp/>elements<sp/>in<sp/>each<sp/>column.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;El::Int&gt;<sp/>global_indices(<ref refid="classlbann_1_1top__k__categorical__accuracy__metric_1a6cc172f6799bffac44de06d0657efdeb" kindref="member">m_top_k</ref><sp/>*<sp/>col_comm_size);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::iota(global_indices.begin(),<sp/>global_indices.end(),<sp/>0);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(El::Int<sp/>mb_idx<sp/>=<sp/>0;<sp/>mb_idx<sp/>&lt;<sp/>local_width;<sp/>++mb_idx)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::partial_sort(</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>global_indices.begin(),<sp/>global_indices.begin()<sp/>+<sp/><ref refid="classlbann_1_1top__k__categorical__accuracy__metric_1a6cc172f6799bffac44de06d0657efdeb" kindref="member">m_top_k</ref>,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>global_indices.end(),</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[mb_idx,<sp/>col_comm_size,<sp/>&amp;global_top_k,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(El::Int<sp/>a,<sp/>El::Int<sp/>b)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>El::Int<sp/>mb_offset<sp/>=<sp/>mb_idx<sp/>*<sp/><ref refid="classlbann_1_1top__k__categorical__accuracy__metric_1a6cc172f6799bffac44de06d0657efdeb" kindref="member">m_top_k</ref>;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>El::Int<sp/>a_proc_offset<sp/>=<sp/>(a/<ref refid="classlbann_1_1top__k__categorical__accuracy__metric_1a6cc172f6799bffac44de06d0657efdeb" kindref="member">m_top_k</ref>)<sp/>*<sp/>m_top_k<sp/>*<sp/>col_comm_size;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>El::Int<sp/>a_idx<sp/>=<sp/>a_proc_offset<sp/>+<sp/>mb_offset<sp/>+<sp/>(a%<ref refid="classlbann_1_1top__k__categorical__accuracy__metric_1a6cc172f6799bffac44de06d0657efdeb" kindref="member">m_top_k</ref>);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>El::Int<sp/>b_proc_offset<sp/>=<sp/>(b/<ref refid="classlbann_1_1top__k__categorical__accuracy__metric_1a6cc172f6799bffac44de06d0657efdeb" kindref="member">m_top_k</ref>)<sp/>*<sp/>m_top_k<sp/>*<sp/>col_comm_size;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>El::Int<sp/>b_idx<sp/>=<sp/>b_proc_offset<sp/>+<sp/>mb_offset<sp/>+<sp/>(b%<ref refid="classlbann_1_1top__k__categorical__accuracy__metric_1a6cc172f6799bffac44de06d0657efdeb" kindref="member">m_top_k</ref>);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>global_top_k[a_idx].val<sp/>&gt;<sp/>global_top_k[b_idx].val;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>there<sp/>is<sp/>a<sp/>1<sp/>ground<sp/>truth<sp/>label<sp/>in<sp/>the<sp/>top<sp/>k.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(El::Int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classlbann_1_1top__k__categorical__accuracy__metric_1a6cc172f6799bffac44de06d0657efdeb" kindref="member">m_top_k</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>El::Int<sp/>idx<sp/>=<sp/>global_indices[i];</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx<sp/>=<sp/>mb_idx*m_top_k<sp/>+<sp/>(i/<ref refid="classlbann_1_1top__k__categorical__accuracy__metric_1a6cc172f6799bffac44de06d0657efdeb" kindref="member">m_top_k</ref>)*m_top_k*col_comm_size<sp/>+<sp/>(i%m_top_k);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(global_top_k[idx].gt<sp/>==<sp/>DataType(1))<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!found)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++num_errors;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1metric_1a464120720df6bfdf91bffe353e562964" kindref="member">get_comm</ref>().<ref refid="classlbann_1_1lbann__comm_1aa784298e6ed0f9f01a20b179d5110df9" kindref="member">gather</ref>((DataType*)<sp/>local_top_k.data(),<sp/>2*local_top_k.size(),<sp/>0,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col_comm);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>num_errors<sp/>=<sp/><ref refid="classlbann_1_1metric_1a464120720df6bfdf91bffe353e562964" kindref="member">get_comm</ref>().<ref refid="classlbann_1_1lbann__comm_1aebb6290d1b618eace302404291c598a5" kindref="member">model_allreduce</ref>(num_errors);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mini_batch_size<sp/>=<sp/>prediction.Width();</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(mini_batch_size<sp/>-<sp/>num_errors)<sp/>*<sp/>100;</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>lbann</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/mckinney27/doxy-testbed/lbann/src/metrics/top_k_categorical_accuracy.cpp"/>
  </compounddef>
</doxygen>
