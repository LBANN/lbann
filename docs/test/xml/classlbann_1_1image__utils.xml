<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classlbann_1_1image__utils" kind="class" language="C++" prot="public">
    <compoundname>lbann::image_utils</compoundname>
    <includes refid="image__utils_8hpp" local="no">image_utils.hpp</includes>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classlbann_1_1image__utils_1a6043097a96cf246ac1b63053ed15962b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lbann::image_utils::loadIMG</definition>
        <argsstring>(std::vector&lt; unsigned char &gt; &amp;image_buf, int &amp;Width, int &amp;Height, bool Flip, unsigned char *&amp;Pixels)</argsstring>
        <name>loadIMG</name>
        <param>
          <type>std::vector&lt; unsigned char &gt; &amp;</type>
          <declname>image_buf</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>Width</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>Height</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>Flip</declname>
        </param>
        <param>
          <type>unsigned char *&amp;</type>
          <declname>Pixels</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/data_readers/image_utils.hpp" line="45" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/data_readers/image_utils.cpp" bodystart="59" bodyend="84"/>
        <referencedby refid="classlbann_1_1imagenet__reader__org_1ad4c47413e16c1c53000b7d7be757ff6e" compoundref="data__reader__imagenet__org_8cpp" startline="63" endline="90">lbann::imagenet_reader_org::fetch_datum</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1image__utils_1a0ed89f3bc964aec90799ace32bf788e4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lbann::image_utils::loadIMG</definition>
        <argsstring>(const std::string &amp;Imagefile, int &amp;Width, int &amp;Height, bool Flip, unsigned char *&amp;Pixels)</argsstring>
        <name>loadIMG</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>Imagefile</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>Width</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>Height</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>Flip</declname>
        </param>
        <param>
          <type>unsigned char *&amp;</type>
          <declname>Pixels</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/data_readers/image_utils.hpp" line="46" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/data_readers/image_utils.cpp" bodystart="33" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1image__utils_1a215ea7f6ac4ddb38f7e2b5c7b5ea1420" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lbann::image_utils::saveIMG</definition>
        <argsstring>(const std::string &amp;Imagefile, int Width, int Height, bool Flip, unsigned char *Pixels)</argsstring>
        <name>saveIMG</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>Imagefile</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Height</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>Flip</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>Pixels</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/data_readers/image_utils.hpp" line="47" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/data_readers/image_utils.cpp" bodystart="86" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1image__utils_1ac324a04f877601387cfb10750f1f6b8d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lbann::image_utils::load_image</definition>
        <argsstring>(const std::string &amp;filename, int &amp;Width, int &amp;Height, int &amp;Type, cv_process &amp;pp, std::vector&lt; uint8_t &gt; &amp;buf)</argsstring>
        <name>load_image</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>Width</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>Height</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>Type</declname>
        </param>
        <param>
          <type>cv_process &amp;</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Load an image from a file and put it into a serialized buffer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/data_readers/image_utils.hpp" line="51" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/data_readers/image_utils.cpp" bodystart="108" bodyend="125"/>
        <references refid="mild__exception_8hpp_1a7b8339c566152ab29ce66b63e90c67f9" compoundref="mild__exception_8hpp" startline="83">_LBANN_MILD_EXCEPTION</references>
        <referencedby refid="classlbann_1_1imagenet__reader_1a6659e90c0243da40f214a877f65eb8ac" compoundref="data__reader__imagenet_8cpp" startline="126" endline="155">lbann::imagenet_reader::fetch_datum</referencedby>
        <referencedby refid="classlbann_1_1imagenet__reader__patches_1a8a9e4a1339f2e9676a0e653853ebff3c" compoundref="data__reader__imagenet__patches_8cpp" startline="148" endline="179">lbann::imagenet_reader_patches::fetch_datum</referencedby>
        <referencedby refid="classlbann_1_1data__reader__multi__images_1a37ef2f4e641c074d0f3bd51f11682fc7" compoundref="data__reader__multi__images_8cpp" startline="101" endline="131">lbann::data_reader_multi_images::fetch_datum</referencedby>
        <referencedby refid="classlbann_1_1data__reader__triplet_1af3f41e46bef2fbd3e19d545fa27f11ce" compoundref="data__reader__triplet_8cpp" startline="83" endline="114">lbann::data_reader_triplet::fetch_datum</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1image__utils_1a203c94bf2f0d1180af1be27da33a0ad6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lbann::image_utils::save_image</definition>
        <argsstring>(const std::string &amp;filename, const int Width, const int Height, const int Type, cv_process &amp;pp, const std::vector&lt; uint8_t &gt; &amp;buf)</argsstring>
        <name>save_image</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>Width</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>Height</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>Type</declname>
        </param>
        <param>
          <type>cv_process &amp;</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>const std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Save an image from a serialized buffer into a file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/data_readers/image_utils.hpp" line="53" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/data_readers/image_utils.cpp" bodystart="127" bodyend="140"/>
        <references refid="mild__exception_8hpp_1a7b8339c566152ab29ce66b63e90c67f9" compoundref="mild__exception_8hpp" startline="83">_LBANN_MILD_EXCEPTION</references>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1image__utils_1ae7270652ab69d7b659c2a9ae5a7057ab" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lbann::image_utils::load_image</definition>
        <argsstring>(std::vector&lt; unsigned char &gt; &amp;image_buf, int &amp;Width, int &amp;Height, int &amp;Type, cv_process &amp;pp, ::Mat &amp;data)</argsstring>
        <name>load_image</name>
        <param>
          <type>std::vector&lt; unsigned char &gt; &amp;</type>
          <declname>image_buf</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>Width</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>Height</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>Type</declname>
        </param>
        <param>
          <type>cv_process &amp;</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>::<ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/data_readers/image_utils.hpp" line="56" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/data_readers/image_utils.cpp" bodystart="379" bodyend="419"/>
        <references refid="mild__exception_8hpp_1a7b8339c566152ab29ce66b63e90c67f9" compoundref="mild__exception_8hpp" startline="83">_LBANN_MILD_EXCEPTION</references>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1image__utils_1a75895e02feffc8b32c6c7d168f856778" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lbann::image_utils::load_image</definition>
        <argsstring>(std::vector&lt; unsigned char &gt; &amp;image_buf, int &amp;Width, int &amp;Height, int &amp;Type, cv_process_patches &amp;pp, std::vector&lt;::Mat &gt; &amp;data)</argsstring>
        <name>load_image</name>
        <param>
          <type>std::vector&lt; unsigned char &gt; &amp;</type>
          <declname>image_buf</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>Width</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>Height</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>Type</declname>
        </param>
        <param>
          <type>cv_process_patches &amp;</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>std::vector&lt;::<ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the image file to read in </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of a patch from the image read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Height</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of a patch from the image read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the image patches (OpenCV code used for cv::Mat) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pp</parametername>
</parameternamelist>
<parameterdescription>
<para>The pre-processing parameters </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The pre-processed image data to be stored in El::Matrix&lt;DataType&gt; format </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/data_readers/image_utils.hpp" line="59" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/data_readers/image_utils.cpp" bodystart="220" bodyend="249"/>
        <references refid="mild__exception_8hpp_1a7b8339c566152ab29ce66b63e90c67f9" compoundref="mild__exception_8hpp" startline="83">_LBANN_MILD_EXCEPTION</references>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1image__utils_1a6e55d50736ff8c80c91300488df117a1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lbann::image_utils::load_image</definition>
        <argsstring>(const std::string &amp;filename, int &amp;Width, int &amp;Height, int &amp;Type, cv_process &amp;pp, ::Mat &amp;data)</argsstring>
        <name>load_image</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>Width</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>Height</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>Type</declname>
        </param>
        <param>
          <type>cv_process &amp;</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>::<ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Load an image from a file and put it into an LBANN Mat data block. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the image file to read in </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the image read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Height</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of the image read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the image read (OpenCV code used for cv::Mat) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pp</parametername>
</parameternamelist>
<parameterdescription>
<para>The pre-processing parameters </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The pre-processed image data to be stored in El::Matrix&lt;DataType&gt; format </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/data_readers/image_utils.hpp" line="64" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/data_readers/image_utils.cpp" bodystart="150" bodyend="170"/>
        <references refid="mild__exception_8hpp_1a7b8339c566152ab29ce66b63e90c67f9" compoundref="mild__exception_8hpp" startline="83">_LBANN_MILD_EXCEPTION</references>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1image__utils_1a45ce40d5989cfe65f4d9081335a1e10f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lbann::image_utils::load_image</definition>
        <argsstring>(const std::string &amp;filename, int &amp;Width, int &amp;Height, int &amp;Type, cv_process_patches &amp;pp, std::vector&lt;::Mat &gt; &amp;data)</argsstring>
        <name>load_image</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>Width</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>Height</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>Type</declname>
        </param>
        <param>
          <type>cv_process_patches &amp;</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>std::vector&lt;::<ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Load an image from a file, extract patches from it and put them into LBANN Mat data blocks. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the image file to read in </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of a patch from the image read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Height</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of a patch from the image read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the image patches (OpenCV code used for cv::Mat) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pp</parametername>
</parameternamelist>
<parameterdescription>
<para>The pre-processing parameters </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The pre-processed image data to be stored in El::Matrix&lt;DataType&gt; format </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/data_readers/image_utils.hpp" line="66" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/data_readers/image_utils.cpp" bodystart="180" bodyend="209"/>
        <references refid="mild__exception_8hpp_1a7b8339c566152ab29ce66b63e90c67f9" compoundref="mild__exception_8hpp" startline="83">_LBANN_MILD_EXCEPTION</references>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1image__utils_1a86e65a4c267319e77ae9e8c65033ac15" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lbann::image_utils::save_image</definition>
        <argsstring>(const std::string &amp;filename, const int Width, const int Height, const int Type, cv_process &amp;pp, const ::Mat &amp;data)</argsstring>
        <name>save_image</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>Width</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>Height</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>Type</declname>
        </param>
        <param>
          <type>cv_process &amp;</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>const ::<ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Save an image using data from an LBANN Mat data block. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the image file to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the image to be written </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Height</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of the image to be written </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the image to be written (OpenCV code used for cv::Mat) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pp</parametername>
</parameternamelist>
<parameterdescription>
<para>The post-processing parameters </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The image data in El::Matrix&lt;DataType&gt; format to post-process and write </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/data_readers/image_utils.hpp" line="68" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/data_readers/image_utils.cpp" bodystart="259" bodyend="272"/>
        <references refid="mild__exception_8hpp_1a7b8339c566152ab29ce66b63e90c67f9" compoundref="mild__exception_8hpp" startline="83">_LBANN_MILD_EXCEPTION</references>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1image__utils_1a720f0987ec8eff333bf697ed18aafc93" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lbann::image_utils::import_image</definition>
        <argsstring>(cv::InputArray inbuf, int &amp;Width, int &amp;Height, int &amp;Type, cv_process &amp;pp, ::Mat &amp;data)</argsstring>
        <name>import_image</name>
        <param>
          <type>cv::InputArray</type>
          <declname>inbuf</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>Width</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>Height</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>Type</declname>
        </param>
        <param>
          <type>cv_process &amp;</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>::<ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Import an image from a file buffer (inbuf) and put it into an LBANN Mat data block. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inbuf</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer that contains the raw bytes read from an image file This can be for example, const std:vector&lt;uchar&gt;&amp; or const cv::Mat&amp;. <ulink url="http://docs.opencv.org/trunk/d4/d32/classcv_1_1__InputArray.html">http://docs.opencv.org/trunk/d4/d32/classcv_1_1__InputArray.html</ulink> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the image consturcted out of inbuf </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Height</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of the image consructed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the image constructed (OpenCV code used for cv::Mat) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pp</parametername>
</parameternamelist>
<parameterdescription>
<para>The pre-processing parameters </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The pre-processed image data. A set of sub-matrix Views can be used to store the data. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/data_readers/image_utils.hpp" line="72" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/data_readers/image_utils.cpp" bodystart="284" bodyend="301"/>
        <references refid="mild__exception_8hpp_1a7b8339c566152ab29ce66b63e90c67f9" compoundref="mild__exception_8hpp" startline="83">_LBANN_MILD_EXCEPTION</references>
        <referencedby refid="classlbann_1_1imagenet__reader__single_1a77c576d6085d4a8674322275dd9bd133" compoundref="data__reader__imagenet__single_8cpp" startline="125" endline="166">lbann::imagenet_reader_single::fetch_datum</referencedby>
        <referencedby refid="classlbann_1_1data__reader__mnist__siamese_1a1709140fcdcea9baaaf1bab7a48f3bce" compoundref="data__reader__mnist__siamese_8cpp" startline="152" endline="195">lbann::data_reader_mnist_siamese::fetch_labels</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1image__utils_1af7c5409bd273f77282ecd9656e892cd3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lbann::image_utils::import_image</definition>
        <argsstring>(cv::InputArray inbuf, int &amp;Width, int &amp;Height, int &amp;Type, cv_process_patches &amp;pp, std::vector&lt;::Mat &gt; &amp;data)</argsstring>
        <name>import_image</name>
        <param>
          <type>cv::InputArray</type>
          <declname>inbuf</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>Width</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>Height</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>Type</declname>
        </param>
        <param>
          <type>cv_process_patches &amp;</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>std::vector&lt;::<ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Import an image from a file buffer (inbuf), extract patches from it and put them into LBANN Mat data blocks. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inbuf</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer that contains the raw bytes read from an image file This can be for example, const std:vector&lt;uchar&gt;&amp; or const cv::Mat&amp;. <ulink url="http://docs.opencv.org/trunk/d4/d32/classcv_1_1__InputArray.html">http://docs.opencv.org/trunk/d4/d32/classcv_1_1__InputArray.html</ulink> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of a patch from the image consturcted out of inbuf </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Height</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of a patch from the image consructed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the image patches (OpenCV code used for cv::Mat) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pp</parametername>
</parameternamelist>
<parameterdescription>
<para>The pre-processing parameters </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The pre-processed image data. A set of sub-matrix Views can be used to store the data. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/data_readers/image_utils.hpp" line="74" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/data_readers/image_utils.cpp" bodystart="313" bodyend="339"/>
        <references refid="mild__exception_8hpp_1a7b8339c566152ab29ce66b63e90c67f9" compoundref="mild__exception_8hpp" startline="83">_LBANN_MILD_EXCEPTION</references>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1image__utils_1a155896efaea4c03897a3a2a6c82cf7b2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lbann::image_utils::export_image</definition>
        <argsstring>(const std::string &amp;fileExt, std::vector&lt; uchar &gt; &amp;outbuf, const int Width, const int Height, const int Type, cv_process &amp;pp, const ::Mat &amp;data)</argsstring>
        <name>export_image</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>fileExt</declname>
        </param>
        <param>
          <type>std::vector&lt; uchar &gt; &amp;</type>
          <declname>outbuf</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>Width</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>Height</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>Type</declname>
        </param>
        <param>
          <type>cv_process &amp;</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>const ::<ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Export an image using data from an LBANN Mat block into a file buffer (outbuf) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fileExt</parametername>
</parameternamelist>
<parameterdescription>
<para>The format extension name of image file: e.g., &quot;.jpeg&quot;, &quot;.png&quot; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outbuf</parametername>
</parameternamelist>
<parameterdescription>
<para>The preallocated buffer to contain the bytes to be written into an image file </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the image to be consturcted based on the given data of <ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Height</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of the image </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the image (OpenCV code used for cv::Mat) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pp</parametername>
</parameternamelist>
<parameterdescription>
<para>The post-processing parameters </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The image data. A sub-matrix View can be passed instead of the entire matrix. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/data_readers/image_utils.hpp" line="76" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/data_readers/image_utils.cpp" bodystart="350" bodyend="374"/>
        <references refid="mild__exception_8hpp_1a7b8339c566152ab29ce66b63e90c67f9" compoundref="mild__exception_8hpp" startline="83">_LBANN_MILD_EXCEPTION</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/data_readers/image_utils.hpp" line="43" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/data_readers/image_utils.hpp" bodystart="43" bodyend="77"/>
    <listofallmembers>
      <member refid="classlbann_1_1image__utils_1a155896efaea4c03897a3a2a6c82cf7b2" prot="public" virt="non-virtual"><scope>lbann::image_utils</scope><name>export_image</name></member>
      <member refid="classlbann_1_1image__utils_1a720f0987ec8eff333bf697ed18aafc93" prot="public" virt="non-virtual"><scope>lbann::image_utils</scope><name>import_image</name></member>
      <member refid="classlbann_1_1image__utils_1af7c5409bd273f77282ecd9656e892cd3" prot="public" virt="non-virtual"><scope>lbann::image_utils</scope><name>import_image</name></member>
      <member refid="classlbann_1_1image__utils_1ac324a04f877601387cfb10750f1f6b8d" prot="public" virt="non-virtual"><scope>lbann::image_utils</scope><name>load_image</name></member>
      <member refid="classlbann_1_1image__utils_1ae7270652ab69d7b659c2a9ae5a7057ab" prot="public" virt="non-virtual"><scope>lbann::image_utils</scope><name>load_image</name></member>
      <member refid="classlbann_1_1image__utils_1a75895e02feffc8b32c6c7d168f856778" prot="public" virt="non-virtual"><scope>lbann::image_utils</scope><name>load_image</name></member>
      <member refid="classlbann_1_1image__utils_1a6e55d50736ff8c80c91300488df117a1" prot="public" virt="non-virtual"><scope>lbann::image_utils</scope><name>load_image</name></member>
      <member refid="classlbann_1_1image__utils_1a45ce40d5989cfe65f4d9081335a1e10f" prot="public" virt="non-virtual"><scope>lbann::image_utils</scope><name>load_image</name></member>
      <member refid="classlbann_1_1image__utils_1a6043097a96cf246ac1b63053ed15962b" prot="public" virt="non-virtual"><scope>lbann::image_utils</scope><name>loadIMG</name></member>
      <member refid="classlbann_1_1image__utils_1a0ed89f3bc964aec90799ace32bf788e4" prot="public" virt="non-virtual"><scope>lbann::image_utils</scope><name>loadIMG</name></member>
      <member refid="classlbann_1_1image__utils_1a203c94bf2f0d1180af1be27da33a0ad6" prot="public" virt="non-virtual"><scope>lbann::image_utils</scope><name>save_image</name></member>
      <member refid="classlbann_1_1image__utils_1a86e65a4c267319e77ae9e8c65033ac15" prot="public" virt="non-virtual"><scope>lbann::image_utils</scope><name>save_image</name></member>
      <member refid="classlbann_1_1image__utils_1a215ea7f6ac4ddb38f7e2b5c7b5ea1420" prot="public" virt="non-virtual"><scope>lbann::image_utils</scope><name>saveIMG</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
