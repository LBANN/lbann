<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="quantizer__impl_8hpp" kind="file" language="C++">
    <compoundname>quantizer_impl.hpp</compoundname>
    <includes local="no">omp.h</includes>
    <includedby refid="quantizer_8hpp" local="yes">/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp</includedby>
    <incdepgraph>
      <node id="15831">
        <label>omp.h</label>
      </node>
      <node id="15830">
        <label>/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer_impl.hpp</label>
        <link refid="quantizer__impl_8hpp"/>
        <childnode refid="15831" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="15890">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/objective_functions/loss_functions/mean_absolute_deviation.cpp</label>
        <link refid="objective__functions_2loss__functions_2mean__absolute__deviation_8cpp"/>
      </node>
      <node id="15855">
        <label>/Users/mckinney27/doxy-testbed/lbann/include/lbann/proto/factories.hpp</label>
        <link refid="factories_8hpp"/>
        <childnode refid="15856" relation="include">
        </childnode>
        <childnode refid="15857" relation="include">
        </childnode>
        <childnode refid="15858" relation="include">
        </childnode>
        <childnode refid="15859" relation="include">
        </childnode>
        <childnode refid="15860" relation="include">
        </childnode>
        <childnode refid="15861" relation="include">
        </childnode>
        <childnode refid="15862" relation="include">
        </childnode>
        <childnode refid="15863" relation="include">
        </childnode>
        <childnode refid="15853" relation="include">
        </childnode>
      </node>
      <node id="15839">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/callbacks/callback_io.cpp</label>
        <link refid="callback__io_8cpp"/>
      </node>
      <node id="15846">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/callbacks/callback_variable_minibatch.cpp</label>
        <link refid="callback__variable__minibatch_8cpp"/>
      </node>
      <node id="15833">
        <label>/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp</label>
        <link refid="quantizer_8hpp"/>
        <childnode refid="15834" relation="include">
        </childnode>
        <childnode refid="15835" relation="include">
        </childnode>
      </node>
      <node id="15888">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/objective_functions/loss_functions/geom_negloglike.cpp</label>
        <link refid="geom__negloglike_8cpp"/>
      </node>
      <node id="15889">
        <label>/Users/mckinney27/doxy-testbed/lbann/include/lbann/objective_functions/loss_functions/mean_absolute_deviation.hpp</label>
        <link refid="objective__functions_2loss__functions_2mean__absolute__deviation_8hpp"/>
        <childnode refid="15890" relation="include">
        </childnode>
        <childnode refid="15849" relation="include">
        </childnode>
      </node>
      <node id="15844">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/callbacks/callback_dump_minibatch_sample_indices.cpp</label>
        <link refid="callback__dump__minibatch__sample__indices_8cpp"/>
      </node>
      <node id="15898">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/objective_functions/loss_functions/polya_negloglike.cpp</label>
        <link refid="polya__negloglike_8cpp"/>
      </node>
      <node id="15879">
        <label>/Users/mckinney27/doxy-testbed/lbann/include/lbann/objective_functions/loss_functions/loss_function.hpp</label>
        <link refid="loss__function_8hpp"/>
        <childnode refid="15872" relation="include">
        </childnode>
        <childnode refid="15880" relation="include">
        </childnode>
        <childnode refid="15881" relation="include">
        </childnode>
        <childnode refid="15883" relation="include">
        </childnode>
        <childnode refid="15885" relation="include">
        </childnode>
        <childnode refid="15887" relation="include">
        </childnode>
        <childnode refid="15889" relation="include">
        </childnode>
        <childnode refid="15891" relation="include">
        </childnode>
        <childnode refid="15893" relation="include">
        </childnode>
        <childnode refid="15895" relation="include">
        </childnode>
        <childnode refid="15897" relation="include">
        </childnode>
      </node>
      <node id="15860">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/proto/factories/model_factory.cpp</label>
        <link refid="model__factory_8cpp"/>
      </node>
      <node id="15884">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/objective_functions/loss_functions/cross_entropy.cpp</label>
        <link refid="cross__entropy_8cpp"/>
      </node>
      <node id="15870">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/metrics/pearson_correlation.cpp</label>
        <link refid="pearson__correlation_8cpp"/>
      </node>
      <node id="15852">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/params.cpp</label>
        <link refid="params_8cpp"/>
      </node>
      <node id="15853">
        <label>/Users/mckinney27/doxy-testbed/lbann/include/lbann/proto/proto_common.hpp</label>
        <link refid="proto__common_8hpp"/>
        <childnode refid="15850" relation="include">
        </childnode>
        <childnode refid="15854" relation="include">
        </childnode>
        <childnode refid="15855" relation="include">
        </childnode>
        <childnode refid="15864" relation="include">
        </childnode>
      </node>
      <node id="15876">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/callbacks/callback_dump_activations.cpp</label>
        <link refid="callback__dump__activations_8cpp"/>
      </node>
      <node id="15842">
        <label>/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/io/input/input_layer.hpp</label>
        <link refid="input__layer_8hpp"/>
        <childnode refid="15843" relation="include">
        </childnode>
        <childnode refid="15844" relation="include">
        </childnode>
        <childnode refid="15845" relation="include">
        </childnode>
        <childnode refid="15846" relation="include">
        </childnode>
        <childnode refid="15847" relation="include">
        </childnode>
        <childnode refid="15849" relation="include">
        </childnode>
      </node>
      <node id="15835">
        <label>/Users/mckinney27/doxy-testbed/lbann/include/lbann/callbacks/callback_imcomm.hpp</label>
        <link refid="callback__imcomm_8hpp"/>
        <childnode refid="15836" relation="include">
        </childnode>
        <childnode refid="15837" relation="include">
        </childnode>
        <childnode refid="15838" relation="include">
        </childnode>
        <childnode refid="15849" relation="include">
        </childnode>
      </node>
      <node id="15881">
        <label>/Users/mckinney27/doxy-testbed/lbann/include/lbann/objective_functions/loss_functions/binary_cross_entropy.hpp</label>
        <link refid="binary__cross__entropy_8hpp"/>
        <childnode refid="15882" relation="include">
        </childnode>
        <childnode refid="15849" relation="include">
        </childnode>
      </node>
      <node id="15851">
        <label>/Users/mckinney27/doxy-testbed/lbann/include/lbann/params.hpp</label>
        <link refid="params_8hpp"/>
        <childnode refid="15852" relation="include">
        </childnode>
        <childnode refid="15849" relation="include">
        </childnode>
      </node>
      <node id="15897">
        <label>/Users/mckinney27/doxy-testbed/lbann/include/lbann/objective_functions/loss_functions/polya_negloglike.hpp</label>
        <link refid="polya__negloglike_8hpp"/>
        <childnode refid="15898" relation="include">
        </childnode>
        <childnode refid="15849" relation="include">
        </childnode>
      </node>
      <node id="15841">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/models/recurrent.cpp</label>
        <link refid="recurrent_8cpp"/>
      </node>
      <node id="15857">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/proto/factories/layer_factory.cpp</label>
        <link refid="layer__factory_8cpp"/>
      </node>
      <node id="15874">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/callbacks/callback_checknan.cpp</label>
        <link refid="callback__checknan_8cpp"/>
      </node>
      <node id="15854">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/utils/protobuf_utils.cpp</label>
        <link refid="protobuf__utils_8cpp"/>
      </node>
      <node id="15885">
        <label>/Users/mckinney27/doxy-testbed/lbann/include/lbann/objective_functions/loss_functions/cross_entropy_with_uncertainty.hpp</label>
        <link refid="cross__entropy__with__uncertainty_8hpp"/>
        <childnode refid="15886" relation="include">
        </childnode>
        <childnode refid="15849" relation="include">
        </childnode>
      </node>
      <node id="15873">
        <label>/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/io/target/target_layer.hpp</label>
        <link refid="target__layer_8hpp"/>
        <childnode refid="15874" relation="include">
        </childnode>
        <childnode refid="15875" relation="include">
        </childnode>
        <childnode refid="15876" relation="include">
        </childnode>
        <childnode refid="15849" relation="include">
        </childnode>
        <childnode refid="15877" relation="include">
        </childnode>
      </node>
      <node id="15865">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/proto/init_image_data_readers.cpp</label>
        <link refid="init__image__data__readers_8cpp"/>
      </node>
      <node id="15878">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/objective_functions/kl_divergence.cpp</label>
        <link refid="kl__divergence_8cpp"/>
      </node>
      <node id="15869">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/metrics/metric.cpp</label>
        <link refid="metric_8cpp"/>
      </node>
      <node id="15871">
        <label>/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/io/target/reconstruction.hpp</label>
        <link refid="reconstruction_8hpp"/>
        <childnode refid="15872" relation="include">
        </childnode>
        <childnode refid="15849" relation="include">
        </childnode>
      </node>
      <node id="15861">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/proto/factories/objective_function_factory.cpp</label>
        <link refid="objective__function__factory_8cpp"/>
      </node>
      <node id="15882">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/objective_functions/loss_functions/binary_cross_entropy.cpp</label>
        <link refid="binary__cross__entropy_8cpp"/>
      </node>
      <node id="15836">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/callbacks/callback_imcomm.cpp</label>
        <link refid="callback__imcomm_8cpp"/>
      </node>
      <node id="15872">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/models/greedy_layerwise_autoencoder.cpp</label>
        <link refid="greedy__layerwise__autoencoder_8cpp"/>
      </node>
      <node id="15896">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/objective_functions/loss_functions/poisson_negloglike.cpp</label>
        <link refid="poisson__negloglike_8cpp"/>
      </node>
      <node id="15850">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/proto/proto_common.cpp</label>
        <link refid="proto__common_8cpp"/>
      </node>
      <node id="15859">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/proto/factories/metric_factory.cpp</label>
        <link refid="metric__factory_8cpp"/>
      </node>
      <node id="15849">
        <label>/Users/mckinney27/doxy-testbed/lbann/include/lbann/lbann.hpp</label>
        <link refid="lbann_8hpp"/>
        <childnode refid="15850" relation="include">
        </childnode>
        <childnode refid="15851" relation="include">
        </childnode>
        <childnode refid="15853" relation="include">
        </childnode>
        <childnode refid="15866" relation="include">
        </childnode>
      </node>
      <node id="15893">
        <label>/Users/mckinney27/doxy-testbed/lbann/include/lbann/objective_functions/loss_functions/mean_squared_error.hpp</label>
        <link refid="objective__functions_2loss__functions_2mean__squared__error_8hpp"/>
        <childnode refid="15894" relation="include">
        </childnode>
        <childnode refid="15849" relation="include">
        </childnode>
      </node>
      <node id="15843">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/callbacks/callback_check_dataset.cpp</label>
        <link refid="callback__check__dataset_8cpp"/>
      </node>
      <node id="15895">
        <label>/Users/mckinney27/doxy-testbed/lbann/include/lbann/objective_functions/loss_functions/poisson_negloglike.hpp</label>
        <link refid="poisson__negloglike_8hpp"/>
        <childnode refid="15896" relation="include">
        </childnode>
        <childnode refid="15849" relation="include">
        </childnode>
      </node>
      <node id="15864">
        <label>/Users/mckinney27/doxy-testbed/lbann/include/lbann/proto/init_image_data_readers.hpp</label>
        <link refid="init__image__data__readers_8hpp"/>
        <childnode refid="15865" relation="include">
        </childnode>
        <childnode refid="15850" relation="include">
        </childnode>
      </node>
      <node id="15880">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/objective_functions/loss_functions/loss_function.cpp</label>
        <link refid="loss__function_8cpp"/>
      </node>
      <node id="15875">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/callbacks/callback_checksmall.cpp</label>
        <link refid="callback__checksmall_8cpp"/>
      </node>
      <node id="15886">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/objective_functions/loss_functions/cross_entropy_with_uncertainty.cpp</label>
        <link refid="cross__entropy__with__uncertainty_8cpp"/>
      </node>
      <node id="15838">
        <label>/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/io/input/generic_input_layer.hpp</label>
        <link refid="generic__input__layer_8hpp"/>
        <childnode refid="15839" relation="include">
        </childnode>
        <childnode refid="15840" relation="include">
        </childnode>
        <childnode refid="15841" relation="include">
        </childnode>
        <childnode refid="15842" relation="include">
        </childnode>
        <childnode refid="15867" relation="include">
        </childnode>
      </node>
      <node id="15892">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/objective_functions/loss_functions/mean_absolute_error.cpp</label>
        <link refid="mean__absolute__error_8cpp"/>
      </node>
      <node id="15837">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/callbacks/callback_ltfb.cpp</label>
        <link refid="callback__ltfb_8cpp"/>
      </node>
      <node id="15868">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/metrics/categorical_accuracy.cpp</label>
        <link refid="categorical__accuracy_8cpp"/>
      </node>
      <node id="15862">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/proto/factories/optimizer_factory.cpp</label>
        <link refid="optimizer__factory_8cpp"/>
      </node>
      <node id="15848">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/callbacks/callback_debug_io.cpp</label>
        <link refid="callback__debug__io_8cpp"/>
      </node>
      <node id="15883">
        <label>/Users/mckinney27/doxy-testbed/lbann/include/lbann/objective_functions/loss_functions/cross_entropy.hpp</label>
        <link refid="cross__entropy_8hpp"/>
        <childnode refid="15884" relation="include">
        </childnode>
        <childnode refid="15849" relation="include">
        </childnode>
      </node>
      <node id="15863">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/proto/factories/weights_factory.cpp</label>
        <link refid="weights__factory_8cpp"/>
      </node>
      <node id="15834">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/utils/quantizer.cpp</label>
        <link refid="quantizer_8cpp"/>
      </node>
      <node id="15840">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/models/model.cpp</label>
        <link refid="model_8cpp"/>
      </node>
      <node id="15891">
        <label>/Users/mckinney27/doxy-testbed/lbann/include/lbann/objective_functions/loss_functions/mean_absolute_error.hpp</label>
        <link refid="mean__absolute__error_8hpp"/>
        <childnode refid="15892" relation="include">
        </childnode>
        <childnode refid="15849" relation="include">
        </childnode>
      </node>
      <node id="15856">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/proto/factories/callback_factory.cpp</label>
        <link refid="callback__factory_8cpp"/>
      </node>
      <node id="15866">
        <label>/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/protobuf_utils.hpp</label>
        <link refid="protobuf__utils_8hpp"/>
        <childnode refid="15854" relation="include">
        </childnode>
      </node>
      <node id="15847">
        <label>/Users/mckinney27/doxy-testbed/lbann/include/lbann/callbacks/callback_debug_io.hpp</label>
        <link refid="callback__debug__io_8hpp"/>
        <childnode refid="15848" relation="include">
        </childnode>
        <childnode refid="15849" relation="include">
        </childnode>
      </node>
      <node id="15858">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/proto/factories/layer_graph_factory.cpp</label>
        <link refid="layer__graph__factory_8cpp"/>
      </node>
      <node id="15867">
        <label>/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/io/target/generic_target_layer.hpp</label>
        <link refid="generic__target__layer_8hpp"/>
        <childnode refid="15839" relation="include">
        </childnode>
        <childnode refid="15868" relation="include">
        </childnode>
        <childnode refid="15869" relation="include">
        </childnode>
        <childnode refid="15870" relation="include">
        </childnode>
        <childnode refid="15841" relation="include">
        </childnode>
        <childnode refid="15871" relation="include">
        </childnode>
        <childnode refid="15873" relation="include">
        </childnode>
        <childnode refid="15879" relation="include">
        </childnode>
      </node>
      <node id="15877">
        <label>/Users/mckinney27/doxy-testbed/lbann/include/lbann/objective_functions/kl_divergence.hpp</label>
        <link refid="kl__divergence_8hpp"/>
        <childnode refid="15878" relation="include">
        </childnode>
        <childnode refid="15849" relation="include">
        </childnode>
      </node>
      <node id="15845">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/callbacks/callback_print.cpp</label>
        <link refid="callback__print_8cpp"/>
      </node>
      <node id="15887">
        <label>/Users/mckinney27/doxy-testbed/lbann/include/lbann/objective_functions/loss_functions/geom_negloglike.hpp</label>
        <link refid="geom__negloglike_8hpp"/>
        <childnode refid="15888" relation="include">
        </childnode>
        <childnode refid="15849" relation="include">
        </childnode>
      </node>
      <node id="15832">
        <label>/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer_impl.hpp</label>
        <link refid="quantizer__impl_8hpp"/>
        <childnode refid="15833" relation="include">
        </childnode>
      </node>
      <node id="15894">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/objective_functions/loss_functions/mean_squared_error.cpp</label>
        <link refid="objective__functions_2loss__functions_2mean__squared__error_8cpp"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacelbann">lbann</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2014-2016,<sp/>Lawrence<sp/>Livermore<sp/>National<sp/>Security,<sp/>LLC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Produced<sp/>at<sp/>the<sp/>Lawrence<sp/>Livermore<sp/>National<sp/>Laboratory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Written<sp/>by<sp/>the<sp/>LBANN<sp/>Research<sp/>Team<sp/>(B.<sp/>Van<sp/>Essen,<sp/>et<sp/>al.)<sp/>listed<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>CONTRIBUTORS<sp/>file.<sp/>&lt;lbann-dev@llnl.gov&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LLNL-CODE-697807.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>LBANN:<sp/>Livermore<sp/>Big<sp/>Artificial<sp/>Neural<sp/>Network</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Toolkit.<sp/>For<sp/>details,<sp/>see<sp/>http://software.llnl.gov/LBANN<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://github.com/LLNL/LBANN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;Licensee&quot;);<sp/>you</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implied.<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>license.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>lbann_quantizer_impl<sp/>.hpp<sp/>-<sp/>Quantization<sp/>of<sp/>matrices</highlight></codeline>
<codeline lineno="28"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>LBANN_QUANTIZER_IMPL_HPP_INCLUDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LBANN_QUANTIZER_IMPL_HPP_INCLUDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;omp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacelbann" kindref="compound">lbann</ref><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>colT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>rowT&gt;</highlight></codeline>
<codeline lineno="37" refid="classlbann_1_1lbann__quantizer_1a7e4dfca5770dfd88ae6255b0407d8f80" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__quantizer_1a7e4dfca5770dfd88ae6255b0407d8f80" kindref="member">lbann_quantizer::adaptive_quantize</ref>(</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>mat,<sp/>std::vector&lt;rowT&gt;&amp;<sp/>q,<sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>qerror,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>proportion)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>types<sp/>are<sp/>reasonable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>static_assert(std::is_integral&lt;colT&gt;::value<sp/>&amp;&amp;<sp/>std::is_integral&lt;rowT&gt;::value,</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Types<sp/>must<sp/>be<sp/>integral&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>static_assert(std::is_unsigned&lt;colT&gt;::value<sp/>&amp;&amp;<sp/>std::is_unsigned&lt;rowT&gt;::value,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Types<sp/>must<sp/>be<sp/>unsigned&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>static_assert(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(colT)<sp/>==<sp/>2<sp/>||<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(colT)<sp/>==<sp/>4<sp/>||<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(colT)<sp/>==<sp/>8,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;colT<sp/>must<sp/>be<sp/>2,<sp/>4,<sp/>or<sp/>8<sp/>bytes.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>static_assert(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(rowT)<sp/>==<sp/>2<sp/>||<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(rowT)<sp/>==<sp/>4<sp/>||<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(rowT)<sp/>==<sp/>8,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;rowT<sp/>must<sp/>be<sp/>2,<sp/>4,<sp/>or<sp/>8<sp/>bytes.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>static_assert(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(colT)<sp/>&gt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(DataType),</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;colT<sp/>must<sp/>be<sp/>at<sp/>least<sp/>as<sp/>large<sp/>as<sp/>DataType&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>uses<sp/>a<sp/>header<sp/>to<sp/>store<sp/>all<sp/>information<sp/>needed<sp/>to<sp/>do<sp/>unquantization<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>one<sp/>spot,<sp/>which<sp/>makes<sp/>unquantization<sp/>easier<sp/>to<sp/>multi-thread.<sp/>The<sp/>header<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>one<sp/>entry<sp/>for<sp/>each<sp/>column,<sp/>consisting<sp/>of<sp/>the<sp/>starting<sp/>offset<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>quantized<sp/>data<sp/>in<sp/>the<sp/>array<sp/>(including<sp/>the<sp/>header)<sp/>and<sp/>the<sp/>two/three</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>reconstruction<sp/>values.<sp/>The<sp/>number<sp/>of<sp/>quantized<sp/>entries<sp/>is<sp/>included<sp/>as<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>final<sp/>entry<sp/>to<sp/>simplify<sp/>unquantization.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>width<sp/>=<sp/>mat.Width();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>height<sp/>=<sp/>mat.Height();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>ldim<sp/>=<sp/>mat.LDim();</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType<sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__restrict__<sp/>mat_buf<sp/>=<sp/>mat.LockedBuffer();</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>DataType<sp/>*__restrict__<sp/>qerror_buf<sp/>=<sp/>qerror.Buffer();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>row_header_factor<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(rowT)<sp/>==<sp/>2<sp/>?<sp/>2<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>header_len<sp/>=<sp/>row_header_factor<sp/>*<sp/><ref refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" kindref="member">HEADER_FACTOR</ref><sp/>*<sp/>width<sp/>+</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row_header_factor;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>q.resize(header_len);<sp/><sp/></highlight><highlight class="comment">//<sp/>Space<sp/>for<sp/>the<sp/>header.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Select<sp/>the<sp/>appropriate<sp/>number<sp/>of<sp/>threads.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_threads<sp/>=<sp/><ref refid="classlbann_1_1lbann__quantizer_1aaa0c20f755437130172c40ca8e95bc3f" kindref="member">get_adaptive_quantization_threads</ref>(width);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>std::vector&lt;std::vector&lt;rowT&gt;&gt;<sp/>thread_qs(num_threads);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>std::vector&lt;colT&gt;<sp/>quantized_sums(num_threads,<sp/>0);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>std::vector&lt;colT&gt;<sp/>quantized_counts(num_threads,<sp/>0);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>thresholds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlbann_1_1lbann__quantizer_1_1adaptive__thresholds" kindref="compound">adaptive_thresholds</ref><sp/>threshes<sp/>=</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1lbann__quantizer_1aa5aabc1cb4163e95aee993d9b37b9b32" kindref="member">proportion_threshold</ref>(mat,<sp/>qerror,<sp/>proportion);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>for<sp/>accessing<sp/>q<sp/>in<sp/>different<sp/>ways.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*q_col<sp/>=<sp/>(colT<sp/>*)<sp/>q.data();</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#pragma<sp/>omp<sp/>parallel<sp/>firstprivate(threshes,<sp/>height,<sp/>width,<sp/>ldim,<sp/>mat_buf,<sp/>qerror_buf)<sp/>num_threads(num_threads)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid<sp/>=<sp/>omp_get_thread_num();</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>colT<sp/>num_quantized<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;rowT&gt;&amp;<sp/>thread_q<sp/>=<sp/>thread_qs[tid];</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>thread_q.resize(std::max(</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2<sp/>*<sp/>height<sp/>*<sp/>width<sp/>/<sp/>proportion<sp/>/<sp/>num_threads,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(colT)<sp/>4));</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>colT<sp/>size<sp/>=<sp/>thread_q.size();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>for<sp/>schedule(static)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(colT<sp/>col<sp/>=<sp/>0;<sp/>col<sp/>&lt;<sp/>width;<sp/>++col)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>header_loc<sp/>=<sp/><ref refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" kindref="member">HEADER_FACTOR</ref><sp/>*<sp/>col;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q_col[header_loc]<sp/>=<sp/>num_quantized;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlbann_1_1lbann__quantizer_1_1adaptive__reconstructions" kindref="compound">adaptive_reconstructions</ref><sp/>recons<sp/>=</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1lbann__quantizer_1af77beca5905ff8601ca9b8231a2a16e0" kindref="member">col_reconstruction</ref>(mat,<sp/>qerror,<sp/>col,<sp/>threshes);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>the<sp/>averages<sp/>for<sp/>reconstruction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q_col[header_loc<sp/>+<sp/>1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;q_col[header_loc<sp/>+<sp/>1],<sp/>&amp;recons.<ref refid="structlbann_1_1lbann__quantizer_1_1adaptive__reconstructions_1a9b3b4970e067920e056cdd54c2ad8e95" kindref="member">pos_recon</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(recons.<ref refid="structlbann_1_1lbann__quantizer_1_1adaptive__reconstructions_1a9b3b4970e067920e056cdd54c2ad8e95" kindref="member">pos_recon</ref>));</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q_col[header_loc<sp/>+<sp/>2]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;q_col[header_loc<sp/>+<sp/>2],<sp/>&amp;recons.<ref refid="structlbann_1_1lbann__quantizer_1_1adaptive__reconstructions_1a631231c118cc17ba4ed569380e6c6711" kindref="member">neg_recon</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(recons.<ref refid="structlbann_1_1lbann__quantizer_1_1adaptive__reconstructions_1a631231c118cc17ba4ed569380e6c6711" kindref="member">neg_recon</ref>));</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>LBANN_QUANTIZER_TERNARY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q_col[header_loc<sp/>+<sp/>3]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;q_col[header_loc<sp/>+<sp/>3],<sp/>&amp;recons.zero_recon,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(recons.zero_recon));</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>col_offset<sp/>=<sp/>col<sp/>*<sp/>ldim;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType<sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__restrict__<sp/>mat_col<sp/>=<sp/>&amp;mat_buf[col_offset];</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DataType<sp/>*__restrict__<sp/>qerror_col<sp/>=<sp/>&amp;qerror_buf[col_offset];</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(rowT<sp/>row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>height;<sp/>++row)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType<sp/>val<sp/>=<sp/>mat_col[row]<sp/>+<sp/>qerror_col[row];</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>val<sp/>&gt;=<sp/>threshes.<ref refid="structlbann_1_1lbann__quantizer_1_1adaptive__thresholds_1a6f6aee51ed629c2ab68666d577189bb9" kindref="member">pos_thresh</ref>;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>val<sp/>&lt;=<sp/>threshes.<ref refid="structlbann_1_1lbann__quantizer_1_1adaptive__thresholds_1a4626553695545cf0783c3f7302f92fbf" kindref="member">neg_thresh</ref>;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__builtin_expect(!!(x<sp/>||<sp/>y),<sp/>0))<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Unlikely.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qerror_col[row]<sp/>=<sp/>val<sp/>-<sp/>recons.<ref refid="structlbann_1_1lbann__quantizer_1_1adaptive__reconstructions_1a9b3b4970e067920e056cdd54c2ad8e95" kindref="member">pos_recon</ref>;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread_q[num_quantized++]<sp/>=<sp/>(row<sp/>&lt;&lt;<sp/>1)<sp/>|<sp/>1;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qerror_col[row]<sp/>=<sp/>val<sp/>-<sp/>recons.<ref refid="structlbann_1_1lbann__quantizer_1_1adaptive__reconstructions_1a631231c118cc17ba4ed569380e6c6711" kindref="member">neg_recon</ref>;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread_q[num_quantized++]<sp/>=<sp/>row<sp/>&lt;&lt;<sp/>1;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__builtin_expect(!!(num_quantized<sp/>&gt;=<sp/>size),<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread_q.resize(2<sp/>*<sp/>size);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>LBANN_QUANTIZER_TERNARY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qerror_col[row]<sp/>=<sp/>val<sp/>-<sp/>recons.zero_recon;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qerror_col[row]<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>quantized_counts[tid]<sp/>=<sp/>num_quantized;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>barrier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>single</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>amount<sp/>to<sp/>adjust<sp/>header<sp/>counts<sp/>by.<sp/>This<sp/>is<sp/>essentially</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>shifted<sp/>prefix-sum.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>1;<sp/>t<sp/>&lt;<sp/>num_threads;<sp/>++t)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quantized_sums[t]<sp/>=<sp/>quantized_sums[t<sp/>-<sp/>1]<sp/>+<sp/>quantized_counts[t<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Have<sp/>threads<sp/>patch<sp/>up<sp/>the<sp/>header<sp/>counts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Static<sp/>schedule<sp/>guarantees<sp/>threads<sp/>are<sp/>assigned<sp/>the<sp/>same<sp/>way.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>for<sp/>schedule(static)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(colT<sp/>col<sp/>=<sp/>0;<sp/>col<sp/>&lt;<sp/>width;<sp/>++col)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q_col[<ref refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" kindref="member">HEADER_FACTOR</ref><sp/>*<sp/>col]<sp/>+=<sp/>quantized_sums[tid]<sp/>+<sp/>header_len;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>colT<sp/>total_quantized<sp/>=<sp/>std::accumulate(quantized_counts.begin(),</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quantized_counts.end(),<sp/>0);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>q.resize(header_len<sp/>+<sp/>total_quantized);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_copy_threads<sp/>=</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1lbann__quantizer_1a22b898932caed41ccf24abcb67c00ba1" kindref="member">get_adaptive_quantization_copy_threads</ref>(width);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#pragma<sp/>omp<sp/>parallel<sp/>for<sp/>schedule(dynamic,<sp/>1)<sp/>num_threads(num_copy_threads)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>tid<sp/>=<sp/>0;<sp/>tid<sp/>&lt;<sp/>thread_qs.size();<sp/>++tid)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy(thread_qs[tid].begin(),</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread_qs[tid].begin()<sp/>+<sp/>quantized_counts[tid],</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q.begin()<sp/>+<sp/>quantized_sums[tid]<sp/>+<sp/>header_len);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>the<sp/>final<sp/>number<sp/>of<sp/>entries.<sp/>Get<sp/>a<sp/>new<sp/>q_col<sp/>pointer<sp/>because<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>resize.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>q_col<sp/>=<sp/>(colT<sp/>*)<sp/>q.data();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>q_col[<ref refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" kindref="member">HEADER_FACTOR</ref><sp/>*<sp/>width]<sp/>=<sp/>(colT)<sp/>q.size();</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1lbann__quantizer_1a716fae78ef5ba082a8093f0d06550804" kindref="member">quantized_count</ref><sp/>=<sp/>q.size()<sp/>-<sp/>header_len;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>adaptive_bound&lt;colT,<sp/>rowT&gt;(mat,<sp/>qerror,<sp/>q,<sp/>proportion);</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>colT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>rowT&gt;</highlight></codeline>
<codeline lineno="164" refid="classlbann_1_1lbann__quantizer_1a737865bb555db8a8a104fb345f7626b2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__quantizer_1a7e4dfca5770dfd88ae6255b0407d8f80" kindref="member">lbann_quantizer::adaptive_quantize</ref>(</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="base_8hpp_1a0fab5387556805cfeac3e7e567bf66c5" kindref="member">DistMat</ref>&amp;<sp/>mat,<sp/>std::vector&lt;rowT&gt;&amp;<sp/>q,<sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>qerror,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>proportion)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>adaptive_quantize&lt;colT,<sp/>rowT&gt;(mat.LockedMatrix(),<sp/>q,<sp/>qerror,<sp/>proportion);</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>colT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>rowT&gt;</highlight></codeline>
<codeline lineno="170" refid="classlbann_1_1lbann__quantizer_1acf8d21e8114a00fdea53d919d76dd511" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__quantizer_1acf8d21e8114a00fdea53d919d76dd511" kindref="member">lbann_quantizer::adaptive_unquantize</ref>(</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rowT<sp/>*q,<sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>mat)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>types<sp/>are<sp/>reasonable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>static_assert(std::is_integral&lt;colT&gt;::value<sp/>&amp;&amp;<sp/>std::is_integral&lt;rowT&gt;::value,</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Types<sp/>must<sp/>be<sp/>integral&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>static_assert(std::is_unsigned&lt;colT&gt;::value<sp/>&amp;&amp;<sp/>std::is_unsigned&lt;rowT&gt;::value,</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Types<sp/>must<sp/>be<sp/>unsigned&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>static_assert(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(colT)<sp/>==<sp/>2<sp/>||<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(colT)<sp/>==<sp/>4<sp/>||<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(colT)<sp/>==<sp/>8,</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;colT<sp/>must<sp/>be<sp/>2,<sp/>4,<sp/>or<sp/>8<sp/>bytes.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>static_assert(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(rowT)<sp/>==<sp/>2<sp/>||<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(rowT)<sp/>==<sp/>4<sp/>||<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(rowT)<sp/>==<sp/>8,</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;rowT<sp/>must<sp/>be<sp/>2,<sp/>4,<sp/>or<sp/>8<sp/>bytes.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>static_assert(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(colT)<sp/>&gt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(DataType),</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;colT<sp/>must<sp/>be<sp/>at<sp/>least<sp/>as<sp/>large<sp/>as<sp/>DataType&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>DataType<sp/>*__restrict__<sp/>buf<sp/>=<sp/>mat.Buffer();</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>header_len<sp/>=<sp/>mat.Width()<sp/>*<sp/><ref refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" kindref="member">HEADER_FACTOR</ref>;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>LBANN_QUANTIZER_TERNARY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>height<sp/>=<sp/>mat.Height();</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>ldim<sp/>=<sp/>mat.LDim();</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*q_col<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>*)<sp/>q;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_threads<sp/>=<sp/><ref refid="classlbann_1_1lbann__quantizer_1aaa0c20f755437130172c40ca8e95bc3f" kindref="member">get_adaptive_quantization_threads</ref>(mat.Width());</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#pragma<sp/>omp<sp/>parallel<sp/>for<sp/>schedule(dynamic,<sp/>1),<sp/>firstprivate(header_len,<sp/>buf)<sp/>num_threads(num_threads)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(colT<sp/>header_loc<sp/>=<sp/>0;<sp/>header_loc<sp/>&lt;<sp/>header_len;<sp/>header_loc<sp/>+=<sp/><ref refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" kindref="member">HEADER_FACTOR</ref>)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>col_offset<sp/>=<sp/>(header_loc<sp/>/<sp/><ref refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" kindref="member">HEADER_FACTOR</ref>)<sp/>*<sp/>ldim;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>averages.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>DataType<sp/>pos_recon,<sp/>neg_recon;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;pos_recon,<sp/>&amp;q_col[header_loc<sp/>+<sp/>1],<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pos_recon));</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;neg_recon,<sp/>&amp;q_col[header_loc<sp/>+<sp/>2],<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(neg_recon));</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>LBANN_QUANTIZER_TERNARY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>DataType<sp/>zero_recon;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;zero_recon,<sp/>&amp;q_col[header_loc<sp/>+<sp/>3],<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(zero_recon));</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>the<sp/>column,<sp/>then<sp/>update<sp/>with<sp/>the<sp/>other<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>std::fill_n(&amp;buf[(header_loc<sp/>/<sp/><ref refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" kindref="member">HEADER_FACTOR</ref>)<sp/>*<sp/>ldim],<sp/>height,<sp/>zero_recon);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>DataType<sp/>*__restrict__<sp/>buf_col<sp/>=<sp/>&amp;buf[col_offset];</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>chunk_start<sp/>=<sp/>q_col[header_loc];</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>chunk_end<sp/>=<sp/>q_col[header_loc<sp/>+<sp/><ref refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" kindref="member">HEADER_FACTOR</ref>]<sp/>-<sp/>chunk_start;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rowT<sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__restrict__<sp/>q_<sp/>=<sp/>&amp;(q[chunk_start]);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(rowT<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>chunk_end;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rowT<sp/>val<sp/>=<sp/>q_[i];</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rowT<sp/>row<sp/>=<sp/>val<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf_col[row]<sp/>=<sp/>val<sp/>&amp;<sp/>0x1<sp/>?<sp/>pos_recon<sp/>:<sp/>neg_recon;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>colT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>rowT&gt;</highlight></codeline>
<codeline lineno="217" refid="classlbann_1_1lbann__quantizer_1a5456c31af080fce7f85aa7a01b7ee939" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__quantizer_1acf8d21e8114a00fdea53d919d76dd511" kindref="member">lbann_quantizer::adaptive_unquantize</ref>(</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rowT<sp/>*q,<sp/><ref refid="base_8hpp_1a0fab5387556805cfeac3e7e567bf66c5" kindref="member">DistMat</ref>&amp;<sp/>mat)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>adaptive_unquantize&lt;colT,<sp/>rowT&gt;(q,<sp/>mat.Matrix());</highlight></codeline>
<codeline lineno="220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>colT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>rowT&gt;</highlight></codeline>
<codeline lineno="223" refid="classlbann_1_1lbann__quantizer_1a1f63f7be2e227a48ebaa25056e6f85bc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__quantizer_1a1f63f7be2e227a48ebaa25056e6f85bc" kindref="member">lbann_quantizer::adaptive_unquantize_add</ref>(</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rowT<sp/>*q,<sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>mat)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>types<sp/>are<sp/>reasonable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>static_assert(std::is_integral&lt;colT&gt;::value<sp/>&amp;&amp;<sp/>std::is_integral&lt;rowT&gt;::value,</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Types<sp/>must<sp/>be<sp/>integral&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>static_assert(std::is_unsigned&lt;colT&gt;::value<sp/>&amp;&amp;<sp/>std::is_unsigned&lt;rowT&gt;::value,</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Types<sp/>must<sp/>be<sp/>unsigned&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>static_assert(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(colT)<sp/>==<sp/>2<sp/>||<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(colT)<sp/>==<sp/>4<sp/>||<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(colT)<sp/>==<sp/>8,</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;colT<sp/>must<sp/>be<sp/>2,<sp/>4,<sp/>or<sp/>8<sp/>bytes.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>static_assert(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(rowT)<sp/>==<sp/>2<sp/>||<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(rowT)<sp/>==<sp/>4<sp/>||<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(rowT)<sp/>==<sp/>8,</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;rowT<sp/>must<sp/>be<sp/>2,<sp/>4,<sp/>or<sp/>8<sp/>bytes.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>static_assert(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(colT)<sp/>&gt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(DataType),</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;colT<sp/>must<sp/>be<sp/>at<sp/>least<sp/>as<sp/>large<sp/>as<sp/>DataType&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>DataType<sp/>*__restrict__<sp/>buf<sp/>=<sp/>mat.Buffer();</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>header_len<sp/>=<sp/>mat.Width()<sp/>*<sp/><ref refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" kindref="member">HEADER_FACTOR</ref>;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>LBANN_QUANTIZER_TERNARY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>height<sp/>=<sp/>mat.Height();</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>ldim<sp/>=<sp/>mat.LDim();</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*q_col<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>*)<sp/>q;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_threads<sp/>=<sp/><ref refid="classlbann_1_1lbann__quantizer_1aaa0c20f755437130172c40ca8e95bc3f" kindref="member">get_adaptive_quantization_threads</ref>(mat.Width());</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#pragma<sp/>omp<sp/>parallel<sp/>for<sp/>schedule(dynamic,<sp/>1),<sp/>firstprivate(header_len,<sp/>buf)<sp/>num_threads(num_threads)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(colT<sp/>header_loc<sp/>=<sp/>0;<sp/>header_loc<sp/>&lt;<sp/>header_len;<sp/>header_loc<sp/>+=<sp/><ref refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" kindref="member">HEADER_FACTOR</ref>)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>col_offset<sp/>=<sp/>(header_loc<sp/>/<sp/><ref refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" kindref="member">HEADER_FACTOR</ref>)<sp/>*<sp/>ldim;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>averages.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>DataType<sp/>pos_recon,<sp/>neg_recon;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;pos_recon,<sp/>&amp;q_col[header_loc<sp/>+<sp/>1],<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pos_recon));</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;neg_recon,<sp/>&amp;q_col[header_loc<sp/>+<sp/>2],<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(neg_recon));</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>LBANN_QUANTIZER_TERNARY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>DataType<sp/>zero_recon;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;zero_recon,<sp/>&amp;q_col[header_loc<sp/>+<sp/>3],<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(zero_recon));</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>zero_recon<sp/>to<sp/>everything<sp/>and<sp/>adjust<sp/>the<sp/>other<sp/>means.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(rowT<sp/>row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>height;<sp/>++row)<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf[row<sp/>+<sp/>col_offset]<sp/>+=<sp/>zero_recon;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>pos_recon<sp/>-=<sp/>zero_recon;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>neg_recon<sp/>+=<sp/>zero_recon;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>DataType<sp/>*__restrict__<sp/>buf_col<sp/>=<sp/>&amp;buf[col_offset];</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>chunk_start<sp/>=<sp/>q_col[header_loc];</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>chunk_end<sp/>=<sp/>q_col[header_loc<sp/>+<sp/><ref refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" kindref="member">HEADER_FACTOR</ref>]<sp/>-<sp/>chunk_start;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rowT<sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__restrict__<sp/>q_<sp/>=<sp/>&amp;(q[chunk_start]);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(rowT<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>chunk_end;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rowT<sp/>val<sp/>=<sp/>q_[i];</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rowT<sp/>row<sp/>=<sp/>val<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf_col[row]<sp/>+=<sp/>val<sp/>&amp;<sp/>0x1<sp/>?<sp/>pos_recon<sp/>:<sp/>neg_recon;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>colT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>rowT&gt;</highlight></codeline>
<codeline lineno="274" refid="classlbann_1_1lbann__quantizer_1a25ed3869c6bc615ae51198803ea4e33d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__quantizer_1a25ed3869c6bc615ae51198803ea4e33d" kindref="member">lbann_quantizer::adaptive_quantize_replace</ref>(</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>mat,<sp/>std::vector&lt;rowT&gt;&amp;<sp/>q,<sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>qerror,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>proportion)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>types<sp/>are<sp/>reasonable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>static_assert(std::is_integral&lt;colT&gt;::value<sp/>&amp;&amp;<sp/>std::is_integral&lt;rowT&gt;::value,</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Types<sp/>must<sp/>be<sp/>integral&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>static_assert(std::is_unsigned&lt;colT&gt;::value<sp/>&amp;&amp;<sp/>std::is_unsigned&lt;rowT&gt;::value,</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Types<sp/>must<sp/>be<sp/>unsigned&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>static_assert(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(colT)<sp/>==<sp/>2<sp/>||<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(colT)<sp/>==<sp/>4<sp/>||<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(colT)<sp/>==<sp/>8,</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;colT<sp/>must<sp/>be<sp/>2,<sp/>4,<sp/>or<sp/>8<sp/>bytes.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>static_assert(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(rowT)<sp/>==<sp/>2<sp/>||<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(rowT)<sp/>==<sp/>4<sp/>||<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(rowT)<sp/>==<sp/>8,</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;rowT<sp/>must<sp/>be<sp/>2,<sp/>4,<sp/>or<sp/>8<sp/>bytes.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>static_assert(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(colT)<sp/>&gt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(DataType),</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;colT<sp/>must<sp/>be<sp/>at<sp/>least<sp/>as<sp/>large<sp/>as<sp/>DataType&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>width<sp/>=<sp/>mat.Width();</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>height<sp/>=<sp/>mat.Height();</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>ldim<sp/>=<sp/>mat.LDim();</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>DataType<sp/>*__restrict__<sp/>mat_buf<sp/>=<sp/>mat.Buffer();</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>DataType<sp/>*__restrict__<sp/>qerror_buf<sp/>=<sp/>qerror.Buffer();</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>row_header_factor<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(rowT)<sp/>==<sp/>2<sp/>?<sp/>2<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>header_len<sp/>=<sp/>row_header_factor<sp/>*<sp/><ref refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" kindref="member">HEADER_FACTOR</ref><sp/>*<sp/>width<sp/>+</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row_header_factor;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>q.resize(header_len);<sp/><sp/></highlight><highlight class="comment">//<sp/>Space<sp/>for<sp/>the<sp/>header.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Select<sp/>the<sp/>appropriate<sp/>number<sp/>of<sp/>threads.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_threads<sp/>=<sp/><ref refid="classlbann_1_1lbann__quantizer_1aaa0c20f755437130172c40ca8e95bc3f" kindref="member">get_adaptive_quantization_threads</ref>(width);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>std::vector&lt;std::vector&lt;rowT&gt;&gt;<sp/>thread_qs(num_threads);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>std::vector&lt;colT&gt;<sp/>quantized_sums(num_threads,<sp/>0);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>std::vector&lt;colT&gt;<sp/>quantized_counts(num_threads,<sp/>0);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>thresholds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlbann_1_1lbann__quantizer_1_1adaptive__thresholds" kindref="compound">adaptive_thresholds</ref><sp/>threshes<sp/>=</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1lbann__quantizer_1aa5aabc1cb4163e95aee993d9b37b9b32" kindref="member">proportion_threshold</ref>(mat,<sp/>qerror,<sp/>proportion);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*q_col<sp/>=<sp/>(colT<sp/>*)<sp/>q.data();</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#pragma<sp/>omp<sp/>parallel<sp/>firstprivate(threshes,<sp/>height,<sp/>width,<sp/>ldim,<sp/>mat_buf,<sp/>qerror_buf)<sp/>num_threads(num_threads)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid<sp/>=<sp/>omp_get_thread_num();</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>colT<sp/>num_quantized<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;rowT&gt;&amp;<sp/>thread_q<sp/>=<sp/>thread_qs[tid];</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>thread_q.resize(std::max(</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2<sp/>*<sp/>height<sp/>*<sp/>width<sp/>/<sp/>proportion<sp/>/<sp/>num_threads,</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(colT)<sp/>4));</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>colT<sp/>size<sp/>=<sp/>thread_q.size();</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>for<sp/>schedule(static)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(colT<sp/>col<sp/>=<sp/>0;<sp/>col<sp/>&lt;<sp/>width;<sp/>++col)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>header_loc<sp/>=<sp/><ref refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" kindref="member">HEADER_FACTOR</ref><sp/>*<sp/>col;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q_col[header_loc]<sp/>=<sp/>num_quantized;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlbann_1_1lbann__quantizer_1_1adaptive__reconstructions" kindref="compound">adaptive_reconstructions</ref><sp/>recons<sp/>=</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1lbann__quantizer_1af77beca5905ff8601ca9b8231a2a16e0" kindref="member">col_reconstruction</ref>(mat,<sp/>qerror,<sp/>col,<sp/>threshes);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>the<sp/>averages<sp/>for<sp/>reconstruction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q_col[header_loc<sp/>+<sp/>1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;q_col[header_loc<sp/>+<sp/>1],<sp/>&amp;recons.<ref refid="structlbann_1_1lbann__quantizer_1_1adaptive__reconstructions_1a9b3b4970e067920e056cdd54c2ad8e95" kindref="member">pos_recon</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(recons.<ref refid="structlbann_1_1lbann__quantizer_1_1adaptive__reconstructions_1a9b3b4970e067920e056cdd54c2ad8e95" kindref="member">pos_recon</ref>));</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q_col[header_loc<sp/>+<sp/>2]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;q_col[header_loc<sp/>+<sp/>2],<sp/>&amp;recons.<ref refid="structlbann_1_1lbann__quantizer_1_1adaptive__reconstructions_1a631231c118cc17ba4ed569380e6c6711" kindref="member">neg_recon</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(recons.<ref refid="structlbann_1_1lbann__quantizer_1_1adaptive__reconstructions_1a631231c118cc17ba4ed569380e6c6711" kindref="member">neg_recon</ref>));</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>LBANN_QUANTIZER_TERNARY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q_col[header_loc<sp/>+<sp/>3]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;q_col[header_loc<sp/>+<sp/>3],<sp/>&amp;recons.zero_recon,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(recons.zero_recon));</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>col_offset<sp/>=<sp/>col<sp/>*<sp/>ldim;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DataType<sp/>*__restrict__<sp/>mat_col<sp/>=<sp/>&amp;mat_buf[col_offset];</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DataType<sp/>*__restrict__<sp/>qerror_col<sp/>=<sp/>&amp;qerror_buf[col_offset];</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(rowT<sp/>row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>height;<sp/>++row)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType<sp/>val<sp/>=<sp/>mat_col[row]<sp/>+<sp/>qerror_col[row];</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>val<sp/>&gt;=<sp/>threshes.<ref refid="structlbann_1_1lbann__quantizer_1_1adaptive__thresholds_1a6f6aee51ed629c2ab68666d577189bb9" kindref="member">pos_thresh</ref>;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>val<sp/>&lt;=<sp/>threshes.<ref refid="structlbann_1_1lbann__quantizer_1_1adaptive__thresholds_1a4626553695545cf0783c3f7302f92fbf" kindref="member">neg_thresh</ref>;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__builtin_expect(!!(x<sp/>||<sp/>y),<sp/>0))<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Unlikely.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x)<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qerror_col[row]<sp/>=<sp/>val<sp/>-<sp/>recons.<ref refid="structlbann_1_1lbann__quantizer_1_1adaptive__reconstructions_1a9b3b4970e067920e056cdd54c2ad8e95" kindref="member">pos_recon</ref>;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread_q[num_quantized++]<sp/>=<sp/>(row<sp/>&lt;&lt;<sp/>1)<sp/>|<sp/>1;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_col[row]<sp/>=<sp/>recons.<ref refid="structlbann_1_1lbann__quantizer_1_1adaptive__reconstructions_1a9b3b4970e067920e056cdd54c2ad8e95" kindref="member">pos_recon</ref>;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qerror_col[row]<sp/>=<sp/>val<sp/>-<sp/>recons.<ref refid="structlbann_1_1lbann__quantizer_1_1adaptive__reconstructions_1a631231c118cc17ba4ed569380e6c6711" kindref="member">neg_recon</ref>;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread_q[num_quantized++]<sp/>=<sp/>row<sp/>&lt;&lt;<sp/>1;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_col[row]<sp/>=<sp/>recons.<ref refid="structlbann_1_1lbann__quantizer_1_1adaptive__reconstructions_1a631231c118cc17ba4ed569380e6c6711" kindref="member">neg_recon</ref>;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__builtin_expect(!!(num_quantized<sp/>&gt;=<sp/>size),<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread_q.resize(2<sp/>*<sp/>size);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>LBANN_QUANTIZER_TERNARY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qerror_col[row]<sp/>=<sp/>val<sp/>-<sp/>recons.zero_recon;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_col[row]<sp/>=<sp/>recons.zero_recon;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qerror_col[row]<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>quantized_counts[tid]<sp/>=<sp/>num_quantized;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>barrier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>single</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>amount<sp/>to<sp/>adjust<sp/>header<sp/>counts<sp/>by.<sp/>This<sp/>is<sp/>essentially</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>shifted<sp/>prefix-sum.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>1;<sp/>t<sp/>&lt;<sp/>num_threads;<sp/>++t)<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quantized_sums[t]<sp/>=<sp/>quantized_sums[t<sp/>-<sp/>1]<sp/>+<sp/>quantized_counts[t<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Have<sp/>threads<sp/>patch<sp/>up<sp/>the<sp/>header<sp/>counts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Static<sp/>schedule<sp/>guarantees<sp/>threads<sp/>are<sp/>assigned<sp/>the<sp/>same<sp/>way.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>for<sp/>schedule(static)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(colT<sp/>col<sp/>=<sp/>0;<sp/>col<sp/>&lt;<sp/>width;<sp/>++col)<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q_col[<ref refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" kindref="member">HEADER_FACTOR</ref><sp/>*<sp/>col]<sp/>+=<sp/>quantized_sums[tid]<sp/>+<sp/>header_len;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>colT<sp/>total_quantized<sp/>=<sp/>std::accumulate(quantized_counts.begin(),</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quantized_counts.end(),<sp/>0);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>q.resize(header_len<sp/>+<sp/>total_quantized);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_copy_threads<sp/>=</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1lbann__quantizer_1a22b898932caed41ccf24abcb67c00ba1" kindref="member">get_adaptive_quantization_copy_threads</ref>(width);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#pragma<sp/>omp<sp/>parallel<sp/>for<sp/>schedule(dynamic,<sp/>1)<sp/>num_threads(num_copy_threads)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>tid<sp/>=<sp/>0;<sp/>tid<sp/>&lt;<sp/>thread_qs.size();<sp/>++tid)<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy(thread_qs[tid].begin(),</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread_qs[tid].begin()<sp/>+<sp/>quantized_counts[tid],</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q.begin()<sp/>+<sp/>quantized_sums[tid]<sp/>+<sp/>header_len);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>the<sp/>final<sp/>number<sp/>of<sp/>entries.<sp/>Get<sp/>a<sp/>new<sp/>q_col<sp/>pointer<sp/>because<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>resize.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>q_col<sp/>=<sp/>(colT<sp/>*)<sp/>q.data();</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>q_col[<ref refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" kindref="member">HEADER_FACTOR</ref><sp/>*<sp/>width]<sp/>=<sp/>q.size();</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1lbann__quantizer_1a716fae78ef5ba082a8093f0d06550804" kindref="member">quantized_count</ref><sp/>=<sp/>q.size()<sp/>-<sp/>header_len;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>adaptive_bound&lt;colT,<sp/>rowT&gt;(mat,<sp/>qerror,<sp/>q,<sp/>proportion);</highlight></codeline>
<codeline lineno="394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>colT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>rowT&gt;</highlight></codeline>
<codeline lineno="397" refid="classlbann_1_1lbann__quantizer_1a9d6e80bd54d6eb03dc63c15861356557" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__quantizer_1a9d6e80bd54d6eb03dc63c15861356557" kindref="member">lbann_quantizer::adaptive_bound</ref>(</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>mat,<sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>qerror,<sp/>std::vector&lt;rowT&gt;&amp;<sp/>q,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>proportion)<sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>types<sp/>are<sp/>reasonable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>static_assert(std::is_integral&lt;colT&gt;::value<sp/>&amp;&amp;<sp/>std::is_integral&lt;rowT&gt;::value,</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Types<sp/>must<sp/>be<sp/>integral&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>static_assert(std::is_unsigned&lt;colT&gt;::value<sp/>&amp;&amp;<sp/>std::is_unsigned&lt;rowT&gt;::value,</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Types<sp/>must<sp/>be<sp/>unsigned&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>static_assert(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(colT)<sp/>==<sp/>2<sp/>||<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(colT)<sp/>==<sp/>4<sp/>||<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(colT)<sp/>==<sp/>8,</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;colT<sp/>must<sp/>be<sp/>2,<sp/>4,<sp/>or<sp/>8<sp/>bytes.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>static_assert(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(rowT)<sp/>==<sp/>2<sp/>||<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(rowT)<sp/>==<sp/>4<sp/>||<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(rowT)<sp/>==<sp/>8,</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;rowT<sp/>must<sp/>be<sp/>2,<sp/>4,<sp/>or<sp/>8<sp/>bytes.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>static_assert(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(colT)<sp/>&gt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(DataType),</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;colT<sp/>must<sp/>be<sp/>at<sp/>least<sp/>as<sp/>large<sp/>as<sp/>DataType&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>DataType<sp/>*__restrict__<sp/>qerror_buf<sp/>=<sp/>qerror.Buffer();</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>width<sp/>=<sp/>mat.Width();</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>height<sp/>=<sp/>mat.Height();</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>ldim<sp/>=<sp/>mat.LDim();</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>row_header_factor<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(rowT)<sp/>==<sp/>2<sp/>?<sp/>2<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>header_len<sp/>=<sp/>row_header_factor<sp/>*<sp/><ref refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" kindref="member">HEADER_FACTOR</ref><sp/>*<sp/>width<sp/>+</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row_header_factor;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>num_quantized<sp/>=<sp/>q.size()<sp/>-<sp/>header_len;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*q_col<sp/>=<sp/>(colT<sp/>*)<sp/>q.data();</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_quantized<sp/>&gt;<sp/><ref refid="classlbann_1_1lbann__quantizer_1abe63d57e62be1b498848f7920de4433a" kindref="member">MAX_QUANTIZED_EXCESS</ref><sp/>*<sp/>width<sp/>*<sp/>height<sp/>/<sp/>proportion)<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>there<sp/>is<sp/>a<sp/>maximum<sp/>bound<sp/>on<sp/>the<sp/>number<sp/>of<sp/>entries<sp/>sent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>should<sp/>only<sp/>occur<sp/>if<sp/>the<sp/>threshold<sp/>sampling<sp/>is<sp/>really<sp/>bad.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>As<sp/>a<sp/>simple<sp/>recovery<sp/>process,<sp/>this<sp/>just<sp/>removes<sp/>enough<sp/>entries<sp/>to<sp/>fit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>within<sp/>the<sp/>appropriate<sp/>size.<sp/>Removals<sp/>begin<sp/>from<sp/>the<sp/>end<sp/>to<sp/>avoid<sp/>copies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>deleting<sp/>entries.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>colT<sp/>excess<sp/>=<sp/>num_quantized<sp/>-</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="classlbann_1_1lbann__quantizer_1abe63d57e62be1b498848f7920de4433a" kindref="member">MAX_QUANTIZED_EXCESS</ref><sp/>*<sp/>width<sp/>*<sp/>height<sp/>/<sp/>proportion);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;colT&gt;<sp/>remove_counts(width,<sp/>0);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(colT<sp/>header_loc<sp/>=<sp/>(width<sp/>-<sp/>1)<sp/>*<sp/><ref refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" kindref="member">HEADER_FACTOR</ref>;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>excess<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>header_loc<sp/>-=<sp/><ref refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" kindref="member">HEADER_FACTOR</ref>)<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colT<sp/>num_in_col<sp/>=<sp/>q_col[header_loc<sp/>+<sp/><ref refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" kindref="member">HEADER_FACTOR</ref>]<sp/>-<sp/>q_col[header_loc];</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_in_col<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>col_offset<sp/>=<sp/>(header_loc<sp/>/<sp/><ref refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" kindref="member">HEADER_FACTOR</ref>)<sp/>*<sp/>ldim;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colT<sp/>num_remove<sp/>=<sp/>std::min(excess,<sp/>num_in_col);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colT<sp/>num_left<sp/>=<sp/>num_in_col<sp/>-<sp/>num_remove;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DataType<sp/>pos_recon,<sp/>neg_recon;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;pos_recon,<sp/>&amp;q_col[header_loc<sp/>+<sp/>1],<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pos_recon));</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;neg_recon,<sp/>&amp;q_col[header_loc<sp/>+<sp/>2],<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(neg_recon));</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DataType<sp/>*__restrict__<sp/>qerror_col<sp/>=<sp/>&amp;qerror_buf[col_offset];</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>deleted<sp/>portions<sp/>to<sp/>qerror.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(colT<sp/>i<sp/>=<sp/>q_col[header_loc]<sp/>+<sp/>num_left;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>&lt;<sp/>q_col[header_loc<sp/>+<sp/><ref refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" kindref="member">HEADER_FACTOR</ref>];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rowT<sp/>val<sp/>=<sp/>q[i];</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rowT<sp/>row<sp/>=<sp/>val<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>&amp;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qerror_col[row]<sp/>+=<sp/>pos_recon;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qerror_col[row]<sp/>+=<sp/>neg_recon;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>When<sp/>this<sp/>is<sp/>called<sp/>from<sp/>quantize_replace,<sp/>this<sp/>does<sp/>not<sp/>update</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>local<sp/>matrix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q.erase(q.begin()<sp/>+<sp/>q_col[header_loc]<sp/>+<sp/>num_left,<sp/>q.end());</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>excess<sp/>-=<sp/>num_remove;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>remove_counts[header_loc<sp/>/<sp/><ref refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" kindref="member">HEADER_FACTOR</ref>]<sp/>=<sp/>num_remove;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>all<sp/>the<sp/>header<sp/>locations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>std::partial_sum(remove_counts.begin(),<sp/>remove_counts.end(),</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remove_counts.begin());</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(colT<sp/>header_loc<sp/>=<sp/>0;<sp/>header_loc<sp/>&lt;<sp/>width<sp/>*<sp/><ref refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" kindref="member">HEADER_FACTOR</ref>;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>header_loc<sp/>+=<sp/><ref refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" kindref="member">HEADER_FACTOR</ref>)<sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q_col[header_loc<sp/>+<sp/><ref refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" kindref="member">HEADER_FACTOR</ref>]<sp/>-=<sp/>remove_counts[header_loc<sp/>/<sp/><ref refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" kindref="member">HEADER_FACTOR</ref>];</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="467"><highlight class="normal">}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>colT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>rowT&gt;</highlight></codeline>
<codeline lineno="470" refid="classlbann_1_1lbann__quantizer_1ab3a0e79b571e7c016446c179eedd0dc1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__quantizer_1ab3a0e79b571e7c016446c179eedd0dc1" kindref="member">lbann_quantizer::adaptive_quantize_slice</ref>(</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;rowT&gt;&amp;<sp/>q,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>mat,<sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>qerror,</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>std::vector&lt;rowT&gt;&amp;<sp/>slice,<sp/>colT<sp/>start,<sp/>colT<sp/>end,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>proportion)<sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>width<sp/>=<sp/>end<sp/>-<sp/>start;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>row_header_factor<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(rowT)<sp/>==<sp/>2<sp/>?<sp/>2<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>header_len<sp/>=<sp/>row_header_factor<sp/>*<sp/>width<sp/>*<sp/><ref refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" kindref="member">HEADER_FACTOR</ref><sp/>+</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row_header_factor;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>the<sp/>header<sp/>over.<sp/>Locations<sp/>will<sp/>need<sp/>to<sp/>be<sp/>adjusted<sp/>later.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*q_col<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>*)<sp/>q.data();</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>total_len<sp/>=<sp/>header_len<sp/>+<sp/>q_col[<ref refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" kindref="member">HEADER_FACTOR</ref><sp/>*<sp/>end]<sp/>-<sp/>q_col[<ref refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" kindref="member">HEADER_FACTOR</ref><sp/>*<sp/>start];</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>slice.resize(total_len);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*slice_col<sp/>=<sp/>(colT<sp/>*)<sp/>slice.data();</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>std::copy(&amp;q_col[<ref refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" kindref="member">HEADER_FACTOR</ref>*start],<sp/>&amp;q_col[<ref refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" kindref="member">HEADER_FACTOR</ref>*end<sp/>+<sp/>1],</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slice_col);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>data<sp/>over.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>std::copy(q.begin()<sp/>+<sp/>slice_col[0],<sp/>q.begin()<sp/>+<sp/>slice_col[<ref refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" kindref="member">HEADER_FACTOR</ref><sp/>*<sp/>width],</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slice.begin()<sp/>+<sp/>header_len);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Adjust<sp/>locations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>adjust<sp/>=<sp/>slice_col[0]<sp/>-<sp/>header_len;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(colT<sp/>header_loc<sp/>=<sp/>0;<sp/>header_loc<sp/>&lt;=<sp/><ref refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" kindref="member">HEADER_FACTOR</ref><sp/>*<sp/>width;<sp/>header_loc<sp/>+=<sp/><ref refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" kindref="member">HEADER_FACTOR</ref>)<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>slice_col[header_loc]<sp/>-=<sp/>adjust;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/>adaptive_bound&lt;colT,<sp/>rowT&gt;(mat,<sp/>qerror,<sp/>slice,<sp/>proportion);</highlight></codeline>
<codeline lineno="493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>colT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>rowT&gt;</highlight></codeline>
<codeline lineno="496" refid="classlbann_1_1lbann__quantizer_1a3fe3493cb16b85bd4eaf251980408f1b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__quantizer_1a3fe3493cb16b85bd4eaf251980408f1b" kindref="member">lbann_quantizer::intermodel_sum_adaptive_quantized_impl</ref>(</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1lbann__comm" kindref="compound">lbann_comm</ref><sp/>*<ref refid="file__io_8cpp_1ab048c6f9fcbcfaa57ce68b00263dbebe" kindref="member">comm</ref>,<sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>mat,<sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>qerror,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>proportion)<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>types<sp/>are<sp/>reasonable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>static_assert(std::is_integral&lt;colT&gt;::value<sp/>&amp;&amp;<sp/>std::is_integral&lt;rowT&gt;::value,</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Types<sp/>must<sp/>be<sp/>integral&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>static_assert(std::is_unsigned&lt;colT&gt;::value<sp/>&amp;&amp;<sp/>std::is_unsigned&lt;rowT&gt;::value,</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Types<sp/>must<sp/>be<sp/>unsigned&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/>static_assert(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(colT)<sp/>==<sp/>2<sp/>||<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(colT)<sp/>==<sp/>4<sp/>||<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(colT)<sp/>==<sp/>8,</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;colT<sp/>must<sp/>be<sp/>2,<sp/>4,<sp/>or<sp/>8<sp/>bytes.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>static_assert(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(rowT)<sp/>==<sp/>2<sp/>||<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(rowT)<sp/>==<sp/>4<sp/>||<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(rowT)<sp/>==<sp/>8,</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;rowT<sp/>must<sp/>be<sp/>2,<sp/>4,<sp/>or<sp/>8<sp/>bytes.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/>static_assert(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(colT)<sp/>&gt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(DataType),</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;colT<sp/>must<sp/>be<sp/>at<sp/>least<sp/>as<sp/>large<sp/>as<sp/>DataType&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(qerror.Height()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>qerror.Resize(mat.Height(),<sp/>mat.Width(),<sp/>mat.LDim());</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>Zero(qerror);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>row_header_factor<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(rowT)<sp/>==<sp/>2<sp/>?<sp/>2<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>header_len<sp/>=<sp/>row_header_factor<sp/>*<sp/><ref refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" kindref="member">HEADER_FACTOR</ref><sp/>*<sp/>mat.Width()<sp/>+</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row_header_factor;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>max_size<sp/>=<sp/>(header_len<sp/>+</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1lbann__quantizer_1abe63d57e62be1b498848f7920de4433a" kindref="member">MAX_QUANTIZED_EXCESS</ref><sp/>*<sp/>mat.Width()<sp/>*<sp/>mat.Height()<sp/>/<sp/>proportion)<sp/>*</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(rowT);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>std::vector&lt;rowT&gt;<sp/>quant;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>std::vector&lt;std::vector&lt;rowT&gt;&gt;<sp/>quant_slices(4);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>send_transform<sp/>=</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>[&amp;qerror,<sp/>&amp;quant,<sp/>&amp;quant_slices,<sp/>proportion,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/>(<ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>to_trans,<sp/>El::IR<sp/>h,<sp/>El::IR<sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>count,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>const_data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>call_idx)<sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>to_send<sp/>=<sp/>to_trans(h,<sp/>w);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>to_send_qerr<sp/>=<sp/>qerror(h,<sp/>w);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(const_data)<sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>this<sp/>case<sp/>we<sp/>can<sp/>quantize<sp/>the<sp/>entire<sp/>matrix<sp/>then<sp/>slice<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(quant.empty())<sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adaptive_quantize&lt;colT,<sp/>rowT&gt;(to_trans,<sp/>quant,<sp/>qerror,<sp/>proportion);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;rowT&gt;&amp;<sp/>quant_slice<sp/>=<sp/>quant_slices[call_idx];</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>quant_slice.clear();</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>adaptive_quantize_slice&lt;colT,<sp/>rowT&gt;(quant,<sp/>to_send,<sp/>to_send_qerr,</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quant_slice,<sp/>w.beg,<sp/>w.end,</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>proportion);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(rowT)<sp/>*<sp/>quant_slice.size();</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint8_t<sp/>*)<sp/>quant_slice.data();</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>quant.clear();</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>adaptive_quantize_replace&lt;colT,<sp/>rowT&gt;(to_send,<sp/>quant,<sp/>to_send_qerr,</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>proportion);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(rowT)<sp/>*<sp/>quant.size();</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint8_t<sp/>*)<sp/>quant.data();</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>recv_transform<sp/>=</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]<sp/>(uint8_t<sp/>*recv_buf,<sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>accum)<sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>adaptive_unquantize&lt;colT,<sp/>rowT&gt;((rowT<sp/>*)<sp/>recv_buf,<sp/>accum);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>*q_col<sp/>=<sp/>(colT<sp/>*)<sp/>recv_buf;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(rowT)<sp/>*<sp/>q_col[accum.Width()<sp/>*<sp/><ref refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" kindref="member">HEADER_FACTOR</ref>];</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>recv_apply_transform<sp/>=</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]<sp/>(uint8_t<sp/>*recv_buf,<sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>accum,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_local)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_local)<sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref><sp/>recv_mat;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>recv_mat.LockedAttach(accum.Height(),<sp/>accum.Width(),</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(DataType<sp/>*)<sp/>recv_buf,<sp/>accum.LDim());</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>accum<sp/>+=<sp/>recv_mat;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(DataType)<sp/>*<sp/>recv_mat.Height()<sp/>*<sp/>recv_mat.Width();</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>adaptive_unquantize_add&lt;colT,<sp/>rowT&gt;((rowT<sp/>*)<sp/>recv_buf,<sp/>accum);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>colT<sp/>*q_col<sp/>=<sp/>(colT<sp/>*)<sp/>recv_buf;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(rowT)<sp/>*<sp/>q_col[accum.Width()<sp/>*<sp/><ref refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" kindref="member">HEADER_FACTOR</ref>];</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><ref refid="structlbann_1_1lbann__comm_1_1allreduce__options" kindref="compound">lbann_comm::allreduce_options</ref><sp/>opts;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>opts.<ref refid="structlbann_1_1lbann__comm_1_1allreduce__options_1a4b3cd4eb74dd5a49ee3ffafa2edc1607" kindref="member">max_reduces</ref><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/>comm-&gt;<ref refid="classlbann_1_1lbann__comm_1a502bd724f9fb27f0e899306c69a3ec47" kindref="member">intermodel_allreduce</ref>(</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>mat,<sp/>max_size,</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;uint8_t<sp/>*(<ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;,<sp/>El::IR,<sp/>El::IR,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;(send_transform),</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(uint8_t<sp/>*,<sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;)&gt;(recv_transform),</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(uint8_t<sp/>*,<sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)&gt;(recv_apply_transform),</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>opts);</highlight></codeline>
<codeline lineno="574"><highlight class="normal">}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>lbann</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>LBANN_QUANTIZER_IMPL_HPP_INCLUDED</highlight></codeline>
    </programlisting>
    <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer_impl.hpp"/>
  </compounddef>
</doxygen>
