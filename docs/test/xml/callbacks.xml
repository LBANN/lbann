<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="callbacks" kind="page">
    <compoundname>callbacks</compoundname>
    <title>Callbacks</title>
    <detaileddescription>
<para>Base class for callbacks during training/testing. The method of each callback is called at a given point during training or testing by the model. Implement whichever ones you care about. Callbacks may be passed a lbann_summary instance, which they can use to log whatever relevant information they need to. LBANN supported callbacks are found below.</para><sect1 id="callbacks_1checkdata">
<title>Check Dataset</title>
<para>Save the sample indices for each mini-batch to ordered set. Check to make sure that all samples were properly processed.</para><para>Implementation details: <ref refid="classlbann_1_1lbann__callback__check__dataset" kindref="compound">lbann::lbann_callback_check_dataset</ref></para></sect1>
<sect1 id="callbacks_1checkinit">
<title>Check Initialization</title>
<para>Verify that every model uses the same initialization.</para><para>Implementation details: <ref refid="classlbann_1_1lbann__callback__check__init" kindref="compound">lbann::lbann_callback_check_init</ref></para></sect1>
<sect1 id="callbacks_1checkreconstruction">
<title>Check Reconstruction</title>
<para>Stop training after reconstruction error has reached a given value.</para><para>Implementation details: lbann::lbann_callback_check_reconstruction_erro</para></sect1>
<sect1 id="callbacks_1checknan">
<title>Check NAN</title>
<para>Check matrices for whether they include any NaNs or infs to help debugging. This will kill the rank if such values are discovered.</para><para>Implementation details: <ref refid="classlbann_1_1lbann__callback__checknan" kindref="compound">lbann::lbann_callback_checknan</ref></para></sect1>
<sect1 id="callbacks_1checksmall">
<title>Check Small</title>
<para>Check matrices for whether they include any very small values to avoid getting denormalized values. Denormalized values can significantly slow floating point computations. Since we often square values, the check is based on the square root of the smallest floating point value. This will kill the rank if such values are discovered.</para><para>Implementation details: <ref refid="classlbann_1_1lbann__callback__checksmall" kindref="compound">lbann::lbann_callback_checksmall</ref></para></sect1>
<sect1 id="callbacks_1dump_acts">
<title>Dump Activations</title>
<para>Dump activations matrices to files. This will dump each or selected hidden layer&apos;s activation matrix after each minibatch or at the end of an epoch. The matrices are written to files using Elemental&apos;s simple ASCII format. This is not meant for checkpointing, but for exporting acitvation matrices for analysis that isn&apos;t easily done in LBANN. This will be slow and produce a lot of output if matrices are dumped during each minibatch. If list of layers at which to dump activations is provided, activations/inferences will be dumped at the end of testing</para><para>Implementation details: <ref refid="classlbann_1_1lbann__callback__dump__activations" kindref="compound">lbann::lbann_callback_dump_activations</ref></para></sect1>
<sect1 id="callbacks_1dump_grads">
<title>Dump Gradients</title>
<para>Dump gradient matrices to files. This will dump each hidden layer&apos;s gradient matrix after each minibatch. The matrices are written to files using Elemental&apos;s simple ASCII format. This is not meant for checkpointing, but for exporting gradient matrices for analysis that isn&apos;t easily done in LBANN. Note this dumps matrices during each mini-batch. This will be slow and produce a lot of output.</para><para>Implementation details: <ref refid="classlbann_1_1lbann__callback__dump__gradients" kindref="compound">lbann::lbann_callback_dump_gradients</ref></para></sect1>
<sect1 id="callbacks_1dump_mb_sample_indices">
<title>Dump Minibatch Sample Indices</title>
<para>Dump sample indices for each minibatch to files. This will dump the list of indices from the training / validation / testing data that was processed Note this dumps vectors during each mini-batch. This will be slow and produce a lot of output.</para><para>Implementation details: <ref refid="classlbann_1_1lbann__callback__dump__minibatch__sample__indices" kindref="compound">lbann::lbann_callback_dump_minibatch_sample_indices</ref></para></sect1>
<sect1 id="callbacks_1dump_wei">
<title>Dump Weights</title>
<para>Implementation details: <ref refid="classlbann_1_1lbann__callback__dump__weights" kindref="compound">lbann::lbann_callback_dump_weights</ref></para></sect1>
<sect1 id="callbacks_1earlystop">
<title>Early Stopping</title>
<para>Stop training after validation error stops improving.</para><para>Implementation details: <ref refid="classlbann_1_1lbann__callback__early__stopping" kindref="compound">lbann::lbann_callback_early_stopping</ref></para></sect1>
<sect1 id="callbacks_1gradientcheck">
<title>Gradient Check</title>
<para>Callback hooks for gradient check.</para><para>Implementation details: <ref refid="classlbann_1_1lbann__callback__gradient__check" kindref="compound">lbann::lbann_callback_gradient_check</ref></para></sect1>
<sect1 id="callbacks_1hang">
<title>Hang</title>
<para>Hang LBANN as training starts so debuggers can attach. This will cause either a specific rank (in COMM_WORLD) or every rank to hang. Attach to the hung ranks and set the hang flag to false with a debugger to proceed.</para><para>Implementation details: <ref refid="classlbann_1_1lbann__callback__hang" kindref="compound">lbann::lbann_callback_hang</ref></para></sect1>
<sect1 id="callbacks_1im_comm">
<title>Inter-model Communication</title>
<para>Support inter-model communication after each mini-batch to synchronize gradient updates. This optionally supports quantizing the gradient updates before communication in order to reduce bandwidth requirements.</para><para>Implementation details: <ref refid="classlbann_1_1lbann__callback__imcomm" kindref="compound">lbann::lbann_callback_imcomm</ref></para></sect1>
<sect1 id="callbacks_1io">
<title>Print IO</title>
<para>Print information on the amount of IO that layers do.</para><para>Implementation details: <ref refid="classlbann_1_1lbann__callback__io" kindref="compound">lbann::lbann_callback_io</ref></para></sect1>
<sect1 id="callbacks_1learningrate">
<title>Learning Rate</title>
<para>Base class for learning rate schedules. Child classes should implement the schedule method to make changes.</para><para>Implementation details: <ref refid="classlbann_1_1lbann__callback__learning__rate" kindref="compound">lbann::lbann_callback_learning_rate</ref></para></sect1>
<sect1 id="callbacks_1LTFB">
<title>Manage LTFB</title>
<para>Manage LTFB training. LTFB works in rounds, which are made up of some number of mini-batches (that evenly divide the number of minibatches in an epoch). In each round, the model trains as usual, and at the end it is randomly paired with another model. The pairs exchange their models and evaluate both their local and the received model on their validation data. The model achieving the highest accuracy is retained and training continues. Current limitations:<itemizedlist>
<listitem><para>Does not transfer optimizer state, so it&apos;s best to stick to SGD without momentum.</para></listitem><listitem><para>Uses the validation data for the tournament (we may not want this).</para></listitem><listitem><para>Requires a manually-created model duplicate.</para><para>Implementation details: <ref refid="classlbann_1_1lbann__callback__ltfb" kindref="compound">lbann::lbann_callback_ltfb</ref></para></listitem></itemizedlist>
</para></sect1>
<sect1 id="callbacks_1print_acc">
<title>Print Accuracy</title>
<para>Periodically print computational results. Prints average objective function value and metric scores after each training epoch and evaluation.</para><para>Implementation details: <ref refid="classlbann_1_1lbann__callback__print" kindref="compound">lbann::lbann_callback_print</ref></para></sect1>
<sect1 id="callbacks_1save_images">
<title>Save Images</title>
<para>Save images to file</para><para>Implementation details: <ref refid="classlbann_1_1lbann__callback__save__images" kindref="compound">lbann::lbann_callback_save_images</ref></para></sect1>
<sect1 id="callbacks_1summary">
<title>Summary</title>
<para>Summarize information to Tensorboard using LBANN&apos;s summary interface.</para><para>Implementation details: <ref refid="classlbann_1_1lbann__callback__summary" kindref="compound">lbann::lbann_callback_summary</ref></para></sect1>
<sect1 id="callbacks_1timer">
<title>Timer</title>
<para>Record and report model timing results. Reports the total time and mini-batch time statistics for training epochs and for model evaluations. This reports times for the master process in each model.</para><para>Implementation details: <ref refid="classlbann_1_1lbann__callback__timer" kindref="compound">lbann::lbann_callback_timer</ref></para></sect1>
<sect1 id="callbacks_1dbg">
<title>Debug</title>
<para>Print status updates on where training is.</para><para>Implementation details: <ref refid="classlbann_1_1lbann__callback__debug" kindref="compound">lbann::lbann_callback_debug</ref></para></sect1>
<sect1 id="callbacks_1variable_mb">
<title>Variable Minibatch</title>
<para>Support changing the mini-batch size on different schedules. Implementations should override implement the abstract methods to define concrete schedules.</para><para>Implementation details: <ref refid="classlbann_1_1lbann__callback__variable__minibatch" kindref="compound">lbann::lbann_callback_variable_minibatch</ref> </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
