<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="init__image__data__readers_8cpp" kind="file" language="C++">
    <compoundname>init_image_data_readers.cpp</compoundname>
    <includes refid="init__image__data__readers_8hpp" local="yes">lbann/proto/init_image_data_readers.hpp</includes>
    <includes local="no">google/protobuf/io/coded_stream.h</includes>
    <includes local="no">google/protobuf/io/zero_copy_stream_impl.h</includes>
    <includes local="no">google/protobuf/text_format.h</includes>
    <includes local="no">memory</includes>
    <incdepgraph>
      <node id="24940">
        <label>sys/stat.h</label>
      </node>
      <node id="25129">
        <label>lbann/proto/factories.hpp</label>
        <link refid="factories_8hpp"/>
        <childnode refid="24902" relation="include">
        </childnode>
      </node>
      <node id="25125">
        <label>glob.h</label>
      </node>
      <node id="25023">
        <label>cv_process.hpp</label>
        <link refid="cv__process_8hpp"/>
        <childnode refid="25024" relation="include">
        </childnode>
        <childnode refid="25027" relation="include">
        </childnode>
        <childnode refid="25030" relation="include">
        </childnode>
        <childnode refid="25031" relation="include">
        </childnode>
        <childnode refid="25034" relation="include">
        </childnode>
        <childnode refid="25035" relation="include">
        </childnode>
        <childnode refid="25036" relation="include">
        </childnode>
        <childnode refid="25037" relation="include">
        </childnode>
        <childnode refid="25039" relation="include">
        </childnode>
        <childnode refid="25040" relation="include">
        </childnode>
      </node>
      <node id="24986">
        <label>lbann/layers/transform/pooling.hpp</label>
        <link refid="pooling_8hpp"/>
        <childnode refid="24987" relation="include">
        </childnode>
        <childnode refid="24916" relation="include">
        </childnode>
        <childnode refid="24985" relation="include">
        </childnode>
        <childnode refid="24929" relation="include">
        </childnode>
        <childnode refid="24924" relation="include">
        </childnode>
        <childnode refid="24982" relation="include">
        </childnode>
      </node>
      <node id="25091">
        <label>lbann/callbacks/callback_checkpoint.hpp</label>
        <link refid="callback__checkpoint_8hpp"/>
        <childnode refid="25015" relation="include">
        </childnode>
        <childnode refid="24932" relation="include">
        </childnode>
      </node>
      <node id="24976">
        <label>lbann/weights/fan_in_fan_out_initializers.hpp</label>
        <link refid="fan__in__fan__out__initializers_8hpp"/>
        <childnode refid="24931" relation="include">
        </childnode>
      </node>
      <node id="25037">
        <label>cv_mean_extractor.hpp</label>
        <link refid="cv__mean__extractor_8hpp"/>
        <childnode refid="25024" relation="include">
        </childnode>
        <childnode refid="25038" relation="include">
        </childnode>
      </node>
      <node id="24966">
        <label>lbann/layers/activations/selu.hpp</label>
        <link refid="selu_8hpp"/>
        <childnode refid="24959" relation="include">
        </childnode>
      </node>
      <node id="25040">
        <label>limits</label>
      </node>
      <node id="24920">
        <label>lbann/utils/summary.hpp</label>
        <link refid="summary_8hpp"/>
        <childnode refid="24921" relation="include">
        </childnode>
        <childnode refid="24916" relation="include">
        </childnode>
        <childnode refid="24906" relation="include">
        </childnode>
        <childnode refid="24915" relation="include">
        </childnode>
      </node>
      <node id="25073">
        <label>lbann/callbacks/callback_io.hpp</label>
        <link refid="callback__io_8hpp"/>
        <childnode refid="24934" relation="include">
        </childnode>
        <childnode refid="24946" relation="include">
        </childnode>
        <childnode refid="25015" relation="include">
        </childnode>
      </node>
      <node id="25016">
        <label>lbann/utils/quantizer.hpp</label>
        <link refid="quantizer_8hpp"/>
        <childnode refid="24946" relation="include">
        </childnode>
        <childnode refid="24906" relation="include">
        </childnode>
        <childnode refid="24915" relation="include">
        </childnode>
        <childnode refid="24935" relation="include">
        </childnode>
        <childnode refid="24924" relation="include">
        </childnode>
        <childnode refid="24981" relation="include">
        </childnode>
        <childnode refid="25017" relation="include">
        </childnode>
      </node>
      <node id="25094">
        <label>lbann/optimizers/adagrad.hpp</label>
        <link refid="adagrad_8hpp"/>
        <childnode refid="24922" relation="include">
        </childnode>
      </node>
      <node id="24965">
        <label>lbann/layers/activations/relu.hpp</label>
        <link refid="relu_8hpp"/>
        <childnode refid="24959" relation="include">
        </childnode>
        <childnode refid="24929" relation="include">
        </childnode>
      </node>
      <node id="24962">
        <label>lbann/layers/activations/exponential.hpp</label>
        <link refid="exponential_8hpp"/>
        <childnode refid="24959" relation="include">
        </childnode>
      </node>
      <node id="25090">
        <label>lbann/callbacks/callback_timeline.hpp</label>
        <link refid="callback__timeline_8hpp"/>
        <childnode refid="24946" relation="include">
        </childnode>
        <childnode refid="25015" relation="include">
        </childnode>
      </node>
      <node id="25105">
        <label>lbann/objective_functions/loss_functions/mean_absolute_deviation.hpp</label>
        <link refid="objective__functions_2loss__functions_2mean__absolute__deviation_8hpp"/>
        <childnode refid="25100" relation="include">
        </childnode>
      </node>
      <node id="25051">
        <label>offline_patches_npz.hpp</label>
        <link refid="offline__patches__npz_8hpp"/>
        <childnode refid="25052" relation="include">
        </childnode>
        <childnode refid="24921" relation="include">
        </childnode>
        <childnode refid="24916" relation="include">
        </childnode>
      </node>
      <node id="25069">
        <label>lbann/callbacks/callback_checksmall.hpp</label>
        <link refid="callback__checksmall_8hpp"/>
        <childnode refid="25015" relation="include">
        </childnode>
      </node>
      <node id="25050">
        <label>lbann/data_readers/data_reader_triplet.hpp</label>
        <link refid="data__reader__triplet_8hpp"/>
        <childnode refid="25048" relation="include">
        </childnode>
        <childnode refid="25023" relation="include">
        </childnode>
        <childnode refid="25051" relation="include">
        </childnode>
        <childnode refid="24916" relation="include">
        </childnode>
        <childnode refid="24921" relation="include">
        </childnode>
        <childnode refid="24987" relation="include">
        </childnode>
        <childnode refid="24927" relation="include">
        </childnode>
      </node>
      <node id="24950">
        <label>lbann/data_readers/image_preprocessor.hpp</label>
        <link refid="image__preprocessor_8hpp"/>
        <childnode refid="24914" relation="include">
        </childnode>
        <childnode refid="24906" relation="include">
        </childnode>
      </node>
      <node id="25045">
        <label>patchworks/patchworks_patch_descriptor.hpp</label>
        <link refid="patchworks__patch__descriptor_8hpp"/>
        <childnode refid="24914" relation="include">
        </childnode>
      </node>
      <node id="25109">
        <label>lbann/objective_functions/weight_regularization/l1.hpp</label>
        <link refid="l1_8hpp"/>
        <childnode refid="24944" relation="include">
        </childnode>
      </node>
      <node id="25124">
        <label>lbann/utils/glob.hpp</label>
        <link refid="glob_8hpp"/>
        <childnode refid="25125" relation="include">
        </childnode>
        <childnode refid="24916" relation="include">
        </childnode>
        <childnode refid="24921" relation="include">
        </childnode>
        <childnode refid="24924" relation="include">
        </childnode>
      </node>
      <node id="24992">
        <label>lbann/layers/transform/concatenation.hpp</label>
        <link refid="concatenation_8hpp"/>
        <childnode refid="24985" relation="include">
        </childnode>
        <childnode refid="24924" relation="include">
        </childnode>
        <childnode refid="24977" relation="include">
        </childnode>
      </node>
      <node id="25100">
        <label>lbann/objective_functions/loss_functions/loss_function.hpp</label>
        <link refid="loss__function_8hpp"/>
        <childnode refid="24944" relation="include">
        </childnode>
        <childnode refid="25019" relation="include">
        </childnode>
      </node>
      <node id="25064">
        <label>lbann/data_store/generic_data_store.hpp</label>
        <link refid="generic__data__store_8hpp"/>
        <childnode refid="24906" relation="include">
        </childnode>
        <childnode refid="24915" relation="include">
        </childnode>
        <childnode refid="24916" relation="include">
        </childnode>
        <childnode refid="24934" relation="include">
        </childnode>
      </node>
      <node id="24984">
        <label>lbann/layers/transform/reshape.hpp</label>
        <link refid="reshape_8hpp"/>
        <childnode refid="24985" relation="include">
        </childnode>
      </node>
      <node id="24932">
        <label>lbann/io/persist.hpp</label>
        <link refid="persist_8hpp"/>
        <childnode refid="24906" relation="include">
        </childnode>
        <childnode refid="24907" relation="include">
        </childnode>
      </node>
      <node id="25128">
        <label>cstdint</label>
      </node>
      <node id="25065">
        <label>lbann/data_store/data_store_imagenet.hpp</label>
        <link refid="data__store__imagenet_8hpp"/>
        <childnode refid="25066" relation="include">
        </childnode>
      </node>
      <node id="24907">
        <label>El.hpp</label>
      </node>
      <node id="25110">
        <label>lbann/objective_functions/weight_regularization/l2.hpp</label>
        <link refid="l2_8hpp"/>
        <childnode refid="24944" relation="include">
        </childnode>
      </node>
      <node id="25029">
        <label>lbann/utils/mild_exception.hpp</label>
        <link refid="mild__exception_8hpp"/>
        <childnode refid="24927" relation="include">
        </childnode>
      </node>
      <node id="24963">
        <label>lbann/layers/activations/identity.hpp</label>
        <link refid="identity_8hpp"/>
        <childnode refid="24959" relation="include">
        </childnode>
      </node>
      <node id="25071">
        <label>lbann/callbacks/callback_print.hpp</label>
        <link refid="callback__print_8hpp"/>
        <childnode refid="25015" relation="include">
        </childnode>
      </node>
      <node id="25068">
        <label>lbann/callbacks/callback_checknan.hpp</label>
        <link refid="callback__checknan_8hpp"/>
        <childnode refid="25015" relation="include">
        </childnode>
      </node>
      <node id="24906">
        <label>lbann/base.hpp</label>
        <link refid="base_8hpp"/>
        <childnode refid="24907" relation="include">
        </childnode>
        <childnode refid="24908" relation="include">
        </childnode>
        <childnode refid="24909" relation="include">
        </childnode>
        <childnode refid="24914" relation="include">
        </childnode>
      </node>
      <node id="24902">
        <label>lbann/proto/proto_common.hpp</label>
        <link refid="proto__common_8hpp"/>
        <childnode refid="24903" relation="include">
        </childnode>
        <childnode refid="24933" relation="include">
        </childnode>
        <childnode refid="24929" relation="include">
        </childnode>
        <childnode refid="25129" relation="include">
        </childnode>
      </node>
      <node id="24995">
        <label>lbann/layers/transform/safe_inv.hpp</label>
        <link refid="safe__inv_8hpp"/>
        <childnode refid="24906" relation="include">
        </childnode>
        <childnode refid="24985" relation="include">
        </childnode>
        <childnode refid="24924" relation="include">
        </childnode>
      </node>
      <node id="25004">
        <label>lbann/layers/regularizers/dropout.hpp</label>
        <link refid="dropout_8hpp"/>
        <childnode refid="25003" relation="include">
        </childnode>
      </node>
      <node id="25132">
        <label>google/protobuf/text_format.h</label>
      </node>
      <node id="25127">
        <label>lbann/utils/omp_diagnostics.hpp</label>
        <link refid="omp__diagnostics_8hpp"/>
        <childnode refid="25128" relation="include">
        </childnode>
      </node>
      <node id="25013">
        <label>lbann/io/data_buffers/distributed_io_buffer.hpp</label>
        <link refid="distributed__io__buffer_8hpp"/>
        <childnode refid="25011" relation="include">
        </childnode>
      </node>
      <node id="24997">
        <label>lbann/layers/transform/reduction.hpp</label>
        <link refid="reduction_8hpp"/>
        <childnode refid="24916" relation="include">
        </childnode>
        <childnode refid="24985" relation="include">
        </childnode>
      </node>
      <node id="25007">
        <label>lbann/layers/io/input/input_layer.hpp</label>
        <link refid="input__layer_8hpp"/>
        <childnode refid="25008" relation="include">
        </childnode>
        <childnode refid="24924" relation="include">
        </childnode>
        <childnode refid="24905" relation="include">
        </childnode>
        <childnode refid="24921" relation="include">
        </childnode>
        <childnode refid="24941" relation="include">
        </childnode>
        <childnode refid="24940" relation="include">
        </childnode>
        <childnode refid="24953" relation="include">
        </childnode>
      </node>
      <node id="25014">
        <label>lbann/callbacks/callback_imcomm.hpp</label>
        <link refid="callback__imcomm_8hpp"/>
        <childnode refid="24916" relation="include">
        </childnode>
        <childnode refid="24934" relation="include">
        </childnode>
        <childnode refid="24946" relation="include">
        </childnode>
        <childnode refid="25015" relation="include">
        </childnode>
        <childnode refid="25016" relation="include">
        </childnode>
      </node>
      <node id="25022">
        <label>data_reader_image.hpp</label>
        <link refid="data__reader__image_8hpp"/>
        <childnode refid="24947" relation="include">
        </childnode>
        <childnode refid="24950" relation="include">
        </childnode>
        <childnode refid="25023" relation="include">
        </childnode>
      </node>
      <node id="24951">
        <label>cassert</label>
      </node>
      <node id="25072">
        <label>lbann/callbacks/callback_timer.hpp</label>
        <link refid="callback__timer_8hpp"/>
        <childnode refid="24936" relation="include">
        </childnode>
        <childnode refid="24916" relation="include">
        </childnode>
        <childnode refid="25015" relation="include">
        </childnode>
      </node>
      <node id="25075">
        <label>lbann/callbacks/callback_learning_rate.hpp</label>
        <link refid="callback__learning__rate_8hpp"/>
        <childnode refid="24934" relation="include">
        </childnode>
        <childnode refid="24946" relation="include">
        </childnode>
        <childnode refid="25015" relation="include">
        </childnode>
      </node>
      <node id="24942">
        <label>fcntl.h</label>
      </node>
      <node id="25102">
        <label>lbann/objective_functions/loss_functions/binary_cross_entropy.hpp</label>
        <link refid="binary__cross__entropy_8hpp"/>
        <childnode refid="25100" relation="include">
        </childnode>
      </node>
      <node id="24945">
        <label>lbann/metrics/metric.hpp</label>
        <link refid="metric_8hpp"/>
        <childnode refid="24906" relation="include">
        </childnode>
        <childnode refid="24915" relation="include">
        </childnode>
        <childnode refid="24924" relation="include">
        </childnode>
        <childnode refid="24932" relation="include">
        </childnode>
      </node>
      <node id="25026">
        <label>opencv_extensions.hpp</label>
        <link refid="opencv__extensions_8hpp"/>
      </node>
      <node id="25034">
        <label>cv_colorizer.hpp</label>
        <link refid="cv__colorizer_8hpp"/>
        <childnode refid="25024" relation="include">
        </childnode>
      </node>
      <node id="25009">
        <label>lbann/layers/io/io_layer.hpp</label>
        <link refid="io__layer_8hpp"/>
        <childnode refid="24919" relation="include">
        </childnode>
        <childnode refid="24947" relation="include">
        </childnode>
        <childnode refid="25010" relation="include">
        </childnode>
        <childnode refid="24932" relation="include">
        </childnode>
        <childnode refid="24924" relation="include">
        </childnode>
        <childnode refid="24921" relation="include">
        </childnode>
        <childnode refid="24941" relation="include">
        </childnode>
        <childnode refid="24940" relation="include">
        </childnode>
        <childnode refid="24953" relation="include">
        </childnode>
        <childnode refid="24911" relation="include">
        </childnode>
      </node>
      <node id="25092">
        <label>lbann/callbacks/callback_save_model.hpp</label>
        <link refid="callback__save__model_8hpp"/>
        <childnode refid="24987" relation="include">
        </childnode>
        <childnode refid="25015" relation="include">
        </childnode>
        <childnode refid="24933" relation="include">
        </childnode>
        <childnode refid="25093" relation="include">
        </childnode>
      </node>
      <node id="25126">
        <label>lbann/params.hpp</label>
        <link refid="params_8hpp"/>
        <childnode refid="24903" relation="include">
        </childnode>
        <childnode refid="24906" relation="include">
        </childnode>
        <childnode refid="24921" relation="include">
        </childnode>
      </node>
      <node id="24921">
        <label>string</label>
      </node>
      <node id="25011">
        <label>lbann/io/data_buffers/generic_io_buffer.hpp</label>
        <link refid="generic__io__buffer_8hpp"/>
        <childnode refid="24906" relation="include">
        </childnode>
        <childnode refid="24915" relation="include">
        </childnode>
        <childnode refid="24947" relation="include">
        </childnode>
      </node>
      <node id="25003">
        <label>lbann/layers/regularizers/regularizer.hpp</label>
        <link refid="regularizer_8hpp"/>
        <childnode refid="24919" relation="include">
        </childnode>
      </node>
      <node id="25108">
        <label>lbann/objective_functions/loss_functions/polya_negloglike.hpp</label>
        <link refid="polya__negloglike_8hpp"/>
        <childnode refid="25100" relation="include">
        </childnode>
      </node>
      <node id="24968">
        <label>lbann/layers/activations/smooth_relu.hpp</label>
        <link refid="smooth__relu_8hpp"/>
        <childnode refid="24959" relation="include">
        </childnode>
      </node>
      <node id="24929">
        <label>lbann/utils/cudnn_wrapper.hpp</label>
        <link refid="cudnn__wrapper_8hpp"/>
        <childnode refid="24916" relation="include">
        </childnode>
        <childnode refid="24906" relation="include">
        </childnode>
        <childnode refid="24915" relation="include">
        </childnode>
        <childnode refid="24924" relation="include">
        </childnode>
      </node>
      <node id="25081">
        <label>lbann/callbacks/callback_dump_minibatch_sample_indices.hpp</label>
        <link refid="callback__dump__minibatch__sample__indices_8hpp"/>
        <childnode refid="24987" relation="include">
        </childnode>
        <childnode refid="25015" relation="include">
        </childnode>
      </node>
      <node id="25113">
        <label>lbann/objective_functions/layer_term.hpp</label>
        <link refid="layer__term_8hpp"/>
        <childnode refid="24944" relation="include">
        </childnode>
        <childnode refid="24998" relation="include">
        </childnode>
      </node>
      <node id="24935">
        <label>lbann/utils/timer.hpp</label>
        <link refid="timer_8hpp"/>
        <childnode refid="24936" relation="include">
        </childnode>
      </node>
      <node id="24917">
        <label>map</label>
      </node>
      <node id="25130">
        <label>google/protobuf/io/coded_stream.h</label>
      </node>
      <node id="25059">
        <label>compound_data_reader.hpp</label>
        <link refid="compound__data__reader_8hpp"/>
        <childnode refid="24947" relation="include">
        </childnode>
        <childnode refid="24987" relation="include">
        </childnode>
      </node>
      <node id="24977">
        <label>lbann/utils/cublas_wrapper.hpp</label>
        <link refid="cublas__wrapper_8hpp"/>
        <childnode refid="24906" relation="include">
        </childnode>
      </node>
      <node id="24954">
        <label>lbann/models/directed_acyclic_graph.hpp</label>
        <link refid="directed__acyclic__graph_8hpp"/>
        <childnode refid="24905" relation="include">
        </childnode>
        <childnode refid="24919" relation="include">
        </childnode>
      </node>
      <node id="24934">
        <label>unordered_set</label>
      </node>
      <node id="25005">
        <label>lbann/layers/regularizers/selu_dropout.hpp</label>
        <link refid="selu__dropout_8hpp"/>
        <childnode refid="25003" relation="include">
        </childnode>
      </node>
      <node id="25103">
        <label>lbann/objective_functions/loss_functions/cross_entropy_with_uncertainty.hpp</label>
        <link refid="cross__entropy__with__uncertainty_8hpp"/>
        <childnode refid="25100" relation="include">
        </childnode>
      </node>
      <node id="25120">
        <label>lbann/metrics/boolean_accuracy.hpp</label>
        <link refid="boolean__accuracy_8hpp"/>
        <childnode refid="24945" relation="include">
        </childnode>
      </node>
      <node id="25057">
        <label>lbann/data_readers/data_reader_numpy.hpp</label>
        <link refid="data__reader__numpy_8hpp"/>
        <childnode refid="24947" relation="include">
        </childnode>
        <childnode refid="25052" relation="include">
        </childnode>
      </node>
      <node id="25018">
        <label>lbann/layers/io/target/target_layer.hpp</label>
        <link refid="target__layer_8hpp"/>
        <childnode refid="25019" relation="include">
        </childnode>
        <childnode refid="24924" relation="include">
        </childnode>
        <childnode refid="24905" relation="include">
        </childnode>
        <childnode refid="24921" relation="include">
        </childnode>
        <childnode refid="24941" relation="include">
        </childnode>
        <childnode refid="24940" relation="include">
        </childnode>
        <childnode refid="24953" relation="include">
        </childnode>
      </node>
      <node id="24981">
        <label>omp.h</label>
      </node>
      <node id="24980">
        <label>lbann/layers/learning/base_convolution.hpp</label>
        <link refid="base__convolution_8hpp"/>
        <childnode refid="24916" relation="include">
        </childnode>
        <childnode refid="24981" relation="include">
        </childnode>
        <childnode refid="24975" relation="include">
        </childnode>
        <childnode refid="24919" relation="include">
        </childnode>
        <childnode refid="24931" relation="include">
        </childnode>
        <childnode refid="24976" relation="include">
        </childnode>
        <childnode refid="24929" relation="include">
        </childnode>
        <childnode refid="24924" relation="include">
        </childnode>
        <childnode refid="24948" relation="include">
        </childnode>
        <childnode refid="24935" relation="include">
        </childnode>
        <childnode refid="24982" relation="include">
        </childnode>
      </node>
      <node id="24979">
        <label>lbann/layers/learning/convolution.hpp</label>
        <link refid="convolution_8hpp"/>
        <childnode refid="24916" relation="include">
        </childnode>
        <childnode refid="24980" relation="include">
        </childnode>
        <childnode refid="24919" relation="include">
        </childnode>
        <childnode refid="24929" relation="include">
        </childnode>
        <childnode refid="24924" relation="include">
        </childnode>
        <childnode refid="24948" relation="include">
        </childnode>
        <childnode refid="24935" relation="include">
        </childnode>
      </node>
      <node id="24970">
        <label>lbann/layers/activations/softplus.hpp</label>
        <link refid="softplus_8hpp"/>
        <childnode refid="24959" relation="include">
        </childnode>
      </node>
      <node id="25030">
        <label>cv_subtractor.hpp</label>
        <link refid="cv__subtractor_8hpp"/>
        <childnode refid="25024" relation="include">
        </childnode>
        <childnode refid="24906" relation="include">
        </childnode>
      </node>
      <node id="24928">
        <label>exception</label>
      </node>
      <node id="24900">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/proto/init_image_data_readers.cpp</label>
        <link refid="init__image__data__readers_8cpp"/>
        <childnode refid="24901" relation="include">
        </childnode>
        <childnode refid="25130" relation="include">
        </childnode>
        <childnode refid="25131" relation="include">
        </childnode>
        <childnode refid="25132" relation="include">
        </childnode>
        <childnode refid="25039" relation="include">
        </childnode>
      </node>
      <node id="25032">
        <label>ostream</label>
      </node>
      <node id="24969">
        <label>lbann/layers/activations/softmax.hpp</label>
        <link refid="softmax_8hpp"/>
        <childnode refid="24959" relation="include">
        </childnode>
        <childnode refid="24919" relation="include">
        </childnode>
        <childnode refid="24939" relation="include">
        </childnode>
        <childnode refid="24948" relation="include">
        </childnode>
        <childnode refid="24905" relation="include">
        </childnode>
        <childnode refid="24953" relation="include">
        </childnode>
        <childnode refid="24921" relation="include">
        </childnode>
        <childnode refid="24951" relation="include">
        </childnode>
      </node>
      <node id="25086">
        <label>lbann/callbacks/callback_check_reconstruction_error.hpp</label>
        <link refid="callback__check__reconstruction__error_8hpp"/>
        <childnode refid="24934" relation="include">
        </childnode>
        <childnode refid="24946" relation="include">
        </childnode>
        <childnode refid="25015" relation="include">
        </childnode>
      </node>
      <node id="25115">
        <label>lbann/metrics/top_k_categorical_accuracy.hpp</label>
        <link refid="top__k__categorical__accuracy_8hpp"/>
        <childnode refid="24945" relation="include">
        </childnode>
      </node>
      <node id="25049">
        <label>lbann/data_readers/data_reader_mnist_siamese.hpp</label>
        <link refid="data__reader__mnist__siamese_8hpp"/>
        <childnode refid="25048" relation="include">
        </childnode>
        <childnode refid="25023" relation="include">
        </childnode>
        <childnode refid="24916" relation="include">
        </childnode>
        <childnode refid="24921" relation="include">
        </childnode>
        <childnode refid="24987" relation="include">
        </childnode>
        <childnode refid="24927" relation="include">
        </childnode>
      </node>
      <node id="24982">
        <label>lbann/utils/im2col.hpp</label>
        <link refid="im2col_8hpp"/>
        <childnode refid="24906" relation="include">
        </childnode>
      </node>
      <node id="24985">
        <label>lbann/layers/transform/transform.hpp</label>
        <link refid="transform_8hpp"/>
        <childnode refid="24919" relation="include">
        </childnode>
      </node>
      <node id="25020">
        <label>lbann/layers/io/target/reconstruction.hpp</label>
        <link refid="reconstruction_8hpp"/>
        <childnode refid="24919" relation="include">
        </childnode>
        <childnode refid="25019" relation="include">
        </childnode>
        <childnode refid="24905" relation="include">
        </childnode>
        <childnode refid="24921" relation="include">
        </childnode>
        <childnode refid="24948" relation="include">
        </childnode>
      </node>
      <node id="25046">
        <label>lbann/data_readers/data_reader_cifar10.hpp</label>
        <link refid="data__reader__cifar10_8hpp"/>
        <childnode refid="25022" relation="include">
        </childnode>
      </node>
      <node id="25119">
        <label>lbann/metrics/r2.hpp</label>
        <link refid="r2_8hpp"/>
        <childnode refid="24945" relation="include">
        </childnode>
      </node>
      <node id="24955">
        <label>lbann/models/recurrent.hpp</label>
        <link refid="recurrent_8hpp"/>
        <childnode refid="24954" relation="include">
        </childnode>
      </node>
      <node id="24998">
        <label>lbann/layers/transform/evaluation.hpp</label>
        <link refid="evaluation_8hpp"/>
        <childnode refid="24985" relation="include">
        </childnode>
      </node>
      <node id="25121">
        <label>lbann/metrics/boolean_false_positives.hpp</label>
        <link refid="boolean__false__positives_8hpp"/>
        <childnode refid="24945" relation="include">
        </childnode>
      </node>
      <node id="25088">
        <label>lbann/callbacks/callback_variable_minibatch.hpp</label>
        <link refid="callback__variable__minibatch_8hpp"/>
        <childnode refid="25015" relation="include">
        </childnode>
      </node>
      <node id="25097">
        <label>lbann/optimizers/rmsprop.hpp</label>
        <link refid="rmsprop_8hpp"/>
        <childnode refid="24922" relation="include">
        </childnode>
        <childnode refid="24940" relation="include">
        </childnode>
      </node>
      <node id="25060">
        <label>lbann/data_readers/data_reader_merge_features.hpp</label>
        <link refid="data__reader__merge__features_8hpp"/>
        <childnode refid="25059" relation="include">
        </childnode>
      </node>
      <node id="24971">
        <label>lbann/layers/activations/swish.hpp</label>
        <link refid="swish_8hpp"/>
        <childnode refid="24959" relation="include">
        </childnode>
      </node>
      <node id="24983">
        <label>lbann/layers/learning/deconvolution.hpp</label>
        <link refid="deconvolution_8hpp"/>
        <childnode refid="24916" relation="include">
        </childnode>
        <childnode refid="24980" relation="include">
        </childnode>
        <childnode refid="24919" relation="include">
        </childnode>
        <childnode refid="24929" relation="include">
        </childnode>
        <childnode refid="24924" relation="include">
        </childnode>
        <childnode refid="24948" relation="include">
        </childnode>
        <childnode refid="24935" relation="include">
        </childnode>
      </node>
      <node id="24949">
        <label>random</label>
      </node>
      <node id="25079">
        <label>lbann/callbacks/callback_dump_activations.hpp</label>
        <link refid="callback__dump__activations_8hpp"/>
        <childnode refid="24987" relation="include">
        </childnode>
        <childnode refid="25015" relation="include">
        </childnode>
      </node>
      <node id="25116">
        <label>lbann/metrics/mean_squared_error.hpp</label>
        <link refid="metrics_2mean__squared__error_8hpp"/>
        <childnode refid="24945" relation="include">
        </childnode>
      </node>
      <node id="24931">
        <label>lbann/weights/initializer.hpp</label>
        <link refid="initializer_8hpp"/>
        <childnode refid="24906" relation="include">
        </childnode>
        <childnode refid="24915" relation="include">
        </childnode>
        <childnode refid="24924" relation="include">
        </childnode>
        <childnode refid="24929" relation="include">
        </childnode>
      </node>
      <node id="25114">
        <label>lbann/metrics/categorical_accuracy.hpp</label>
        <link refid="categorical__accuracy_8hpp"/>
        <childnode refid="24945" relation="include">
        </childnode>
      </node>
      <node id="25043">
        <label>lbann/data_readers/data_reader_imagenet_patches.hpp</label>
        <link refid="data__reader__imagenet__patches_8hpp"/>
        <childnode refid="25022" relation="include">
        </childnode>
        <childnode refid="25044" relation="include">
        </childnode>
      </node>
      <node id="25041">
        <label>lbann/data_readers/data_reader_imagenet.hpp</label>
        <link refid="data__reader__imagenet_8hpp"/>
        <childnode refid="25022" relation="include">
        </childnode>
        <childnode refid="25023" relation="include">
        </childnode>
      </node>
      <node id="24941">
        <label>sys/types.h</label>
      </node>
      <node id="25015">
        <label>lbann/callbacks/callback.hpp</label>
        <link refid="callback_8hpp"/>
        <childnode refid="24906" relation="include">
        </childnode>
        <childnode refid="24920" relation="include">
        </childnode>
        <childnode refid="24905" relation="include">
        </childnode>
        <childnode refid="24919" relation="include">
        </childnode>
      </node>
      <node id="25074">
        <label>lbann/callbacks/callback_summary.hpp</label>
        <link refid="callback__summary_8hpp"/>
        <childnode refid="25015" relation="include">
        </childnode>
        <childnode refid="24920" relation="include">
        </childnode>
      </node>
      <node id="24937">
        <label>lbann/utils/graph.hpp</label>
        <link refid="graph_8hpp"/>
        <childnode refid="24927" relation="include">
        </childnode>
        <childnode refid="24916" relation="include">
        </childnode>
        <childnode refid="24938" relation="include">
        </childnode>
        <childnode refid="24917" relation="include">
        </childnode>
      </node>
      <node id="25028">
        <label>typeinfo</label>
      </node>
      <node id="25002">
        <label>lbann/layers/regularizers/local_response_normalization.hpp</label>
        <link refid="local__response__normalization_8hpp"/>
        <childnode refid="24916" relation="include">
        </childnode>
        <childnode refid="25003" relation="include">
        </childnode>
        <childnode refid="24929" relation="include">
        </childnode>
        <childnode refid="24924" relation="include">
        </childnode>
      </node>
      <node id="24911">
        <label>cstdio</label>
      </node>
      <node id="25035">
        <label>cv_decolorizer.hpp</label>
        <link refid="cv__decolorizer_8hpp"/>
        <childnode refid="24914" relation="include">
        </childnode>
        <childnode refid="25024" relation="include">
        </childnode>
      </node>
      <node id="25012">
        <label>lbann/io/data_buffers/partitioned_io_buffer.hpp</label>
        <link refid="partitioned__io__buffer_8hpp"/>
        <childnode refid="25011" relation="include">
        </childnode>
      </node>
      <node id="24925">
        <label>lbann/utils/stack_trace.hpp</label>
        <link refid="stack__trace_8hpp"/>
        <childnode refid="24926" relation="include">
        </childnode>
        <childnode refid="24921" relation="include">
        </childnode>
      </node>
      <node id="25111">
        <label>lbann/objective_functions/weight_regularization/group_lasso.hpp</label>
        <link refid="group__lasso_8hpp"/>
        <childnode refid="24944" relation="include">
        </childnode>
      </node>
      <node id="24913">
        <label>cxxabi.h</label>
      </node>
      <node id="24990">
        <label>lbann/layers/transform/sum.hpp</label>
        <link refid="sum_8hpp"/>
        <childnode refid="24916" relation="include">
        </childnode>
        <childnode refid="24985" relation="include">
        </childnode>
        <childnode refid="24924" relation="include">
        </childnode>
      </node>
      <node id="24924">
        <label>lbann/utils/exception.hpp</label>
        <link refid="exception_8hpp"/>
        <childnode refid="24906" relation="include">
        </childnode>
        <childnode refid="24915" relation="include">
        </childnode>
        <childnode refid="24925" relation="include">
        </childnode>
        <childnode refid="24927" relation="include">
        </childnode>
        <childnode refid="24928" relation="include">
        </childnode>
      </node>
      <node id="24961">
        <label>lbann/layers/activations/elu.hpp</label>
        <link refid="elu_8hpp"/>
        <childnode refid="24959" relation="include">
        </childnode>
      </node>
      <node id="25053">
        <label>lbann/data_readers/data_reader_synthetic.hpp</label>
        <link refid="data__reader__synthetic_8hpp"/>
        <childnode refid="24947" relation="include">
        </childnode>
      </node>
      <node id="25021">
        <label>lbann/data_readers/data_reader_imagenet_org.hpp</label>
        <link refid="data__reader__imagenet__org_8hpp"/>
        <childnode refid="25022" relation="include">
        </childnode>
        <childnode refid="24950" relation="include">
        </childnode>
      </node>
      <node id="25054">
        <label>lbann/data_readers/data_reader_jag.hpp</label>
        <link refid="data__reader__jag_8hpp"/>
        <childnode refid="25052" relation="include">
        </childnode>
        <childnode refid="24921" relation="include">
        </childnode>
        <childnode refid="24916" relation="include">
        </childnode>
        <childnode refid="24906" relation="include">
        </childnode>
        <childnode refid="25025" relation="include">
        </childnode>
        <childnode refid="24947" relation="include">
        </childnode>
      </node>
      <node id="25048">
        <label>lbann/data_readers/data_reader_multi_images.hpp</label>
        <link refid="data__reader__multi__images_8hpp"/>
        <childnode refid="25041" relation="include">
        </childnode>
        <childnode refid="25023" relation="include">
        </childnode>
        <childnode refid="24916" relation="include">
        </childnode>
        <childnode refid="24921" relation="include">
        </childnode>
        <childnode refid="24987" relation="include">
        </childnode>
        <childnode refid="24927" relation="include">
        </childnode>
      </node>
      <node id="24953">
        <label>unistd.h</label>
      </node>
      <node id="24959">
        <label>lbann/layers/activations/activation.hpp</label>
        <link refid="activation_8hpp"/>
        <childnode refid="24919" relation="include">
        </childnode>
        <childnode refid="24924" relation="include">
        </childnode>
      </node>
      <node id="25131">
        <label>google/protobuf/io/zero_copy_stream_impl.h</label>
      </node>
      <node id="24916">
        <label>vector</label>
      </node>
      <node id="24996">
        <label>lbann/layers/transform/hadamard.hpp</label>
        <link refid="hadamard_8hpp"/>
        <childnode refid="24916" relation="include">
        </childnode>
        <childnode refid="24985" relation="include">
        </childnode>
        <childnode refid="24924" relation="include">
        </childnode>
      </node>
      <node id="24989">
        <label>lbann/layers/transform/split.hpp</label>
        <link refid="split_8hpp"/>
        <childnode refid="24916" relation="include">
        </childnode>
        <childnode refid="24985" relation="include">
        </childnode>
        <childnode refid="24924" relation="include">
        </childnode>
        <childnode refid="24977" relation="include">
        </childnode>
      </node>
      <node id="24915">
        <label>lbann/comm.hpp</label>
        <link refid="comm_8hpp"/>
        <childnode refid="24916" relation="include">
        </childnode>
        <childnode refid="24917" relation="include">
        </childnode>
        <childnode refid="24918" relation="include">
        </childnode>
        <childnode refid="24906" relation="include">
        </childnode>
      </node>
      <node id="24903">
        <label>lbann/lbann.hpp</label>
        <link refid="lbann_8hpp"/>
        <childnode refid="24904" relation="include">
        </childnode>
        <childnode refid="24954" relation="include">
        </childnode>
        <childnode refid="24955" relation="include">
        </childnode>
        <childnode refid="24956" relation="include">
        </childnode>
        <childnode refid="24957" relation="include">
        </childnode>
        <childnode refid="24958" relation="include">
        </childnode>
        <childnode refid="24960" relation="include">
        </childnode>
        <childnode refid="24961" relation="include">
        </childnode>
        <childnode refid="24962" relation="include">
        </childnode>
        <childnode refid="24963" relation="include">
        </childnode>
        <childnode refid="24964" relation="include">
        </childnode>
        <childnode refid="24965" relation="include">
        </childnode>
        <childnode refid="24966" relation="include">
        </childnode>
        <childnode refid="24967" relation="include">
        </childnode>
        <childnode refid="24968" relation="include">
        </childnode>
        <childnode refid="24969" relation="include">
        </childnode>
        <childnode refid="24970" relation="include">
        </childnode>
        <childnode refid="24971" relation="include">
        </childnode>
        <childnode refid="24972" relation="include">
        </childnode>
        <childnode refid="24973" relation="include">
        </childnode>
        <childnode refid="24974" relation="include">
        </childnode>
        <childnode refid="24979" relation="include">
        </childnode>
        <childnode refid="24983" relation="include">
        </childnode>
        <childnode refid="24984" relation="include">
        </childnode>
        <childnode refid="24986" relation="include">
        </childnode>
        <childnode refid="24988" relation="include">
        </childnode>
        <childnode refid="24989" relation="include">
        </childnode>
        <childnode refid="24990" relation="include">
        </childnode>
        <childnode refid="24991" relation="include">
        </childnode>
        <childnode refid="24992" relation="include">
        </childnode>
        <childnode refid="24993" relation="include">
        </childnode>
        <childnode refid="24994" relation="include">
        </childnode>
        <childnode refid="24995" relation="include">
        </childnode>
        <childnode refid="24996" relation="include">
        </childnode>
        <childnode refid="24997" relation="include">
        </childnode>
        <childnode refid="24998" relation="include">
        </childnode>
        <childnode refid="24999" relation="include">
        </childnode>
        <childnode refid="25000" relation="include">
        </childnode>
        <childnode refid="25001" relation="include">
        </childnode>
        <childnode refid="25002" relation="include">
        </childnode>
        <childnode refid="25004" relation="include">
        </childnode>
        <childnode refid="25005" relation="include">
        </childnode>
        <childnode refid="25006" relation="include">
        </childnode>
        <childnode refid="25007" relation="include">
        </childnode>
        <childnode refid="25018" relation="include">
        </childnode>
        <childnode refid="25020" relation="include">
        </childnode>
        <childnode refid="25021" relation="include">
        </childnode>
        <childnode refid="25041" relation="include">
        </childnode>
        <childnode refid="25042" relation="include">
        </childnode>
        <childnode refid="25043" relation="include">
        </childnode>
        <childnode refid="25046" relation="include">
        </childnode>
        <childnode refid="25047" relation="include">
        </childnode>
        <childnode refid="25048" relation="include">
        </childnode>
        <childnode refid="25049" relation="include">
        </childnode>
        <childnode refid="25050" relation="include">
        </childnode>
        <childnode refid="25053" relation="include">
        </childnode>
        <childnode refid="25054" relation="include">
        </childnode>
        <childnode refid="25055" relation="include">
        </childnode>
        <childnode refid="25057" relation="include">
        </childnode>
        <childnode refid="25056" relation="include">
        </childnode>
        <childnode refid="25058" relation="include">
        </childnode>
        <childnode refid="25060" relation="include">
        </childnode>
        <childnode refid="25061" relation="include">
        </childnode>
        <childnode refid="25062" relation="include">
        </childnode>
        <childnode refid="25063" relation="include">
        </childnode>
        <childnode refid="25064" relation="include">
        </childnode>
        <childnode refid="25065" relation="include">
        </childnode>
        <childnode refid="25067" relation="include">
        </childnode>
        <childnode refid="25068" relation="include">
        </childnode>
        <childnode refid="25069" relation="include">
        </childnode>
        <childnode refid="25070" relation="include">
        </childnode>
        <childnode refid="25071" relation="include">
        </childnode>
        <childnode refid="25072" relation="include">
        </childnode>
        <childnode refid="25073" relation="include">
        </childnode>
        <childnode refid="25074" relation="include">
        </childnode>
        <childnode refid="25075" relation="include">
        </childnode>
        <childnode refid="25076" relation="include">
        </childnode>
        <childnode refid="25077" relation="include">
        </childnode>
        <childnode refid="25014" relation="include">
        </childnode>
        <childnode refid="25078" relation="include">
        </childnode>
        <childnode refid="25079" relation="include">
        </childnode>
        <childnode refid="25080" relation="include">
        </childnode>
        <childnode refid="25081" relation="include">
        </childnode>
        <childnode refid="25082" relation="include">
        </childnode>
        <childnode refid="25083" relation="include">
        </childnode>
        <childnode refid="25084" relation="include">
        </childnode>
        <childnode refid="25085" relation="include">
        </childnode>
        <childnode refid="25086" relation="include">
        </childnode>
        <childnode refid="25087" relation="include">
        </childnode>
        <childnode refid="25088" relation="include">
        </childnode>
        <childnode refid="25089" relation="include">
        </childnode>
        <childnode refid="25090" relation="include">
        </childnode>
        <childnode refid="25091" relation="include">
        </childnode>
        <childnode refid="25092" relation="include">
        </childnode>
        <childnode refid="24930" relation="include">
        </childnode>
        <childnode refid="24931" relation="include">
        </childnode>
        <childnode refid="24976" relation="include">
        </childnode>
        <childnode refid="25094" relation="include">
        </childnode>
        <childnode refid="25095" relation="include">
        </childnode>
        <childnode refid="25096" relation="include">
        </childnode>
        <childnode refid="25097" relation="include">
        </childnode>
        <childnode refid="25098" relation="include">
        </childnode>
        <childnode refid="24943" relation="include">
        </childnode>
        <childnode refid="25099" relation="include">
        </childnode>
        <childnode refid="25101" relation="include">
        </childnode>
        <childnode refid="25102" relation="include">
        </childnode>
        <childnode refid="25103" relation="include">
        </childnode>
        <childnode refid="25104" relation="include">
        </childnode>
        <childnode refid="25105" relation="include">
        </childnode>
        <childnode refid="25106" relation="include">
        </childnode>
        <childnode refid="25107" relation="include">
        </childnode>
        <childnode refid="25108" relation="include">
        </childnode>
        <childnode refid="25109" relation="include">
        </childnode>
        <childnode refid="25110" relation="include">
        </childnode>
        <childnode refid="25111" relation="include">
        </childnode>
        <childnode refid="25112" relation="include">
        </childnode>
        <childnode refid="25113" relation="include">
        </childnode>
        <childnode refid="25114" relation="include">
        </childnode>
        <childnode refid="25115" relation="include">
        </childnode>
        <childnode refid="25116" relation="include">
        </childnode>
        <childnode refid="25117" relation="include">
        </childnode>
        <childnode refid="25118" relation="include">
        </childnode>
        <childnode refid="25119" relation="include">
        </childnode>
        <childnode refid="25120" relation="include">
        </childnode>
        <childnode refid="25121" relation="include">
        </childnode>
        <childnode refid="25122" relation="include">
        </childnode>
        <childnode refid="24924" relation="include">
        </childnode>
        <childnode refid="24920" relation="include">
        </childnode>
        <childnode refid="25123" relation="include">
        </childnode>
        <childnode refid="25124" relation="include">
        </childnode>
        <childnode refid="25126" relation="include">
        </childnode>
        <childnode refid="24939" relation="include">
        </childnode>
        <childnode refid="24932" relation="include">
        </childnode>
        <childnode refid="24923" relation="include">
        </childnode>
        <childnode refid="25127" relation="include">
        </childnode>
      </node>
      <node id="25006">
        <label>lbann/layers/regularizers/batch_normalization.hpp</label>
        <link refid="batch__normalization_8hpp"/>
        <childnode refid="25003" relation="include">
        </childnode>
      </node>
      <node id="25101">
        <label>lbann/objective_functions/loss_functions/mean_squared_error.hpp</label>
        <link refid="objective__functions_2loss__functions_2mean__squared__error_8hpp"/>
        <childnode refid="25100" relation="include">
        </childnode>
      </node>
      <node id="24972">
        <label>lbann/layers/activations/tanh.hpp</label>
        <link refid="tanh_8hpp"/>
        <childnode refid="24959" relation="include">
        </childnode>
      </node>
      <node id="24974">
        <label>lbann/layers/learning/fully_connected.hpp</label>
        <link refid="fully__connected_8hpp"/>
        <childnode refid="24975" relation="include">
        </childnode>
        <childnode refid="24959" relation="include">
        </childnode>
        <childnode refid="24948" relation="include">
        </childnode>
        <childnode refid="24929" relation="include">
        </childnode>
        <childnode refid="24905" relation="include">
        </childnode>
        <childnode refid="24931" relation="include">
        </childnode>
        <childnode refid="24976" relation="include">
        </childnode>
        <childnode refid="24977" relation="include">
        </childnode>
        <childnode refid="24921" relation="include">
        </childnode>
        <childnode refid="24978" relation="include">
        </childnode>
      </node>
      <node id="24999">
        <label>lbann/layers/transform/gaussian.hpp</label>
        <link refid="gaussian_8hpp"/>
        <childnode refid="24985" relation="include">
        </childnode>
        <childnode refid="24948" relation="include">
        </childnode>
      </node>
      <node id="24943">
        <label>lbann/objective_functions/objective_function.hpp</label>
        <link refid="objective__function_8hpp"/>
        <childnode refid="24944" relation="include">
        </childnode>
        <childnode refid="24945" relation="include">
        </childnode>
      </node>
      <node id="24987">
        <label>utility</label>
      </node>
      <node id="24939">
        <label>lbann/io/file_io.hpp</label>
        <link refid="file__io_8hpp"/>
        <childnode refid="24940" relation="include">
        </childnode>
        <childnode refid="24941" relation="include">
        </childnode>
        <childnode refid="24942" relation="include">
        </childnode>
      </node>
      <node id="25107">
        <label>lbann/objective_functions/loss_functions/poisson_negloglike.hpp</label>
        <link refid="poisson__negloglike_8hpp"/>
        <childnode refid="25100" relation="include">
        </childnode>
      </node>
      <node id="24901">
        <label>lbann/proto/init_image_data_readers.hpp</label>
        <link refid="init__image__data__readers_8hpp"/>
        <childnode refid="24902" relation="include">
        </childnode>
        <childnode refid="24915" relation="include">
        </childnode>
      </node>
      <node id="24978">
        <label>sstream</label>
      </node>
      <node id="24973">
        <label>lbann/layers/activations/power.hpp</label>
        <link refid="power_8hpp"/>
        <childnode refid="24959" relation="include">
        </childnode>
      </node>
      <node id="25058">
        <label>lbann/data_readers/data_reader_merge_samples.hpp</label>
        <link refid="data__reader__merge__samples_8hpp"/>
        <childnode refid="25059" relation="include">
        </childnode>
      </node>
      <node id="25000">
        <label>lbann/layers/transform/bernoulli.hpp</label>
        <link refid="bernoulli_8hpp"/>
        <childnode refid="24985" relation="include">
        </childnode>
        <childnode refid="24948" relation="include">
        </childnode>
      </node>
      <node id="25096">
        <label>lbann/optimizers/hypergradient_adam.hpp</label>
        <link refid="hypergradient__adam_8hpp"/>
        <childnode refid="24922" relation="include">
        </childnode>
      </node>
      <node id="24991">
        <label>lbann/layers/transform/slice.hpp</label>
        <link refid="slice_8hpp"/>
        <childnode refid="24985" relation="include">
        </childnode>
        <childnode refid="24924" relation="include">
        </childnode>
        <childnode refid="24977" relation="include">
        </childnode>
      </node>
      <node id="25067">
        <label>lbann/callbacks/callback_check_init.hpp</label>
        <link refid="callback__check__init_8hpp"/>
        <childnode refid="25015" relation="include">
        </childnode>
      </node>
      <node id="24933">
        <label>lbann.pb.h</label>
      </node>
      <node id="25076">
        <label>lbann/callbacks/callback_debug.hpp</label>
        <link refid="callback__debug_8hpp"/>
        <childnode refid="24936" relation="include">
        </childnode>
        <childnode refid="24916" relation="include">
        </childnode>
        <childnode refid="25015" relation="include">
        </childnode>
      </node>
      <node id="25055">
        <label>lbann/data_readers/data_reader_nci.hpp</label>
        <link refid="data__reader__nci_8hpp"/>
        <childnode refid="25056" relation="include">
        </childnode>
      </node>
      <node id="25062">
        <label>lbann/data_readers/data_reader_pilot2_molecular.hpp</label>
        <link refid="data__reader__pilot2__molecular_8hpp"/>
        <childnode refid="24947" relation="include">
        </childnode>
        <childnode refid="25052" relation="include">
        </childnode>
      </node>
      <node id="24910">
        <label>cstdlib</label>
      </node>
      <node id="25085">
        <label>lbann/callbacks/profiler.hpp</label>
        <link refid="profiler_8hpp"/>
        <childnode refid="25015" relation="include">
        </childnode>
      </node>
      <node id="25070">
        <label>lbann/callbacks/callback_check_dataset.hpp</label>
        <link refid="callback__check__dataset_8hpp"/>
        <childnode refid="24938" relation="include">
        </childnode>
        <childnode refid="25015" relation="include">
        </childnode>
      </node>
      <node id="25008">
        <label>lbann/layers/io/input/generic_input_layer.hpp</label>
        <link refid="generic__input__layer_8hpp"/>
        <childnode refid="25009" relation="include">
        </childnode>
        <childnode refid="25011" relation="include">
        </childnode>
        <childnode refid="25012" relation="include">
        </childnode>
        <childnode refid="25013" relation="include">
        </childnode>
        <childnode refid="24905" relation="include">
        </childnode>
        <childnode refid="25014" relation="include">
        </childnode>
      </node>
      <node id="25025">
        <label>opencv.hpp</label>
        <link refid="opencv_8hpp"/>
        <childnode refid="24914" relation="include">
        </childnode>
      </node>
      <node id="25082">
        <label>lbann/callbacks/callback_early_stopping.hpp</label>
        <link refid="callback__early__stopping_8hpp"/>
        <childnode refid="24934" relation="include">
        </childnode>
        <childnode refid="24946" relation="include">
        </childnode>
        <childnode refid="25015" relation="include">
        </childnode>
      </node>
      <node id="24927">
        <label>iostream</label>
      </node>
      <node id="24967">
        <label>lbann/layers/activations/sigmoid.hpp</label>
        <link refid="sigmoid_8hpp"/>
        <childnode refid="24959" relation="include">
        </childnode>
        <childnode refid="24929" relation="include">
        </childnode>
      </node>
      <node id="24957">
        <label>lbann/models/siamese.hpp</label>
        <link refid="siamese_8hpp"/>
        <childnode refid="24954" relation="include">
        </childnode>
      </node>
      <node id="25056">
        <label>data_reader_csv.hpp</label>
        <link refid="data__reader__csv_8hpp"/>
        <childnode refid="24947" relation="include">
        </childnode>
        <childnode refid="24950" relation="include">
        </childnode>
        <childnode refid="24946" relation="include">
        </childnode>
      </node>
      <node id="25044">
        <label>cv_process_patches.hpp</label>
        <link refid="cv__process__patches_8hpp"/>
        <childnode refid="25023" relation="include">
        </childnode>
        <childnode refid="25045" relation="include">
        </childnode>
        <childnode refid="25040" relation="include">
        </childnode>
      </node>
      <node id="24922">
        <label>lbann/optimizers/optimizer.hpp</label>
        <link refid="optimizer_8hpp"/>
        <childnode refid="24923" relation="include">
        </childnode>
        <childnode refid="24906" relation="include">
        </childnode>
        <childnode refid="24915" relation="include">
        </childnode>
        <childnode refid="24924" relation="include">
        </childnode>
        <childnode refid="24929" relation="include">
        </childnode>
        <childnode refid="24930" relation="include">
        </childnode>
        <childnode refid="24921" relation="include">
        </childnode>
        <childnode refid="24934" relation="include">
        </childnode>
      </node>
      <node id="24946">
        <label>unordered_map</label>
      </node>
      <node id="25027">
        <label>cv_normalizer.hpp</label>
        <link refid="cv__normalizer_8hpp"/>
        <childnode refid="25028" relation="include">
        </childnode>
        <childnode refid="25024" relation="include">
        </childnode>
        <childnode refid="24906" relation="include">
        </childnode>
        <childnode refid="25029" relation="include">
        </childnode>
      </node>
      <node id="24948">
        <label>lbann/utils/random.hpp</label>
        <link refid="random_8hpp"/>
        <childnode refid="24906" relation="include">
        </childnode>
        <childnode refid="24915" relation="include">
        </childnode>
        <childnode refid="24932" relation="include">
        </childnode>
        <childnode refid="24949" relation="include">
        </childnode>
      </node>
      <node id="24988">
        <label>lbann/layers/transform/unpooling.hpp</label>
        <link refid="unpooling_8hpp"/>
        <childnode refid="24916" relation="include">
        </childnode>
        <childnode refid="24986" relation="include">
        </childnode>
        <childnode refid="24929" relation="include">
        </childnode>
        <childnode refid="24924" relation="include">
        </childnode>
        <childnode refid="24982" relation="include">
        </childnode>
      </node>
      <node id="25024">
        <label>cv_transform.hpp</label>
        <link refid="cv__transform_8hpp"/>
        <childnode refid="25025" relation="include">
        </childnode>
        <childnode refid="25026" relation="include">
        </childnode>
      </node>
      <node id="25089">
        <label>lbann/callbacks/callback_gradient_check.hpp</label>
        <link refid="callback__gradient__check_8hpp"/>
        <childnode refid="25015" relation="include">
        </childnode>
      </node>
      <node id="25095">
        <label>lbann/optimizers/adam.hpp</label>
        <link refid="adam_8hpp"/>
        <childnode refid="24922" relation="include">
        </childnode>
      </node>
      <node id="25122">
        <label>lbann/metrics/boolean_false_negatives.hpp</label>
        <link refid="boolean__false__negatives_8hpp"/>
        <childnode refid="24945" relation="include">
        </childnode>
      </node>
      <node id="24919">
        <label>lbann/layers/layer.hpp</label>
        <link refid="layer_8hpp"/>
        <childnode refid="24906" relation="include">
        </childnode>
        <childnode refid="24915" relation="include">
        </childnode>
        <childnode refid="24920" relation="include">
        </childnode>
        <childnode refid="24922" relation="include">
        </childnode>
        <childnode refid="24924" relation="include">
        </childnode>
        <childnode refid="24929" relation="include">
        </childnode>
        <childnode refid="24935" relation="include">
        </childnode>
        <childnode refid="24932" relation="include">
        </childnode>
        <childnode refid="24933" relation="include">
        </childnode>
        <childnode refid="24921" relation="include">
        </childnode>
        <childnode refid="24916" relation="include">
        </childnode>
      </node>
      <node id="25099">
        <label>lbann/objective_functions/loss_functions/cross_entropy.hpp</label>
        <link refid="cross__entropy_8hpp"/>
        <childnode refid="25100" relation="include">
        </childnode>
      </node>
      <node id="24993">
        <label>lbann/layers/transform/constant.hpp</label>
        <link refid="constant_8hpp"/>
        <childnode refid="24985" relation="include">
        </childnode>
      </node>
      <node id="24956">
        <label>lbann/models/greedy_layerwise_autoencoder.hpp</label>
        <link refid="greedy__layerwise__autoencoder_8hpp"/>
        <childnode refid="24904" relation="include">
        </childnode>
      </node>
      <node id="25031">
        <label>cv_augmenter.hpp</label>
        <link refid="cv__augmenter_8hpp"/>
        <childnode refid="25024" relation="include">
        </childnode>
        <childnode refid="24927" relation="include">
        </childnode>
        <childnode refid="25032" relation="include">
        </childnode>
        <childnode refid="25033" relation="include">
        </childnode>
        <childnode refid="24921" relation="include">
        </childnode>
      </node>
      <node id="24936">
        <label>chrono</label>
      </node>
      <node id="25066">
        <label>lbann/data_store/data_store_image.hpp</label>
        <link refid="data__store__image_8hpp"/>
        <childnode refid="25064" relation="include">
        </childnode>
        <childnode refid="24946" relation="include">
        </childnode>
      </node>
      <node id="24994">
        <label>lbann/layers/transform/dummy.hpp</label>
        <link refid="dummy_8hpp"/>
        <childnode refid="24985" relation="include">
        </childnode>
      </node>
      <node id="25087">
        <label>lbann/callbacks/callback_hang.hpp</label>
        <link refid="callback__hang_8hpp"/>
        <childnode refid="25015" relation="include">
        </childnode>
      </node>
      <node id="24944">
        <label>lbann/objective_functions/objective_function_term.hpp</label>
        <link refid="objective__function__term_8hpp"/>
        <childnode refid="24906" relation="include">
        </childnode>
        <childnode refid="24919" relation="include">
        </childnode>
        <childnode refid="24930" relation="include">
        </childnode>
      </node>
      <node id="24926">
        <label>csignal</label>
      </node>
      <node id="25036">
        <label>cv_cropper.hpp</label>
        <link refid="cv__cropper_8hpp"/>
        <childnode refid="25024" relation="include">
        </childnode>
        <childnode refid="24987" relation="include">
        </childnode>
        <childnode refid="25032" relation="include">
        </childnode>
      </node>
      <node id="25010">
        <label>lbann/utils/dataset.hpp</label>
        <link refid="dataset_8hpp"/>
        <childnode refid="24947" relation="include">
        </childnode>
      </node>
      <node id="25123">
        <label>lbann/utils/options.hpp</label>
        <link refid="options_8hpp"/>
        <childnode refid="24927" relation="include">
        </childnode>
        <childnode refid="24917" relation="include">
        </childnode>
        <childnode refid="24916" relation="include">
        </childnode>
        <childnode refid="24921" relation="include">
        </childnode>
      </node>
      <node id="24930">
        <label>lbann/weights/weights.hpp</label>
        <link refid="weights_8hpp"/>
        <childnode refid="24921" relation="include">
        </childnode>
        <childnode refid="24906" relation="include">
        </childnode>
        <childnode refid="24915" relation="include">
        </childnode>
        <childnode refid="24924" relation="include">
        </childnode>
        <childnode refid="24929" relation="include">
        </childnode>
        <childnode refid="24931" relation="include">
        </childnode>
        <childnode refid="24932" relation="include">
        </childnode>
        <childnode refid="24933" relation="include">
        </childnode>
      </node>
      <node id="25118">
        <label>lbann/metrics/pearson_correlation.hpp</label>
        <link refid="pearson__correlation_8hpp"/>
        <childnode refid="24945" relation="include">
        </childnode>
      </node>
      <node id="24947">
        <label>lbann/data_readers/data_reader.hpp</label>
        <link refid="data__reader_8hpp"/>
        <childnode refid="24906" relation="include">
        </childnode>
        <childnode refid="24948" relation="include">
        </childnode>
        <childnode refid="24924" relation="include">
        </childnode>
        <childnode refid="24915" relation="include">
        </childnode>
        <childnode refid="24939" relation="include">
        </childnode>
        <childnode refid="24932" relation="include">
        </childnode>
        <childnode refid="24950" relation="include">
        </childnode>
        <childnode refid="24951" relation="include">
        </childnode>
        <childnode refid="24952" relation="include">
        </childnode>
        <childnode refid="24921" relation="include">
        </childnode>
        <childnode refid="24916" relation="include">
        </childnode>
        <childnode refid="24953" relation="include">
        </childnode>
      </node>
      <node id="25047">
        <label>lbann/data_readers/data_reader_mnist.hpp</label>
        <link refid="data__reader__mnist_8hpp"/>
        <childnode refid="25022" relation="include">
        </childnode>
        <childnode refid="24950" relation="include">
        </childnode>
      </node>
      <node id="24914">
        <label>lbann_config.hpp</label>
      </node>
      <node id="25038">
        <label>type_traits</label>
      </node>
      <node id="25093">
        <label>google/protobuf/message.h</label>
      </node>
      <node id="24938">
        <label>set</label>
      </node>
      <node id="25042">
        <label>lbann/data_readers/data_reader_imagenet_single.hpp</label>
        <link refid="data__reader__imagenet__single_8hpp"/>
        <childnode refid="25041" relation="include">
        </childnode>
        <childnode refid="24916" relation="include">
        </childnode>
      </node>
      <node id="25106">
        <label>lbann/objective_functions/loss_functions/mean_absolute_error.hpp</label>
        <link refid="mean__absolute__error_8hpp"/>
        <childnode refid="25100" relation="include">
        </childnode>
      </node>
      <node id="24905">
        <label>lbann/models/model.hpp</label>
        <link refid="model_8hpp"/>
        <childnode refid="24906" relation="include">
        </childnode>
        <childnode refid="24915" relation="include">
        </childnode>
        <childnode refid="24919" relation="include">
        </childnode>
        <childnode refid="24920" relation="include">
        </childnode>
        <childnode refid="24937" relation="include">
        </childnode>
        <childnode refid="24939" relation="include">
        </childnode>
        <childnode refid="24932" relation="include">
        </childnode>
        <childnode refid="24943" relation="include">
        </childnode>
        <childnode refid="24945" relation="include">
        </childnode>
        <childnode refid="24930" relation="include">
        </childnode>
        <childnode refid="24922" relation="include">
        </childnode>
        <childnode refid="24933" relation="include">
        </childnode>
        <childnode refid="24916" relation="include">
        </childnode>
        <childnode refid="24921" relation="include">
        </childnode>
        <childnode refid="24946" relation="include">
        </childnode>
      </node>
      <node id="25083">
        <label>lbann/callbacks/callback_ltfb.hpp</label>
        <link refid="callback__ltfb_8hpp"/>
        <childnode refid="25015" relation="include">
        </childnode>
      </node>
      <node id="25084">
        <label>lbann/callbacks/callback_save_images.hpp</label>
        <link refid="callback__save__images_8hpp"/>
        <childnode refid="24987" relation="include">
        </childnode>
        <childnode refid="25015" relation="include">
        </childnode>
        <childnode refid="24947" relation="include">
        </childnode>
      </node>
      <node id="24923">
        <label>lbann/utils/compiler_control.hpp</label>
        <link refid="compiler__control_8hpp"/>
      </node>
      <node id="24975">
        <label>lbann/layers/learning/learning.hpp</label>
        <link refid="learning_8hpp"/>
        <childnode refid="24919" relation="include">
        </childnode>
      </node>
      <node id="24952">
        <label>algorithm</label>
      </node>
      <node id="24909">
        <label>lbann/utils/cyg_profile.hpp</label>
        <link refid="cyg__profile_8hpp"/>
        <childnode refid="24910" relation="include">
        </childnode>
        <childnode refid="24911" relation="include">
        </childnode>
        <childnode refid="24912" relation="include">
        </childnode>
        <childnode refid="24913" relation="include">
        </childnode>
      </node>
      <node id="25052">
        <label>cnpy.h</label>
      </node>
      <node id="25001">
        <label>lbann/layers/transform/uniform.hpp</label>
        <link refid="uniform_8hpp"/>
        <childnode refid="24985" relation="include">
        </childnode>
        <childnode refid="24948" relation="include">
        </childnode>
      </node>
      <node id="24904">
        <label>lbann/models/sequential.hpp</label>
        <link refid="sequential_8hpp"/>
        <childnode refid="24905" relation="include">
        </childnode>
        <childnode refid="24919" relation="include">
        </childnode>
        <childnode refid="24947" relation="include">
        </childnode>
        <childnode refid="24932" relation="include">
        </childnode>
        <childnode refid="24916" relation="include">
        </childnode>
        <childnode refid="24921" relation="include">
        </childnode>
      </node>
      <node id="25077">
        <label>lbann/callbacks/callback_debug_io.hpp</label>
        <link refid="callback__debug__io_8hpp"/>
        <childnode refid="24936" relation="include">
        </childnode>
        <childnode refid="24916" relation="include">
        </childnode>
        <childnode refid="25015" relation="include">
        </childnode>
        <childnode refid="25007" relation="include">
        </childnode>
      </node>
      <node id="24958">
        <label>lbann/layers/activations/atan.hpp</label>
        <link refid="atan_8hpp"/>
        <childnode refid="24959" relation="include">
        </childnode>
      </node>
      <node id="25033">
        <label>cstring</label>
      </node>
      <node id="24908">
        <label>lbann/Elemental_extensions.hpp</label>
        <link refid="Elemental__extensions_8hpp"/>
        <childnode refid="24907" relation="include">
        </childnode>
      </node>
      <node id="25019">
        <label>lbann/layers/io/target/generic_target_layer.hpp</label>
        <link refid="generic__target__layer_8hpp"/>
        <childnode refid="25009" relation="include">
        </childnode>
        <childnode refid="25008" relation="include">
        </childnode>
        <childnode refid="25012" relation="include">
        </childnode>
        <childnode refid="25013" relation="include">
        </childnode>
        <childnode refid="24924" relation="include">
        </childnode>
        <childnode refid="24905" relation="include">
        </childnode>
        <childnode refid="24921" relation="include">
        </childnode>
        <childnode refid="24941" relation="include">
        </childnode>
        <childnode refid="24940" relation="include">
        </childnode>
        <childnode refid="24953" relation="include">
        </childnode>
      </node>
      <node id="25112">
        <label>lbann/objective_functions/kl_divergence.hpp</label>
        <link refid="kl__divergence_8hpp"/>
        <childnode refid="24944" relation="include">
        </childnode>
        <childnode refid="25018" relation="include">
        </childnode>
      </node>
      <node id="25117">
        <label>lbann/metrics/mean_absolute_deviation.hpp</label>
        <link refid="metrics_2mean__absolute__deviation_8hpp"/>
        <childnode refid="24945" relation="include">
        </childnode>
      </node>
      <node id="24964">
        <label>lbann/layers/activations/leaky_relu.hpp</label>
        <link refid="leaky__relu_8hpp"/>
        <childnode refid="24959" relation="include">
        </childnode>
      </node>
      <node id="25061">
        <label>lbann/data_readers/data_reader_ascii.hpp</label>
        <link refid="data__reader__ascii_8hpp"/>
        <childnode refid="24947" relation="include">
        </childnode>
      </node>
      <node id="25104">
        <label>lbann/objective_functions/loss_functions/geom_negloglike.hpp</label>
        <link refid="geom__negloglike_8hpp"/>
        <childnode refid="25100" relation="include">
        </childnode>
      </node>
      <node id="25017">
        <label>quantizer_impl.hpp</label>
        <link refid="quantizer__impl_8hpp"/>
        <childnode refid="24981" relation="include">
        </childnode>
      </node>
      <node id="25063">
        <label>lbann/data_readers/data_reader_mesh.hpp</label>
        <link refid="data__reader__mesh_8hpp"/>
        <childnode refid="24947" relation="include">
        </childnode>
      </node>
      <node id="24960">
        <label>lbann/layers/activations/bent_identity.hpp</label>
        <link refid="bent__identity_8hpp"/>
        <childnode refid="24959" relation="include">
        </childnode>
      </node>
      <node id="25039">
        <label>memory</label>
      </node>
      <node id="25078">
        <label>lbann/callbacks/callback_dump_weights.hpp</label>
        <link refid="callback__dump__weights_8hpp"/>
        <childnode refid="24987" relation="include">
        </childnode>
        <childnode refid="25015" relation="include">
        </childnode>
      </node>
      <node id="25098">
        <label>lbann/optimizers/sgd.hpp</label>
        <link refid="sgd_8hpp"/>
        <childnode refid="24922" relation="include">
        </childnode>
      </node>
      <node id="24918">
        <label>typeindex</label>
      </node>
      <node id="25080">
        <label>lbann/callbacks/callback_dump_gradients.hpp</label>
        <link refid="callback__dump__gradients_8hpp"/>
        <childnode refid="24987" relation="include">
        </childnode>
        <childnode refid="25015" relation="include">
        </childnode>
      </node>
      <node id="24912">
        <label>dlfcn.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="init__image__data__readers_8cpp_1a12164f699122209432c4f8ae7505683d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_image_preprocessor</definition>
        <argsstring>(const lbann_data::Reader &amp;pb_readme, const bool master, std::shared_ptr&lt; cv_process &gt; &amp;pp, int &amp;width, int &amp;height, int &amp;channels)</argsstring>
        <name>init_image_preprocessor</name>
        <param>
          <type>const lbann_data::Reader &amp;</type>
          <declname>pb_readme</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>master</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; cv_process &gt; &amp;</type>
          <declname>pp</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>height</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>channels</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/proto/init_image_data_readers.cpp" line="37" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/proto/init_image_data_readers.cpp" bodystart="37" bodyend="260"/>
        <references refid="namespaceanonymous__namespace_02image__preprocessor_8cpp_03_1a9624405339d16214b745f28f39979c6d" compoundref="image__preprocessor_8cpp" startline="36">anonymous_namespace{image_preprocessor.cpp}::pi</references>
        <referencedby refid="init__image__data__readers_8hpp_1a712004ee86a9e1de504f12e98aa51e24" compoundref="init__image__data__readers_8cpp" startline="263" endline="331">init_image_data_reader</referencedby>
      </memberdef>
      <memberdef kind="function" id="init__image__data__readers_8cpp_1afbbec9e8aa0c25aac424999eae6c39df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_image_data_reader</definition>
        <argsstring>(const lbann_data::Reader &amp;pb_readme, const bool master, generic_data_reader *&amp;reader)</argsstring>
        <name>init_image_data_reader</name>
        <param>
          <type>const lbann_data::Reader &amp;</type>
          <declname>pb_readme</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>master</declname>
        </param>
        <param>
          <type><ref refid="classlbann_1_1generic__data__reader" kindref="compound">generic_data_reader</ref> *&amp;</type>
          <declname>reader</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/proto/init_image_data_readers.cpp" line="263" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/proto/init_image_data_readers.cpp" bodystart="263" bodyend="331"/>
        <references refid="init__image__data__readers_8cpp_1a12164f699122209432c4f8ae7505683d" compoundref="init__image__data__readers_8cpp" startline="37" endline="260">init_image_preprocessor</references>
        <references refid="classlbann_1_1generic__data__reader_1abeb849fb8e10b4fa317c90bc33f61758">lbann::generic_data_reader::get_type</references>
        <references refid="classlbann_1_1data__reader__multi__images_1a57824ec9de5c1131b2f15a0cb3d4ab75" compoundref="data__reader__multi__images_8cpp" startline="76" endline="85">lbann::data_reader_multi_images::set_input_params</references>
        <referencedby refid="proto__common_8hpp_1a32d4c032abc19c091fa65ace580fc057" compoundref="proto__common_8cpp" startline="41" endline="270">init_data_readers</referencedby>
      </memberdef>
      <memberdef kind="function" id="init__image__data__readers_8cpp_1a0e66a70e8fd1805c0a7433d359f73b85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_generic_preprocessor</definition>
        <argsstring>(const lbann_data::Reader &amp;pb_readme, const bool master, generic_data_reader *reader)</argsstring>
        <name>init_generic_preprocessor</name>
        <param>
          <type>const lbann_data::Reader &amp;</type>
          <declname>pb_readme</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>master</declname>
        </param>
        <param>
          <type><ref refid="classlbann_1_1generic__data__reader" kindref="compound">generic_data_reader</ref> *</type>
          <declname>reader</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/proto/init_image_data_readers.cpp" line="334" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/proto/init_image_data_readers.cpp" bodystart="334" bodyend="410"/>
        <references refid="classlbann_1_1lbann__image__preprocessor_1a4ba2de0a781dfa0a2652ad4d777a241f" compoundref="image__preprocessor_8hpp" startline="64" endline="66">lbann::lbann_image_preprocessor::horizontal_flip</references>
        <references refid="classlbann_1_1lbann__image__preprocessor_1aeb7d75e4d3361ae2836afabc14510d74" compoundref="image__preprocessor_8hpp" startline="68" endline="70">lbann::lbann_image_preprocessor::vertical_flip</references>
        <references refid="classlbann_1_1lbann__image__preprocessor_1a1a293733368dd9eceba3e99cf9e5ae24" compoundref="image__preprocessor_8hpp" startline="72" endline="74">lbann::lbann_image_preprocessor::rotation</references>
        <references refid="classlbann_1_1lbann__image__preprocessor_1ae62596b4af5d1940aa0499cde2bdd005" compoundref="image__preprocessor_8hpp" startline="76" endline="78">lbann::lbann_image_preprocessor::horizontal_shift</references>
        <references refid="classlbann_1_1lbann__image__preprocessor_1a50ac63e1f6b1b9806cbf6c06f53f4aca" compoundref="image__preprocessor_8hpp" startline="80" endline="82">lbann::lbann_image_preprocessor::vertical_shift</references>
        <references refid="classlbann_1_1lbann__image__preprocessor_1aef1e2375fd518e69df800b0dcbcb37d0" compoundref="image__preprocessor_8hpp" startline="84" endline="86">lbann::lbann_image_preprocessor::shear_range</references>
        <references refid="classlbann_1_1lbann__image__preprocessor_1a871cb543ee6c132a76e16045a1a2a9f3" compoundref="image__preprocessor_8hpp" startline="107" endline="114">lbann::lbann_image_preprocessor::disable_augmentation</references>
        <references refid="classlbann_1_1lbann__image__preprocessor_1afa470b696ba435c20050187a0232717d" compoundref="image__preprocessor_8hpp" startline="88" endline="90">lbann::lbann_image_preprocessor::subtract_mean</references>
        <references refid="classlbann_1_1lbann__image__preprocessor_1a05c4cb5cb842df5d46eebe15c6ea9de3" compoundref="image__preprocessor_8hpp" startline="92" endline="94">lbann::lbann_image_preprocessor::unit_variance</references>
        <references refid="classlbann_1_1lbann__image__preprocessor_1a977b2fdd417acb1eb37dbea0cfdd4b60" compoundref="image__preprocessor_8hpp" startline="96" endline="98">lbann::lbann_image_preprocessor::scale</references>
        <references refid="classlbann_1_1lbann__image__preprocessor_1a02cfd4d8c26a317540b587eb52cef0d5" compoundref="image__preprocessor_8hpp" startline="103" endline="105">lbann::lbann_image_preprocessor::z_score</references>
        <references refid="classlbann_1_1lbann__image__preprocessor_1a1726baf71e931108dc9192539e90c583" compoundref="image__preprocessor_8hpp" startline="121" endline="123">lbann::lbann_image_preprocessor::add_noise</references>
        <referencedby refid="init__image__data__readers_8hpp_1a7cbc558e3233f04f7bbd6e96d199e387" compoundref="init__image__data__readers_8cpp" startline="413" endline="452">init_org_image_data_reader</referencedby>
        <referencedby refid="proto__common_8hpp_1a32d4c032abc19c091fa65ace580fc057" compoundref="proto__common_8cpp" startline="41" endline="270">init_data_readers</referencedby>
      </memberdef>
      <memberdef kind="function" id="init__image__data__readers_8cpp_1a671d9d841466d2bf6ee67336e7d45cd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_org_image_data_reader</definition>
        <argsstring>(const lbann_data::Reader &amp;pb_readme, const bool master, generic_data_reader *&amp;reader)</argsstring>
        <name>init_org_image_data_reader</name>
        <param>
          <type>const lbann_data::Reader &amp;</type>
          <declname>pb_readme</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>master</declname>
        </param>
        <param>
          <type><ref refid="classlbann_1_1generic__data__reader" kindref="compound">generic_data_reader</ref> *&amp;</type>
          <declname>reader</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/proto/init_image_data_readers.cpp" line="413" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/proto/init_image_data_readers.cpp" bodystart="413" bodyend="452"/>
        <references refid="init__image__data__readers_8cpp_1a0e66a70e8fd1805c0a7433d359f73b85" compoundref="init__image__data__readers_8cpp" startline="334" endline="410">init_generic_preprocessor</references>
        <referencedby refid="proto__common_8hpp_1a32d4c032abc19c091fa65ace580fc057" compoundref="proto__common_8cpp" startline="41" endline="270">init_data_readers</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2014-2016,<sp/>Lawrence<sp/>Livermore<sp/>National<sp/>Security,<sp/>LLC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Produced<sp/>at<sp/>the<sp/>Lawrence<sp/>Livermore<sp/>National<sp/>Laboratory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Written<sp/>by<sp/>the<sp/>LBANN<sp/>Research<sp/>Team<sp/>(B.<sp/>Van<sp/>Essen,<sp/>et<sp/>al.)<sp/>listed<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>CONTRIBUTORS<sp/>file.<sp/>&lt;lbann-dev@llnl.gov&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LLNL-CODE-697807.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>LBANN:<sp/>Livermore<sp/>Big<sp/>Artificial<sp/>Neural<sp/>Network</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Toolkit.<sp/>For<sp/>details,<sp/>see<sp/>http://software.llnl.gov/LBANN<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://github.com/LLNL/LBANN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;Licensee&quot;);<sp/>you</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implied.<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>license.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>init_image_data_readers<sp/>.hpp<sp/>.cpp<sp/>-<sp/>initialize<sp/>image_data_reader<sp/>by<sp/>prototext</highlight></codeline>
<codeline lineno="28"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="init__image__data__readers_8hpp" kindref="compound">lbann/proto/init_image_data_readers.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;google/protobuf/io/coded_stream.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;google/protobuf/io/zero_copy_stream_impl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;google/protobuf/text_format.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>for<sp/>dynamic_pointer_cast</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacelbann" kindref="compound">lbann</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="init__image__data__readers_8cpp_1a12164f699122209432c4f8ae7505683d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="init__image__data__readers_8cpp_1a12164f699122209432c4f8ae7505683d" kindref="member">init_image_preprocessor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>lbann_data::Reader&amp;<sp/>pb_readme,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>master,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;cv_process&gt;&amp;<sp/>pp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>height,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>channels)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Currently<sp/>we<sp/>set<sp/>width<sp/>and<sp/>height<sp/>for<sp/>image_data_reader<sp/>here<sp/>considering<sp/>the<sp/>transform</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>pipeline.<sp/>image_data_reader<sp/>reports<sp/>the<sp/>final<sp/>dimension<sp/>of<sp/>data<sp/>to<sp/>the<sp/>child<sp/>layer<sp/>based</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>these<sp/>information.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>However,<sp/>for<sp/>composible<sp/>pipeline,<sp/>this<sp/>needs<sp/>to<sp/>be<sp/>automatically<sp/>determined<sp/>by<sp/>each</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cv_process<sp/>at<sp/>the<sp/>setup<sp/>finalization<sp/>stage.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pb_readme.has_image_preprocessor())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>lbann_data::ImagePreprocessor&amp;<sp/>pb_preprocessor<sp/>=<sp/>pb_readme.image_preprocessor();</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pb_preprocessor.disable())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>data<sp/>reader<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name<sp/>=<sp/>pb_readme.name();</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>final<sp/>size<sp/>of<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>width<sp/>=<sp/>pb_preprocessor.raw_width();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>height<sp/>=<sp/>pb_preprocessor.raw_height();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>up<sp/>a<sp/>subtractor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pb_preprocessor.has_subtractor())<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pb_preprocessor.has_colorizer())<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>lbann_data::ImagePreprocessor::Colorizer&amp;<sp/>pb_colorizer<sp/>=<sp/>pb_preprocessor.colorizer();</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/>(!pb_colorizer.disable())<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>colorizer_name<sp/>=<sp/>((pb_colorizer.name()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)?<sp/></highlight><highlight class="stringliteral">&quot;default_colorizer&quot;</highlight><highlight class="normal"><sp/>:<sp/>pb_colorizer.name());</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>every<sp/>image<sp/>in<sp/>the<sp/>dataset<sp/>is<sp/>a<sp/>color<sp/>image,<sp/>this<sp/>is<sp/>not<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;lbann::cv_colorizer&gt;<sp/>colorizer(</highlight><highlight class="keyword">new</highlight><highlight class="normal">(lbann::cv_colorizer));</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorizer-&gt;set_name(colorizer_name);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pp-&gt;add_transform(std::move(colorizer));</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channels<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(master)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;image<sp/>processor:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>colorizer_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>colorizer<sp/>is<sp/>set&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>lbann_data::ImagePreprocessor::Subtractor&amp;<sp/>pb_subtractor<sp/>=<sp/>pb_preprocessor.subtractor();</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/>(!pb_subtractor.disable())<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>subtractor_name<sp/>=<sp/>((pb_subtractor.name()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)?<sp/></highlight><highlight class="stringliteral">&quot;default_subtractor&quot;</highlight><highlight class="normal"><sp/>:<sp/>pb_subtractor.name());</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>every<sp/>image<sp/>in<sp/>the<sp/>dataset<sp/>is<sp/>a<sp/>color<sp/>image,<sp/>this<sp/>is<sp/>not<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;lbann::cv_subtractor&gt;<sp/>subtractor(</highlight><highlight class="keyword">new</highlight><highlight class="normal">(lbann::cv_subtractor));</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subtractor-&gt;set_name(subtractor_name);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subtractor-&gt;set(pb_subtractor.image_to_sub());</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pp-&gt;add_normalizer(std::move(subtractor));</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(master)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;image<sp/>processor:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>subtractor_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>subtractor<sp/>is<sp/>set&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>up<sp/>a<sp/>cropper</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pb_preprocessor.has_cropper())<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>lbann_data::ImagePreprocessor::Cropper&amp;<sp/>pb_cropper<sp/>=<sp/>pb_preprocessor.cropper();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pb_cropper.disable())<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>cropper_name<sp/>=<sp/>((pb_cropper.name()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)?<sp/></highlight><highlight class="stringliteral">&quot;default_cropper&quot;</highlight><highlight class="normal"><sp/>:<sp/>pb_cropper.name());</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;lbann::cv_cropper&gt;<sp/>cropper(</highlight><highlight class="keyword">new</highlight><highlight class="normal">(lbann::cv_cropper));</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cropper-&gt;set_name(cropper_name);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cropper-&gt;set(pb_cropper.crop_width(),</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pb_cropper.crop_height(),</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pb_cropper.crop_randomly(),</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_pair&lt;int,int&gt;(pb_cropper.resized_width(),</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pb_cropper.resized_height()),</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pb_cropper.adaptive_interpolation());</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pp-&gt;add_transform(std::move(cropper));</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>width<sp/>=<sp/>pb_cropper.crop_width();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>height<sp/>=<sp/>pb_cropper.crop_height();</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(master)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;image<sp/>processor:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cropper_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cropper<sp/>is<sp/>set&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>For<sp/>backward<sp/>compatibility.<sp/>TODO:<sp/>will<sp/>be<sp/>deprecated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pb_preprocessor.crop_first())<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;lbann::cv_cropper&gt;<sp/>cropper(</highlight><highlight class="keyword">new</highlight><highlight class="normal">(lbann::cv_cropper));</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cropper-&gt;set(pb_preprocessor.crop_width(),</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pb_preprocessor.crop_height(),</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pb_preprocessor.crop_randomly(),</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_pair&lt;int,int&gt;(pb_preprocessor.resized_width(),</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pb_preprocessor.resized_height()),</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pb_preprocessor.adaptive_interpolation());</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pp-&gt;add_transform(std::move(cropper));</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(master)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;image<sp/>processor:<sp/>cropper<sp/>is<sp/>set<sp/>(deprecated<sp/>syntax)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>up<sp/>an<sp/>augmenter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pb_preprocessor.has_augmenter())<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>lbann_data::ImagePreprocessor::Augmenter&amp;<sp/>pb_augmenter<sp/>=<sp/>pb_preprocessor.augmenter();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pb_augmenter.disable()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(pb_augmenter.horizontal_flip()<sp/>||</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pb_augmenter.vertical_flip()<sp/>||</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pb_augmenter.rotation()<sp/>!=<sp/>0.0<sp/>||</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pb_augmenter.horizontal_shift()<sp/>!=<sp/>0.0<sp/>||</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pb_augmenter.vertical_shift()<sp/>!=<sp/>0.0<sp/>||</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pb_augmenter.shear_range()<sp/>!=<sp/>0.0))</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>augmenter_name<sp/>=<sp/>((pb_augmenter.name()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)?<sp/></highlight><highlight class="stringliteral">&quot;default_augmenter&quot;</highlight><highlight class="normal"><sp/>:<sp/>pb_augmenter.name());</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;lbann::cv_augmenter&gt;<sp/>augmenter(</highlight><highlight class="keyword">new</highlight><highlight class="normal">(lbann::cv_augmenter));</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>augmenter-&gt;set_name(augmenter_name);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>augmenter-&gt;set(pb_augmenter.horizontal_flip(),</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pb_augmenter.vertical_flip(),</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pb_augmenter.rotation(),</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pb_augmenter.horizontal_shift(),</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pb_augmenter.vertical_shift(),</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pb_augmenter.shear_range());</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pp-&gt;add_transform(std::move(augmenter));</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(master)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;image<sp/>processor:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>augmenter_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>augmenter<sp/>is<sp/>set&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>For<sp/>backward<sp/>compatibility.<sp/>TODO:<sp/>will<sp/>be<sp/>deprecated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pb_preprocessor.disable_augmentation())<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;lbann::cv_augmenter&gt;<sp/>augmenter(</highlight><highlight class="keyword">new</highlight><highlight class="normal">(lbann::cv_augmenter));</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>augmenter-&gt;set(pb_preprocessor.horizontal_flip(),</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pb_preprocessor.vertical_flip(),</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pb_preprocessor.rotation(),</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pb_preprocessor.horizontal_shift(),</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pb_preprocessor.vertical_shift(),</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pb_preprocessor.shear_range());</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pp-&gt;add_transform(std::move(augmenter));</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(master)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;image<sp/>processor:<sp/>augmenter<sp/>is<sp/>set<sp/>(deprecated<sp/>syntax)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>up<sp/>a<sp/>decolorizer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pb_preprocessor.has_decolorizer())<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>lbann_data::ImagePreprocessor::Decolorizer&amp;<sp/>pb_decolorizer<sp/>=<sp/>pb_preprocessor.decolorizer();</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/>(!pb_decolorizer.disable())<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>decolorizer_name<sp/>=<sp/>((pb_decolorizer.name()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)?<sp/></highlight><highlight class="stringliteral">&quot;default_decolorizer&quot;</highlight><highlight class="normal"><sp/>:<sp/>pb_decolorizer.name());</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>every<sp/>image<sp/>in<sp/>the<sp/>dataset<sp/>is<sp/>a<sp/>color<sp/>image,<sp/>this<sp/>is<sp/>not<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;lbann::cv_decolorizer&gt;<sp/>decolorizer(</highlight><highlight class="keyword">new</highlight><highlight class="normal">(lbann::cv_decolorizer));</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>decolorizer-&gt;set_name(decolorizer_name);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>decolorizer-&gt;set(pb_decolorizer.pick_1ch());</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pp-&gt;add_transform(std::move(decolorizer));</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>channels<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(master)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;image<sp/>processor:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>decolorizer_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>decolorizer<sp/>is<sp/>set&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>up<sp/>a<sp/>colorizer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pb_preprocessor.has_colorizer())<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>lbann_data::ImagePreprocessor::Colorizer&amp;<sp/>pb_colorizer<sp/>=<sp/>pb_preprocessor.colorizer();</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/>(!pb_colorizer.disable())<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pb_preprocessor.has_subtractor())<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>colorizer_name<sp/>=<sp/>((pb_colorizer.name()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)?<sp/></highlight><highlight class="stringliteral">&quot;default_colorizer&quot;</highlight><highlight class="normal"><sp/>:<sp/>pb_colorizer.name());</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>every<sp/>image<sp/>in<sp/>the<sp/>dataset<sp/>is<sp/>a<sp/>color<sp/>image,<sp/>this<sp/>is<sp/>not<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;lbann::cv_colorizer&gt;<sp/>colorizer(</highlight><highlight class="keyword">new</highlight><highlight class="normal">(lbann::cv_colorizer));</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorizer-&gt;set_name(colorizer_name);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pp-&gt;add_transform(std::move(colorizer));</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>channels<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(master)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;image<sp/>processor:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>colorizer_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>colorizer<sp/>is<sp/>set&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>For<sp/>backward<sp/>compatibility.<sp/>TODO:<sp/>will<sp/>be<sp/>deprecated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pb_preprocessor.no_colorize())<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;lbann::cv_colorizer&gt;<sp/>colorizer(</highlight><highlight class="keyword">new</highlight><highlight class="normal">(lbann::cv_colorizer));</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pp-&gt;add_transform(std::move(colorizer));</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>channels<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(master)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;image<sp/>processor:<sp/>colorizer<sp/>is<sp/>set<sp/>(deprecated<sp/>syntax)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>up<sp/>a<sp/>normalizer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pb_preprocessor.has_normalizer())<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>lbann_data::ImagePreprocessor::Normalizer&amp;<sp/>pb_normalizer<sp/>=<sp/>pb_preprocessor.normalizer();</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pb_normalizer.disable())<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>normalizer_name<sp/>=<sp/>((pb_normalizer.name()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)?<sp/></highlight><highlight class="stringliteral">&quot;default_normalizer&quot;</highlight><highlight class="normal"><sp/>:<sp/>pb_normalizer.name());</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;lbann::cv_normalizer&gt;<sp/>normalizer(</highlight><highlight class="keyword">new</highlight><highlight class="normal">(lbann::cv_normalizer));</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>normalizer-&gt;set_name(normalizer_name);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>normalizer-&gt;unit_scale(pb_normalizer.scale());</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>normalizer-&gt;subtract_mean(pb_normalizer.subtract_mean());</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>normalizer-&gt;unit_variance(pb_normalizer.unit_variance());</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>normalizer-&gt;z_score(pb_normalizer.z_score());</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pp-&gt;add_normalizer(std::move(normalizer));</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(master)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;image<sp/>processor:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>normalizer_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>normalizer<sp/>is<sp/>set&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>For<sp/>backward<sp/>compatibility.<sp/>TODO:<sp/>will<sp/>be<sp/>deprecated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;lbann::cv_normalizer&gt;<sp/>normalizer(</highlight><highlight class="keyword">new</highlight><highlight class="normal">(lbann::cv_normalizer));</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>normalizer-&gt;unit_scale(pb_preprocessor.scale());</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>normalizer-&gt;subtract_mean(pb_preprocessor.subtract_mean());</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>normalizer-&gt;unit_variance(pb_preprocessor.unit_variance());</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>normalizer-&gt;z_score(pb_preprocessor.z_score());</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>pp-&gt;add_normalizer(std::move(normalizer));</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(master)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;image<sp/>processor:<sp/>normalizer<sp/>is<sp/>set<sp/>(deprecated<sp/>syntax)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>up<sp/>a<sp/>noiser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pb_preprocessor.has_noiser())<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>lbann_data::ImagePreprocessor::Noiser&amp;<sp/>pb_noiser<sp/>=<sp/>pb_preprocessor.noiser();</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pb_noiser.disable())<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>noiser_name<sp/>=<sp/>((pb_noiser.name()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)?<sp/></highlight><highlight class="stringliteral">&quot;default_noiser&quot;</highlight><highlight class="normal"><sp/>:<sp/>pb_noiser.name());</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>TODO:<sp/>implement<sp/>noiser<sp/>in<sp/>opencv</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;lbann::cv_noiser&gt;<sp/>noiser(new(lbann::cv_noiser));</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>noiser-&gt;set_name(noiser_name);</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>noiser-&gt;set(pb_noiser.factor());</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>pp-&gt;add_transform(std::move(noiser));</highlight></codeline>
<codeline lineno="222"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(master)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;image<sp/>processor:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>noiser_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>noiser<sp/>is<sp/>not<sp/>supported<sp/>yet&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>For<sp/>backward<sp/>compatibility.<sp/>TODO:<sp/>will<sp/>be<sp/>deprecated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>TODO:<sp/>implement<sp/>noiser<sp/>in<sp/>opencv</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;lbann::cv_noiser&gt;<sp/>noiser(new(lbann::cv_noiser));</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/><sp/><sp/><sp/>noiser-&gt;set(pb_preprocessor.noise_factor());</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/><sp/><sp/><sp/>pp-&gt;add_transform(std::move(noiser));</highlight></codeline>
<codeline lineno="230"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(master<sp/>&amp;&amp;<sp/>(pb_preprocessor.noise_factor()<sp/>&gt;<sp/>0.0))</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;image<sp/>processor:<sp/>noiser<sp/>is<sp/>not<sp/>supported<sp/>yet<sp/>(deprecated<sp/>syntax)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>data<sp/>reader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;imagenet_patches&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;cv_process_patches&gt;<sp/>ppp<sp/>=<sp/>std::dynamic_pointer_cast&lt;cv_process_patches&gt;(pp);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pb_preprocessor.has_patch_extractor())<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>lbann_data::ImagePreprocessor::PatchExtractor&amp;<sp/>pb_patch_extractor<sp/>=<sp/>pb_preprocessor.patch_extractor();</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pb_patch_extractor.disable())<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>patch_extractor_name<sp/>=<sp/>((pb_patch_extractor.name()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)?<sp/></highlight><highlight class="stringliteral">&quot;default_patch_extractor&quot;</highlight><highlight class="normal"><sp/>:<sp/>pb_patch_extractor.name());</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lbann::patchworks::patch_descriptor<sp/><ref refid="namespaceanonymous__namespace_02image__preprocessor_8cpp_03_1a9624405339d16214b745f28f39979c6d" kindref="member">pi</ref>;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pi.set_sample_image(static_cast&lt;unsigned<sp/>int&gt;(width),</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;unsigned<sp/>int&gt;(height));</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pi.set_size(pb_patch_extractor.patch_width(),<sp/>pb_patch_extractor.patch_height());</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pi.set_gap(pb_patch_extractor.patch_gap());</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pi.set_jitter(pb_patch_extractor.patch_jitter());</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pi.set_mode_centering(pb_patch_extractor.centering_mode());</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pi.set_mode_chromatic_aberration(pb_patch_extractor.ca_correction_mode());</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pi.set_self_label();</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pi.define_patch_set();</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width<sp/>=<sp/>pb_patch_extractor.patch_width();</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>height<sp/>=<sp/>pb_patch_extractor.patch_height();</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ppp-&gt;set_name(patch_extractor_name);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ppp-&gt;set_patch_descriptor(pi);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(master)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;image<sp/>processor:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>patch_extractor_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>patch_extractor<sp/>is<sp/>set&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263" refid="init__image__data__readers_8hpp_1a712004ee86a9e1de504f12e98aa51e24" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="init__image__data__readers_8cpp_1afbbec9e8aa0c25aac424999eae6c39df" kindref="member">init_image_data_reader</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>lbann_data::Reader&amp;<sp/>pb_readme,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>master,<sp/><ref refid="classlbann_1_1generic__data__reader" kindref="compound">generic_data_reader</ref>*<sp/>&amp;reader)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>data<sp/>reader<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name<sp/>=<sp/>pb_readme.name();</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>whether<sp/>to<sp/>shuffle<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>shuffle<sp/>=<sp/>pb_readme.shuffle();</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>labels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_labels<sp/>=<sp/>pb_readme.num_labels();</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;cv_process&gt;<sp/>pp;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>up<sp/>the<sp/>image<sp/>preprocessor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;imagenet&quot;</highlight><highlight class="normal">)<sp/>||<sp/>(name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;imagenet_single&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;triplet&quot;</highlight><highlight class="normal">)<sp/>||<sp/>(name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;mnist_siamese&quot;</highlight><highlight class="normal">)<sp/>||<sp/>(name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;multi_images&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>pp<sp/>=<sp/>std::make_shared&lt;cv_process&gt;();</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;imagenet_patches&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>pp<sp/>=<sp/>std::make_shared&lt;cv_process_patches&gt;();</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(master)<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>err;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>&lt;&lt;<sp/>__FILE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>__LINE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>unknown<sp/>name<sp/>for<sp/>image<sp/>data<sp/>reader:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>name;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(err.str());</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>final<sp/>size<sp/>of<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>0,<sp/>height<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channels<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>setup<sp/>preprocessor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><ref refid="init__image__data__readers_8cpp_1a12164f699122209432c4f8ae7505683d" kindref="member">init_image_preprocessor</ref>(pb_readme,<sp/>master,<sp/>pp,<sp/>width,<sp/>height,<sp/>channels);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;imagenet_patches&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;cv_process_patches&gt;<sp/>ppp<sp/>=<sp/>std::dynamic_pointer_cast&lt;cv_process_patches&gt;(pp);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>reader<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1imagenet__reader__patches" kindref="compound">imagenet_reader_patches</ref>(ppp,<sp/>shuffle);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;imagenet&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>reader<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1imagenet__reader" kindref="compound">imagenet_reader</ref>(pp,<sp/>shuffle);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;triplet&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>reader<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1data__reader__triplet" kindref="compound">data_reader_triplet</ref>(pp,<sp/>shuffle);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;mnist_siamese&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>reader<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1data__reader__mnist__siamese" kindref="compound">data_reader_mnist_siamese</ref>(pp,<sp/>shuffle);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;multi_images&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>reader<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1data__reader__multi__images" kindref="compound">data_reader_multi_images</ref>(pp,<sp/>shuffle);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;imagenet_single&quot;</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>imagenet_single</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>reader<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1imagenet__reader__single" kindref="compound">imagenet_reader_single</ref>(pp,<sp/>shuffle);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>image_data_reader_ptr<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="classlbann_1_1image__data__reader" kindref="compound">image_data_reader</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(reader);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!image_data_reader_ptr<sp/>&amp;&amp;<sp/>master)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>err;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>&lt;&lt;<sp/>__FILE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>__LINE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>invalid<sp/>image<sp/>data<sp/>reader<sp/>pointer&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(err.str());</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(master)<sp/>std::cout<sp/>&lt;&lt;<sp/>reader-&gt;<ref refid="classlbann_1_1generic__data__reader_1abeb849fb8e10b4fa317c90bc33f61758" kindref="member">get_type</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>set&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>configure<sp/>the<sp/>data<sp/>reader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;multi_images&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_img_srcs<sp/>=<sp/>pb_readme.num_image_srcs();</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1data__reader__multi__images" kindref="compound">data_reader_multi_images</ref>*<sp/>multi_image_dr_ptr</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="classlbann_1_1data__reader__multi__images" kindref="compound">data_reader_multi_images</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(image_data_reader_ptr);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(multi_image_dr_ptr<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>err;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>&lt;&lt;<sp/>__FILE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>__LINE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>no<sp/>data_reader_multi_images&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(err.str());</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>multi_image_dr_ptr-&gt;<ref refid="classlbann_1_1data__reader__multi__images_1a57824ec9de5c1131b2f15a0cb3d4ab75" kindref="member">set_input_params</ref>(width,<sp/>height,<sp/>channels,<sp/>n_labels,<sp/>n_img_srcs);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>image_data_reader_ptr-&gt;set_input_params(width,<sp/>height,<sp/>channels,<sp/>n_labels);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334" refid="init__image__data__readers_8hpp_1ac021d06bfe6825ec586927661254a546" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="init__image__data__readers_8cpp_1a0e66a70e8fd1805c0a7433d359f73b85" kindref="member">init_generic_preprocessor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>lbann_data::Reader&amp;<sp/>pb_readme,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>master,<sp/><ref refid="classlbann_1_1generic__data__reader" kindref="compound">generic_data_reader</ref>*<sp/>reader)<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pb_readme.has_image_preprocessor())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>lbann_data::ImagePreprocessor&amp;<sp/>pb_preprocessor<sp/>=<sp/>pb_readme.image_preprocessor();</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pb_preprocessor.disable())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>up<sp/>augmenter<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pb_preprocessor.has_augmenter())<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>lbann_data::ImagePreprocessor::Augmenter&amp;<sp/>pb_augmenter<sp/>=<sp/>pb_preprocessor.augmenter();</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pb_augmenter.disable()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(pb_augmenter.name()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(pb_augmenter.horizontal_flip()<sp/>||</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pb_augmenter.vertical_flip()<sp/>||</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pb_augmenter.rotation()<sp/>!=<sp/>0.0<sp/>||</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pb_augmenter.horizontal_shift()<sp/>!=<sp/>0.0<sp/>||</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pb_augmenter.vertical_shift()<sp/>!=<sp/>0.0<sp/>||</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pb_augmenter.shear_range()<sp/>!=<sp/>0.0))</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reader-&gt;<ref refid="classlbann_1_1lbann__image__preprocessor_1a4ba2de0a781dfa0a2652ad4d777a241f" kindref="member">horizontal_flip</ref>(<sp/>pb_augmenter.horizontal_flip()<sp/>);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reader-&gt;<ref refid="classlbann_1_1lbann__image__preprocessor_1aeb7d75e4d3361ae2836afabc14510d74" kindref="member">vertical_flip</ref>(<sp/>pb_augmenter.vertical_flip()<sp/>);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reader-&gt;<ref refid="classlbann_1_1lbann__image__preprocessor_1a1a293733368dd9eceba3e99cf9e5ae24" kindref="member">rotation</ref>(<sp/>pb_augmenter.rotation()<sp/>);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reader-&gt;<ref refid="classlbann_1_1lbann__image__preprocessor_1ae62596b4af5d1940aa0499cde2bdd005" kindref="member">horizontal_shift</ref>(<sp/>pb_augmenter.horizontal_shift()<sp/>);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reader-&gt;<ref refid="classlbann_1_1lbann__image__preprocessor_1a50ac63e1f6b1b9806cbf6c06f53f4aca" kindref="member">vertical_shift</ref>(<sp/>pb_augmenter.vertical_shift()<sp/>);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reader-&gt;<ref refid="classlbann_1_1lbann__image__preprocessor_1aef1e2375fd518e69df800b0dcbcb37d0" kindref="member">shear_range</ref>(<sp/>pb_augmenter.shear_range()<sp/>);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(master)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;image<sp/>processor:<sp/>augmenter<sp/>is<sp/>set&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reader-&gt;<ref refid="classlbann_1_1lbann__image__preprocessor_1a871cb543ee6c132a76e16045a1a2a9f3" kindref="member">disable_augmentation</ref>();</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>For<sp/>backward<sp/>compatibility.<sp/>TODO:<sp/>will<sp/>be<sp/>deprecated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pb_preprocessor.disable_augmentation()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(pb_preprocessor.horizontal_flip()<sp/>||</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pb_preprocessor.vertical_flip()<sp/>||</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pb_preprocessor.rotation()<sp/>!=<sp/>0.0<sp/>||</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pb_preprocessor.horizontal_shift()<sp/>!=<sp/>0.0<sp/>||</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pb_preprocessor.vertical_shift()<sp/>!=<sp/>0.0<sp/>||</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pb_preprocessor.shear_range()<sp/>!=<sp/>0.0))<sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reader-&gt;<ref refid="classlbann_1_1lbann__image__preprocessor_1a4ba2de0a781dfa0a2652ad4d777a241f" kindref="member">horizontal_flip</ref>(<sp/>pb_preprocessor.horizontal_flip()<sp/>);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reader-&gt;<ref refid="classlbann_1_1lbann__image__preprocessor_1aeb7d75e4d3361ae2836afabc14510d74" kindref="member">vertical_flip</ref>(<sp/>pb_preprocessor.vertical_flip()<sp/>);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reader-&gt;<ref refid="classlbann_1_1lbann__image__preprocessor_1a1a293733368dd9eceba3e99cf9e5ae24" kindref="member">rotation</ref>(<sp/>pb_preprocessor.rotation()<sp/>);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reader-&gt;<ref refid="classlbann_1_1lbann__image__preprocessor_1ae62596b4af5d1940aa0499cde2bdd005" kindref="member">horizontal_shift</ref>(<sp/>pb_preprocessor.horizontal_shift()<sp/>);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reader-&gt;<ref refid="classlbann_1_1lbann__image__preprocessor_1a50ac63e1f6b1b9806cbf6c06f53f4aca" kindref="member">vertical_shift</ref>(<sp/>pb_preprocessor.vertical_shift()<sp/>);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reader-&gt;<ref refid="classlbann_1_1lbann__image__preprocessor_1aef1e2375fd518e69df800b0dcbcb37d0" kindref="member">shear_range</ref>(<sp/>pb_preprocessor.shear_range()<sp/>);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(master)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;image<sp/>processor:<sp/>deprecated<sp/>syntax<sp/>for<sp/>augmenter&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>up<sp/>the<sp/>normalizer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pb_preprocessor.has_normalizer())<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>lbann_data::ImagePreprocessor::Normalizer&amp;<sp/>pb_normalizer<sp/>=<sp/>pb_preprocessor.normalizer();</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pb_normalizer.disable()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(pb_normalizer.name()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reader-&gt;<ref refid="classlbann_1_1lbann__image__preprocessor_1afa470b696ba435c20050187a0232717d" kindref="member">subtract_mean</ref>(<sp/>pb_normalizer.subtract_mean()<sp/>);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reader-&gt;<ref refid="classlbann_1_1lbann__image__preprocessor_1a05c4cb5cb842df5d46eebe15c6ea9de3" kindref="member">unit_variance</ref>(<sp/>pb_normalizer.unit_variance()<sp/>);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reader-&gt;<ref refid="classlbann_1_1lbann__image__preprocessor_1a977b2fdd417acb1eb37dbea0cfdd4b60" kindref="member">scale</ref>(<sp/>pb_normalizer.scale()<sp/>);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reader-&gt;<ref refid="classlbann_1_1lbann__image__preprocessor_1a02cfd4d8c26a317540b587eb52cef0d5" kindref="member">z_score</ref>(<sp/>pb_normalizer.z_score()<sp/>);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(master)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;image<sp/>processor:<sp/>normalizer<sp/>is<sp/>set&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>For<sp/>backward<sp/>compatibility.<sp/>TODO:<sp/>will<sp/>be<sp/>deprecated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reader-&gt;<ref refid="classlbann_1_1lbann__image__preprocessor_1afa470b696ba435c20050187a0232717d" kindref="member">subtract_mean</ref>(<sp/>pb_preprocessor.subtract_mean()<sp/>);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reader-&gt;<ref refid="classlbann_1_1lbann__image__preprocessor_1a05c4cb5cb842df5d46eebe15c6ea9de3" kindref="member">unit_variance</ref>(<sp/>pb_preprocessor.unit_variance()<sp/>);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reader-&gt;<ref refid="classlbann_1_1lbann__image__preprocessor_1a977b2fdd417acb1eb37dbea0cfdd4b60" kindref="member">scale</ref>(<sp/>pb_preprocessor.scale()<sp/>);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reader-&gt;<ref refid="classlbann_1_1lbann__image__preprocessor_1a02cfd4d8c26a317540b587eb52cef0d5" kindref="member">z_score</ref>(<sp/>pb_preprocessor.z_score()<sp/>);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(master)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;image<sp/>processor:<sp/>deprecated<sp/>syntax<sp/>for<sp/>normalizer&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pb_preprocessor.has_noiser())<sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>lbann_data::ImagePreprocessor::Noiser&amp;<sp/>pb_noiser<sp/>=<sp/>pb_preprocessor.noiser();</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pb_noiser.disable()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(pb_noiser.name()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reader-&gt;<ref refid="classlbann_1_1lbann__image__preprocessor_1a1726baf71e931108dc9192539e90c583" kindref="member">add_noise</ref>(<sp/>pb_noiser.factor()<sp/>);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(master)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;image<sp/>processor:<sp/>noiser<sp/>is<sp/>set&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>For<sp/>backward<sp/>compatibility.<sp/>TODO:<sp/>will<sp/>be<sp/>deprecated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>reader-&gt;<ref refid="classlbann_1_1lbann__image__preprocessor_1a1726baf71e931108dc9192539e90c583" kindref="member">add_noise</ref>(<sp/>pb_preprocessor.noise_factor()<sp/>);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(master<sp/>&amp;&amp;<sp/>(pb_preprocessor.noise_factor()&gt;0.0))<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;image<sp/>processor:<sp/>deprecated<sp/>syntax<sp/>for<sp/>noiser&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413" refid="init__image__data__readers_8hpp_1a7cbc558e3233f04f7bbd6e96d199e387" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="init__image__data__readers_8cpp_1a671d9d841466d2bf6ee67336e7d45cd6" kindref="member">init_org_image_data_reader</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>lbann_data::Reader&amp;<sp/>pb_readme,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>master,<sp/><ref refid="classlbann_1_1generic__data__reader" kindref="compound">generic_data_reader</ref>*<sp/>&amp;reader)<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>lbann_data::ImagePreprocessor&amp;<sp/>pb_preprocessor<sp/>=<sp/>pb_readme.image_preprocessor();</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>data<sp/>reader<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name<sp/>=<sp/>pb_readme.name();</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>whether<sp/>to<sp/>shuffle<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>shuffle<sp/>=<sp/>pb_readme.shuffle();</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>final<sp/>size<sp/>of<sp/>image.<sp/>If<sp/>image_preprocessor<sp/>is<sp/>not<sp/>set,<sp/>the<sp/>type-default<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(i,e.,<sp/>0)<sp/>is<sp/>used.<sp/>Then,set_input_params()<sp/>will<sp/>not<sp/>modify<sp/>the<sp/>current<sp/>member<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>pb_preprocessor.raw_width();</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height<sp/>=<sp/>pb_preprocessor.raw_height();</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>labels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_labels<sp/>=<sp/>pb_readme.num_labels();</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>as<sp/>imagenet_org<sp/>phases<sp/>out,<sp/>and<sp/>mnist<sp/>and<sp/>cifar10<sp/>convert<sp/>to<sp/>use<sp/>new</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>imagenet<sp/>data<sp/>reader,<sp/>this<sp/>function<sp/>will<sp/>disappear</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>data<sp/>reader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;imagenet_org&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>reader<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1imagenet__reader__org" kindref="compound">imagenet_reader_org</ref>(shuffle);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="classlbann_1_1imagenet__reader__org" kindref="compound">imagenet_reader_org</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(reader)-&gt;set_input_params(width,<sp/>height,<sp/>3,<sp/>n_labels);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(master)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;imagenet_reader_org<sp/>is<sp/>set&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;mnist&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>reader<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1mnist__reader" kindref="compound">mnist_reader</ref>(shuffle);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(master)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;mnist_reader<sp/>is<sp/>set&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;cifar10&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>reader<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1cifar10__reader" kindref="compound">cifar10_reader</ref>(shuffle);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(master)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;cifar10_reader<sp/>is<sp/>set&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(master)<sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>err;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>&lt;&lt;<sp/>__FILE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>__LINE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>unknown<sp/>name<sp/>for<sp/>image<sp/>data<sp/>reader:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>name;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(err.str());</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>setup<sp/>preprocessor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><ref refid="init__image__data__readers_8cpp_1a0e66a70e8fd1805c0a7433d359f73b85" kindref="member">init_generic_preprocessor</ref>(pb_readme,<sp/>master,<sp/>reader);</highlight></codeline>
<codeline lineno="452"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/mckinney27/doxy-testbed/lbann/src/proto/init_image_data_readers.cpp"/>
  </compounddef>
</doxygen>
