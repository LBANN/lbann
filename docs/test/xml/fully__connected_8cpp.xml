<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="fully__connected_8cpp" kind="file" language="C++">
    <compoundname>fully_connected.cpp</compoundname>
    <includes refid="fully__connected_8hpp" local="yes">lbann/layers/learning/fully_connected.hpp</includes>
    <incdepgraph>
      <node id="20947">
        <label>sys/stat.h</label>
      </node>
      <node id="20954">
        <label>lbann/weights/fan_in_fan_out_initializers.hpp</label>
        <link refid="fan__in__fan__out__initializers_8hpp"/>
        <childnode refid="20934" relation="include">
        </childnode>
      </node>
      <node id="20923">
        <label>lbann/utils/summary.hpp</label>
        <link refid="summary_8hpp"/>
        <childnode refid="20924" relation="include">
        </childnode>
        <childnode refid="20920" relation="include">
        </childnode>
        <childnode refid="20910" relation="include">
        </childnode>
        <childnode refid="20919" relation="include">
        </childnode>
      </node>
      <node id="20935">
        <label>lbann/io/persist.hpp</label>
        <link refid="persist_8hpp"/>
        <childnode refid="20910" relation="include">
        </childnode>
        <childnode refid="20911" relation="include">
        </childnode>
      </node>
      <node id="20911">
        <label>El.hpp</label>
      </node>
      <node id="20910">
        <label>lbann/base.hpp</label>
        <link refid="base_8hpp"/>
        <childnode refid="20911" relation="include">
        </childnode>
        <childnode refid="20912" relation="include">
        </childnode>
        <childnode refid="20913" relation="include">
        </childnode>
        <childnode refid="20918" relation="include">
        </childnode>
      </node>
      <node id="20949">
        <label>fcntl.h</label>
      </node>
      <node id="20952">
        <label>lbann/metrics/metric.hpp</label>
        <link refid="metric_8hpp"/>
        <childnode refid="20910" relation="include">
        </childnode>
        <childnode refid="20919" relation="include">
        </childnode>
        <childnode refid="20927" relation="include">
        </childnode>
        <childnode refid="20935" relation="include">
        </childnode>
      </node>
      <node id="20924">
        <label>string</label>
      </node>
      <node id="20932">
        <label>lbann/utils/cudnn_wrapper.hpp</label>
        <link refid="cudnn__wrapper_8hpp"/>
        <childnode refid="20920" relation="include">
        </childnode>
        <childnode refid="20910" relation="include">
        </childnode>
        <childnode refid="20919" relation="include">
        </childnode>
        <childnode refid="20927" relation="include">
        </childnode>
      </node>
      <node id="20938">
        <label>lbann/utils/timer.hpp</label>
        <link refid="timer_8hpp"/>
        <childnode refid="20939" relation="include">
        </childnode>
      </node>
      <node id="20921">
        <label>map</label>
      </node>
      <node id="20955">
        <label>lbann/utils/cublas_wrapper.hpp</label>
        <link refid="cublas__wrapper_8hpp"/>
        <childnode refid="20910" relation="include">
        </childnode>
      </node>
      <node id="20937">
        <label>unordered_set</label>
      </node>
      <node id="20931">
        <label>exception</label>
      </node>
      <node id="20942">
        <label>random</label>
      </node>
      <node id="20934">
        <label>lbann/weights/initializer.hpp</label>
        <link refid="initializer_8hpp"/>
        <childnode refid="20910" relation="include">
        </childnode>
        <childnode refid="20919" relation="include">
        </childnode>
        <childnode refid="20927" relation="include">
        </childnode>
        <childnode refid="20932" relation="include">
        </childnode>
      </node>
      <node id="20948">
        <label>sys/types.h</label>
      </node>
      <node id="20944">
        <label>lbann/utils/graph.hpp</label>
        <link refid="graph_8hpp"/>
        <childnode refid="20930" relation="include">
        </childnode>
        <childnode refid="20920" relation="include">
        </childnode>
        <childnode refid="20945" relation="include">
        </childnode>
        <childnode refid="20921" relation="include">
        </childnode>
      </node>
      <node id="20915">
        <label>cstdio</label>
      </node>
      <node id="20928">
        <label>lbann/utils/stack_trace.hpp</label>
        <link refid="stack__trace_8hpp"/>
        <childnode refid="20929" relation="include">
        </childnode>
        <childnode refid="20924" relation="include">
        </childnode>
      </node>
      <node id="20917">
        <label>cxxabi.h</label>
      </node>
      <node id="20927">
        <label>lbann/utils/exception.hpp</label>
        <link refid="exception_8hpp"/>
        <childnode refid="20910" relation="include">
        </childnode>
        <childnode refid="20919" relation="include">
        </childnode>
        <childnode refid="20928" relation="include">
        </childnode>
        <childnode refid="20930" relation="include">
        </childnode>
        <childnode refid="20931" relation="include">
        </childnode>
      </node>
      <node id="20940">
        <label>lbann/layers/activations/activation.hpp</label>
        <link refid="activation_8hpp"/>
        <childnode refid="20909" relation="include">
        </childnode>
        <childnode refid="20927" relation="include">
        </childnode>
      </node>
      <node id="20920">
        <label>vector</label>
      </node>
      <node id="20919">
        <label>lbann/comm.hpp</label>
        <link refid="comm_8hpp"/>
        <childnode refid="20920" relation="include">
        </childnode>
        <childnode refid="20921" relation="include">
        </childnode>
        <childnode refid="20922" relation="include">
        </childnode>
        <childnode refid="20910" relation="include">
        </childnode>
      </node>
      <node id="20907">
        <label>lbann/layers/learning/fully_connected.hpp</label>
        <link refid="fully__connected_8hpp"/>
        <childnode refid="20908" relation="include">
        </childnode>
        <childnode refid="20940" relation="include">
        </childnode>
        <childnode refid="20941" relation="include">
        </childnode>
        <childnode refid="20932" relation="include">
        </childnode>
        <childnode refid="20943" relation="include">
        </childnode>
        <childnode refid="20934" relation="include">
        </childnode>
        <childnode refid="20954" relation="include">
        </childnode>
        <childnode refid="20955" relation="include">
        </childnode>
        <childnode refid="20924" relation="include">
        </childnode>
        <childnode refid="20956" relation="include">
        </childnode>
      </node>
      <node id="20950">
        <label>lbann/objective_functions/objective_function.hpp</label>
        <link refid="objective__function_8hpp"/>
        <childnode refid="20951" relation="include">
        </childnode>
        <childnode refid="20952" relation="include">
        </childnode>
      </node>
      <node id="20946">
        <label>lbann/io/file_io.hpp</label>
        <link refid="file__io_8hpp"/>
        <childnode refid="20947" relation="include">
        </childnode>
        <childnode refid="20948" relation="include">
        </childnode>
        <childnode refid="20949" relation="include">
        </childnode>
      </node>
      <node id="20956">
        <label>sstream</label>
      </node>
      <node id="20936">
        <label>lbann.pb.h</label>
      </node>
      <node id="20914">
        <label>cstdlib</label>
      </node>
      <node id="20930">
        <label>iostream</label>
      </node>
      <node id="20925">
        <label>lbann/optimizers/optimizer.hpp</label>
        <link refid="optimizer_8hpp"/>
        <childnode refid="20926" relation="include">
        </childnode>
        <childnode refid="20910" relation="include">
        </childnode>
        <childnode refid="20919" relation="include">
        </childnode>
        <childnode refid="20927" relation="include">
        </childnode>
        <childnode refid="20932" relation="include">
        </childnode>
        <childnode refid="20933" relation="include">
        </childnode>
        <childnode refid="20924" relation="include">
        </childnode>
        <childnode refid="20937" relation="include">
        </childnode>
      </node>
      <node id="20953">
        <label>unordered_map</label>
      </node>
      <node id="20941">
        <label>lbann/utils/random.hpp</label>
        <link refid="random_8hpp"/>
        <childnode refid="20910" relation="include">
        </childnode>
        <childnode refid="20919" relation="include">
        </childnode>
        <childnode refid="20935" relation="include">
        </childnode>
        <childnode refid="20942" relation="include">
        </childnode>
      </node>
      <node id="20909">
        <label>lbann/layers/layer.hpp</label>
        <link refid="layer_8hpp"/>
        <childnode refid="20910" relation="include">
        </childnode>
        <childnode refid="20919" relation="include">
        </childnode>
        <childnode refid="20923" relation="include">
        </childnode>
        <childnode refid="20925" relation="include">
        </childnode>
        <childnode refid="20927" relation="include">
        </childnode>
        <childnode refid="20932" relation="include">
        </childnode>
        <childnode refid="20938" relation="include">
        </childnode>
        <childnode refid="20935" relation="include">
        </childnode>
        <childnode refid="20936" relation="include">
        </childnode>
        <childnode refid="20924" relation="include">
        </childnode>
        <childnode refid="20920" relation="include">
        </childnode>
      </node>
      <node id="20939">
        <label>chrono</label>
      </node>
      <node id="20951">
        <label>lbann/objective_functions/objective_function_term.hpp</label>
        <link refid="objective__function__term_8hpp"/>
        <childnode refid="20910" relation="include">
        </childnode>
        <childnode refid="20909" relation="include">
        </childnode>
        <childnode refid="20933" relation="include">
        </childnode>
      </node>
      <node id="20929">
        <label>csignal</label>
      </node>
      <node id="20933">
        <label>lbann/weights/weights.hpp</label>
        <link refid="weights_8hpp"/>
        <childnode refid="20924" relation="include">
        </childnode>
        <childnode refid="20910" relation="include">
        </childnode>
        <childnode refid="20919" relation="include">
        </childnode>
        <childnode refid="20927" relation="include">
        </childnode>
        <childnode refid="20932" relation="include">
        </childnode>
        <childnode refid="20934" relation="include">
        </childnode>
        <childnode refid="20935" relation="include">
        </childnode>
        <childnode refid="20936" relation="include">
        </childnode>
      </node>
      <node id="20918">
        <label>lbann_config.hpp</label>
      </node>
      <node id="20945">
        <label>set</label>
      </node>
      <node id="20943">
        <label>lbann/models/model.hpp</label>
        <link refid="model_8hpp"/>
        <childnode refid="20910" relation="include">
        </childnode>
        <childnode refid="20919" relation="include">
        </childnode>
        <childnode refid="20909" relation="include">
        </childnode>
        <childnode refid="20923" relation="include">
        </childnode>
        <childnode refid="20944" relation="include">
        </childnode>
        <childnode refid="20946" relation="include">
        </childnode>
        <childnode refid="20935" relation="include">
        </childnode>
        <childnode refid="20950" relation="include">
        </childnode>
        <childnode refid="20952" relation="include">
        </childnode>
        <childnode refid="20933" relation="include">
        </childnode>
        <childnode refid="20925" relation="include">
        </childnode>
        <childnode refid="20936" relation="include">
        </childnode>
        <childnode refid="20920" relation="include">
        </childnode>
        <childnode refid="20924" relation="include">
        </childnode>
        <childnode refid="20953" relation="include">
        </childnode>
      </node>
      <node id="20926">
        <label>lbann/utils/compiler_control.hpp</label>
        <link refid="compiler__control_8hpp"/>
      </node>
      <node id="20908">
        <label>lbann/layers/learning/learning.hpp</label>
        <link refid="learning_8hpp"/>
        <childnode refid="20909" relation="include">
        </childnode>
      </node>
      <node id="20913">
        <label>lbann/utils/cyg_profile.hpp</label>
        <link refid="cyg__profile_8hpp"/>
        <childnode refid="20914" relation="include">
        </childnode>
        <childnode refid="20915" relation="include">
        </childnode>
        <childnode refid="20916" relation="include">
        </childnode>
        <childnode refid="20917" relation="include">
        </childnode>
      </node>
      <node id="20906">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/layers/learning/fully_connected.cpp</label>
        <link refid="fully__connected_8cpp"/>
        <childnode refid="20907" relation="include">
        </childnode>
      </node>
      <node id="20912">
        <label>lbann/Elemental_extensions.hpp</label>
        <link refid="Elemental__extensions_8hpp"/>
        <childnode refid="20911" relation="include">
        </childnode>
      </node>
      <node id="20922">
        <label>typeindex</label>
      </node>
      <node id="20916">
        <label>dlfcn.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacelbann">lbann</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2014-2016,<sp/>Lawrence<sp/>Livermore<sp/>National<sp/>Security,<sp/>LLC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Produced<sp/>at<sp/>the<sp/>Lawrence<sp/>Livermore<sp/>National<sp/>Laboratory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Written<sp/>by<sp/>the<sp/>LBANN<sp/>Research<sp/>Team<sp/>(B.<sp/>Van<sp/>Essen,<sp/>et<sp/>al.)<sp/>listed<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>CONTRIBUTORS<sp/>file.<sp/>&lt;lbann-dev@llnl.gov&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LLNL-CODE-697807.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>LBANN:<sp/>Livermore<sp/>Big<sp/>Artificial<sp/>Neural<sp/>Network</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Toolkit.<sp/>For<sp/>details,<sp/>see<sp/>http://software.llnl.gov/LBANN<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://github.com/LLNL/LBANN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;Licensee&quot;);<sp/>you</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implied.<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>license.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="fully__connected_8hpp" kindref="compound">lbann/layers/learning/fully_connected.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacelbann" kindref="compound">lbann</ref><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1fully__connected__layer_1a4f26e5923a82f11c2c7658a27903f83b" kindref="member">fully_connected_layer&lt;data_layout::MODEL_PARALLEL&gt;</ref></highlight></codeline>
<codeline lineno="33" refid="classlbann_1_1fully__connected__layer_1a1f0ae7a5f172e5ced011eaa2755fd04e" refkind="member"><highlight class="normal"><ref refid="classlbann_1_1fully__connected__layer_1a4f26e5923a82f11c2c7658a27903f83b" kindref="member">  ::setup_matrices</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="base_8hpp_1a9951bb1719d534e0401b1f06cad19eab" kindref="member">El::Grid</ref>&amp;<sp/>grid)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1Layer_1a57bbe21131dc00ab5cf9ea5e3656808e" kindref="member">learning_layer::setup_matrices</ref>(grid);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>deallocate_matrices();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>m_linearity_gradient<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="base_8hpp_1a50f80e25e2fbefe6b32d270b8d4f8d19" kindref="member">MCMRMat</ref>(grid);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>m_bias_gradient<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="base_8hpp_1a287f9e47262ac9f90fe0cf35073b9839" kindref="member">MCStarMat</ref>(grid);</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1fully__connected__layer_1a4f26e5923a82f11c2c7658a27903f83b" kindref="member">fully_connected_layer&lt;data_layout::DATA_PARALLEL&gt;</ref></highlight></codeline>
<codeline lineno="42" refid="classlbann_1_1fully__connected__layer_1a9af60f901a84d5604badf078ecbae082" refkind="member"><highlight class="normal"><ref refid="classlbann_1_1fully__connected__layer_1a4f26e5923a82f11c2c7658a27903f83b" kindref="member">  ::setup_matrices</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="base_8hpp_1a9951bb1719d534e0401b1f06cad19eab" kindref="member">El::Grid</ref>&amp;<sp/>grid)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1Layer_1a57bbe21131dc00ab5cf9ea5e3656808e" kindref="member">learning_layer::setup_matrices</ref>(grid);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>deallocate_matrices();</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>m_linearity_gradient<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="base_8hpp_1aba08580d21767b53d0737e115d738dbe" kindref="member">StarMat</ref>(grid);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>m_bias_gradient<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="base_8hpp_1aba08580d21767b53d0737e115d738dbe" kindref="member">StarMat</ref>(grid);</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="50" refid="classlbann_1_1fully__connected__layer_1a6c2be8390e58d9b224e901b8500b2b3c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1fully__connected__layer_1a732ac5715ba0cea535c2bd062f634527" kindref="member">fully_connected_layer&lt;data_layout::MODEL_PARALLEL&gt;::fp_compute_cpu</ref>()<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Matrices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>input<sp/>=<sp/>get_prev_activations();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>output<sp/>=<sp/>get_activations();</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Apply<sp/>linearity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>Perform<sp/>GEMMs<sp/>independently<sp/>if<sp/>possible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>linearity<sp/>=<sp/>m_weights[0]-&gt;get_values();</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(linearity.DistSize()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>El::Gemm(El::NORMAL,<sp/>El::NORMAL,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataType(1),<sp/>linearity.LockedMatrix(),<sp/>input.LockedMatrix(),</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataType(0),<sp/>output.Matrix());</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>El::Gemm(El::NORMAL,<sp/>El::NORMAL,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataType(1),<sp/>linearity,<sp/>input,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataType(0),<sp/>output);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Apply<sp/>bias<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m_bias_scaling_factor<sp/>!=<sp/>DataType(0))<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>local_bias<sp/>=<sp/>m_weights[1]-&gt;get_values().LockedMatrix();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>local_output<sp/>=<sp/>output.Matrix();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>El::IndexDependentMap(local_output,</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(std::function&lt;DataType(El::Int,El::Int,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType&amp;)&gt;)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>([</highlight><highlight class="keyword">this</highlight><highlight class="normal">,&amp;local_bias](El::Int<sp/>r,<sp/>El::Int<sp/>c,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType&amp;<sp/>z)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;DataType<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>z<sp/>+<sp/>m_bias_scaling_factor<sp/>*<sp/>local_bias(r,<sp/>0);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}));</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="84" refid="classlbann_1_1fully__connected__layer_1a4c5b0eea2036c41b15ec03594dac8dc2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1fully__connected__layer_1affbaa1ecb08e45ff6f9ab195227d0084" kindref="member">fully_connected_layer&lt;data_layout::MODEL_PARALLEL&gt;::bp_compute_cpu</ref>()<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Effective<sp/>mini-batch<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mini_batch_size<sp/>=<sp/>this-&gt;m_model-&gt;get_effective_mini_batch_size();</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Matrices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>linearity<sp/>=<sp/>m_weights[0]-&gt;get_values();</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>input<sp/>=<sp/>get_prev_activations();</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>gradient_wrt_output<sp/>=<sp/>get_prev_error_signals();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>gradient_wrt_input<sp/>=<sp/>get_error_signals();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>local_linearity<sp/>=<sp/>linearity.LockedMatrix();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>local_input<sp/>=<sp/>input.LockedMatrix();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>local_gradient_wrt_output<sp/>=<sp/>gradient_wrt_output.LockedMatrix();</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>local_gradient_wrt_input<sp/>=<sp/>gradient_wrt_input.Matrix();</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>gradient<sp/>w.r.t.<sp/>bias<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1optimizer" kindref="compound">optimizer</ref>*<sp/>bias_optimizer<sp/>=<sp/>this-&gt;m_weights[1]-&gt;get_optimizer();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_bias_scaling_factor<sp/>!=<sp/>DataType(0)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>bias_optimizer<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceEl_1a584f088a3325a8222d4d6ac37be04b04" kindref="member">El::RowSum</ref>(local_gradient_wrt_output,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_bias_gradient-&gt;Matrix());</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>bias_optimizer-&gt;<ref refid="classlbann_1_1optimizer_1ac23ebde61a225f70c27ab937df5755ed" kindref="member">add_to_gradient_staging</ref>(</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*m_bias_gradient,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_bias_scaling_factor<sp/>/<sp/>mini_batch_size);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>gradient<sp/>w.r.t.<sp/>linearity<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>Perform<sp/>GEMMs<sp/>independently<sp/>if<sp/>possible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1optimizer" kindref="compound">optimizer</ref>*<sp/>linearity_optimizer<sp/>=<sp/>this-&gt;m_weights[0]-&gt;get_optimizer();</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(linearity_optimizer<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(linearity.DistSize()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>El::Gemm(El::NORMAL,<sp/>El::TRANSPOSE,</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataType(1),<sp/>local_gradient_wrt_output,<sp/>local_input,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataType(0),<sp/>m_linearity_gradient-&gt;Matrix());</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>linearity_optimizer-&gt;<ref refid="classlbann_1_1optimizer_1ac23ebde61a225f70c27ab937df5755ed" kindref="member">add_to_gradient_staging</ref>(</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*m_linearity_gradient,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataType(1)<sp/>/<sp/>mini_batch_size);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>El::Gemm(El::NORMAL,<sp/>El::TRANSPOSE,</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataType(1),<sp/>gradient_wrt_output,<sp/>input,</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataType(0),<sp/>*m_linearity_gradient);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>linearity_optimizer-&gt;<ref refid="classlbann_1_1optimizer_1a435d31e3b7a0302e36439ee36f62dba8" kindref="member">add_to_gradient</ref>(</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*m_linearity_gradient,</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataType(1)<sp/>/<sp/>mini_batch_size);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>gradient<sp/>w.r.t.<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>Perform<sp/>GEMMs<sp/>independently<sp/>if<sp/>possible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(linearity.DistSize()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>El::Gemm(El::TRANSPOSE,<sp/>El::NORMAL,</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataType(1),<sp/>local_linearity,<sp/>local_gradient_wrt_output,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataType(1),<sp/>local_gradient_wrt_input);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>El::Gemm(El::TRANSPOSE,<sp/>El::NORMAL,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataType(1),<sp/>linearity,<sp/>gradient_wrt_output,</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataType(1),<sp/>gradient_wrt_input);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="146" refid="classlbann_1_1fully__connected__layer_1a97243a5aa3474ff70c6f2d7f7e995e65" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1fully__connected__layer_1a732ac5715ba0cea535c2bd062f634527" kindref="member">fully_connected_layer&lt;data_layout::DATA_PARALLEL&gt;::fp_compute_cpu</ref>()<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Matrices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>local_input<sp/>=<sp/>get_local_prev_activations();</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>local_output<sp/>=<sp/>get_local_activations();</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Apply<sp/>linearity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>local_linearity<sp/>=<sp/>m_weights[0]-&gt;get_values().LockedMatrix();</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>El::Gemm(El::NORMAL,<sp/>El::NORMAL,</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataType(1),<sp/>local_linearity,<sp/>local_input,</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataType(0),<sp/>local_output);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Apply<sp/>bias<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m_bias_scaling_factor<sp/>!=<sp/>DataType(0))<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>local_bias<sp/>=<sp/>m_weights[1]-&gt;get_values().LockedMatrix();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>El::IndexDependentMap(local_output,</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(std::function&lt;DataType(El::Int,El::Int,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType&amp;)&gt;)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>([</highlight><highlight class="keyword">this</highlight><highlight class="normal">,&amp;local_bias](El::Int<sp/>r,<sp/>El::Int<sp/>c,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType&amp;<sp/>z)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;DataType<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>z<sp/>+<sp/>m_bias_scaling_factor<sp/>*<sp/>local_bias(r,<sp/>0);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}));</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="173" refid="classlbann_1_1fully__connected__layer_1af65e177e5f2b1a1d2854a04b433f7dae" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1fully__connected__layer_1affbaa1ecb08e45ff6f9ab195227d0084" kindref="member">fully_connected_layer&lt;data_layout::DATA_PARALLEL&gt;::bp_compute_cpu</ref>()<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Effective<sp/>mini-batch<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mini_batch_size<sp/>=<sp/>this-&gt;m_model-&gt;get_effective_mini_batch_size();</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Matrices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>local_linearity<sp/>=<sp/>m_weights[0]-&gt;get_values().LockedMatrix();</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>local_input<sp/>=<sp/>get_local_prev_activations();</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>local_gradient_wrt_output<sp/>=<sp/>get_local_prev_error_signals();</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>local_gradient_wrt_input<sp/>=<sp/>get_local_error_signals();</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>gradient<sp/>w.r.t.<sp/>bias<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1optimizer" kindref="compound">optimizer</ref>*<sp/>bias_optimizer<sp/>=<sp/>this-&gt;m_weights[1]-&gt;get_optimizer();</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_bias_scaling_factor<sp/>!=<sp/>DataType(0)</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>bias_optimizer<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceEl_1a584f088a3325a8222d4d6ac37be04b04" kindref="member">El::RowSum</ref>(local_gradient_wrt_output,</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_bias_gradient-&gt;Matrix());</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>bias_optimizer-&gt;<ref refid="classlbann_1_1optimizer_1ac23ebde61a225f70c27ab937df5755ed" kindref="member">add_to_gradient_staging</ref>(</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*m_bias_gradient,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_bias_scaling_factor<sp/>/<sp/>mini_batch_size);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>gradient<sp/>w.r.t.<sp/>linearity<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1optimizer" kindref="compound">optimizer</ref>*<sp/>linearity_optimizer<sp/>=<sp/>this-&gt;m_weights[0]-&gt;get_optimizer();</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(linearity_optimizer<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>El::Gemm(El::NORMAL,<sp/>El::TRANSPOSE,</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataType(1),<sp/>local_gradient_wrt_output,<sp/>local_input,</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataType(0),<sp/>m_linearity_gradient-&gt;Matrix());</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>linearity_optimizer-&gt;<ref refid="classlbann_1_1optimizer_1ac23ebde61a225f70c27ab937df5755ed" kindref="member">add_to_gradient_staging</ref>(</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*m_linearity_gradient,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DataType(1)<sp/>/<sp/>mini_batch_size);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>gradient<sp/>w.r.t.<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>El::Gemm(El::TRANSPOSE,<sp/>El::NORMAL,</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataType(1),<sp/>local_linearity,<sp/>local_gradient_wrt_output,</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataType(1),<sp/>local_gradient_wrt_input);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>lbann</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/mckinney27/doxy-testbed/lbann/src/layers/learning/fully_connected.cpp"/>
  </compounddef>
</doxygen>
