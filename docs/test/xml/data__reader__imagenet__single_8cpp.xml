<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="data__reader__imagenet__single_8cpp" kind="file" language="C++">
    <compoundname>data_reader_imagenet_single.cpp</compoundname>
    <includes refid="data__reader__imagenet__single_8hpp" local="yes">lbann/data_readers/data_reader_imagenet_single.hpp</includes>
    <includes refid="image__utils_8hpp" local="yes">lbann/data_readers/image_utils.hpp</includes>
    <includes local="no">fstream</includes>
    <includes local="no">omp.h</includes>
    <incdepgraph>
      <node id="19404">
        <label>sys/stat.h</label>
      </node>
      <node id="19430">
        <label>lbann/data_readers/image_utils.hpp</label>
        <link refid="image__utils_8hpp"/>
        <childnode refid="19381" relation="include">
        </childnode>
        <childnode refid="19427" relation="include">
        </childnode>
        <childnode refid="19416" relation="include">
        </childnode>
      </node>
      <node id="19411">
        <label>cv_process.hpp</label>
        <link refid="cv__process_8hpp"/>
        <childnode refid="19412" relation="include">
        </childnode>
        <childnode refid="19415" relation="include">
        </childnode>
        <childnode refid="19418" relation="include">
        </childnode>
        <childnode refid="19419" relation="include">
        </childnode>
        <childnode refid="19422" relation="include">
        </childnode>
        <childnode refid="19423" relation="include">
        </childnode>
        <childnode refid="19424" relation="include">
        </childnode>
        <childnode refid="19426" relation="include">
        </childnode>
        <childnode refid="19428" relation="include">
        </childnode>
        <childnode refid="19429" relation="include">
        </childnode>
      </node>
      <node id="19426">
        <label>cv_mean_extractor.hpp</label>
        <link refid="cv__mean__extractor_8hpp"/>
        <childnode refid="19412" relation="include">
        </childnode>
        <childnode refid="19427" relation="include">
        </childnode>
      </node>
      <node id="19429">
        <label>limits</label>
      </node>
      <node id="19407">
        <label>lbann/data_readers/image_preprocessor.hpp</label>
        <link refid="image__preprocessor_8hpp"/>
        <childnode refid="19389" relation="include">
        </childnode>
        <childnode refid="19381" relation="include">
        </childnode>
      </node>
      <node id="19395">
        <label>lbann/io/persist.hpp</label>
        <link refid="persist_8hpp"/>
        <childnode refid="19381" relation="include">
        </childnode>
        <childnode refid="19382" relation="include">
        </childnode>
      </node>
      <node id="19382">
        <label>El.hpp</label>
      </node>
      <node id="19417">
        <label>lbann/utils/mild_exception.hpp</label>
        <link refid="mild__exception_8hpp"/>
        <childnode refid="19401" relation="include">
        </childnode>
      </node>
      <node id="19381">
        <label>lbann/base.hpp</label>
        <link refid="base_8hpp"/>
        <childnode refid="19382" relation="include">
        </childnode>
        <childnode refid="19383" relation="include">
        </childnode>
        <childnode refid="19384" relation="include">
        </childnode>
        <childnode refid="19389" relation="include">
        </childnode>
      </node>
      <node id="19379">
        <label>data_reader_image.hpp</label>
        <link refid="data__reader__image_8hpp"/>
        <childnode refid="19380" relation="include">
        </childnode>
        <childnode refid="19407" relation="include">
        </childnode>
        <childnode refid="19411" relation="include">
        </childnode>
      </node>
      <node id="19408">
        <label>cassert</label>
      </node>
      <node id="19406">
        <label>fcntl.h</label>
      </node>
      <node id="19414">
        <label>opencv_extensions.hpp</label>
        <link refid="opencv__extensions_8hpp"/>
      </node>
      <node id="19422">
        <label>cv_colorizer.hpp</label>
        <link refid="cv__colorizer_8hpp"/>
        <childnode refid="19412" relation="include">
        </childnode>
      </node>
      <node id="19400">
        <label>string</label>
      </node>
      <node id="19393">
        <label>map</label>
      </node>
      <node id="19432">
        <label>omp.h</label>
      </node>
      <node id="19418">
        <label>cv_subtractor.hpp</label>
        <link refid="cv__subtractor_8hpp"/>
        <childnode refid="19412" relation="include">
        </childnode>
        <childnode refid="19381" relation="include">
        </childnode>
      </node>
      <node id="19402">
        <label>exception</label>
      </node>
      <node id="19431">
        <label>fstream</label>
      </node>
      <node id="19420">
        <label>ostream</label>
      </node>
      <node id="19396">
        <label>random</label>
      </node>
      <node id="19378">
        <label>data_reader_imagenet.hpp</label>
        <link refid="data__reader__imagenet_8hpp"/>
        <childnode refid="19379" relation="include">
        </childnode>
        <childnode refid="19411" relation="include">
        </childnode>
      </node>
      <node id="19405">
        <label>sys/types.h</label>
      </node>
      <node id="19416">
        <label>typeinfo</label>
      </node>
      <node id="19386">
        <label>cstdio</label>
      </node>
      <node id="19423">
        <label>cv_decolorizer.hpp</label>
        <link refid="cv__decolorizer_8hpp"/>
        <childnode refid="19389" relation="include">
        </childnode>
        <childnode refid="19412" relation="include">
        </childnode>
      </node>
      <node id="19398">
        <label>lbann/utils/stack_trace.hpp</label>
        <link refid="stack__trace_8hpp"/>
        <childnode refid="19399" relation="include">
        </childnode>
        <childnode refid="19400" relation="include">
        </childnode>
      </node>
      <node id="19388">
        <label>cxxabi.h</label>
      </node>
      <node id="19397">
        <label>lbann/utils/exception.hpp</label>
        <link refid="exception_8hpp"/>
        <childnode refid="19381" relation="include">
        </childnode>
        <childnode refid="19391" relation="include">
        </childnode>
        <childnode refid="19398" relation="include">
        </childnode>
        <childnode refid="19401" relation="include">
        </childnode>
        <childnode refid="19402" relation="include">
        </childnode>
      </node>
      <node id="19410">
        <label>unistd.h</label>
      </node>
      <node id="19392">
        <label>vector</label>
      </node>
      <node id="19391">
        <label>lbann/comm.hpp</label>
        <link refid="comm_8hpp"/>
        <childnode refid="19392" relation="include">
        </childnode>
        <childnode refid="19393" relation="include">
        </childnode>
        <childnode refid="19394" relation="include">
        </childnode>
        <childnode refid="19381" relation="include">
        </childnode>
      </node>
      <node id="19425">
        <label>utility</label>
      </node>
      <node id="19403">
        <label>lbann/io/file_io.hpp</label>
        <link refid="file__io_8hpp"/>
        <childnode refid="19404" relation="include">
        </childnode>
        <childnode refid="19405" relation="include">
        </childnode>
        <childnode refid="19406" relation="include">
        </childnode>
      </node>
      <node id="19385">
        <label>cstdlib</label>
      </node>
      <node id="19376">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/data_readers/data_reader_imagenet_single.cpp</label>
        <link refid="data__reader__imagenet__single_8cpp"/>
        <childnode refid="19377" relation="include">
        </childnode>
        <childnode refid="19430" relation="include">
        </childnode>
        <childnode refid="19431" relation="include">
        </childnode>
        <childnode refid="19432" relation="include">
        </childnode>
      </node>
      <node id="19413">
        <label>opencv.hpp</label>
        <link refid="opencv_8hpp"/>
        <childnode refid="19389" relation="include">
        </childnode>
      </node>
      <node id="19401">
        <label>iostream</label>
      </node>
      <node id="19415">
        <label>cv_normalizer.hpp</label>
        <link refid="cv__normalizer_8hpp"/>
        <childnode refid="19416" relation="include">
        </childnode>
        <childnode refid="19412" relation="include">
        </childnode>
        <childnode refid="19381" relation="include">
        </childnode>
        <childnode refid="19417" relation="include">
        </childnode>
      </node>
      <node id="19390">
        <label>lbann/utils/random.hpp</label>
        <link refid="random_8hpp"/>
        <childnode refid="19381" relation="include">
        </childnode>
        <childnode refid="19391" relation="include">
        </childnode>
        <childnode refid="19395" relation="include">
        </childnode>
        <childnode refid="19396" relation="include">
        </childnode>
      </node>
      <node id="19412">
        <label>cv_transform.hpp</label>
        <link refid="cv__transform_8hpp"/>
        <childnode refid="19413" relation="include">
        </childnode>
        <childnode refid="19414" relation="include">
        </childnode>
      </node>
      <node id="19419">
        <label>cv_augmenter.hpp</label>
        <link refid="cv__augmenter_8hpp"/>
        <childnode refid="19412" relation="include">
        </childnode>
        <childnode refid="19401" relation="include">
        </childnode>
        <childnode refid="19420" relation="include">
        </childnode>
        <childnode refid="19421" relation="include">
        </childnode>
        <childnode refid="19400" relation="include">
        </childnode>
      </node>
      <node id="19399">
        <label>csignal</label>
      </node>
      <node id="19424">
        <label>cv_cropper.hpp</label>
        <link refid="cv__cropper_8hpp"/>
        <childnode refid="19412" relation="include">
        </childnode>
        <childnode refid="19425" relation="include">
        </childnode>
        <childnode refid="19420" relation="include">
        </childnode>
      </node>
      <node id="19380">
        <label>data_reader.hpp</label>
        <link refid="data__reader_8hpp"/>
        <childnode refid="19381" relation="include">
        </childnode>
        <childnode refid="19390" relation="include">
        </childnode>
        <childnode refid="19397" relation="include">
        </childnode>
        <childnode refid="19391" relation="include">
        </childnode>
        <childnode refid="19403" relation="include">
        </childnode>
        <childnode refid="19395" relation="include">
        </childnode>
        <childnode refid="19407" relation="include">
        </childnode>
        <childnode refid="19408" relation="include">
        </childnode>
        <childnode refid="19409" relation="include">
        </childnode>
        <childnode refid="19400" relation="include">
        </childnode>
        <childnode refid="19392" relation="include">
        </childnode>
        <childnode refid="19410" relation="include">
        </childnode>
      </node>
      <node id="19389">
        <label>lbann_config.hpp</label>
      </node>
      <node id="19427">
        <label>type_traits</label>
      </node>
      <node id="19377">
        <label>lbann/data_readers/data_reader_imagenet_single.hpp</label>
        <link refid="data__reader__imagenet__single_8hpp"/>
        <childnode refid="19378" relation="include">
        </childnode>
        <childnode refid="19392" relation="include">
        </childnode>
      </node>
      <node id="19409">
        <label>algorithm</label>
      </node>
      <node id="19384">
        <label>lbann/utils/cyg_profile.hpp</label>
        <link refid="cyg__profile_8hpp"/>
        <childnode refid="19385" relation="include">
        </childnode>
        <childnode refid="19386" relation="include">
        </childnode>
        <childnode refid="19387" relation="include">
        </childnode>
        <childnode refid="19388" relation="include">
        </childnode>
      </node>
      <node id="19421">
        <label>cstring</label>
      </node>
      <node id="19383">
        <label>lbann/Elemental_extensions.hpp</label>
        <link refid="Elemental__extensions_8hpp"/>
        <childnode refid="19382" relation="include">
        </childnode>
      </node>
      <node id="19428">
        <label>memory</label>
      </node>
      <node id="19394">
        <label>typeindex</label>
      </node>
      <node id="19387">
        <label>dlfcn.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacelbann">lbann</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2014-2016,<sp/>Lawrence<sp/>Livermore<sp/>National<sp/>Security,<sp/>LLC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Produced<sp/>at<sp/>the<sp/>Lawrence<sp/>Livermore<sp/>National<sp/>Laboratory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Written<sp/>by<sp/>the<sp/>LBANN<sp/>Research<sp/>Team<sp/>(B.<sp/>Van<sp/>Essen,<sp/>et<sp/>al.)<sp/>listed<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>CONTRIBUTORS<sp/>file.<sp/>&lt;lbann-dev@llnl.gov&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LLNL-CODE-697807.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>LBANN:<sp/>Livermore<sp/>Big<sp/>Artificial<sp/>Neural<sp/>Network</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Toolkit.<sp/>For<sp/>details,<sp/>see<sp/>http://software.llnl.gov/LBANN<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://github.com/LLNL/LBANN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;Licensee&quot;);<sp/>you</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implied.<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>license.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>data_reader_imagenet_single<sp/>.hpp<sp/>.cpp<sp/>-<sp/>data<sp/>reader<sp/>class<sp/>for<sp/>ImageNet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataset<sp/>packed<sp/>into<sp/>a<sp/>single<sp/>file</highlight></codeline>
<codeline lineno="29"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="data__reader__imagenet__single_8hpp" kindref="compound">lbann/data_readers/data_reader_imagenet_single.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="image__utils_8hpp" kindref="compound">lbann/data_readers/image_utils.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;omp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacelbann" kindref="compound">lbann</ref><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="classlbann_1_1imagenet__reader__single_1ac42ce78ac5d191d571443dfea1f9d2ec" refkind="member"><highlight class="normal"><ref refid="classlbann_1_1imagenet__reader__single_1ac42ce78ac5d191d571443dfea1f9d2ec" kindref="member">imagenet_reader_single::imagenet_reader_single</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;cv_process&gt;&amp;<sp/>pp,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>shuffle)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>:<sp/><ref refid="classlbann_1_1imagenet__reader" kindref="compound">imagenet_reader</ref>(pp,<sp/>shuffle)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="classlbann_1_1imagenet__reader__single_1abf3174dec9942137107faf6ef4d24e37" refkind="member"><highlight class="normal"><ref refid="classlbann_1_1imagenet__reader__single_1ac42ce78ac5d191d571443dfea1f9d2ec" kindref="member">imagenet_reader_single::imagenet_reader_single</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1imagenet__reader__single" kindref="compound">imagenet_reader_single</ref>&amp;<sp/>source)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>:<sp/><ref refid="classlbann_1_1imagenet__reader" kindref="compound">imagenet_reader</ref>(source)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1imagenet__reader__single_1a605ba53f4e3fa02a4fced38d41465a10" kindref="member">m_offsets</ref><sp/>=<sp/>source.<ref refid="classlbann_1_1imagenet__reader__single_1a605ba53f4e3fa02a4fced38d41465a10" kindref="member">m_offsets</ref>;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1imagenet__reader__single_1a8db14d15bfc2de92ffb3c20f1a38dd00" kindref="member">open_data_stream</ref>();</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Assignment<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="classlbann_1_1imagenet__reader__single_1af38327f44f1de2dd191cd2d1dc193900" refkind="member"><highlight class="normal"><ref refid="classlbann_1_1imagenet__reader__single" kindref="compound">imagenet_reader_single</ref>&amp;<sp/><ref refid="classlbann_1_1imagenet__reader__single_1af38327f44f1de2dd191cd2d1dc193900" kindref="member">imagenet_reader_single::operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1imagenet__reader__single" kindref="compound">imagenet_reader_single</ref>&amp;<sp/>source)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>self-assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>&amp;source)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Call<sp/>the<sp/>parent<sp/>operator=<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1imagenet__reader_1a5ea15cc16aa679a2cb549b44eb77f323" kindref="member">imagenet_reader::operator=</ref>(source);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1imagenet__reader__single_1a605ba53f4e3fa02a4fced38d41465a10" kindref="member">m_offsets</ref><sp/>=<sp/>source.<ref refid="classlbann_1_1imagenet__reader__single_1a605ba53f4e3fa02a4fced38d41465a10" kindref="member">m_offsets</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1imagenet__reader__single_1a8db14d15bfc2de92ffb3c20f1a38dd00" kindref="member">open_data_stream</ref>();</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="classlbann_1_1imagenet__reader__single_1a6849f7af5ad0197f077f60c86a3c6c26" refkind="member"><highlight class="normal"><ref refid="classlbann_1_1imagenet__reader__single_1a6849f7af5ad0197f077f60c86a3c6c26" kindref="member">imagenet_reader_single::~imagenet_reader_single</ref>()<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>i<sp/>:<sp/><ref refid="classlbann_1_1imagenet__reader__single_1af617e1b0b019049682db6de6e01b05ca" kindref="member">m_data_filestream</ref>)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="classlbann_1_1imagenet__reader__single_1a7ea768d9784b7a9532551d7402ee4f8e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1imagenet__reader__single_1a7ea768d9784b7a9532551d7402ee4f8e" kindref="member">imagenet_reader_single::load</ref>()<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>image_dir<sp/>=<sp/><ref refid="classlbann_1_1generic__data__reader_1ab4c6c2d4ba40ece809ce896828c8ff03" kindref="member">get_file_dir</ref>();</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>base_filename<sp/>=<sp/><ref refid="classlbann_1_1generic__data__reader_1a56664e1b43f3fe923cf6d652f14b40a9" kindref="member">get_data_filename</ref>();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//open<sp/>offsets<sp/>file,<sp/>with<sp/>error<sp/>checking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>std::stringstream<sp/>b;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>b<sp/>&lt;&lt;<sp/>image_dir<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>base_filename<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;_offsets.txt&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1generic__data__reader_1ae82c40eebc05e2f0c1198afcc7a7f009" kindref="member">is_master</ref>())<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;opening:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>b.str()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>std::ifstream<sp/>in(b.str().c_str());</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>in.is_open()<sp/>and<sp/>in.good())<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>err;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>&lt;&lt;<sp/>__FILE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>__LINE__</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/><sp/>failed<sp/>to<sp/>open<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>b.str()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>for<sp/>reading&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(err.str());</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//read<sp/>the<sp/>offsets<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_images<sp/>=<sp/>0u;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>in<sp/>&gt;&gt;<sp/>num_images;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1generic__data__reader_1ae82c40eebc05e2f0c1198afcc7a7f009" kindref="member">is_master</ref>())<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;num<sp/>images:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>num_images<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1imagenet__reader__single_1a605ba53f4e3fa02a4fced38d41465a10" kindref="member">m_offsets</ref>.reserve(num_images+1);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1imagenet__reader__single_1a605ba53f4e3fa02a4fced38d41465a10" kindref="member">m_offsets</ref>.emplace_back(0,0);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>last_offset<sp/>=<sp/>0u;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>0u;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>label<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(in<sp/>&gt;&gt;<sp/>offset<sp/>&gt;&gt;<sp/>label)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1imagenet__reader__single_1a605ba53f4e3fa02a4fced38d41465a10" kindref="member">m_offsets</ref>.emplace_back(offset<sp/>+<sp/>last_offset,<sp/>label);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>last_offset<sp/>=<sp/><ref refid="classlbann_1_1imagenet__reader__single_1a605ba53f4e3fa02a4fced38d41465a10" kindref="member">m_offsets</ref>.back().first;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_images+1<sp/>!=<sp/><ref refid="classlbann_1_1imagenet__reader__single_1a605ba53f4e3fa02a4fced38d41465a10" kindref="member">m_offsets</ref>.size())<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>err;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>&lt;&lt;<sp/>__FILE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>__LINE__</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/><sp/>we<sp/>read<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classlbann_1_1imagenet__reader__single_1a605ba53f4e3fa02a4fced38d41465a10" kindref="member">m_offsets</ref>.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>offsets,<sp/>but<sp/>should<sp/>have<sp/>read<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>num_images;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(err.str());</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>in.close();</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1imagenet__reader__single_1a8db14d15bfc2de92ffb3c20f1a38dd00" kindref="member">open_data_stream</ref>();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1aaab6aeff67ffff1c689336851fec2c57" kindref="member">m_shuffled_indices</ref>.resize(num_images);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>num_images;<sp/>n++)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1aaab6aeff67ffff1c689336851fec2c57" kindref="member">m_shuffled_indices</ref>[n]<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1aa28fdeeb6af492540f507e49adff5d6c" kindref="member">select_subset_of_data</ref>();</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="classlbann_1_1imagenet__reader__single_1a77c576d6085d4a8674322275dd9bd133" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1imagenet__reader__single_1a77c576d6085d4a8674322275dd9bd133" kindref="member">imagenet_reader_single::fetch_datum</ref>(<ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>X,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data_id,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mb_idx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>std::stringstream<sp/>err;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(static_cast&lt;size_t&gt;(data_id+1)<sp/>&gt;=<sp/><ref refid="classlbann_1_1imagenet__reader__single_1a605ba53f4e3fa02a4fced38d41465a10" kindref="member">m_offsets</ref>.size())<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>&lt;&lt;<sp/>__FILE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>__LINE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>data_id=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>data_id<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>larger<sp/>than<sp/>m_offsets.size()=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classlbann_1_1imagenet__reader__single_1a605ba53f4e3fa02a4fced38d41465a10" kindref="member">m_offsets</ref>.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-2&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(err.str());</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>start<sp/>=<sp/><ref refid="classlbann_1_1imagenet__reader__single_1a605ba53f4e3fa02a4fced38d41465a10" kindref="member">m_offsets</ref>[data_id].first;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>end<sp/>=<sp/><ref refid="classlbann_1_1imagenet__reader__single_1a605ba53f4e3fa02a4fced38d41465a10" kindref="member">m_offsets</ref>[data_id+1].first;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>&gt;<sp/><ref refid="classlbann_1_1imagenet__reader__single_1aa1a20a782f97e697d9d70371a5e33384" kindref="member">m_file_size</ref>)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>&lt;&lt;<sp/>__FILE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>__LINE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>end=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>end<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>larger<sp/>than<sp/>m_file_size=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classlbann_1_1imagenet__reader__single_1aa1a20a782f97e697d9d70371a5e33384" kindref="member">m_file_size</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>for<sp/>P_&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classlbann_1_1generic__data__reader_1ab5321bd7c6e83845785753366e6d9e64" kindref="member">get_rank</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>with<sp/>role:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classlbann_1_1generic__data__reader_1a92982e1b399f37e2ead5aa440883cba5" kindref="member">get_role</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>m_offsets.size():<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classlbann_1_1imagenet__reader__single_1a605ba53f4e3fa02a4fced38d41465a10" kindref="member">m_offsets</ref>.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>mb_idx:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mb_idx<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>data_id:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>data_id;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(err.str());</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ssz<sp/>=<sp/>end<sp/>-<sp/>start;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ssz<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;P_&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classlbann_1_1generic__data__reader_1ab5321bd7c6e83845785753366e6d9e64" kindref="member">get_rank</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>start:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>start<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>end:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>end<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>ssz=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ssz<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>&lt;=<sp/>0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(err.str());</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1imagenet__reader__single_1a499b197f1d985b592801de9adfe2d2f5" kindref="member">m_work_buffer</ref>[tid].resize(ssz);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1imagenet__reader__single_1af617e1b0b019049682db6de6e01b05ca" kindref="member">m_data_filestream</ref>[tid]-&gt;seekg(start);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1imagenet__reader__single_1af617e1b0b019049682db6de6e01b05ca" kindref="member">m_data_filestream</ref>[tid]-&gt;read((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)&amp;<ref refid="classlbann_1_1imagenet__reader__single_1a499b197f1d985b592801de9adfe2d2f5" kindref="member">m_work_buffer</ref>[tid][0],<sp/>ssz);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width=0,<sp/>height=0,<sp/>img_type=0;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">::Mat</ref><sp/>X_v<sp/>=<sp/><ref refid="classlbann_1_1imagenet__reader_1a5c0662ebaa378f7f5b4448f4d207e872" kindref="member">create_datum_view</ref>(X,<sp/>mb_idx);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><ref refid="classlbann_1_1image__utils_1a720f0987ec8eff333bf697ed18aafc93" kindref="member">image_utils::import_image</ref>(<ref refid="classlbann_1_1imagenet__reader__single_1a499b197f1d985b592801de9adfe2d2f5" kindref="member">m_work_buffer</ref>[tid],<sp/>width,<sp/>height,<sp/>img_type,<sp/>*(<ref refid="classlbann_1_1imagenet__reader_1a1e0d0ed4ac529de3e9f735512f5e3dd8" kindref="member">m_pps</ref>[tid]),<sp/>X_v);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!ret)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>&lt;&lt;<sp/>__FILE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>__LINE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classlbann_1_1imagenet__reader__single_1aecd9cec6777e4a7485daa5b0396afee0" kindref="member">get_type</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>image_utils::import_image<sp/>failed<sp/>to<sp/>load<sp/>index:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>data_id;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(err.str());</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((width<sp/>*<sp/>height<sp/>*<sp/>CV_MAT_CN(img_type))<sp/>!=<sp/><ref refid="classlbann_1_1image__data__reader_1af512f1f866c0f654309b7f28886dca9a" kindref="member">m_image_linearized_size</ref>)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>&lt;&lt;<sp/>__FILE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>__LINE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classlbann_1_1imagenet__reader__single_1aecd9cec6777e4a7485daa5b0396afee0" kindref="member">get_type</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>mismatch<sp/>data<sp/>size<sp/>--<sp/>either<sp/>width,<sp/>height<sp/>or<sp/>channel&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(err.str());</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168" refid="classlbann_1_1imagenet__reader__single_1a17b2e9f767fe36097acbc4600ce4e480" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1imagenet__reader__single_1a17b2e9f767fe36097acbc4600ce4e480" kindref="member">imagenet_reader_single::fetch_label</ref>(<ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>Y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data_id,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mb_idx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>label<sp/>=<sp/><ref refid="classlbann_1_1imagenet__reader__single_1a605ba53f4e3fa02a4fced38d41465a10" kindref="member">m_offsets</ref>[data_id+1].second;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>Y.Set(label,<sp/>mb_idx,<sp/>1);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174" refid="classlbann_1_1imagenet__reader__single_1a8db14d15bfc2de92ffb3c20f1a38dd00" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1imagenet__reader__single_1a8db14d15bfc2de92ffb3c20f1a38dd00" kindref="member">imagenet_reader_single::open_data_stream</ref>()<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>image_dir<sp/>=<sp/><ref refid="classlbann_1_1generic__data__reader_1ab4c6c2d4ba40ece809ce896828c8ff03" kindref="member">get_file_dir</ref>();</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>base_filename<sp/>=<sp/><ref refid="classlbann_1_1generic__data__reader_1a56664e1b43f3fe923cf6d652f14b40a9" kindref="member">get_data_filename</ref>();</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>std::stringstream<sp/>b;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>b<sp/>&lt;&lt;<sp/>image_dir<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>base_filename<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;_data.bin&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1generic__data__reader_1ae82c40eebc05e2f0c1198afcc7a7f009" kindref="member">is_master</ref>())<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;opening:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>b.str()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nthreads<sp/>=<sp/>omp_get_max_threads();</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1imagenet__reader__single_1a499b197f1d985b592801de9adfe2d2f5" kindref="member">m_work_buffer</ref>.resize(nthreads);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>i<sp/>:<sp/><ref refid="classlbann_1_1imagenet__reader__single_1af617e1b0b019049682db6de6e01b05ca" kindref="member">m_data_filestream</ref>)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>m_data_filestream.clear();</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>m_data_filestream.resize(nthreads);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#pragma<sp/>omp<sp/>parallel<sp/>for<sp/>schedule(static,<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>nthreads;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>m_data_filestream[i]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>std::ifstream(b.str().c_str(),<sp/>std::ios::in<sp/>|<sp/>std::ios::binary);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_data_filestream[i]<sp/>&amp;&amp;<sp/>(not<sp/>m_data_filestream[i]-&gt;is_open()<sp/>or<sp/>not<sp/>m_data_filestream[i]-&gt;good()))<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>err;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>&lt;&lt;<sp/>__FILE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>__LINE__</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/><sp/>failed<sp/>to<sp/>open<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>b.str()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>for<sp/>reading&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(err.str());</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>m_data_filestream[i]-&gt;unsetf(std::ios::skipws);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i==0)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_data_filestream[i]-&gt;seekg(0,<sp/>m_data_filestream[i]-&gt;end);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1imagenet__reader__single_1aa1a20a782f97e697d9d70371a5e33384" kindref="member">m_file_size</ref><sp/>=<sp/>m_data_filestream[i]-&gt;tellg();</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>m_data_filestream[i]-&gt;seekg(0,<sp/>m_data_filestream[i]-&gt;beg);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal">}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>lbann</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/mckinney27/doxy-testbed/lbann/src/data_readers/data_reader_imagenet_single.cpp"/>
  </compounddef>
</doxygen>
