<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classlbann_1_1lbann__quantizer" kind="class" language="C++" prot="public">
    <compoundname>lbann::lbann_quantizer</compoundname>
    <includes refid="quantizer_8hpp" local="no">quantizer.hpp</includes>
    <innerclass refid="structlbann_1_1lbann__quantizer_1_1adaptive__reconstructions" prot="public">lbann::lbann_quantizer::adaptive_reconstructions</innerclass>
    <innerclass refid="structlbann_1_1lbann__quantizer_1_1adaptive__thresholds" prot="public">lbann::lbann_quantizer::adaptive_thresholds</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classlbann_1_1lbann__quantizer_1ac8b63c86fc871e248ce20c7af19a7fad" prot="public" static="no">
        <type>El::Unsigned</type>
        <definition>using lbann::lbann_quantizer::uqtype =  El::Unsigned</definition>
        <argsstring></argsstring>
        <name>uqtype</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>We require that sizeof(DataType) &lt;= sizeof(qtype) == sizeof(uqtype). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="59" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classlbann_1_1lbann__quantizer_1afcda642ff1b44d31eec910909c3d013e" prot="public" static="no">
        <type>El::Int</type>
        <definition>using lbann::lbann_quantizer::qtype =  El::Int</definition>
        <argsstring></argsstring>
        <name>qtype</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="60" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classlbann_1_1lbann__quantizer_1a399f3f8c393b6021b43e95d1ce6ea28c" prot="public" static="no">
        <type>El::Matrix&lt; <ref refid="classlbann_1_1lbann__quantizer_1afcda642ff1b44d31eec910909c3d013e" kindref="member">qtype</ref> &gt;</type>
        <definition>using lbann::lbann_quantizer::QuantizedMatrix =  El::Matrix&lt;qtype&gt;</definition>
        <argsstring></argsstring>
        <name>QuantizedMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This represents a quantized version of a matrix. Each column is quantized separately. The first two entries are floats representing the positive and negative averages for the column (used in dequantizion). The rest is one-bit quantized entries. Quantization is by column to keep averages nice and because Elemental uses column-major ordering. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="69" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classlbann_1_1lbann__quantizer_1a85ea8e298c2975b4f802855278406aa7" prot="public" static="no">
        <type>std::vector&lt; <ref refid="classlbann_1_1lbann__quantizer_1ac8b63c86fc871e248ce20c7af19a7fad" kindref="member">uqtype</ref> &gt;</type>
        <definition>using lbann::lbann_quantizer::ThreshQuantized =  std::vector&lt;uqtype&gt;</definition>
        <argsstring></argsstring>
        <name>ThreshQuantized</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="70" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classlbann_1_1lbann__quantizer_1adb72778971f6bb914a14823dd5806702" prot="public" static="no">
        <type>std::vector&lt; uint32_t &gt;</type>
        <definition>using lbann::lbann_quantizer::ThreshQuantized32 =  std::vector&lt;uint32_t&gt;</definition>
        <argsstring></argsstring>
        <name>ThreshQuantized32</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="71" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classlbann_1_1lbann__quantizer_1a2153502c89432e8762141d84794aac75" prot="public" static="no">
        <type>std::vector&lt; uint64_t &gt;</type>
        <definition>using lbann::lbann_quantizer::ThreshQuantized64 =  std::vector&lt;uint64_t&gt;</definition>
        <argsstring></argsstring>
        <name>ThreshQuantized64</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="72" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classlbann_1_1lbann__quantizer_1a33ea17392f53b90e91aea1ffb7e11d68" prot="private" static="yes" mutable="no">
        <type>const size_t</type>
        <definition>const size_t lbann::lbann_quantizer::NUM_BITS</definition>
        <argsstring></argsstring>
        <name>NUM_BITS</name>
        <initializer>= sizeof(<ref refid="classlbann_1_1lbann__quantizer_1afcda642ff1b44d31eec910909c3d013e" kindref="member">qtype</ref>) * 8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of bits per quantized word. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="245" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" bodystart="245" bodyend="-1"/>
        <referencedby refid="classlbann_1_1lbann__quantizer_1a4dd4696cbbfd93c73e5fb3c40fcb16c3" compoundref="quantizer_8cpp" startline="45" endline="133">onebit_quantize</referencedby>
        <referencedby refid="classlbann_1_1lbann__quantizer_1ad5592daa122b40c275cce3dc93bba41e" compoundref="quantizer_8cpp" startline="140" endline="170">onebit_unquantize</referencedby>
        <referencedby refid="classlbann_1_1lbann__quantizer_1a879cea8464408b8265be9e55edd83b2c" compoundref="quantizer_8cpp" startline="177" endline="208">onebit_unquantize_add</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classlbann_1_1lbann__quantizer_1a7745dbc282bebe812ff5523a4b3df3f2" prot="private" static="yes" mutable="no">
        <type>const El::Int</type>
        <definition>const El::Int lbann::lbann_quantizer::NUM_THRESHOLD_SAMPLES</definition>
        <argsstring></argsstring>
        <name>NUM_THRESHOLD_SAMPLES</name>
        <initializer>= 1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of samples to use in proportion_threshold. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="247" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" bodystart="247" bodyend="-1"/>
        <referencedby refid="classlbann_1_1lbann__quantizer_1aa5aabc1cb4163e95aee993d9b37b9b32" compoundref="quantizer_8cpp" startline="500" endline="580">proportion_threshold</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classlbann_1_1lbann__quantizer_1a10667e56db4218aac3912c6bae28fc41" prot="private" static="yes" mutable="no">
        <type>const El::Int</type>
        <definition>const El::Int lbann::lbann_quantizer::NUM_RECON_SAMPLES</definition>
        <argsstring></argsstring>
        <name>NUM_RECON_SAMPLES</name>
        <initializer>= 128</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of samples to use in col_reconstruction. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="249" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" bodystart="249" bodyend="-1"/>
        <referencedby refid="classlbann_1_1lbann__quantizer_1af77beca5905ff8601ca9b8231a2a16e0" compoundref="quantizer_8cpp" startline="582" endline="679">col_reconstruction</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classlbann_1_1lbann__quantizer_1a8e25785452736c54861a69207a48252d" prot="private" static="yes" mutable="no">
        <type>const El::Int</type>
        <definition>const El::Int lbann::lbann_quantizer::NUM_ONEBIT_SAMPLES</definition>
        <argsstring></argsstring>
        <name>NUM_ONEBIT_SAMPLES</name>
        <initializer>= 128</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Samples to use to approximate column averages in onebit quantization. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="251" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" bodystart="251" bodyend="-1"/>
        <referencedby refid="classlbann_1_1lbann__quantizer_1a4dd4696cbbfd93c73e5fb3c40fcb16c3" compoundref="quantizer_8cpp" startline="45" endline="133">onebit_quantize</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" prot="private" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int lbann::lbann_quantizer::HEADER_FACTOR</definition>
        <argsstring></argsstring>
        <name>HEADER_FACTOR</name>
        <initializer>= 3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Factor used when computing header lengths in adaptive quantization. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="256" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" bodystart="256" bodyend="-1"/>
        <referencedby refid="classlbann_1_1lbann__quantizer_1a7e4dfca5770dfd88ae6255b0407d8f80" compoundref="quantizer__impl_8hpp" startline="37" endline="161">adaptive_quantize</referencedby>
        <referencedby refid="classlbann_1_1lbann__quantizer_1acf8d21e8114a00fdea53d919d76dd511" compoundref="quantizer__impl_8hpp" startline="170" endline="214">adaptive_unquantize</referencedby>
        <referencedby refid="classlbann_1_1lbann__quantizer_1a1f63f7be2e227a48ebaa25056e6f85bc" compoundref="quantizer__impl_8hpp" startline="223" endline="271">adaptive_unquantize_add</referencedby>
        <referencedby refid="classlbann_1_1lbann__quantizer_1a25ed3869c6bc615ae51198803ea4e33d" compoundref="quantizer__impl_8hpp" startline="274" endline="394">adaptive_quantize_replace</referencedby>
        <referencedby refid="classlbann_1_1lbann__quantizer_1a9d6e80bd54d6eb03dc63c15861356557" compoundref="quantizer__impl_8hpp" startline="397" endline="467">adaptive_bound</referencedby>
        <referencedby refid="classlbann_1_1lbann__quantizer_1ab3a0e79b571e7c016446c179eedd0dc1" compoundref="quantizer__impl_8hpp" startline="470" endline="493">adaptive_quantize_slice</referencedby>
        <referencedby refid="classlbann_1_1lbann__quantizer_1a3fe3493cb16b85bd4eaf251980408f1b" compoundref="quantizer__impl_8hpp" startline="496" endline="574">intermodel_sum_adaptive_quantized_impl</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classlbann_1_1lbann__quantizer_1abe63d57e62be1b498848f7920de4433a" prot="private" static="yes" mutable="no">
        <type>const El::Int</type>
        <definition>const El::Int lbann::lbann_quantizer::MAX_QUANTIZED_EXCESS</definition>
        <argsstring></argsstring>
        <name>MAX_QUANTIZED_EXCESS</name>
        <initializer>= 4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Max factor by which adaptive quantization can exceed optimal amount. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="259" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" bodystart="259" bodyend="-1"/>
        <referencedby refid="classlbann_1_1lbann__quantizer_1a9d6e80bd54d6eb03dc63c15861356557" compoundref="quantizer__impl_8hpp" startline="397" endline="467">adaptive_bound</referencedby>
        <referencedby refid="classlbann_1_1lbann__quantizer_1a3fe3493cb16b85bd4eaf251980408f1b" compoundref="quantizer__impl_8hpp" startline="496" endline="574">intermodel_sum_adaptive_quantized_impl</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classlbann_1_1lbann__quantizer_1a6bd266728f578df0c86fc2e493742cc1" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double lbann::lbann_quantizer::proportion_time</definition>
        <argsstring></argsstring>
        <name>proportion_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Time spent in proportion_threshold. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="262" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" bodystart="262" bodyend="-1"/>
        <referencedby refid="classlbann_1_1lbann__quantizer_1a71023cbf93b54d8e8707d137e3c6007a" compoundref="quantizer_8hpp" startline="230" endline="232">get_proportion_time</referencedby>
        <referencedby refid="classlbann_1_1lbann__quantizer_1aee1ea46e3191ad25fd310938eaf5a2e0" compoundref="quantizer_8hpp" startline="234" endline="237">reset_counters</referencedby>
        <referencedby refid="classlbann_1_1lbann__quantizer_1aa5aabc1cb4163e95aee993d9b37b9b32" compoundref="quantizer_8cpp" startline="500" endline="580">proportion_threshold</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classlbann_1_1lbann__quantizer_1a716fae78ef5ba082a8093f0d06550804" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t lbann::lbann_quantizer::quantized_count</definition>
        <argsstring></argsstring>
        <name>quantized_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Most recent number of quantized entries. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="264" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" bodystart="264" bodyend="-1"/>
        <referencedby refid="classlbann_1_1lbann__quantizer_1aee1ea46e3191ad25fd310938eaf5a2e0" compoundref="quantizer_8hpp" startline="234" endline="237">reset_counters</referencedby>
        <referencedby refid="classlbann_1_1lbann__quantizer_1afe560823e51a64b1bb42c6f6cbd83ee0" compoundref="quantizer_8hpp" startline="239" endline="241">get_quantized_count</referencedby>
        <referencedby refid="classlbann_1_1lbann__quantizer_1a7e4dfca5770dfd88ae6255b0407d8f80" compoundref="quantizer__impl_8hpp" startline="37" endline="161">adaptive_quantize</referencedby>
        <referencedby refid="classlbann_1_1lbann__quantizer_1a25ed3869c6bc615ae51198803ea4e33d" compoundref="quantizer__impl_8hpp" startline="274" endline="394">adaptive_quantize_replace</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classlbann_1_1lbann__quantizer_1a430cd47f333c678d2cb77f4ab2693914" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>lbann::lbann_quantizer::lbann_quantizer</definition>
        <argsstring>()</argsstring>
        <name>lbann_quantizer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="93" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/quantizer.cpp" bodystart="37" bodyend="39"/>
        <references refid="classlbann_1_1lbann__quantizer_1aee1ea46e3191ad25fd310938eaf5a2e0" compoundref="quantizer_8hpp" startline="234" endline="237">reset_counters</references>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1lbann__quantizer_1ac0cc07008ff963949c2cb7b91786c61c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>lbann::lbann_quantizer::~lbann_quantizer</definition>
        <argsstring>()</argsstring>
        <name>~lbann_quantizer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="94" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/quantizer.cpp" bodystart="41" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1lbann__quantizer_1a4dd4696cbbfd93c73e5fb3c40fcb16c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::lbann_quantizer::onebit_quantize</definition>
        <argsstring>(const Mat &amp;mat, QuantizedMatrix &amp;qmat, Mat &amp;qerror, bool sample=true)</argsstring>
        <name>onebit_quantize</name>
        <param>
          <type>const <ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type><ref refid="classlbann_1_1lbann__quantizer_1a399f3f8c393b6021b43e95d1ce6ea28c" kindref="member">QuantizedMatrix</ref> &amp;</type>
          <declname>qmat</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>qerror</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sample</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Quantize a matrix with onebit quantization. qerror needs to be initialized with: Zeros(qerror, mat.Height(), mat.Width()). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix to quantize. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>qmat</parametername>
</parameternamelist>
<parameterdescription>
<para>The output quantized matrix (will be resized). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>qerror</parametername>
</parameternamelist>
<parameterdescription>
<para>Running quantization error. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sample</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to use samples to approximate averages. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="105" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/quantizer.cpp" bodystart="45" bodyend="133"/>
        <references refid="classlbann_1_1lbann__quantizer_1aa1541b9afa60250dbd570acbbe98242f" compoundref="quantizer_8hpp" startline="267" endline="269">get_onebit_quantized_matrix_height</references>
        <references refid="classlbann_1_1lbann__quantizer_1a8e25785452736c54861a69207a48252d" compoundref="quantizer_8hpp" startline="251">NUM_ONEBIT_SAMPLES</references>
        <references refid="namespacelbann_1ae6ce9c2fdec6f81803f6b1a6555c31c5" compoundref="random_8cpp" startline="64" endline="66">lbann::get_fast_generator</references>
        <references refid="namespacelbann_1a557aaed6267e7aaf583a75149e9c670c" compoundref="random_8hpp" startline="68" endline="74">lbann::fast_rand_int</references>
        <references refid="classlbann_1_1lbann__quantizer_1a33ea17392f53b90e91aea1ffb7e11d68" compoundref="quantizer_8hpp" startline="245">NUM_BITS</references>
        <referencedby refid="classlbann_1_1lbann__quantizer_1a9eeb89150026bf4b7bea15bffdba10d3" compoundref="quantizer_8cpp" startline="135" endline="138">onebit_quantize</referencedby>
        <referencedby refid="classlbann_1_1lbann__quantizer_1a4b326de1ca5b7eba6415b6f42f83335b" compoundref="quantizer_8cpp" startline="210" endline="266">intermodel_sum_onebit_quantized</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1lbann__quantizer_1a9eeb89150026bf4b7bea15bffdba10d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::lbann_quantizer::onebit_quantize</definition>
        <argsstring>(const DistMat &amp;mat, QuantizedMatrix &amp;qmat, Mat &amp;qerror, bool sample=true)</argsstring>
        <name>onebit_quantize</name>
        <param>
          <type>const <ref refid="base_8hpp_1a0fab5387556805cfeac3e7e567bf66c5" kindref="member">DistMat</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type><ref refid="classlbann_1_1lbann__quantizer_1a399f3f8c393b6021b43e95d1ce6ea28c" kindref="member">QuantizedMatrix</ref> &amp;</type>
          <declname>qmat</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>qerror</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sample</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="107" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/quantizer.cpp" bodystart="135" bodyend="138"/>
        <references refid="classlbann_1_1lbann__quantizer_1a4dd4696cbbfd93c73e5fb3c40fcb16c3" compoundref="quantizer_8cpp" startline="45" endline="133">onebit_quantize</references>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1lbann__quantizer_1ad5592daa122b40c275cce3dc93bba41e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::lbann_quantizer::onebit_unquantize</definition>
        <argsstring>(const QuantizedMatrix &amp;qmat, Mat &amp;mat)</argsstring>
        <name>onebit_unquantize</name>
        <param>
          <type>const <ref refid="classlbann_1_1lbann__quantizer_1a399f3f8c393b6021b43e95d1ce6ea28c" kindref="member">QuantizedMatrix</ref> &amp;</type>
          <declname>qmat</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unquantize a onebit-quantized matrix.. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>qmat</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix to unquantize. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>The output unquantized matrix. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="114" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/quantizer.cpp" bodystart="140" bodyend="170"/>
        <references refid="classlbann_1_1lbann__quantizer_1a33ea17392f53b90e91aea1ffb7e11d68" compoundref="quantizer_8hpp" startline="245">NUM_BITS</references>
        <referencedby refid="classlbann_1_1lbann__quantizer_1afc7a47fb5a5e87a09f2913a46a2bacf7" compoundref="quantizer_8cpp" startline="172" endline="175">onebit_unquantize</referencedby>
        <referencedby refid="classlbann_1_1lbann__quantizer_1a4b326de1ca5b7eba6415b6f42f83335b" compoundref="quantizer_8cpp" startline="210" endline="266">intermodel_sum_onebit_quantized</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1lbann__quantizer_1afc7a47fb5a5e87a09f2913a46a2bacf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::lbann_quantizer::onebit_unquantize</definition>
        <argsstring>(const QuantizedMatrix &amp;qmat, DistMat &amp;mat)</argsstring>
        <name>onebit_unquantize</name>
        <param>
          <type>const <ref refid="classlbann_1_1lbann__quantizer_1a399f3f8c393b6021b43e95d1ce6ea28c" kindref="member">QuantizedMatrix</ref> &amp;</type>
          <declname>qmat</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a0fab5387556805cfeac3e7e567bf66c5" kindref="member">DistMat</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="115" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/quantizer.cpp" bodystart="172" bodyend="175"/>
        <references refid="classlbann_1_1lbann__quantizer_1ad5592daa122b40c275cce3dc93bba41e" compoundref="quantizer_8cpp" startline="140" endline="170">onebit_unquantize</references>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1lbann__quantizer_1a4b326de1ca5b7eba6415b6f42f83335b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::lbann_quantizer::intermodel_sum_onebit_quantized</definition>
        <argsstring>(lbann_comm *comm, Mat &amp;mat, Mat &amp;qerror)</argsstring>
        <name>intermodel_sum_onebit_quantized</name>
        <param>
          <type><ref refid="classlbann_1_1lbann__comm" kindref="compound">lbann_comm</ref> *</type>
          <declname>comm</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>qerror</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Do a sum reduction of mat over comm&apos;s inter-model communicator, with all communication being quantized. im_querror is a separate quantization error matrix that should be passed in each time this is called. This implements the allreduce using a ring-based reduce-scatter followed by a ring-based allgather. Matrices are sent quantized, are unquantized for the reduction, then the reduced matrix is requantized for the allgather. If do_adagrad is true, this scales the inter-mediate unquantized result as in AdaGrad, and uses gradhist to store the gradient history. If used, you should use SGD as the optimizer for those layers to avoid applying AdaGrad twice. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="128" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/quantizer.cpp" bodystart="210" bodyend="266"/>
        <references refid="classlbann_1_1lbann__quantizer_1a4dd4696cbbfd93c73e5fb3c40fcb16c3" compoundref="quantizer_8cpp" startline="45" endline="133">onebit_quantize</references>
        <references refid="classlbann_1_1lbann__quantizer_1ad5592daa122b40c275cce3dc93bba41e" compoundref="quantizer_8cpp" startline="140" endline="170">onebit_unquantize</references>
        <references refid="classlbann_1_1lbann__quantizer_1aa1541b9afa60250dbd570acbbe98242f" compoundref="quantizer_8hpp" startline="267" endline="269">get_onebit_quantized_matrix_height</references>
        <references refid="classlbann_1_1lbann__quantizer_1a879cea8464408b8265be9e55edd83b2c" compoundref="quantizer_8cpp" startline="177" endline="208">onebit_unquantize_add</references>
        <references refid="structlbann_1_1lbann__comm_1_1allreduce__options_1a4b3cd4eb74dd5a49ee3ffafa2edc1607" compoundref="comm_8hpp" startline="787">lbann::lbann_comm::allreduce_options::max_reduces</references>
        <references refid="classlbann_1_1lbann__comm_1a502bd724f9fb27f0e899306c69a3ec47" compoundref="comm_8hpp" startline="404" endline="406">lbann::lbann_comm::intermodel_allreduce</references>
        <referencedby refid="classlbann_1_1lbann__callback__imcomm_1a0a425ba562f7637b25cd6ba094e7885b" compoundref="callback__imcomm_8cpp" startline="156" endline="205">lbann::lbann_callback_imcomm::on_backward_prop_end</referencedby>
        <referencedby refid="classlbann_1_1lbann__quantizer_1af24e00e26e157f102f3cef547de40ae1" compoundref="quantizer_8cpp" startline="268" endline="271">intermodel_sum_onebit_quantized</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1lbann__quantizer_1af24e00e26e157f102f3cef547de40ae1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::lbann_quantizer::intermodel_sum_onebit_quantized</definition>
        <argsstring>(lbann_comm *comm, DistMat &amp;mat, Mat &amp;qerror)</argsstring>
        <name>intermodel_sum_onebit_quantized</name>
        <param>
          <type><ref refid="classlbann_1_1lbann__comm" kindref="compound">lbann_comm</ref> *</type>
          <declname>comm</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a0fab5387556805cfeac3e7e567bf66c5" kindref="member">DistMat</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>qerror</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="129" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/quantizer.cpp" bodystart="268" bodyend="271"/>
        <references refid="classlbann_1_1lbann__quantizer_1a4b326de1ca5b7eba6415b6f42f83335b" compoundref="quantizer_8cpp" startline="210" endline="266">intermodel_sum_onebit_quantized</references>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1lbann__quantizer_1a00106e69ea8a6dfe9e9a91c75b845bcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::lbann_quantizer::threshold_quantize</definition>
        <argsstring>(const Mat &amp;mat, ThreshQuantized &amp;q, Mat &amp;qerror, DataType pos_thresh, DataType neg_thresh, bool delta=false)</argsstring>
        <name>threshold_quantize</name>
        <param>
          <type>const <ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type><ref refid="classlbann_1_1lbann__quantizer_1a85ea8e298c2975b4f802855278406aa7" kindref="member">ThreshQuantized</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>qerror</declname>
        </param>
        <param>
          <type>DataType</type>
          <declname>pos_thresh</declname>
        </param>
        <param>
          <type>DataType</type>
          <declname>neg_thresh</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>delta</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Threshold and quantize a matrix. qerror needs to be initialized with: Zeros(qerror, mat.Height(), mat.Width())). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix to quantize. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>q</parametername>
</parameternamelist>
<parameterdescription>
<para>The output list of quantized entries. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>qerror</parametername>
</parameternamelist>
<parameterdescription>
<para>Running quantization error. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos_thresh</parametername>
</parameternamelist>
<parameterdescription>
<para>The positive threshold level. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>neg_thresh</parametername>
</parameternamelist>
<parameterdescription>
<para>The negative threshold level. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delta</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to do delta encoding (default false). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="142" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/quantizer.cpp" bodystart="273" bodyend="331"/>
        <referencedby refid="classlbann_1_1lbann__quantizer_1ae9949af6bec1e95adf5a32ba9bb4afd8" compoundref="quantizer_8cpp" startline="333" endline="338">threshold_quantize</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1lbann__quantizer_1ae9949af6bec1e95adf5a32ba9bb4afd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::lbann_quantizer::threshold_quantize</definition>
        <argsstring>(const DistMat &amp;mat, ThreshQuantized &amp;q, Mat &amp;qerror, DataType pos_thresh, DataType neg_thresh, bool delta=false)</argsstring>
        <name>threshold_quantize</name>
        <param>
          <type>const <ref refid="base_8hpp_1a0fab5387556805cfeac3e7e567bf66c5" kindref="member">DistMat</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type><ref refid="classlbann_1_1lbann__quantizer_1a85ea8e298c2975b4f802855278406aa7" kindref="member">ThreshQuantized</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>qerror</declname>
        </param>
        <param>
          <type>DataType</type>
          <declname>pos_thresh</declname>
        </param>
        <param>
          <type>DataType</type>
          <declname>neg_thresh</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>delta</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="145" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/quantizer.cpp" bodystart="333" bodyend="338"/>
        <references refid="classlbann_1_1lbann__quantizer_1a00106e69ea8a6dfe9e9a91c75b845bcd" compoundref="quantizer_8cpp" startline="273" endline="331">threshold_quantize</references>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1lbann__quantizer_1a0f5f3b0149715ab59202b8884a87c7d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::lbann_quantizer::threshold_unquantize</definition>
        <argsstring>(const ThreshQuantized &amp;q, Mat &amp;mat, DataType pos_thresh, DataType neg_thresh, bool delta=false)</argsstring>
        <name>threshold_unquantize</name>
        <param>
          <type>const <ref refid="classlbann_1_1lbann__quantizer_1a85ea8e298c2975b4f802855278406aa7" kindref="member">ThreshQuantized</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>DataType</type>
          <declname>pos_thresh</declname>
        </param>
        <param>
          <type>DataType</type>
          <declname>neg_thresh</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>delta</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unquantize a thresholded-and-quantized matrix. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>q</parametername>
</parameternamelist>
<parameterdescription>
<para>The quantized matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>The output unquantized matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos_thresh</parametername>
</parameternamelist>
<parameterdescription>
<para>The positive threshold value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>neg_thresh</parametername>
</parameternamelist>
<parameterdescription>
<para>The negative negative value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delta</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether q was quantized with delta encoding (default false). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="156" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/quantizer.cpp" bodystart="340" bodyend="368"/>
        <referencedby refid="classlbann_1_1lbann__quantizer_1a2324bba3cbb6c0d3e51bbe21555e7f1a" compoundref="quantizer_8cpp" startline="370" endline="374">threshold_unquantize</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1lbann__quantizer_1a2324bba3cbb6c0d3e51bbe21555e7f1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::lbann_quantizer::threshold_unquantize</definition>
        <argsstring>(const ThreshQuantized &amp;q, DistMat &amp;mat, DataType pos_thresh, DataType neg_thresh, bool delta=false)</argsstring>
        <name>threshold_unquantize</name>
        <param>
          <type>const <ref refid="classlbann_1_1lbann__quantizer_1a85ea8e298c2975b4f802855278406aa7" kindref="member">ThreshQuantized</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a0fab5387556805cfeac3e7e567bf66c5" kindref="member">DistMat</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>DataType</type>
          <declname>pos_thresh</declname>
        </param>
        <param>
          <type>DataType</type>
          <declname>neg_thresh</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>delta</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="159" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/quantizer.cpp" bodystart="370" bodyend="374"/>
        <references refid="classlbann_1_1lbann__quantizer_1a0f5f3b0149715ab59202b8884a87c7d5" compoundref="quantizer_8cpp" startline="340" endline="368">threshold_unquantize</references>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1lbann__quantizer_1a0bd572557675705c5e080b92d74b02ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::lbann_quantizer::intermodel_sum_threshold_quantized</definition>
        <argsstring>(lbann_comm *comm, Mat &amp;mat, Mat &amp;qerror, DataType pos_thresh, DataType neg_thresh)</argsstring>
        <name>intermodel_sum_threshold_quantized</name>
        <param>
          <type><ref refid="classlbann_1_1lbann__comm" kindref="compound">lbann_comm</ref> *</type>
          <declname>comm</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>qerror</declname>
        </param>
        <param>
          <type>DataType</type>
          <declname>pos_thresh</declname>
        </param>
        <param>
          <type>DataType</type>
          <declname>neg_thresh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>As with intermodel_sum_onebit_quantized, but use threshold quantization. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="165" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/quantizer.cpp" bodystart="456" bodyend="462"/>
        <referencedby refid="classlbann_1_1lbann__callback__imcomm_1a0a425ba562f7637b25cd6ba094e7885b" compoundref="callback__imcomm_8cpp" startline="156" endline="205">lbann::lbann_callback_imcomm::on_backward_prop_end</referencedby>
        <referencedby refid="classlbann_1_1lbann__quantizer_1ac2afc78996f35d90b5d0462292a1a2e3" compoundref="quantizer_8cpp" startline="464" endline="469">intermodel_sum_threshold_quantized</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1lbann__quantizer_1ac2afc78996f35d90b5d0462292a1a2e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::lbann_quantizer::intermodel_sum_threshold_quantized</definition>
        <argsstring>(lbann_comm *comm, DistMat &amp;mat, Mat &amp;qerror, DataType pos_thresh, DataType neg_thresh)</argsstring>
        <name>intermodel_sum_threshold_quantized</name>
        <param>
          <type><ref refid="classlbann_1_1lbann__comm" kindref="compound">lbann_comm</ref> *</type>
          <declname>comm</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a0fab5387556805cfeac3e7e567bf66c5" kindref="member">DistMat</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>qerror</declname>
        </param>
        <param>
          <type>DataType</type>
          <declname>pos_thresh</declname>
        </param>
        <param>
          <type>DataType</type>
          <declname>neg_thresh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="168" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/quantizer.cpp" bodystart="464" bodyend="469"/>
        <references refid="classlbann_1_1lbann__quantizer_1a0bd572557675705c5e080b92d74b02ae" compoundref="quantizer_8cpp" startline="456" endline="462">intermodel_sum_threshold_quantized</references>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1lbann__quantizer_1a7e4dfca5770dfd88ae6255b0407d8f80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename colT</type>
          </param>
          <param>
            <type>typename rowT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void lbann::lbann_quantizer::adaptive_quantize</definition>
        <argsstring>(const Mat &amp;mat, std::vector&lt; rowT &gt; &amp;q, Mat &amp;qerror, int proportion)</argsstring>
        <name>adaptive_quantize</name>
        <param>
          <type>const <ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>std::vector&lt; rowT &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>qerror</declname>
        </param>
        <param>
          <type>int</type>
          <declname>proportion</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adaptively quantize a matrix. qerror needs to be initialized with: Zeros(qerror, mat.Height(), mat.Width()). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix to quantize. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>q</parametername>
</parameternamelist>
<parameterdescription>
<para>The output list of quantized entries. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>qerror</parametername>
</parameternamelist>
<parameterdescription>
<para>Running quantization error. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>proportion</parametername>
</parameternamelist>
<parameterdescription>
<para>Quantize one in proportion of the values. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="182" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer_impl.hpp" bodystart="37" bodyend="161"/>
        <references refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" compoundref="quantizer_8hpp" startline="256">HEADER_FACTOR</references>
        <references refid="classlbann_1_1lbann__quantizer_1aaa0c20f755437130172c40ca8e95bc3f" compoundref="quantizer_8hpp" startline="328" endline="340">get_adaptive_quantization_threads</references>
        <references refid="classlbann_1_1lbann__quantizer_1aa5aabc1cb4163e95aee993d9b37b9b32" compoundref="quantizer_8cpp" startline="500" endline="580">proportion_threshold</references>
        <references refid="classlbann_1_1lbann__quantizer_1af77beca5905ff8601ca9b8231a2a16e0" compoundref="quantizer_8cpp" startline="582" endline="679">col_reconstruction</references>
        <references refid="structlbann_1_1lbann__quantizer_1_1adaptive__reconstructions_1a9b3b4970e067920e056cdd54c2ad8e95" compoundref="quantizer_8hpp" startline="84">lbann::lbann_quantizer::adaptive_reconstructions::pos_recon</references>
        <references refid="structlbann_1_1lbann__quantizer_1_1adaptive__reconstructions_1a631231c118cc17ba4ed569380e6c6711" compoundref="quantizer_8hpp" startline="86">lbann::lbann_quantizer::adaptive_reconstructions::neg_recon</references>
        <references refid="structlbann_1_1lbann__quantizer_1_1adaptive__thresholds_1a6f6aee51ed629c2ab68666d577189bb9" compoundref="quantizer_8hpp" startline="77">lbann::lbann_quantizer::adaptive_thresholds::pos_thresh</references>
        <references refid="structlbann_1_1lbann__quantizer_1_1adaptive__thresholds_1a4626553695545cf0783c3f7302f92fbf" compoundref="quantizer_8hpp" startline="79">lbann::lbann_quantizer::adaptive_thresholds::neg_thresh</references>
        <references refid="classlbann_1_1lbann__quantizer_1a22b898932caed41ccf24abcb67c00ba1" compoundref="quantizer_8hpp" startline="351" endline="357">get_adaptive_quantization_copy_threads</references>
        <references refid="classlbann_1_1lbann__quantizer_1a716fae78ef5ba082a8093f0d06550804" compoundref="quantizer_8hpp" startline="264">quantized_count</references>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1lbann__quantizer_1a737865bb555db8a8a104fb345f7626b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename colT</type>
          </param>
          <param>
            <type>typename rowT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void lbann::lbann_quantizer::adaptive_quantize</definition>
        <argsstring>(const DistMat &amp;mat, std::vector&lt; rowT &gt; &amp;q, Mat &amp;qerror, int proportion)</argsstring>
        <name>adaptive_quantize</name>
        <param>
          <type>const <ref refid="base_8hpp_1a0fab5387556805cfeac3e7e567bf66c5" kindref="member">DistMat</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>std::vector&lt; rowT &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>qerror</declname>
        </param>
        <param>
          <type>int</type>
          <declname>proportion</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="185" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer_impl.hpp" bodystart="164" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1lbann__quantizer_1acf8d21e8114a00fdea53d919d76dd511" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename colT</type>
          </param>
          <param>
            <type>typename rowT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void lbann::lbann_quantizer::adaptive_unquantize</definition>
        <argsstring>(const rowT *q, Mat &amp;mat)</argsstring>
        <name>adaptive_unquantize</name>
        <param>
          <type>const rowT *</type>
          <declname>q</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unquantize an adaptively-quantized matrix. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>q</parametername>
</parameternamelist>
<parameterdescription>
<para>The quantizd matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>The output unquantized matrix. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="193" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer_impl.hpp" bodystart="170" bodyend="214"/>
        <references refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" compoundref="quantizer_8hpp" startline="256">HEADER_FACTOR</references>
        <references refid="classlbann_1_1lbann__quantizer_1aaa0c20f755437130172c40ca8e95bc3f" compoundref="quantizer_8hpp" startline="328" endline="340">get_adaptive_quantization_threads</references>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1lbann__quantizer_1a5456c31af080fce7f85aa7a01b7ee939" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename colT</type>
          </param>
          <param>
            <type>typename rowT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void lbann::lbann_quantizer::adaptive_unquantize</definition>
        <argsstring>(const rowT *q, DistMat &amp;mat)</argsstring>
        <name>adaptive_unquantize</name>
        <param>
          <type>const rowT *</type>
          <declname>q</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a0fab5387556805cfeac3e7e567bf66c5" kindref="member">DistMat</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="195" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer_impl.hpp" bodystart="217" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1lbann__quantizer_1a87e856d8bf5e8a678a39cdb8f547dfd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::lbann_quantizer::intermodel_sum_adaptive_quantized</definition>
        <argsstring>(lbann_comm *comm, Mat &amp;mat, Mat &amp;qerror, int proportion)</argsstring>
        <name>intermodel_sum_adaptive_quantized</name>
        <param>
          <type><ref refid="classlbann_1_1lbann__comm" kindref="compound">lbann_comm</ref> *</type>
          <declname>comm</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>qerror</declname>
        </param>
        <param>
          <type>int</type>
          <declname>proportion</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>As with intermodel_sum_onebit_quantized, but use adaptive quantization. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="200" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/quantizer.cpp" bodystart="471" bodyend="492"/>
        <references refid="file__io_8cpp_1ab048c6f9fcbcfaa57ce68b00263dbebe" compoundref="file__io_8cpp" startline="44">comm</references>
        <referencedby refid="classlbann_1_1lbann__callback__imcomm_1a0a425ba562f7637b25cd6ba094e7885b" compoundref="callback__imcomm_8cpp" startline="156" endline="205">lbann::lbann_callback_imcomm::on_backward_prop_end</referencedby>
        <referencedby refid="classlbann_1_1lbann__quantizer_1aa2d4e5b9bc90f8feaaa32f3fc4183d10" compoundref="quantizer_8cpp" startline="494" endline="498">intermodel_sum_adaptive_quantized</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1lbann__quantizer_1aa2d4e5b9bc90f8feaaa32f3fc4183d10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::lbann_quantizer::intermodel_sum_adaptive_quantized</definition>
        <argsstring>(lbann_comm *comm, DistMat &amp;mat, Mat &amp;qerror, int proportion)</argsstring>
        <name>intermodel_sum_adaptive_quantized</name>
        <param>
          <type><ref refid="classlbann_1_1lbann__comm" kindref="compound">lbann_comm</ref> *</type>
          <declname>comm</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a0fab5387556805cfeac3e7e567bf66c5" kindref="member">DistMat</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>qerror</declname>
        </param>
        <param>
          <type>int</type>
          <declname>proportion</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="202" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/quantizer.cpp" bodystart="494" bodyend="498"/>
        <references refid="classlbann_1_1lbann__quantizer_1a87e856d8bf5e8a678a39cdb8f547dfd9" compoundref="quantizer_8cpp" startline="471" endline="492">intermodel_sum_adaptive_quantized</references>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1lbann__quantizer_1aa5aabc1cb4163e95aee993d9b37b9b32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structlbann_1_1lbann__quantizer_1_1adaptive__thresholds" kindref="compound">adaptive_thresholds</ref></type>
        <definition>lbann_quantizer::adaptive_thresholds lbann::lbann_quantizer::proportion_threshold</definition>
        <argsstring>(const Mat &amp;mat, const Mat &amp;qerror, int proportion, bool sample=true)</argsstring>
        <name>proportion_threshold</name>
        <param>
          <type>const <ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const <ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>qerror</declname>
        </param>
        <param>
          <type>int</type>
          <declname>proportion</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sample</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute positive and negative thresholds such that only one in proportion of values in mat are &gt;= to the positive threshold or &lt;= to the negative threshold. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix to compute threshold values for. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>qerror</parametername>
</parameternamelist>
<parameterdescription>
<para>The accumulated quantization error in mat. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>proportion</parametername>
</parameternamelist>
<parameterdescription>
<para>Proportion of entries to keep. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sample</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to approximate stats by randomly sampling mat. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The threshold values. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="215" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/quantizer.cpp" bodystart="500" bodyend="580"/>
        <references refid="namespacelbann_1a478d36031ff0659893c4322cd856157f" compoundref="timer_8hpp" startline="37" endline="41">lbann::get_time</references>
        <references refid="classlbann_1_1lbann__quantizer_1a7745dbc282bebe812ff5523a4b3df3f2" compoundref="quantizer_8hpp" startline="247">NUM_THRESHOLD_SAMPLES</references>
        <references refid="namespacelbann_1ae6ce9c2fdec6f81803f6b1a6555c31c5" compoundref="random_8cpp" startline="64" endline="66">lbann::get_fast_generator</references>
        <references refid="namespacelbann_1a557aaed6267e7aaf583a75149e9c670c" compoundref="random_8hpp" startline="68" endline="74">lbann::fast_rand_int</references>
        <references refid="classlbann_1_1lbann__quantizer_1a6bd266728f578df0c86fc2e493742cc1" compoundref="quantizer_8hpp" startline="262">proportion_time</references>
        <referencedby refid="classlbann_1_1lbann__quantizer_1a7e4dfca5770dfd88ae6255b0407d8f80" compoundref="quantizer__impl_8hpp" startline="37" endline="161">adaptive_quantize</referencedby>
        <referencedby refid="classlbann_1_1lbann__quantizer_1a25ed3869c6bc615ae51198803ea4e33d" compoundref="quantizer__impl_8hpp" startline="274" endline="394">adaptive_quantize_replace</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1lbann__quantizer_1af77beca5905ff8601ca9b8231a2a16e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structlbann_1_1lbann__quantizer_1_1adaptive__reconstructions" kindref="compound">adaptive_reconstructions</ref></type>
        <definition>lbann_quantizer::adaptive_reconstructions lbann::lbann_quantizer::col_reconstruction</definition>
        <argsstring>(const Mat &amp;mat, const Mat &amp;qerror, El::Int col, const adaptive_thresholds threshes, bool sample=true)</argsstring>
        <name>col_reconstruction</name>
        <param>
          <type>const <ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const <ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>qerror</declname>
        </param>
        <param>
          <type>El::Int</type>
          <declname>col</declname>
        </param>
        <param>
          <type>const <ref refid="structlbann_1_1lbann__quantizer_1_1adaptive__thresholds" kindref="compound">adaptive_thresholds</ref></type>
          <declname>threshes</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sample</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute reconstruction values for col. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix to compute reconstruction values for. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>qerror</parametername>
</parameternamelist>
<parameterdescription>
<para>The accumulated quantization error in mat. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>The column to compute reconstruction values for. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ainfo</parametername>
</parameternamelist>
<parameterdescription>
<para>Adaptive quantization info with thresholds filled in. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sample</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to approximate stats by randomly sampling mat. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Adaptive reconstruction values. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="226" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/quantizer.cpp" bodystart="582" bodyend="679"/>
        <references refid="classlbann_1_1lbann__quantizer_1a10667e56db4218aac3912c6bae28fc41" compoundref="quantizer_8hpp" startline="249">NUM_RECON_SAMPLES</references>
        <references refid="structlbann_1_1lbann__quantizer_1_1adaptive__thresholds_1a6f6aee51ed629c2ab68666d577189bb9" compoundref="quantizer_8hpp" startline="77">lbann::lbann_quantizer::adaptive_thresholds::pos_thresh</references>
        <references refid="structlbann_1_1lbann__quantizer_1_1adaptive__thresholds_1a4626553695545cf0783c3f7302f92fbf" compoundref="quantizer_8hpp" startline="79">lbann::lbann_quantizer::adaptive_thresholds::neg_thresh</references>
        <references refid="namespacelbann_1ae6ce9c2fdec6f81803f6b1a6555c31c5" compoundref="random_8cpp" startline="64" endline="66">lbann::get_fast_generator</references>
        <references refid="namespacelbann_1a2fe8cea17a147566b73260f557b51006" compoundref="random_8hpp" startline="81" endline="90">lbann::fast_rand_int_pow2</references>
        <references refid="namespacelbann_1a557aaed6267e7aaf583a75149e9c670c" compoundref="random_8hpp" startline="68" endline="74">lbann::fast_rand_int</references>
        <referencedby refid="classlbann_1_1lbann__quantizer_1a7e4dfca5770dfd88ae6255b0407d8f80" compoundref="quantizer__impl_8hpp" startline="37" endline="161">adaptive_quantize</referencedby>
        <referencedby refid="classlbann_1_1lbann__quantizer_1a25ed3869c6bc615ae51198803ea4e33d" compoundref="quantizer__impl_8hpp" startline="274" endline="394">adaptive_quantize_replace</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1lbann__quantizer_1a71023cbf93b54d8e8707d137e3c6007a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double lbann::lbann_quantizer::get_proportion_time</definition>
        <argsstring>() const</argsstring>
        <name>get_proportion_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="230" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" bodystart="230" bodyend="232"/>
        <references refid="classlbann_1_1lbann__quantizer_1a6bd266728f578df0c86fc2e493742cc1" compoundref="quantizer_8hpp" startline="262">proportion_time</references>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1lbann__quantizer_1aee1ea46e3191ad25fd310938eaf5a2e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::lbann_quantizer::reset_counters</definition>
        <argsstring>()</argsstring>
        <name>reset_counters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reset recorded counters. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="234" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" bodystart="234" bodyend="237"/>
        <references refid="classlbann_1_1lbann__quantizer_1a6bd266728f578df0c86fc2e493742cc1" compoundref="quantizer_8hpp" startline="262">proportion_time</references>
        <references refid="classlbann_1_1lbann__quantizer_1a716fae78ef5ba082a8093f0d06550804" compoundref="quantizer_8hpp" startline="264">quantized_count</references>
        <referencedby refid="classlbann_1_1lbann__callback__imcomm_1ad45c39a7a85fb8e1d99eca97aa4d9d09" compoundref="callback__imcomm_8cpp" startline="207" endline="264">lbann::lbann_callback_imcomm::do_summary</referencedby>
        <referencedby refid="classlbann_1_1lbann__quantizer_1a430cd47f333c678d2cb77f4ab2693914" compoundref="quantizer_8cpp" startline="37" endline="39">lbann_quantizer</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1lbann__quantizer_1afe560823e51a64b1bb42c6f6cbd83ee0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t lbann::lbann_quantizer::get_quantized_count</definition>
        <argsstring>() const</argsstring>
        <name>get_quantized_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the most recent number of quantized entries. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="239" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" bodystart="239" bodyend="241"/>
        <references refid="classlbann_1_1lbann__quantizer_1a716fae78ef5ba082a8093f0d06550804" compoundref="quantizer_8hpp" startline="264">quantized_count</references>
        <referencedby refid="classlbann_1_1lbann__callback__imcomm_1ad45c39a7a85fb8e1d99eca97aa4d9d09" compoundref="callback__imcomm_8cpp" startline="207" endline="264">lbann::lbann_callback_imcomm::do_summary</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classlbann_1_1lbann__quantizer_1aa1541b9afa60250dbd570acbbe98242f" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>El::Int</type>
        <definition>El::Int lbann::lbann_quantizer::get_onebit_quantized_matrix_height</definition>
        <argsstring>(const Mat &amp;mat) const</argsstring>
        <name>get_onebit_quantized_matrix_height</name>
        <param>
          <type>const <ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the height of mat after quantization with <ref refid="classlbann_1_1lbann__quantizer_1a4dd4696cbbfd93c73e5fb3c40fcb16c3" kindref="member">onebit_quantize()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="267" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" bodystart="267" bodyend="269"/>
        <references refid="classlbann_1_1lbann__quantizer_1a879cea8464408b8265be9e55edd83b2c" compoundref="quantizer_8cpp" startline="177" endline="208">onebit_unquantize_add</references>
        <references refid="classlbann_1_1lbann__quantizer_1ab12b432ba2901347b025e8b6ec40a3c6" compoundref="quantizer_8cpp" startline="376" endline="414">threshold_unquantize_apply</references>
        <references refid="structlbann_1_1lbann__quantizer_1_1adaptive__thresholds_1a6f6aee51ed629c2ab68666d577189bb9" compoundref="quantizer_8hpp" startline="77">lbann::lbann_quantizer::adaptive_thresholds::pos_thresh</references>
        <references refid="structlbann_1_1lbann__quantizer_1_1adaptive__thresholds_1a4626553695545cf0783c3f7302f92fbf" compoundref="quantizer_8hpp" startline="79">lbann::lbann_quantizer::adaptive_thresholds::neg_thresh</references>
        <references refid="classlbann_1_1lbann__quantizer_1a2bcdf31781bf72bbe63940ea0d92990f" compoundref="quantizer_8cpp" startline="416" endline="454">threshold_quantize_apply</references>
        <references refid="classlbann_1_1lbann__quantizer_1a1f63f7be2e227a48ebaa25056e6f85bc" compoundref="quantizer__impl_8hpp" startline="223" endline="271">adaptive_unquantize_add</references>
        <references refid="classlbann_1_1lbann__quantizer_1a25ed3869c6bc615ae51198803ea4e33d" compoundref="quantizer__impl_8hpp" startline="274" endline="394">adaptive_quantize_replace</references>
        <references refid="classlbann_1_1lbann__quantizer_1a9d6e80bd54d6eb03dc63c15861356557" compoundref="quantizer__impl_8hpp" startline="397" endline="467">adaptive_bound</references>
        <references refid="classlbann_1_1lbann__quantizer_1ab3a0e79b571e7c016446c179eedd0dc1" compoundref="quantizer__impl_8hpp" startline="470" endline="493">adaptive_quantize_slice</references>
        <references refid="classlbann_1_1lbann__quantizer_1a3fe3493cb16b85bd4eaf251980408f1b" compoundref="quantizer__impl_8hpp" startline="496" endline="574">intermodel_sum_adaptive_quantized_impl</references>
        <references refid="file__io_8cpp_1ab048c6f9fcbcfaa57ce68b00263dbebe" compoundref="file__io_8cpp" startline="44">comm</references>
        <referencedby refid="classlbann_1_1lbann__quantizer_1a4dd4696cbbfd93c73e5fb3c40fcb16c3" compoundref="quantizer_8cpp" startline="45" endline="133">onebit_quantize</referencedby>
        <referencedby refid="classlbann_1_1lbann__quantizer_1a4b326de1ca5b7eba6415b6f42f83335b" compoundref="quantizer_8cpp" startline="210" endline="266">intermodel_sum_onebit_quantized</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1lbann__quantizer_1a879cea8464408b8265be9e55edd83b2c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::lbann_quantizer::onebit_unquantize_add</definition>
        <argsstring>(const QuantizedMatrix &amp;qmat, Mat &amp;mat)</argsstring>
        <name>onebit_unquantize_add</name>
        <param>
          <type>const <ref refid="classlbann_1_1lbann__quantizer_1a399f3f8c393b6021b43e95d1ce6ea28c" kindref="member">QuantizedMatrix</ref> &amp;</type>
          <declname>qmat</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Variant of unquantize that adds its entries. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="272" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/quantizer.cpp" bodystart="177" bodyend="208"/>
        <references refid="classlbann_1_1lbann__quantizer_1a33ea17392f53b90e91aea1ffb7e11d68" compoundref="quantizer_8hpp" startline="245">NUM_BITS</references>
        <referencedby refid="classlbann_1_1lbann__quantizer_1aa1541b9afa60250dbd570acbbe98242f" compoundref="quantizer_8hpp" startline="267" endline="269">get_onebit_quantized_matrix_height</referencedby>
        <referencedby refid="classlbann_1_1lbann__quantizer_1a4b326de1ca5b7eba6415b6f42f83335b" compoundref="quantizer_8cpp" startline="210" endline="266">intermodel_sum_onebit_quantized</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1lbann__quantizer_1ab12b432ba2901347b025e8b6ec40a3c6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::lbann_quantizer::threshold_unquantize_apply</definition>
        <argsstring>(const ThreshQuantized &amp;q, Mat &amp;mat, DataType pos_thresh, DataType neg_thresh, std::vector&lt; El::Unsigned &gt; &amp;positions, bool delta=false)</argsstring>
        <name>threshold_unquantize_apply</name>
        <param>
          <type>const <ref refid="classlbann_1_1lbann__quantizer_1a85ea8e298c2975b4f802855278406aa7" kindref="member">ThreshQuantized</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>DataType</type>
          <declname>pos_thresh</declname>
        </param>
        <param>
          <type>DataType</type>
          <declname>neg_thresh</declname>
        </param>
        <param>
          <type>std::vector&lt; El::Unsigned &gt; &amp;</type>
          <declname>positions</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>delta</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Do threshold unquantization from arbitrary locations, adding the unquantized values to existing ones instead of replacing them, and storing the locations applied. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="279" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/quantizer.cpp" bodystart="376" bodyend="414"/>
        <referencedby refid="classlbann_1_1lbann__quantizer_1aa1541b9afa60250dbd570acbbe98242f" compoundref="quantizer_8hpp" startline="267" endline="269">get_onebit_quantized_matrix_height</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1lbann__quantizer_1a2bcdf31781bf72bbe63940ea0d92990f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::lbann_quantizer::threshold_quantize_apply</definition>
        <argsstring>(const Mat &amp;mat, ThreshQuantized &amp;q, Mat &amp;qerror, DataType pos_thresh, DataType neg_thresh, std::vector&lt; El::Unsigned &gt; &amp;positions, bool delta=false)</argsstring>
        <name>threshold_quantize_apply</name>
        <param>
          <type>const <ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type><ref refid="classlbann_1_1lbann__quantizer_1a85ea8e298c2975b4f802855278406aa7" kindref="member">ThreshQuantized</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>qerror</declname>
        </param>
        <param>
          <type>DataType</type>
          <declname>pos_thresh</declname>
        </param>
        <param>
          <type>DataType</type>
          <declname>neg_thresh</declname>
        </param>
        <param>
          <type>std::vector&lt; El::Unsigned &gt; &amp;</type>
          <declname>positions</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>delta</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Quantize only the locations in mat in positions; the companion of threshold_unquantize_apply. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="287" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/quantizer.cpp" bodystart="416" bodyend="454"/>
        <referencedby refid="classlbann_1_1lbann__quantizer_1aa1541b9afa60250dbd570acbbe98242f" compoundref="quantizer_8hpp" startline="267" endline="269">get_onebit_quantized_matrix_height</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1lbann__quantizer_1a1f63f7be2e227a48ebaa25056e6f85bc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename colT</type>
          </param>
          <param>
            <type>typename rowT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void lbann::lbann_quantizer::adaptive_unquantize_add</definition>
        <argsstring>(const rowT *q, Mat &amp;mat)</argsstring>
        <name>adaptive_unquantize_add</name>
        <param>
          <type>const rowT *</type>
          <declname>q</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Variant of adaptive_unquantize that adds its entries. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="296" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer_impl.hpp" bodystart="223" bodyend="271"/>
        <references refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" compoundref="quantizer_8hpp" startline="256">HEADER_FACTOR</references>
        <references refid="classlbann_1_1lbann__quantizer_1aaa0c20f755437130172c40ca8e95bc3f" compoundref="quantizer_8hpp" startline="328" endline="340">get_adaptive_quantization_threads</references>
        <referencedby refid="classlbann_1_1lbann__quantizer_1aa1541b9afa60250dbd570acbbe98242f" compoundref="quantizer_8hpp" startline="267" endline="269">get_onebit_quantized_matrix_height</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1lbann__quantizer_1a25ed3869c6bc615ae51198803ea4e33d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename colT</type>
          </param>
          <param>
            <type>typename rowT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void lbann::lbann_quantizer::adaptive_quantize_replace</definition>
        <argsstring>(Mat &amp;mat, std::vector&lt; rowT &gt; &amp;q, Mat &amp;qerror, int proportion)</argsstring>
        <name>adaptive_quantize_replace</name>
        <param>
          <type><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>std::vector&lt; rowT &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>qerror</declname>
        </param>
        <param>
          <type>int</type>
          <declname>proportion</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Variant of adaptive_quantize that also replaces entries in mat with their quantized version. This is equivalent to: adaptive_quantize(mat, q, qerror, proportion); adaptive_unquantize(q, mat); </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="304" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer_impl.hpp" bodystart="274" bodyend="394"/>
        <references refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" compoundref="quantizer_8hpp" startline="256">HEADER_FACTOR</references>
        <references refid="classlbann_1_1lbann__quantizer_1aaa0c20f755437130172c40ca8e95bc3f" compoundref="quantizer_8hpp" startline="328" endline="340">get_adaptive_quantization_threads</references>
        <references refid="classlbann_1_1lbann__quantizer_1aa5aabc1cb4163e95aee993d9b37b9b32" compoundref="quantizer_8cpp" startline="500" endline="580">proportion_threshold</references>
        <references refid="classlbann_1_1lbann__quantizer_1af77beca5905ff8601ca9b8231a2a16e0" compoundref="quantizer_8cpp" startline="582" endline="679">col_reconstruction</references>
        <references refid="structlbann_1_1lbann__quantizer_1_1adaptive__reconstructions_1a9b3b4970e067920e056cdd54c2ad8e95" compoundref="quantizer_8hpp" startline="84">lbann::lbann_quantizer::adaptive_reconstructions::pos_recon</references>
        <references refid="structlbann_1_1lbann__quantizer_1_1adaptive__reconstructions_1a631231c118cc17ba4ed569380e6c6711" compoundref="quantizer_8hpp" startline="86">lbann::lbann_quantizer::adaptive_reconstructions::neg_recon</references>
        <references refid="structlbann_1_1lbann__quantizer_1_1adaptive__thresholds_1a6f6aee51ed629c2ab68666d577189bb9" compoundref="quantizer_8hpp" startline="77">lbann::lbann_quantizer::adaptive_thresholds::pos_thresh</references>
        <references refid="structlbann_1_1lbann__quantizer_1_1adaptive__thresholds_1a4626553695545cf0783c3f7302f92fbf" compoundref="quantizer_8hpp" startline="79">lbann::lbann_quantizer::adaptive_thresholds::neg_thresh</references>
        <references refid="classlbann_1_1lbann__quantizer_1a22b898932caed41ccf24abcb67c00ba1" compoundref="quantizer_8hpp" startline="351" endline="357">get_adaptive_quantization_copy_threads</references>
        <references refid="classlbann_1_1lbann__quantizer_1a716fae78ef5ba082a8093f0d06550804" compoundref="quantizer_8hpp" startline="264">quantized_count</references>
        <referencedby refid="classlbann_1_1lbann__quantizer_1aa1541b9afa60250dbd570acbbe98242f" compoundref="quantizer_8hpp" startline="267" endline="269">get_onebit_quantized_matrix_height</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1lbann__quantizer_1a9d6e80bd54d6eb03dc63c15861356557" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename colT</type>
          </param>
          <param>
            <type>typename rowT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void lbann::lbann_quantizer::adaptive_bound</definition>
        <argsstring>(const Mat &amp;mat, Mat &amp;qerror, std::vector&lt; rowT &gt; &amp;q, int proportion)</argsstring>
        <name>adaptive_bound</name>
        <param>
          <type>const <ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>qerror</declname>
        </param>
        <param>
          <type>std::vector&lt; rowT &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>int</type>
          <declname>proportion</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Ensure that q is no more than a factor of MAX_QUANTIZED_EXCESS larger than optimal. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="311" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer_impl.hpp" bodystart="397" bodyend="467"/>
        <references refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" compoundref="quantizer_8hpp" startline="256">HEADER_FACTOR</references>
        <references refid="classlbann_1_1lbann__quantizer_1abe63d57e62be1b498848f7920de4433a" compoundref="quantizer_8hpp" startline="259">MAX_QUANTIZED_EXCESS</references>
        <referencedby refid="classlbann_1_1lbann__quantizer_1aa1541b9afa60250dbd570acbbe98242f" compoundref="quantizer_8hpp" startline="267" endline="269">get_onebit_quantized_matrix_height</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1lbann__quantizer_1ab3a0e79b571e7c016446c179eedd0dc1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename colT</type>
          </param>
          <param>
            <type>typename rowT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void lbann::lbann_quantizer::adaptive_quantize_slice</definition>
        <argsstring>(const std::vector&lt; rowT &gt; &amp;q, const Mat &amp;mat, Mat &amp;qerror, std::vector&lt; rowT &gt; &amp;slice, colT start, colT end, int proportion)</argsstring>
        <name>adaptive_quantize_slice</name>
        <param>
          <type>const std::vector&lt; rowT &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>qerror</declname>
        </param>
        <param>
          <type>std::vector&lt; rowT &gt; &amp;</type>
          <declname>slice</declname>
        </param>
        <param>
          <type>colT</type>
          <declname>start</declname>
        </param>
        <param>
          <type>colT</type>
          <declname>end</declname>
        </param>
        <param>
          <type>int</type>
          <declname>proportion</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="314" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer_impl.hpp" bodystart="470" bodyend="493"/>
        <references refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" compoundref="quantizer_8hpp" startline="256">HEADER_FACTOR</references>
        <referencedby refid="classlbann_1_1lbann__quantizer_1aa1541b9afa60250dbd570acbbe98242f" compoundref="quantizer_8hpp" startline="267" endline="269">get_onebit_quantized_matrix_height</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1lbann__quantizer_1a3fe3493cb16b85bd4eaf251980408f1b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename colT</type>
          </param>
          <param>
            <type>typename rowT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void lbann::lbann_quantizer::intermodel_sum_adaptive_quantized_impl</definition>
        <argsstring>(lbann_comm *comm, Mat &amp;mat, Mat &amp;qerror, int proportion)</argsstring>
        <name>intermodel_sum_adaptive_quantized_impl</name>
        <param>
          <type><ref refid="classlbann_1_1lbann__comm" kindref="compound">lbann_comm</ref> *</type>
          <declname>comm</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>qerror</declname>
        </param>
        <param>
          <type>int</type>
          <declname>proportion</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="319" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer_impl.hpp" bodystart="496" bodyend="574"/>
        <references refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" compoundref="quantizer_8hpp" startline="256">HEADER_FACTOR</references>
        <references refid="classlbann_1_1lbann__quantizer_1abe63d57e62be1b498848f7920de4433a" compoundref="quantizer_8hpp" startline="259">MAX_QUANTIZED_EXCESS</references>
        <references refid="structlbann_1_1lbann__comm_1_1allreduce__options_1a4b3cd4eb74dd5a49ee3ffafa2edc1607" compoundref="comm_8hpp" startline="787">lbann::lbann_comm::allreduce_options::max_reduces</references>
        <references refid="classlbann_1_1lbann__comm_1a502bd724f9fb27f0e899306c69a3ec47" compoundref="comm_8hpp" startline="404" endline="406">lbann::lbann_comm::intermodel_allreduce</references>
        <referencedby refid="classlbann_1_1lbann__quantizer_1aa1541b9afa60250dbd570acbbe98242f" compoundref="quantizer_8hpp" startline="267" endline="269">get_onebit_quantized_matrix_height</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1lbann__quantizer_1aaa0c20f755437130172c40ca8e95bc3f" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int lbann::lbann_quantizer::get_adaptive_quantization_threads</definition>
        <argsstring>(El::Int width)</argsstring>
        <name>get_adaptive_quantization_threads</name>
        <param>
          <type>El::Int</type>
          <declname>width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the number of threads adaptive quantization should use for a matrix with the given width. This number of threads is empirically determined. <xrefsect id="todo_1_todo000028"><xreftitle>Todo</xreftitle><xrefdescription><para>Make this configurable at compile time. </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="328" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" bodystart="328" bodyend="340"/>
        <referencedby refid="classlbann_1_1lbann__quantizer_1a22b898932caed41ccf24abcb67c00ba1" compoundref="quantizer_8hpp" startline="351" endline="357">get_adaptive_quantization_copy_threads</referencedby>
        <referencedby refid="classlbann_1_1lbann__quantizer_1a7e4dfca5770dfd88ae6255b0407d8f80" compoundref="quantizer__impl_8hpp" startline="37" endline="161">adaptive_quantize</referencedby>
        <referencedby refid="classlbann_1_1lbann__quantizer_1acf8d21e8114a00fdea53d919d76dd511" compoundref="quantizer__impl_8hpp" startline="170" endline="214">adaptive_unquantize</referencedby>
        <referencedby refid="classlbann_1_1lbann__quantizer_1a1f63f7be2e227a48ebaa25056e6f85bc" compoundref="quantizer__impl_8hpp" startline="223" endline="271">adaptive_unquantize_add</referencedby>
        <referencedby refid="classlbann_1_1lbann__quantizer_1a25ed3869c6bc615ae51198803ea4e33d" compoundref="quantizer__impl_8hpp" startline="274" endline="394">adaptive_quantize_replace</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1lbann__quantizer_1a22b898932caed41ccf24abcb67c00ba1" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int lbann::lbann_quantizer::get_adaptive_quantization_copy_threads</definition>
        <argsstring>(El::Int width)</argsstring>
        <name>get_adaptive_quantization_copy_threads</name>
        <param>
          <type>El::Int</type>
          <declname>width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the number of threads adaptive quantization uses in its copy loop. This is empirically determined. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the matrix being quantized. </para></parameterdescription>
</parameteritem>
</parameterlist>
<xrefsect id="todo_1_todo000029"><xreftitle>Todo</xreftitle><xrefdescription><para>Make this configurable at compile time. </para></xrefdescription></xrefsect><simplesect kind="note"><para>If this and get_adaptive_quantization_threads return different values for the same width, OpenMP may reap its threads and add additional overhead when invoking a parallel region with more threads. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="351" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" bodystart="351" bodyend="357"/>
        <references refid="classlbann_1_1lbann__quantizer_1aaa0c20f755437130172c40ca8e95bc3f" compoundref="quantizer_8hpp" startline="328" endline="340">get_adaptive_quantization_threads</references>
        <referencedby refid="classlbann_1_1lbann__quantizer_1a7e4dfca5770dfd88ae6255b0407d8f80" compoundref="quantizer__impl_8hpp" startline="37" endline="161">adaptive_quantize</referencedby>
        <referencedby refid="classlbann_1_1lbann__quantizer_1a25ed3869c6bc615ae51198803ea4e33d" compoundref="quantizer__impl_8hpp" startline="274" endline="394">adaptive_quantize_replace</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Support different kinds of quantization. Relevant references: &quot;1-Bit Stochastic Gradient Descent and its Application to Data-Parallel
Distributed Training of Speech DNNs&quot; by Frank Seide et al. (MSR) &quot;Scalable Distributed DNN Training Using Commodity GPU Cloud Computing&quot; by Nikko Strom. (Amazon) &quot;Communication Quantization for Data-parallel Training of Deep Neural
Networks&quot; by Nikoli Dryden et al. (LLNL/UIUC) </para>    </detaileddescription>
    <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" line="56" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/quantizer.hpp" bodystart="56" bodyend="358"/>
    <listofallmembers>
      <member refid="classlbann_1_1lbann__quantizer_1a9d6e80bd54d6eb03dc63c15861356557" prot="private" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>adaptive_bound</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1a7e4dfca5770dfd88ae6255b0407d8f80" prot="public" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>adaptive_quantize</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1a737865bb555db8a8a104fb345f7626b2" prot="public" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>adaptive_quantize</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1a25ed3869c6bc615ae51198803ea4e33d" prot="private" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>adaptive_quantize_replace</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1ab3a0e79b571e7c016446c179eedd0dc1" prot="private" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>adaptive_quantize_slice</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1acf8d21e8114a00fdea53d919d76dd511" prot="public" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>adaptive_unquantize</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1a5456c31af080fce7f85aa7a01b7ee939" prot="public" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>adaptive_unquantize</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1a1f63f7be2e227a48ebaa25056e6f85bc" prot="private" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>adaptive_unquantize_add</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1af77beca5905ff8601ca9b8231a2a16e0" prot="public" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>col_reconstruction</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1a22b898932caed41ccf24abcb67c00ba1" prot="private" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>get_adaptive_quantization_copy_threads</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1aaa0c20f755437130172c40ca8e95bc3f" prot="private" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>get_adaptive_quantization_threads</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1aa1541b9afa60250dbd570acbbe98242f" prot="private" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>get_onebit_quantized_matrix_height</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1a71023cbf93b54d8e8707d137e3c6007a" prot="public" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>get_proportion_time</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1afe560823e51a64b1bb42c6f6cbd83ee0" prot="public" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>get_quantized_count</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1afb4315625e371169cabfac56c3f75d37" prot="private" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>HEADER_FACTOR</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1a87e856d8bf5e8a678a39cdb8f547dfd9" prot="public" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>intermodel_sum_adaptive_quantized</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1aa2d4e5b9bc90f8feaaa32f3fc4183d10" prot="public" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>intermodel_sum_adaptive_quantized</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1a3fe3493cb16b85bd4eaf251980408f1b" prot="private" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>intermodel_sum_adaptive_quantized_impl</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1a4b326de1ca5b7eba6415b6f42f83335b" prot="public" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>intermodel_sum_onebit_quantized</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1af24e00e26e157f102f3cef547de40ae1" prot="public" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>intermodel_sum_onebit_quantized</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1a0bd572557675705c5e080b92d74b02ae" prot="public" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>intermodel_sum_threshold_quantized</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1ac2afc78996f35d90b5d0462292a1a2e3" prot="public" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>intermodel_sum_threshold_quantized</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1a430cd47f333c678d2cb77f4ab2693914" prot="public" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>lbann_quantizer</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1abe63d57e62be1b498848f7920de4433a" prot="private" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>MAX_QUANTIZED_EXCESS</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1a33ea17392f53b90e91aea1ffb7e11d68" prot="private" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>NUM_BITS</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1a8e25785452736c54861a69207a48252d" prot="private" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>NUM_ONEBIT_SAMPLES</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1a10667e56db4218aac3912c6bae28fc41" prot="private" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>NUM_RECON_SAMPLES</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1a7745dbc282bebe812ff5523a4b3df3f2" prot="private" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>NUM_THRESHOLD_SAMPLES</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1a4dd4696cbbfd93c73e5fb3c40fcb16c3" prot="public" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>onebit_quantize</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1a9eeb89150026bf4b7bea15bffdba10d3" prot="public" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>onebit_quantize</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1ad5592daa122b40c275cce3dc93bba41e" prot="public" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>onebit_unquantize</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1afc7a47fb5a5e87a09f2913a46a2bacf7" prot="public" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>onebit_unquantize</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1a879cea8464408b8265be9e55edd83b2c" prot="private" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>onebit_unquantize_add</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1aa5aabc1cb4163e95aee993d9b37b9b32" prot="public" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>proportion_threshold</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1a6bd266728f578df0c86fc2e493742cc1" prot="private" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>proportion_time</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1afcda642ff1b44d31eec910909c3d013e" prot="public" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>qtype</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1a716fae78ef5ba082a8093f0d06550804" prot="private" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>quantized_count</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1a399f3f8c393b6021b43e95d1ce6ea28c" prot="public" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>QuantizedMatrix</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1aee1ea46e3191ad25fd310938eaf5a2e0" prot="public" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>reset_counters</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1a00106e69ea8a6dfe9e9a91c75b845bcd" prot="public" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>threshold_quantize</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1ae9949af6bec1e95adf5a32ba9bb4afd8" prot="public" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>threshold_quantize</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1a2bcdf31781bf72bbe63940ea0d92990f" prot="private" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>threshold_quantize_apply</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1a0f5f3b0149715ab59202b8884a87c7d5" prot="public" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>threshold_unquantize</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1a2324bba3cbb6c0d3e51bbe21555e7f1a" prot="public" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>threshold_unquantize</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1ab12b432ba2901347b025e8b6ec40a3c6" prot="private" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>threshold_unquantize_apply</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1a85ea8e298c2975b4f802855278406aa7" prot="public" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>ThreshQuantized</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1adb72778971f6bb914a14823dd5806702" prot="public" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>ThreshQuantized32</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1a2153502c89432e8762141d84794aac75" prot="public" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>ThreshQuantized64</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1ac8b63c86fc871e248ce20c7af19a7fad" prot="public" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>uqtype</name></member>
      <member refid="classlbann_1_1lbann__quantizer_1ac0cc07008ff963949c2cb7b91786c61c" prot="public" virt="non-virtual"><scope>lbann::lbann_quantizer</scope><name>~lbann_quantizer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
