<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="l2_8cpp" kind="file" language="C++">
    <compoundname>l2.cpp</compoundname>
    <includes refid="l2_8hpp" local="yes">lbann/objective_functions/weight_regularization/l2.hpp</includes>
    <includes refid="model_8hpp" local="yes">lbann/models/model.hpp</includes>
    <incdepgraph>
      <node id="22642">
        <label>sys/stat.h</label>
      </node>
      <node id="22621">
        <label>lbann/utils/summary.hpp</label>
        <link refid="summary_8hpp"/>
        <childnode refid="22622" relation="include">
        </childnode>
        <childnode refid="22618" relation="include">
        </childnode>
        <childnode refid="22607" relation="include">
        </childnode>
        <childnode refid="22617" relation="include">
        </childnode>
      </node>
      <node id="22633">
        <label>lbann/io/persist.hpp</label>
        <link refid="persist_8hpp"/>
        <childnode refid="22607" relation="include">
        </childnode>
        <childnode refid="22608" relation="include">
        </childnode>
      </node>
      <node id="22608">
        <label>El.hpp</label>
      </node>
      <node id="22605">
        <label>lbann/objective_functions/weight_regularization/l2.hpp</label>
        <link refid="l2_8hpp"/>
        <childnode refid="22606" relation="include">
        </childnode>
      </node>
      <node id="22607">
        <label>lbann/base.hpp</label>
        <link refid="base_8hpp"/>
        <childnode refid="22608" relation="include">
        </childnode>
        <childnode refid="22609" relation="include">
        </childnode>
        <childnode refid="22610" relation="include">
        </childnode>
        <childnode refid="22615" relation="include">
        </childnode>
      </node>
      <node id="22644">
        <label>fcntl.h</label>
      </node>
      <node id="22604">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/objective_functions/weight_regularization/l2.cpp</label>
        <link refid="l2_8cpp"/>
        <childnode refid="22605" relation="include">
        </childnode>
        <childnode refid="22638" relation="include">
        </childnode>
      </node>
      <node id="22646">
        <label>lbann/metrics/metric.hpp</label>
        <link refid="metric_8hpp"/>
        <childnode refid="22607" relation="include">
        </childnode>
        <childnode refid="22617" relation="include">
        </childnode>
        <childnode refid="22625" relation="include">
        </childnode>
        <childnode refid="22633" relation="include">
        </childnode>
      </node>
      <node id="22622">
        <label>string</label>
      </node>
      <node id="22630">
        <label>lbann/utils/cudnn_wrapper.hpp</label>
        <link refid="cudnn__wrapper_8hpp"/>
        <childnode refid="22618" relation="include">
        </childnode>
        <childnode refid="22607" relation="include">
        </childnode>
        <childnode refid="22617" relation="include">
        </childnode>
        <childnode refid="22625" relation="include">
        </childnode>
      </node>
      <node id="22636">
        <label>lbann/utils/timer.hpp</label>
        <link refid="timer_8hpp"/>
        <childnode refid="22637" relation="include">
        </childnode>
      </node>
      <node id="22619">
        <label>map</label>
      </node>
      <node id="22635">
        <label>unordered_set</label>
      </node>
      <node id="22629">
        <label>exception</label>
      </node>
      <node id="22632">
        <label>lbann/weights/initializer.hpp</label>
        <link refid="initializer_8hpp"/>
        <childnode refid="22607" relation="include">
        </childnode>
        <childnode refid="22617" relation="include">
        </childnode>
        <childnode refid="22625" relation="include">
        </childnode>
        <childnode refid="22630" relation="include">
        </childnode>
      </node>
      <node id="22643">
        <label>sys/types.h</label>
      </node>
      <node id="22639">
        <label>lbann/utils/graph.hpp</label>
        <link refid="graph_8hpp"/>
        <childnode refid="22628" relation="include">
        </childnode>
        <childnode refid="22618" relation="include">
        </childnode>
        <childnode refid="22640" relation="include">
        </childnode>
        <childnode refid="22619" relation="include">
        </childnode>
      </node>
      <node id="22612">
        <label>cstdio</label>
      </node>
      <node id="22626">
        <label>lbann/utils/stack_trace.hpp</label>
        <link refid="stack__trace_8hpp"/>
        <childnode refid="22627" relation="include">
        </childnode>
        <childnode refid="22622" relation="include">
        </childnode>
      </node>
      <node id="22614">
        <label>cxxabi.h</label>
      </node>
      <node id="22625">
        <label>lbann/utils/exception.hpp</label>
        <link refid="exception_8hpp"/>
        <childnode refid="22607" relation="include">
        </childnode>
        <childnode refid="22617" relation="include">
        </childnode>
        <childnode refid="22626" relation="include">
        </childnode>
        <childnode refid="22628" relation="include">
        </childnode>
        <childnode refid="22629" relation="include">
        </childnode>
      </node>
      <node id="22618">
        <label>vector</label>
      </node>
      <node id="22617">
        <label>lbann/comm.hpp</label>
        <link refid="comm_8hpp"/>
        <childnode refid="22618" relation="include">
        </childnode>
        <childnode refid="22619" relation="include">
        </childnode>
        <childnode refid="22620" relation="include">
        </childnode>
        <childnode refid="22607" relation="include">
        </childnode>
      </node>
      <node id="22645">
        <label>lbann/objective_functions/objective_function.hpp</label>
        <link refid="objective__function_8hpp"/>
        <childnode refid="22606" relation="include">
        </childnode>
        <childnode refid="22646" relation="include">
        </childnode>
      </node>
      <node id="22641">
        <label>lbann/io/file_io.hpp</label>
        <link refid="file__io_8hpp"/>
        <childnode refid="22642" relation="include">
        </childnode>
        <childnode refid="22643" relation="include">
        </childnode>
        <childnode refid="22644" relation="include">
        </childnode>
      </node>
      <node id="22634">
        <label>lbann.pb.h</label>
      </node>
      <node id="22611">
        <label>cstdlib</label>
      </node>
      <node id="22628">
        <label>iostream</label>
      </node>
      <node id="22623">
        <label>lbann/optimizers/optimizer.hpp</label>
        <link refid="optimizer_8hpp"/>
        <childnode refid="22624" relation="include">
        </childnode>
        <childnode refid="22607" relation="include">
        </childnode>
        <childnode refid="22617" relation="include">
        </childnode>
        <childnode refid="22625" relation="include">
        </childnode>
        <childnode refid="22630" relation="include">
        </childnode>
        <childnode refid="22631" relation="include">
        </childnode>
        <childnode refid="22622" relation="include">
        </childnode>
        <childnode refid="22635" relation="include">
        </childnode>
      </node>
      <node id="22647">
        <label>unordered_map</label>
      </node>
      <node id="22616">
        <label>lbann/layers/layer.hpp</label>
        <link refid="layer_8hpp"/>
        <childnode refid="22607" relation="include">
        </childnode>
        <childnode refid="22617" relation="include">
        </childnode>
        <childnode refid="22621" relation="include">
        </childnode>
        <childnode refid="22623" relation="include">
        </childnode>
        <childnode refid="22625" relation="include">
        </childnode>
        <childnode refid="22630" relation="include">
        </childnode>
        <childnode refid="22636" relation="include">
        </childnode>
        <childnode refid="22633" relation="include">
        </childnode>
        <childnode refid="22634" relation="include">
        </childnode>
        <childnode refid="22622" relation="include">
        </childnode>
        <childnode refid="22618" relation="include">
        </childnode>
      </node>
      <node id="22637">
        <label>chrono</label>
      </node>
      <node id="22606">
        <label>lbann/objective_functions/objective_function_term.hpp</label>
        <link refid="objective__function__term_8hpp"/>
        <childnode refid="22607" relation="include">
        </childnode>
        <childnode refid="22616" relation="include">
        </childnode>
        <childnode refid="22631" relation="include">
        </childnode>
      </node>
      <node id="22627">
        <label>csignal</label>
      </node>
      <node id="22631">
        <label>lbann/weights/weights.hpp</label>
        <link refid="weights_8hpp"/>
        <childnode refid="22622" relation="include">
        </childnode>
        <childnode refid="22607" relation="include">
        </childnode>
        <childnode refid="22617" relation="include">
        </childnode>
        <childnode refid="22625" relation="include">
        </childnode>
        <childnode refid="22630" relation="include">
        </childnode>
        <childnode refid="22632" relation="include">
        </childnode>
        <childnode refid="22633" relation="include">
        </childnode>
        <childnode refid="22634" relation="include">
        </childnode>
      </node>
      <node id="22615">
        <label>lbann_config.hpp</label>
      </node>
      <node id="22640">
        <label>set</label>
      </node>
      <node id="22638">
        <label>lbann/models/model.hpp</label>
        <link refid="model_8hpp"/>
        <childnode refid="22607" relation="include">
        </childnode>
        <childnode refid="22617" relation="include">
        </childnode>
        <childnode refid="22616" relation="include">
        </childnode>
        <childnode refid="22621" relation="include">
        </childnode>
        <childnode refid="22639" relation="include">
        </childnode>
        <childnode refid="22641" relation="include">
        </childnode>
        <childnode refid="22633" relation="include">
        </childnode>
        <childnode refid="22645" relation="include">
        </childnode>
        <childnode refid="22646" relation="include">
        </childnode>
        <childnode refid="22631" relation="include">
        </childnode>
        <childnode refid="22623" relation="include">
        </childnode>
        <childnode refid="22634" relation="include">
        </childnode>
        <childnode refid="22618" relation="include">
        </childnode>
        <childnode refid="22622" relation="include">
        </childnode>
        <childnode refid="22647" relation="include">
        </childnode>
      </node>
      <node id="22624">
        <label>lbann/utils/compiler_control.hpp</label>
        <link refid="compiler__control_8hpp"/>
      </node>
      <node id="22610">
        <label>lbann/utils/cyg_profile.hpp</label>
        <link refid="cyg__profile_8hpp"/>
        <childnode refid="22611" relation="include">
        </childnode>
        <childnode refid="22612" relation="include">
        </childnode>
        <childnode refid="22613" relation="include">
        </childnode>
        <childnode refid="22614" relation="include">
        </childnode>
      </node>
      <node id="22609">
        <label>lbann/Elemental_extensions.hpp</label>
        <link refid="Elemental__extensions_8hpp"/>
        <childnode refid="22608" relation="include">
        </childnode>
      </node>
      <node id="22620">
        <label>typeindex</label>
      </node>
      <node id="22613">
        <label>dlfcn.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceanonymous__namespace_02l2_8cpp_03">anonymous_namespace{l2.cpp}</innernamespace>
    <innernamespace refid="namespacelbann">lbann</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2014-2016,<sp/>Lawrence<sp/>Livermore<sp/>National<sp/>Security,<sp/>LLC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Produced<sp/>at<sp/>the<sp/>Lawrence<sp/>Livermore<sp/>National<sp/>Laboratory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Written<sp/>by<sp/>the<sp/>LBANN<sp/>Research<sp/>Team<sp/>(B.<sp/>Van<sp/>Essen,<sp/>et<sp/>al.)<sp/>listed<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>CONTRIBUTORS<sp/>file.<sp/>&lt;lbann-dev@llnl.gov&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LLNL-CODE-697807.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>LBANN:<sp/>Livermore<sp/>Big<sp/>Artificial<sp/>Neural<sp/>Network</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Toolkit.<sp/>For<sp/>details,<sp/>see<sp/>http://software.llnl.gov/LBANN<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://github.com/LLNL/LBANN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;Licensee&quot;);<sp/>you</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implied.<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>license.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="l2_8hpp" kindref="compound">lbann/objective_functions/weight_regularization/l2.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="model_8hpp" kindref="compound">lbann/models/model.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LBANN_HAS_CUDNN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cublas__wrapper_8hpp" kindref="compound">lbann/utils/cublas_wrapper.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>LBANN_HAS_CUDNN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="namespaceanonymous__namespace_02l2_8cpp_03" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="namespaceanonymous__namespace_02l2_8cpp_03_1a32724e48048319cd99337131ba70d4c4" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="base_8hpp_1a3266f5ac18504bbadea983c109566867" kindref="member">EvalType</ref><sp/><ref refid="namespaceanonymous__namespace_02l2_8cpp_03_1a32724e48048319cd99337131ba70d4c4" kindref="member">sum_of_squares</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>mat)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Int<sp/>height<sp/>=<sp/>mat.Height();</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Int<sp/>width<sp/>=<sp/>mat.Width();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Int<sp/>ldim<sp/>=<sp/>mat.LDim();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>__restrict__<sp/>buf<sp/>=<sp/>mat.LockedBuffer();</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="base_8hpp_1a3266f5ac18504bbadea983c109566867" kindref="member">EvalType</ref><sp/>sqsum<sp/>=<sp/><ref refid="base_8hpp_1a3266f5ac18504bbadea983c109566867" kindref="member">EvalType</ref>(0);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ldim<sp/>==<sp/>height)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Parallelize<sp/>single<sp/>loop<sp/>if<sp/>data<sp/>is<sp/>contiguous</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Int<sp/>size<sp/>=<sp/>height*width;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>parallel<sp/>for<sp/>reduction(+:sqsum)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(El::Int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="base_8hpp_1a3266f5ac18504bbadea983c109566867" kindref="member">EvalType</ref><sp/>val<sp/>=<sp/>buf[i];</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sqsum<sp/>+=<sp/>val<sp/>*<sp/>val;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Parallelize<sp/>double<sp/>loop<sp/>if<sp/>data<sp/>is<sp/>not<sp/>contiguous</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>parallel<sp/>for<sp/>reduction(+:sqsum)<sp/>collapse(2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(El::Int<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>width;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(El::Int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>height;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="base_8hpp_1a3266f5ac18504bbadea983c109566867" kindref="member">EvalType</ref><sp/>val<sp/>=<sp/>buf[i<sp/>+<sp/>j*ldim];</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sqsum<sp/>+=<sp/>val<sp/>*<sp/>val;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sqsum;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacelbann" kindref="compound">lbann</ref><sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="classlbann_1_1l2__weight__regularization_1a0320afab573fbe77b5ba6d22ea5e0898" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1l2__weight__regularization_1a0320afab573fbe77b5ba6d22ea5e0898" kindref="member">l2_weight_regularization::setup</ref>(<ref refid="classlbann_1_1model" kindref="compound">model</ref>&amp;<sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1objective__function__term_1a6c8dbdf18aac8676098189fb7b178e91" kindref="member">objective_function_term::setup</ref>(m);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>term<sp/>has<sp/>no<sp/>layer<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classlbann_1_1objective__function__term_1a9269cf0a237eacd1e220ba2739f44334" kindref="member">m_layers</ref>.empty())<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="base_8hpp_1a80b1d707117e968a6951b7222e4b2b87" kindref="member">LBANN_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;attempted<sp/>to<sp/>setup<sp/>L2<sp/>weight<sp/>regularization<sp/>with<sp/>layer<sp/>pointers&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>all<sp/>weights<sp/>in<sp/>model<sp/>if<sp/>no<sp/>weights<sp/>pointers<sp/>are<sp/>provided</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1objective__function__term_1a1d601c29153ae9cb54c585887608f2bf" kindref="member">m_weights</ref>.empty())<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1weights" kindref="compound">weights</ref>*<sp/>w<sp/>:<sp/>m.<ref refid="classlbann_1_1model_1ac0a89794f1f51e7c502fff2745c973e6" kindref="member">get_weights</ref>())<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(w-&gt;get_optimizer()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1objective__function__term_1a1d601c29153ae9cb54c585887608f2bf" kindref="member">m_weights</ref>.push_back(w);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1l2__weight__regularization_1a628aabb4e824f2aa861baba93668dc24" kindref="member">m_sqsums</ref>.resize(<ref refid="classlbann_1_1objective__function__term_1a1d601c29153ae9cb54c585887608f2bf" kindref="member">m_weights</ref>.size(),<sp/><ref refid="base_8hpp_1a3266f5ac18504bbadea983c109566867" kindref="member">EvalType</ref>(0));</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1l2__weight__regularization_1a0ae4858adb3279c0019f5e0500bdcf4f" kindref="member">m_allreduce_started</ref>.resize(<ref refid="classlbann_1_1objective__function__term_1a1d601c29153ae9cb54c585887608f2bf" kindref="member">m_weights</ref>.size(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classlbann_1_1objective__function__term_1a1d601c29153ae9cb54c585887608f2bf" kindref="member">m_weights</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1l2__weight__regularization_1adf7350e151736d9bae4aa5cf410acd80" kindref="member">m_allreduce_reqs</ref>.emplace_back();</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LBANN_HAS_CUDNN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>cuDNN<sp/>manager</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>m_cudnn<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>w<sp/>:<sp/><ref refid="classlbann_1_1objective__function__term_1a1d601c29153ae9cb54c585887608f2bf" kindref="member">m_weights</ref>)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>m_cudnn<sp/>=<sp/>w-&gt;get_cudnn_manager();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_cudnn<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>LBANN_HAS_CUDNN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="classlbann_1_1l2__weight__regularization_1ab3a47d8ef5b8c8e16f076659e864f683" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1l2__weight__regularization_1ab3a47d8ef5b8c8e16f076659e864f683" kindref="member">l2_weight_regularization::start_evaluation</ref>()<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1objective__function__term_1a59a544b8ff0455ed5091de3bf0d81c3c" kindref="member">m_scale_factor</ref><sp/>==<sp/><ref refid="base_8hpp_1a3266f5ac18504bbadea983c109566867" kindref="member">EvalType</ref>(0))<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>terms<sp/>for<sp/>each<sp/>weights</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_weights<sp/>=<sp/><ref refid="classlbann_1_1objective__function__term_1a1d601c29153ae9cb54c585887608f2bf" kindref="member">m_weights</ref>.size();</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>std::fill(<ref refid="classlbann_1_1l2__weight__regularization_1a628aabb4e824f2aa861baba93668dc24" kindref="member">m_sqsums</ref>.begin(),<sp/><ref refid="classlbann_1_1l2__weight__regularization_1a628aabb4e824f2aa861baba93668dc24" kindref="member">m_sqsums</ref>.end(),<sp/><ref refid="base_8hpp_1a3266f5ac18504bbadea983c109566867" kindref="member">EvalType</ref>(0));</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LBANN_HAS_CUDNN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>terms<sp/>for<sp/>GPU<sp/>weights</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_cudnn<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>num_gpus<sp/>=<sp/>m_cudnn-&gt;get_num_gpus();</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>weights_per_gpu<sp/>=<sp/>(num_weights<sp/>+<sp/>num_gpus<sp/>-<sp/>1)<sp/>/<sp/>num_gpus;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1cudnn_1_1matrix" kindref="compound">cudnn::matrix</ref><sp/>sqsums_d(m_cudnn);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>sqsums_d.attach_to_work_spaces(1,<sp/>weights_per_gpu);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>sqsums_d.zero();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gpu<sp/>=<sp/>0;<sp/>gpu<sp/>&lt;<sp/>num_gpus;<sp/>++gpu)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_CUDA(cudaSetDevice(m_cudnn-&gt;get_gpu(gpu)));</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>handle<sp/>=<sp/>m_cudnn-&gt;get_cublas_handle(gpu);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_CUDA(cublasSetPointerMode(handle,<sp/>CUBLAS_POINTER_MODE_DEVICE));</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>weights_start<sp/>=<sp/>std::min(gpu<sp/>*<sp/>weights_per_gpu,<sp/>num_weights);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>weights_end<sp/><sp/><sp/>=<sp/>std::min((gpu+1)<sp/>*<sp/>weights_per_gpu,<sp/>num_weights);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>weights_start;<sp/>i<sp/>&lt;<sp/>weights_end;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>w<sp/>=<sp/><ref refid="classlbann_1_1objective__function__term_1a1d601c29153ae9cb54c585887608f2bf" kindref="member">m_weights</ref>[i];</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(w-&gt;get_cudnn_manager()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>values_d<sp/>=<sp/>w-&gt;get_values_gpu()[gpu];</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>sqsum_d<sp/>=<sp/>sqsums_d.get_data(gpu)<sp/>+<sp/>i<sp/>-<sp/>weights_start;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cublas::dot(handle,<sp/>w-&gt;get_size(),<sp/>values_d,<sp/>1,<sp/>values_d,<sp/>1,<sp/>sqsum_d);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_CUDA(cublasSetPointerMode(handle,<sp/>CUBLAS_POINTER_MODE_HOST));</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref><sp/>sqsums(1,<sp/>num_weights);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>m_cudnn-&gt;gather_from_gpus(sqsums,<sp/>sqsums_d.get_locked_data(),<sp/>weights_per_gpu);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>m_cudnn-&gt;synchronize();</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_weights;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1l2__weight__regularization_1a628aabb4e824f2aa861baba93668dc24" kindref="member">m_sqsums</ref>[i]<sp/>=<sp/><ref refid="base_8hpp_1a3266f5ac18504bbadea983c109566867" kindref="member">EvalType</ref>(sqsums(0,<sp/>i));</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>LBANN_HAS_CUDNN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>terms<sp/>for<sp/>CPU<sp/>weights</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>std::fill(<ref refid="classlbann_1_1l2__weight__regularization_1a0ae4858adb3279c0019f5e0500bdcf4f" kindref="member">m_allreduce_started</ref>.begin(),<sp/><ref refid="classlbann_1_1l2__weight__regularization_1a0ae4858adb3279c0019f5e0500bdcf4f" kindref="member">m_allreduce_started</ref>.end(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_weights;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>w<sp/>=<sp/><ref refid="classlbann_1_1objective__function__term_1a1d601c29153ae9cb54c585887608f2bf" kindref="member">m_weights</ref>[i];</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(w-&gt;get_cudnn_manager()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>values<sp/>=<sp/>w-&gt;get_values();</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1l2__weight__regularization_1a628aabb4e824f2aa861baba93668dc24" kindref="member">m_sqsums</ref>[i]<sp/>=<sp/><ref refid="namespaceanonymous__namespace_02l2_8cpp_03_1a32724e48048319cd99337131ba70d4c4" kindref="member">sum_of_squares</ref>(values.LockedMatrix());</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1objective__function__term_1a5f89b676a26a6b76ddc26563ac87beb9" kindref="member">get_comm</ref>().<ref refid="classlbann_1_1lbann__comm_1a2a7bb6cf3707366fc0671d8894ca30ea" kindref="member">nb_allreduce</ref>(&amp;(<ref refid="classlbann_1_1l2__weight__regularization_1a628aabb4e824f2aa861baba93668dc24" kindref="member">m_sqsums</ref>[i]),<sp/>1,<sp/>values.DistComm(),</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1l2__weight__regularization_1adf7350e151736d9bae4aa5cf410acd80" kindref="member">m_allreduce_reqs</ref>[i],<sp/>El::mpi::SUM);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1l2__weight__regularization_1a0ae4858adb3279c0019f5e0500bdcf4f" kindref="member">m_allreduce_started</ref>[i]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155" refid="classlbann_1_1l2__weight__regularization_1a5517e1fa9da8a28f39cf208054f6138a" refkind="member"><highlight class="normal"><ref refid="base_8hpp_1a3266f5ac18504bbadea983c109566867" kindref="member">EvalType</ref><sp/><ref refid="classlbann_1_1l2__weight__regularization_1a5517e1fa9da8a28f39cf208054f6138a" kindref="member">l2_weight_regularization::finish_evaluation</ref>()<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1objective__function__term_1a59a544b8ff0455ed5091de3bf0d81c3c" kindref="member">m_scale_factor</ref><sp/>==<sp/><ref refid="base_8hpp_1a3266f5ac18504bbadea983c109566867" kindref="member">EvalType</ref>(0))<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="base_8hpp_1a3266f5ac18504bbadea983c109566867" kindref="member">EvalType</ref>(0);<sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classlbann_1_1objective__function__term_1a1d601c29153ae9cb54c585887608f2bf" kindref="member">m_weights</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1l2__weight__regularization_1a0ae4858adb3279c0019f5e0500bdcf4f" kindref="member">m_allreduce_started</ref>[i])<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1objective__function__term_1a5f89b676a26a6b76ddc26563ac87beb9" kindref="member">get_comm</ref>().<ref refid="classlbann_1_1lbann__comm_1a30439f28cf615e1406090799c5499321" kindref="member">wait</ref>(<ref refid="classlbann_1_1l2__weight__regularization_1adf7350e151736d9bae4aa5cf410acd80" kindref="member">m_allreduce_reqs</ref>[i]);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>sqsum<sp/>=<sp/>std::accumulate(<ref refid="classlbann_1_1l2__weight__regularization_1a628aabb4e824f2aa861baba93668dc24" kindref="member">m_sqsums</ref>.begin(),</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1l2__weight__regularization_1a628aabb4e824f2aa861baba93668dc24" kindref="member">m_sqsums</ref>.end(),</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="base_8hpp_1a3266f5ac18504bbadea983c109566867" kindref="member">EvalType</ref>(0));</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1objective__function__term_1a59a544b8ff0455ed5091de3bf0d81c3c" kindref="member">m_scale_factor</ref><sp/>*<sp/>sqsum<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168" refid="classlbann_1_1l2__weight__regularization_1a1dce8a486660335097f5ad239b343e39" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1l2__weight__regularization_1a1dce8a486660335097f5ad239b343e39" kindref="member">l2_weight_regularization::compute_weight_regularization</ref>()<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1objective__function__term_1a59a544b8ff0455ed5091de3bf0d81c3c" kindref="member">m_scale_factor</ref><sp/>==<sp/><ref refid="base_8hpp_1a3266f5ac18504bbadea983c109566867" kindref="member">EvalType</ref>(0))<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LBANN_HAS_CUDNN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>gradient<sp/>of<sp/>L2<sp/>regularization<sp/>term<sp/>for<sp/>GPU<sp/>weights</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>w<sp/>:<sp/><ref refid="classlbann_1_1objective__function__term_1a1d601c29153ae9cb54c585887608f2bf" kindref="member">m_weights</ref>)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(w-&gt;get_cudnn_manager()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1cudnn_1_1matrix" kindref="compound">cudnn::matrix</ref><sp/>values_d(m_cudnn);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>values_d.locked_attach(w-&gt;get_values_gpu(),<sp/>w-&gt;get_size());</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>w-&gt;get_optimizer()-&gt;add_to_gradient(values_d,<sp/><ref refid="classlbann_1_1objective__function__term_1a59a544b8ff0455ed5091de3bf0d81c3c" kindref="member">m_scale_factor</ref>);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>LBANN_HAS_CUDNN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>gradient<sp/>of<sp/>L2<sp/>regularization<sp/>term<sp/>for<sp/>CPU<sp/>weights</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>w<sp/>:<sp/>m_weights)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(w-&gt;get_cudnn_manager()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>w-&gt;get_optimizer()-&gt;add_to_gradient(w-&gt;get_values(),<sp/><ref refid="classlbann_1_1objective__function__term_1a59a544b8ff0455ed5091de3bf0d81c3c" kindref="member">m_scale_factor</ref>);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>lbann</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/mckinney27/doxy-testbed/lbann/src/objective_functions/weight_regularization/l2.cpp"/>
  </compounddef>
</doxygen>
