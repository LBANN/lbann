<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classlbann_1_1slice__layer" kind="class" language="C++" prot="public">
    <compoundname>lbann::slice_layer</compoundname>
    <basecompoundref refid="classlbann_1_1transform__layer" prot="public" virt="non-virtual">lbann::transform_layer</basecompoundref>
    <includes refid="slice_8hpp" local="no">slice.hpp</includes>
    <templateparamlist>
      <param>
        <type><ref refid="base_8hpp_1a786677cbfb3f5677b4d84f3056eb08db" kindref="member">data_layout</ref></type>
        <declname>T_layout</declname>
        <defname>T_layout</defname>
        <defval><ref refid="base_8hpp_1a786677cbfb3f5677b4d84f3056eb08dba37d2a3465f7cbf4ab60f4e79944d0638" kindref="member">data_layout::DATA_PARALLEL</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classlbann_1_1slice__layer_1a349dcd71f67d77d40247da24e4641ea2" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int lbann::slice_layer&lt; T_layout &gt;::m_slice_axis</definition>
        <argsstring></argsstring>
        <name>m_slice_axis</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tensor dimension to slice. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" line="44" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" bodystart="44" bodyend="-1"/>
        <referencedby refid="classlbann_1_1slice__layer_1a24fb9ce808d587210faa4e3b34dc1aff" compoundref="slice_8hpp" startline="93" endline="110">lbann::slice_layer&lt; T_layout &gt;::operator=</referencedby>
        <referencedby refid="classlbann_1_1slice__layer_1ab4c95d24916534cdff58b32916171ff2" compoundref="slice_8hpp" startline="207" endline="264">lbann::slice_layer&lt; T_layout &gt;::fp_compute_cpu</referencedby>
        <referencedby refid="classlbann_1_1slice__layer_1af5d6887cac9a0c3afab8f361cdf81034" compoundref="slice_8hpp" startline="266" endline="315">lbann::slice_layer&lt; T_layout &gt;::bp_compute_cpu</referencedby>
        <referencedby refid="classlbann_1_1slice__layer_1a875347929b9e4c0a70749da0dbb6469e" compoundref="slice_8hpp" startline="317" endline="386">lbann::slice_layer&lt; T_layout &gt;::fp_compute_gpu</referencedby>
        <referencedby refid="classlbann_1_1slice__layer_1a798c10e5c19f58e38da9d2d50c49ca3e" compoundref="slice_8hpp" startline="388" endline="465">lbann::slice_layer&lt; T_layout &gt;::bp_compute_gpu</referencedby>
        <referencedby refid="classlbann_1_1slice__layer_1a824178abe2450bd331304ab0d50214ce" compoundref="slice_8hpp" startline="467" endline="471">lbann::slice_layer&lt; T_layout &gt;::get_neuron_dims</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classlbann_1_1slice__layer_1af79dab13a70da2e81209e7ae15166e30" prot="private" static="no" mutable="no">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt;int&gt; lbann::slice_layer&lt; T_layout &gt;::m_slice_points</definition>
        <argsstring></argsstring>
        <name>m_slice_points</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Slice points for each child layer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" line="46" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" bodystart="46" bodyend="-1"/>
        <referencedby refid="classlbann_1_1slice__layer_1a24fb9ce808d587210faa4e3b34dc1aff" compoundref="slice_8hpp" startline="93" endline="110">lbann::slice_layer&lt; T_layout &gt;::operator=</referencedby>
        <referencedby refid="classlbann_1_1slice__layer_1a5c02b2a15355be051f93e72f3b2803ce" compoundref="slice_8hpp" startline="185" endline="185">lbann::slice_layer&lt; T_layout &gt;::get_slice_points</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classlbann_1_1slice__layer_1a3e64f86a9e999d3d72867c6009aa99ba" prot="private" static="no" mutable="no">
        <type><ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref> *</type>
        <definition>AbsDistMat* lbann::slice_layer&lt; T_layout &gt;::m_input_region_v</definition>
        <argsstring></argsstring>
        <name>m_input_region_v</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>View into region of input tensor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" line="49" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" bodystart="49" bodyend="-1"/>
        <referencedby refid="classlbann_1_1slice__layer_1a24fb9ce808d587210faa4e3b34dc1aff" compoundref="slice_8hpp" startline="93" endline="110">lbann::slice_layer&lt; T_layout &gt;::operator=</referencedby>
        <referencedby refid="classlbann_1_1slice__layer_1a12591fe9fbadca1a0345682c11788b03" compoundref="slice_8hpp" startline="112" endline="115">lbann::slice_layer&lt; T_layout &gt;::~slice_layer</referencedby>
        <referencedby refid="classlbann_1_1slice__layer_1af3b6f79a53c9a80908b37c2587ff2cae" compoundref="slice_8hpp" startline="147" endline="154">lbann::slice_layer&lt; T_layout &gt;::setup_matrices</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classlbann_1_1slice__layer_1a9d72208fc8136641e91cb208c38f8b65" prot="private" static="no" mutable="no">
        <type><ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref> *</type>
        <definition>AbsDistMat* lbann::slice_layer&lt; T_layout &gt;::m_output_region_v</definition>
        <argsstring></argsstring>
        <name>m_output_region_v</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>View into region of output tensor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" line="51" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" bodystart="51" bodyend="-1"/>
        <referencedby refid="classlbann_1_1slice__layer_1a24fb9ce808d587210faa4e3b34dc1aff" compoundref="slice_8hpp" startline="93" endline="110">lbann::slice_layer&lt; T_layout &gt;::operator=</referencedby>
        <referencedby refid="classlbann_1_1slice__layer_1a12591fe9fbadca1a0345682c11788b03" compoundref="slice_8hpp" startline="112" endline="115">lbann::slice_layer&lt; T_layout &gt;::~slice_layer</referencedby>
        <referencedby refid="classlbann_1_1slice__layer_1af3b6f79a53c9a80908b37c2587ff2cae" compoundref="slice_8hpp" startline="147" endline="154">lbann::slice_layer&lt; T_layout &gt;::setup_matrices</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classlbann_1_1slice__layer_1a248cf99da690964ac0209684f8c13c1d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>lbann::slice_layer&lt; T_layout &gt;::slice_layer</definition>
        <argsstring>(lbann_comm *comm, int slice_axis, std::vector&lt; int &gt; slice_points, cudnn::cudnn_manager *cudnn=nullptr)</argsstring>
        <name>slice_layer</name>
        <param>
          <type><ref refid="classlbann_1_1lbann__comm" kindref="compound">lbann_comm</ref> *</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>slice_axis</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt;</type>
          <declname>slice_points</declname>
        </param>
        <param>
          <type><ref refid="classlbann_1_1cudnn_1_1cudnn__manager" kindref="compound">cudnn::cudnn_manager</ref> *</type>
          <declname>cudnn</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" line="55" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" bodystart="55" bodyend="76"/>
        <references refid="classlbann_1_1Layer_1ac08f133dddd150319650e220ab9a523a" compoundref="layer_8hpp" startline="422">lbann::Layer::m_expected_num_child_layers</references>
        <references refid="classlbann_1_1Layer_1af7881cb5eff5207c15fa835d65462e8f" compoundref="layer_8hpp" startline="486">lbann::Layer::m_using_gpus</references>
        <references refid="classlbann_1_1Layer_1a08dbb94239e3b8c96329786c57c72e21" compoundref="layer_8hpp" startline="489">lbann::Layer::m_cudnn</references>
        <referencedby refid="classlbann_1_1slice__layer_1a8c2b93a3ed24b239cc429ee85ee7ef29" compoundref="slice_8hpp" startline="117" endline="117">lbann::slice_layer&lt; T_layout &gt;::copy</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1slice__layer_1a650cf86c43a81a644bff4b8e9375f87f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>lbann::slice_layer&lt; T_layout &gt;::slice_layer</definition>
        <argsstring>(const slice_layer &amp;other)</argsstring>
        <name>slice_layer</name>
        <param>
          <type>const <ref refid="classlbann_1_1slice__layer" kindref="compound">slice_layer</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" line="78" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" bodystart="78" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1slice__layer_1a24fb9ce808d587210faa4e3b34dc1aff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classlbann_1_1slice__layer" kindref="compound">slice_layer</ref> &amp;</type>
        <definition>slice_layer&amp; lbann::slice_layer&lt; T_layout &gt;::operator=</definition>
        <argsstring>(const slice_layer &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classlbann_1_1slice__layer" kindref="compound">slice_layer</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" line="93" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" bodystart="93" bodyend="110"/>
        <references refid="classlbann_1_1Layer_1a00d8acde68fda2f38c4a39ef8c89234a" compoundref="layer_8cpp" startline="132" endline="189">lbann::Layer::operator=</references>
        <references refid="classlbann_1_1slice__layer_1a349dcd71f67d77d40247da24e4641ea2" compoundref="slice_8hpp" startline="44">lbann::slice_layer&lt; T_layout &gt;::m_slice_axis</references>
        <references refid="classlbann_1_1slice__layer_1af79dab13a70da2e81209e7ae15166e30" compoundref="slice_8hpp" startline="46">lbann::slice_layer&lt; T_layout &gt;::m_slice_points</references>
        <references refid="classlbann_1_1slice__layer_1a3e64f86a9e999d3d72867c6009aa99ba" compoundref="slice_8hpp" startline="49">lbann::slice_layer&lt; T_layout &gt;::m_input_region_v</references>
        <references refid="classlbann_1_1slice__layer_1a9d72208fc8136641e91cb208c38f8b65" compoundref="slice_8hpp" startline="51">lbann::slice_layer&lt; T_layout &gt;::m_output_region_v</references>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1slice__layer_1a12591fe9fbadca1a0345682c11788b03" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual lbann::slice_layer&lt; T_layout &gt;::~slice_layer</definition>
        <argsstring>() override</argsstring>
        <name>~slice_layer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" line="112" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" bodystart="112" bodyend="115"/>
        <references refid="classlbann_1_1slice__layer_1a3e64f86a9e999d3d72867c6009aa99ba" compoundref="slice_8hpp" startline="49">lbann::slice_layer&lt; T_layout &gt;::m_input_region_v</references>
        <references refid="classlbann_1_1slice__layer_1a9d72208fc8136641e91cb208c38f8b65" compoundref="slice_8hpp" startline="51">lbann::slice_layer&lt; T_layout &gt;::m_output_region_v</references>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1slice__layer_1a8c2b93a3ed24b239cc429ee85ee7ef29" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classlbann_1_1slice__layer" kindref="compound">slice_layer</ref> *</type>
        <definition>slice_layer* lbann::slice_layer&lt; T_layout &gt;::copy</definition>
        <argsstring>() const override</argsstring>
        <name>copy</name>
        <reimplements refid="classlbann_1_1Layer_1af420f22bbac801c85483ade84588a23f">copy</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy function. This function dynamically allocates memory for a layer instance and instantiates a copy. The caller is responsible for deallocating the instance. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" line="117" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" bodystart="117" bodyend="117"/>
        <references refid="classlbann_1_1slice__layer_1a248cf99da690964ac0209684f8c13c1d" compoundref="slice_8hpp" startline="55" endline="76">lbann::slice_layer&lt; T_layout &gt;::slice_layer</references>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1slice__layer_1aa7c27032d75d8e0d36a76b0763c4f215" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string lbann::slice_layer&lt; T_layout &gt;::get_type</definition>
        <argsstring>() const override</argsstring>
        <name>get_type</name>
        <reimplements refid="classlbann_1_1Layer_1a0fa0ea9160b490c151c0a17fde4f7239">get_type</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the layer type&apos;s name. A layer type name should be brief, human-readable description of the layer&apos;s mathematical operation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" line="118" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" bodystart="118" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1slice__layer_1a5121b600d26654707289726e84c0eed9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="base_8hpp_1a786677cbfb3f5677b4d84f3056eb08db" kindref="member">data_layout</ref></type>
        <definition>data_layout lbann::slice_layer&lt; T_layout &gt;::get_data_layout</definition>
        <argsstring>() const override</argsstring>
        <name>get_data_layout</name>
        <reimplements refid="classlbann_1_1Layer_1a5dfb66e81fc085997402a5e2241316bd">get_data_layout</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get data layout of the data tensors. We assume that the data layouts of the previous activations, activations, previous error signals, and error signals are the same. Each concrete layer that is templated on its data layout should override this function to return its template parameter. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" line="119" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" bodystart="119" bodyend="119"/>
        <referencedby refid="classlbann_1_1slice__layer_1aa61c1f449a9f741f523921129dfb88e5" compoundref="slice_8hpp" startline="122" endline="135">lbann::slice_layer&lt; T_layout &gt;::get_description</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1slice__layer_1aa61c1f449a9f741f523921129dfb88e5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string lbann::slice_layer&lt; T_layout &gt;::get_description</definition>
        <argsstring>() const override</argsstring>
        <name>get_description</name>
        <reimplements refid="classlbann_1_1Layer_1acc0803d3428914ca1eb5988c4309174a">get_description</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns description of ctor params </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" line="122" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" bodystart="122" bodyend="135"/>
        <references refid="classlbann_1_1Layer_1ae348c0d2b4d05f74d809d09debb633c0" compoundref="layer_8hpp" startline="413">lbann::Layer::m_child_layers</references>
        <references refid="classlbann_1_1Layer_1ae3f4a5602df821f4221614b1e3782dc1" compoundref="layer_8cpp" startline="1205" endline="1216">lbann::Layer::get_data_layout_string</references>
        <references refid="classlbann_1_1slice__layer_1a5121b600d26654707289726e84c0eed9" compoundref="slice_8hpp" startline="119" endline="119">lbann::slice_layer&lt; T_layout &gt;::get_data_layout</references>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1slice__layer_1a701854f5906a25c58d4f9d851b20de29" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void lbann::slice_layer&lt; T_layout &gt;::setup_pointers</definition>
        <argsstring>() override</argsstring>
        <name>setup_pointers</name>
        <reimplements refid="classlbann_1_1Layer_1a71b7a62afd9b73c23b2c0267b8ba0981">setup_pointers</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Setup pointers to parent and child layers. Called by the setup function. The base method checks that the number of parents and children are valid. Pointers to the parent/child layers are assumed to be already initialized. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" line="137" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" bodystart="137" bodyend="145"/>
        <references refid="classlbann_1_1Layer_1a71b7a62afd9b73c23b2c0267b8ba0981" compoundref="layer_8cpp" startline="511" endline="533">lbann::Layer::setup_pointers</references>
        <references refid="classlbann_1_1Layer_1a1409a117c31a7ea4f2c7a4d22a3e86c3" compoundref="layer_8hpp" startline="271" endline="271">lbann::Layer::get_num_children</references>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1slice__layer_1af3b6f79a53c9a80908b37c2587ff2cae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void lbann::slice_layer&lt; T_layout &gt;::setup_matrices</definition>
        <argsstring>(const El::Grid &amp;grid) override</argsstring>
        <name>setup_matrices</name>
        <reimplements refid="classlbann_1_1Layer_1a57bbe21131dc00ab5cf9ea5e3656808e">setup_matrices</reimplements>
        <param>
          <type>const <ref refid="base_8hpp_1a9951bb1719d534e0401b1f06cad19eab" kindref="member">El::Grid</ref> &amp;</type>
          <declname>grid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Instantiate distributed matrices. If the layer has already been setup, this function should destroy all matrices and reinstantiate them. However, it is not guaranteed that derived classes will obey this behavior. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" line="147" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" bodystart="147" bodyend="154"/>
        <references refid="classlbann_1_1Layer_1a57bbe21131dc00ab5cf9ea5e3656808e" compoundref="layer_8cpp" startline="580" endline="598">lbann::Layer::setup_matrices</references>
        <references refid="classlbann_1_1slice__layer_1a3e64f86a9e999d3d72867c6009aa99ba" compoundref="slice_8hpp" startline="49">lbann::slice_layer&lt; T_layout &gt;::m_input_region_v</references>
        <references refid="classlbann_1_1slice__layer_1a9d72208fc8136641e91cb208c38f8b65" compoundref="slice_8hpp" startline="51">lbann::slice_layer&lt; T_layout &gt;::m_output_region_v</references>
        <references refid="classlbann_1_1Layer_1a45853df73a2e72bfaa774665a0f37ed7" compoundref="layer_8cpp" startline="373" endline="375">lbann::Layer::get_prev_activations</references>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1slice__layer_1ac43785fc01d6cf6e49d3677adfaac297" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void lbann::slice_layer&lt; T_layout &gt;::setup_dims</definition>
        <argsstring>() override</argsstring>
        <name>setup_dims</name>
        <reimplements refid="classlbann_1_1Layer_1a90fce1b06c1f2abb480e18cfe08a9746">setup_dims</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Setup tensor dimensions Called by the setup function. The base method sets the dimensions of the activation tensors equal to the dimensions of the first previous activation tensor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" line="156" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" bodystart="156" bodyend="182"/>
        <references refid="classlbann_1_1Layer_1a90fce1b06c1f2abb480e18cfe08a9746" compoundref="layer_8cpp" startline="535" endline="554">lbann::Layer::setup_dims</references>
        <references refid="classlbann_1_1Layer_1ae348c0d2b4d05f74d809d09debb633c0" compoundref="layer_8hpp" startline="413">lbann::Layer::m_child_layers</references>
        <references refid="classlbann_1_1Layer_1abb34bb8031f57a483e2e327a5f229f48" compoundref="layer_8hpp" startline="363">lbann::Layer::m_neuron_dims</references>
        <references refid="classlbann_1_1Layer_1af4a093d91552cf079217eb346bbb847f" compoundref="layer_8cpp" startline="1218" endline="1225">lbann::Layer::get_layer_names</references>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1slice__layer_1a5c02b2a15355be051f93e72f3b2803ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; int &gt; &amp;</type>
        <definition>std::vector&lt;int&gt;&amp; lbann::slice_layer&lt; T_layout &gt;::get_slice_points</definition>
        <argsstring>()</argsstring>
        <name>get_slice_points</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get slice points. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" line="185" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" bodystart="185" bodyend="185"/>
        <references refid="classlbann_1_1slice__layer_1af79dab13a70da2e81209e7ae15166e30" compoundref="slice_8hpp" startline="46">lbann::slice_layer&lt; T_layout &gt;::m_slice_points</references>
        <referencedby refid="classlbann_1_1recurrent__model_1a712dabb1c1e90f6e268b42f6abaedd93" compoundref="recurrent_8cpp" startline="395" endline="442">lbann::recurrent_model::setup_layers</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1slice__layer_1a88936fbabd04b06be6cf732fc5b73317" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; int &gt; &amp;</type>
        <definition>const std::vector&lt;int&gt;&amp; lbann::slice_layer&lt; T_layout &gt;::get_slice_points</definition>
        <argsstring>() const</argsstring>
        <name>get_slice_points</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get slice points (const). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" line="187" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" bodystart="187" bodyend="187"/>
        <references refid="classlbann_1_1slice__layer_1af79dab13a70da2e81209e7ae15166e30" compoundref="slice_8hpp" startline="46">lbann::slice_layer&lt; T_layout &gt;::m_slice_points</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classlbann_1_1slice__layer_1a4ade139cc44a7de47761680e1d44cb08" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void lbann::slice_layer&lt; T_layout &gt;::fp_compute</definition>
        <argsstring>() override</argsstring>
        <name>fp_compute</name>
        <reimplements refid="classlbann_1_1Layer_1a523319dd1bd87a0612afa1912bb5aad7">fp_compute</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform the computation for the forward propagation step. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" line="191" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" bodystart="191" bodyend="197"/>
        <references refid="classlbann_1_1Layer_1af7881cb5eff5207c15fa835d65462e8f" compoundref="layer_8hpp" startline="486">lbann::Layer::m_using_gpus</references>
        <references refid="classlbann_1_1slice__layer_1a875347929b9e4c0a70749da0dbb6469e" compoundref="slice_8hpp" startline="317" endline="386">lbann::slice_layer&lt; T_layout &gt;::fp_compute_gpu</references>
        <references refid="classlbann_1_1slice__layer_1ab4c95d24916534cdff58b32916171ff2" compoundref="slice_8hpp" startline="207" endline="264">lbann::slice_layer&lt; T_layout &gt;::fp_compute_cpu</references>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1slice__layer_1a080654076a1b266b2c6d229e9fccf250" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void lbann::slice_layer&lt; T_layout &gt;::bp_compute</definition>
        <argsstring>() override</argsstring>
        <name>bp_compute</name>
        <reimplements refid="classlbann_1_1Layer_1a7442e01f9ee1294df2de811efcf5171e">bp_compute</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform the computation for the backward propagation step. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" line="199" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" bodystart="199" bodyend="205"/>
        <references refid="classlbann_1_1Layer_1af7881cb5eff5207c15fa835d65462e8f" compoundref="layer_8hpp" startline="486">lbann::Layer::m_using_gpus</references>
        <references refid="classlbann_1_1slice__layer_1a798c10e5c19f58e38da9d2d50c49ca3e" compoundref="slice_8hpp" startline="388" endline="465">lbann::slice_layer&lt; T_layout &gt;::bp_compute_gpu</references>
        <references refid="classlbann_1_1slice__layer_1af5d6887cac9a0c3afab8f361cdf81034" compoundref="slice_8hpp" startline="266" endline="315">lbann::slice_layer&lt; T_layout &gt;::bp_compute_cpu</references>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1slice__layer_1ab4c95d24916534cdff58b32916171ff2" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::slice_layer&lt; T_layout &gt;::fp_compute_cpu</definition>
        <argsstring>()</argsstring>
        <name>fp_compute_cpu</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" line="207" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" bodystart="207" bodyend="264"/>
        <references refid="classlbann_1_1Layer_1a45853df73a2e72bfaa774665a0f37ed7" compoundref="layer_8cpp" startline="373" endline="375">lbann::Layer::get_prev_activations</references>
        <references refid="classlbann_1_1Layer_1ae204d1a2a79606eaa117273857ff62a3" compoundref="layer_8hpp" startline="372">lbann::Layer::m_prev_neuron_dims</references>
        <references refid="classlbann_1_1slice__layer_1a349dcd71f67d77d40247da24e4641ea2" compoundref="slice_8hpp" startline="44">lbann::slice_layer&lt; T_layout &gt;::m_slice_axis</references>
        <references refid="classlbann_1_1Layer_1a1409a117c31a7ea4f2c7a4d22a3e86c3" compoundref="layer_8hpp" startline="271" endline="271">lbann::Layer::get_num_children</references>
        <references refid="classlbann_1_1Layer_1a1134b1a4385af199d7272c5aa827fa99" compoundref="layer_8cpp" startline="376" endline="378">lbann::Layer::get_activations</references>
        <referencedby refid="classlbann_1_1slice__layer_1a4ade139cc44a7de47761680e1d44cb08" compoundref="slice_8hpp" startline="191" endline="197">lbann::slice_layer&lt; T_layout &gt;::fp_compute</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1slice__layer_1af5d6887cac9a0c3afab8f361cdf81034" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::slice_layer&lt; T_layout &gt;::bp_compute_cpu</definition>
        <argsstring>()</argsstring>
        <name>bp_compute_cpu</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" line="266" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" bodystart="266" bodyend="315"/>
        <references refid="classlbann_1_1Layer_1adb561e140e0bb601f3c5a8ee053a71d2" compoundref="layer_8cpp" startline="382" endline="384">lbann::Layer::get_error_signals</references>
        <references refid="classlbann_1_1Layer_1ae204d1a2a79606eaa117273857ff62a3" compoundref="layer_8hpp" startline="372">lbann::Layer::m_prev_neuron_dims</references>
        <references refid="classlbann_1_1slice__layer_1a349dcd71f67d77d40247da24e4641ea2" compoundref="slice_8hpp" startline="44">lbann::slice_layer&lt; T_layout &gt;::m_slice_axis</references>
        <references refid="classlbann_1_1Layer_1a1409a117c31a7ea4f2c7a4d22a3e86c3" compoundref="layer_8hpp" startline="271" endline="271">lbann::Layer::get_num_children</references>
        <references refid="classlbann_1_1Layer_1a7ac4579d3c1671dfaf86e3b618d6938a" compoundref="layer_8cpp" startline="379" endline="381">lbann::Layer::get_prev_error_signals</references>
        <referencedby refid="classlbann_1_1slice__layer_1a080654076a1b266b2c6d229e9fccf250" compoundref="slice_8hpp" startline="199" endline="205">lbann::slice_layer&lt; T_layout &gt;::bp_compute</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1slice__layer_1a875347929b9e4c0a70749da0dbb6469e" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::slice_layer&lt; T_layout &gt;::fp_compute_gpu</definition>
        <argsstring>()</argsstring>
        <name>fp_compute_gpu</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" line="317" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" bodystart="317" bodyend="386"/>
        <references refid="classlbann_1_1Layer_1ae204d1a2a79606eaa117273857ff62a3" compoundref="layer_8hpp" startline="372">lbann::Layer::m_prev_neuron_dims</references>
        <references refid="classlbann_1_1slice__layer_1a349dcd71f67d77d40247da24e4641ea2" compoundref="slice_8hpp" startline="44">lbann::slice_layer&lt; T_layout &gt;::m_slice_axis</references>
        <references refid="classlbann_1_1Layer_1a08dbb94239e3b8c96329786c57c72e21" compoundref="layer_8hpp" startline="489">lbann::Layer::m_cudnn</references>
        <references refid="classlbann_1_1Layer_1a1409a117c31a7ea4f2c7a4d22a3e86c3" compoundref="layer_8hpp" startline="271" endline="271">lbann::Layer::get_num_children</references>
        <referencedby refid="classlbann_1_1slice__layer_1a4ade139cc44a7de47761680e1d44cb08" compoundref="slice_8hpp" startline="191" endline="197">lbann::slice_layer&lt; T_layout &gt;::fp_compute</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1slice__layer_1a798c10e5c19f58e38da9d2d50c49ca3e" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::slice_layer&lt; T_layout &gt;::bp_compute_gpu</definition>
        <argsstring>()</argsstring>
        <name>bp_compute_gpu</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" line="388" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" bodystart="388" bodyend="465"/>
        <references refid="classlbann_1_1Layer_1ae204d1a2a79606eaa117273857ff62a3" compoundref="layer_8hpp" startline="372">lbann::Layer::m_prev_neuron_dims</references>
        <references refid="classlbann_1_1slice__layer_1a349dcd71f67d77d40247da24e4641ea2" compoundref="slice_8hpp" startline="44">lbann::slice_layer&lt; T_layout &gt;::m_slice_axis</references>
        <references refid="classlbann_1_1Layer_1a08dbb94239e3b8c96329786c57c72e21" compoundref="layer_8hpp" startline="489">lbann::Layer::m_cudnn</references>
        <references refid="classlbann_1_1Layer_1a1409a117c31a7ea4f2c7a4d22a3e86c3" compoundref="layer_8hpp" startline="271" endline="271">lbann::Layer::get_num_children</references>
        <referencedby refid="classlbann_1_1slice__layer_1a080654076a1b266b2c6d229e9fccf250" compoundref="slice_8hpp" startline="199" endline="205">lbann::slice_layer&lt; T_layout &gt;::bp_compute</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1slice__layer_1a824178abe2450bd331304ab0d50214ce" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt;int&gt; lbann::slice_layer&lt; T_layout &gt;::get_neuron_dims</definition>
        <argsstring>(int child_index=0) const override</argsstring>
        <name>get_neuron_dims</name>
        <reimplements refid="classlbann_1_1Layer_1a54f53393fadbfdc73b4e72489c868433">get_neuron_dims</reimplements>
        <param>
          <type>int</type>
          <declname>child_index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the dimensions of an activations tensor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" line="467" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" bodystart="467" bodyend="471"/>
        <references refid="classlbann_1_1Layer_1abb34bb8031f57a483e2e327a5f229f48" compoundref="layer_8hpp" startline="363">lbann::Layer::m_neuron_dims</references>
        <references refid="classlbann_1_1slice__layer_1a349dcd71f67d77d40247da24e4641ea2" compoundref="slice_8hpp" startline="44">lbann::slice_layer&lt; T_layout &gt;::m_slice_axis</references>
        <referencedby refid="classlbann_1_1slice__layer_1ab36016849a59dfa23d37fd0cd2ec943c" compoundref="slice_8hpp" startline="473" endline="479">lbann::slice_layer&lt; T_layout &gt;::get_num_neurons</referencedby>
        <referencedby refid="classlbann_1_1slice__layer_1a086c918fe72f28248f987d6a3aef355d" compoundref="slice_8hpp" startline="481" endline="500">lbann::slice_layer&lt; T_layout &gt;::fp_output_dims</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1slice__layer_1ab36016849a59dfa23d37fd0cd2ec943c" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>int</type>
        <definition>int lbann::slice_layer&lt; T_layout &gt;::get_num_neurons</definition>
        <argsstring>(int child_index=0) const override</argsstring>
        <name>get_num_neurons</name>
        <reimplements refid="classlbann_1_1Layer_1aa4de686cc6c2dd38166f42faf874f227">get_num_neurons</reimplements>
        <param>
          <type>int</type>
          <declname>child_index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the size of an activations tensor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" line="473" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" bodystart="473" bodyend="479"/>
        <references refid="classlbann_1_1slice__layer_1a824178abe2450bd331304ab0d50214ce" compoundref="slice_8hpp" startline="467" endline="471">lbann::slice_layer&lt; T_layout &gt;::get_neuron_dims</references>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1slice__layer_1a086c918fe72f28248f987d6a3aef355d" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt;int&gt; lbann::slice_layer&lt; T_layout &gt;::fp_output_dims</definition>
        <argsstring>(const Layer *next_layer) const override</argsstring>
        <name>fp_output_dims</name>
        <reimplements refid="classlbann_1_1Layer_1a22d31298912405660ebb210c0d7c5373">fp_output_dims</reimplements>
        <param>
          <type>const <ref refid="classlbann_1_1Layer" kindref="compound">Layer</ref> *</type>
          <declname>child</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get dimensions of forward propagation output to a child layer. Returns the dimensions of the appropriate activations tensor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" line="481" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" bodystart="481" bodyend="500"/>
        <references refid="classlbann_1_1Layer_1abb34bb8031f57a483e2e327a5f229f48" compoundref="layer_8hpp" startline="363">lbann::Layer::m_neuron_dims</references>
        <references refid="classlbann_1_1Layer_1ae348c0d2b4d05f74d809d09debb633c0" compoundref="layer_8hpp" startline="413">lbann::Layer::m_child_layers</references>
        <references refid="classlbann_1_1slice__layer_1a824178abe2450bd331304ab0d50214ce" compoundref="slice_8hpp" startline="467" endline="471">lbann::slice_layer&lt; T_layout &gt;::get_neuron_dims</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Slice layer. This layer slices an input tensor along a specified axis. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="2135">
        <label>lbann::transform_layer</label>
        <link refid="classlbann_1_1transform__layer"/>
        <childnode refid="2136" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2134">
        <label>lbann::slice_layer&lt; T_layout &gt;</label>
        <link refid="classlbann_1_1slice__layer"/>
        <childnode refid="2135" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2136">
        <label>lbann::Layer</label>
        <link refid="classlbann_1_1Layer"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2141">
        <label>lbann::model</label>
        <link refid="classlbann_1_1model"/>
        <childnode refid="2142" relation="usage">
          <edgelabel>m_default_optimizer</edgelabel>
        </childnode>
        <childnode refid="2140" relation="usage">
          <edgelabel>m_comm</edgelabel>
        </childnode>
        <childnode refid="2147" relation="usage">
          <edgelabel>m_objective_function</edgelabel>
        </childnode>
      </node>
      <node id="2142">
        <label>lbann::optimizer</label>
        <link refid="classlbann_1_1optimizer"/>
        <childnode refid="2140" relation="usage">
          <edgelabel>m_comm</edgelabel>
        </childnode>
        <childnode refid="2143" relation="usage">
          <edgelabel>m_cudnn</edgelabel>
        </childnode>
        <childnode refid="2144" relation="usage">
          <edgelabel>m_gradient_allreduce_req</edgelabel>
        </childnode>
        <childnode refid="2145" relation="usage">
          <edgelabel>m_weights</edgelabel>
        </childnode>
      </node>
      <node id="2143">
        <label>lbann::cudnn::cudnn_manager</label>
        <link refid="classlbann_1_1cudnn_1_1cudnn__manager"/>
      </node>
      <node id="2146">
        <label>lbann::weights_initializer</label>
        <link refid="classlbann_1_1weights__initializer"/>
        <childnode refid="2140" relation="usage">
          <edgelabel>m_comm</edgelabel>
        </childnode>
      </node>
      <node id="2138">
        <label>lbann::transform_layer</label>
        <link refid="classlbann_1_1transform__layer"/>
        <childnode refid="2139" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2137">
        <label>lbann::slice_layer&lt; T_layout &gt;</label>
        <link refid="classlbann_1_1slice__layer"/>
        <childnode refid="2138" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2139">
        <label>lbann::Layer</label>
        <link refid="classlbann_1_1Layer"/>
        <childnode refid="2140" relation="usage">
          <edgelabel>m_comm</edgelabel>
        </childnode>
        <childnode refid="2141" relation="usage">
          <edgelabel>m_model</edgelabel>
        </childnode>
        <childnode refid="2143" relation="usage">
          <edgelabel>m_cudnn</edgelabel>
        </childnode>
      </node>
      <node id="2145">
        <label>lbann::weights</label>
        <link refid="classlbann_1_1weights"/>
        <childnode refid="2142" relation="usage">
          <edgelabel>m_optimizer</edgelabel>
        </childnode>
        <childnode refid="2140" relation="usage">
          <edgelabel>m_comm</edgelabel>
        </childnode>
        <childnode refid="2146" relation="usage">
          <edgelabel>m_initializer</edgelabel>
        </childnode>
        <childnode refid="2143" relation="usage">
          <edgelabel>m_cudnn</edgelabel>
        </childnode>
      </node>
      <node id="2140">
        <label>lbann::lbann_comm</label>
        <link refid="classlbann_1_1lbann__comm"/>
      </node>
      <node id="2144">
        <label>lbann::Al::request</label>
        <link refid="structlbann_1_1Al_1_1request"/>
      </node>
      <node id="2147">
        <label>lbann::objective_function</label>
        <link refid="classlbann_1_1objective__function"/>
      </node>
    </collaborationgraph>
    <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" line="40" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/slice.hpp" bodystart="40" bodyend="502"/>
    <listofallmembers>
      <member refid="classlbann_1_1Layer_1ace0346ac56fd7ce7b6b44f27f224f35e" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>add_child_layer</name></member>
      <member refid="classlbann_1_1Layer_1a326668ce624a9bcc719a463820b2e3a4" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>add_parent_layer</name></member>
      <member refid="classlbann_1_1Layer_1a8d942eb2cd37c346edc5ff473e0494a2" prot="public" virt="virtual"><scope>lbann::slice_layer</scope><name>add_to_error_signal</name></member>
      <member refid="classlbann_1_1Layer_1a0a502d9218d7dbbfd10ebebb6f917033" prot="public" virt="virtual"><scope>lbann::slice_layer</scope><name>back_prop</name></member>
      <member refid="classlbann_1_1slice__layer_1a080654076a1b266b2c6d229e9fccf250" prot="protected" virt="virtual"><scope>lbann::slice_layer</scope><name>bp_compute</name></member>
      <member refid="classlbann_1_1slice__layer_1af5d6887cac9a0c3afab8f361cdf81034" prot="protected" virt="non-virtual"><scope>lbann::slice_layer</scope><name>bp_compute_cpu</name></member>
      <member refid="classlbann_1_1slice__layer_1a798c10e5c19f58e38da9d2d50c49ca3e" prot="protected" virt="non-virtual"><scope>lbann::slice_layer</scope><name>bp_compute_gpu</name></member>
      <member refid="classlbann_1_1Layer_1af7312710c0b9ac6ebe327d0ffe22cbf0" prot="protected" virt="virtual"><scope>lbann::slice_layer</scope><name>bp_setup_data</name></member>
      <member refid="classlbann_1_1Layer_1aeec1c710c3d53b5e43a4d4f67b0a21b2" prot="public" virt="virtual"><scope>lbann::slice_layer</scope><name>check_setup</name></member>
      <member refid="classlbann_1_1Layer_1a040bf53e261b1ef796739c09b3362a3a" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>clear_child_layers</name></member>
      <member refid="classlbann_1_1Layer_1aa1389a70b804debaac6953b3b1147593" prot="public" virt="virtual"><scope>lbann::slice_layer</scope><name>clear_error_signals</name></member>
      <member refid="classlbann_1_1Layer_1a7336909c78e438ba5332c6c1bddeadd2" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>clear_parent_layers</name></member>
      <member refid="classlbann_1_1slice__layer_1a8c2b93a3ed24b239cc429ee85ee7ef29" prot="public" virt="virtual"><scope>lbann::slice_layer</scope><name>copy</name></member>
      <member refid="classlbann_1_1Layer_1a2483ccd8a4406a6891f6176f1001b4e5" prot="public" virt="virtual"><scope>lbann::slice_layer</scope><name>forward_prop</name></member>
      <member refid="classlbann_1_1slice__layer_1a4ade139cc44a7de47761680e1d44cb08" prot="protected" virt="virtual"><scope>lbann::slice_layer</scope><name>fp_compute</name></member>
      <member refid="classlbann_1_1slice__layer_1ab4c95d24916534cdff58b32916171ff2" prot="protected" virt="non-virtual"><scope>lbann::slice_layer</scope><name>fp_compute_cpu</name></member>
      <member refid="classlbann_1_1slice__layer_1a875347929b9e4c0a70749da0dbb6469e" prot="protected" virt="non-virtual"><scope>lbann::slice_layer</scope><name>fp_compute_gpu</name></member>
      <member refid="classlbann_1_1slice__layer_1a086c918fe72f28248f987d6a3aef355d" prot="protected" virt="virtual"><scope>lbann::slice_layer</scope><name>fp_output_dims</name></member>
      <member refid="classlbann_1_1Layer_1af311d901a5f71e4c749454647e9fd9c7" prot="protected" virt="virtual"><scope>lbann::slice_layer</scope><name>fp_setup_data</name></member>
      <member refid="classlbann_1_1Layer_1ad55c455dbae0d082cedfa68511709aae" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>freeze</name></member>
      <member refid="classlbann_1_1Layer_1a1134b1a4385af199d7272c5aa827fa99" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>get_activations</name></member>
      <member refid="classlbann_1_1Layer_1af69a4773804c6982e8acaf5810eaa150" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>get_activations</name></member>
      <member refid="classlbann_1_1Layer_1a81f9f4fc956daf4838a7ed248427b1f3" prot="public" virt="virtual"><scope>lbann::slice_layer</scope><name>get_bp_output</name></member>
      <member refid="classlbann_1_1Layer_1aa0058c8ec4913efc3e4de5d6f61eb8db" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>get_child_layers</name></member>
      <member refid="classlbann_1_1Layer_1a0ad6c5253a4545a7322766d586a4bd33" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>get_child_layers</name></member>
      <member refid="classlbann_1_1Layer_1afc7bf4e2a61a6f47f9e1f185bf92439a" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>get_child_names</name></member>
      <member refid="classlbann_1_1Layer_1a1b528e5872357a82176ee487596b363c" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>get_comm</name></member>
      <member refid="classlbann_1_1Layer_1a63c694744d9360208642a35412a4e8ee" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>get_cudnn_manager</name></member>
      <member refid="classlbann_1_1slice__layer_1a5121b600d26654707289726e84c0eed9" prot="public" virt="virtual"><scope>lbann::slice_layer</scope><name>get_data_layout</name></member>
      <member refid="classlbann_1_1Layer_1ae3f4a5602df821f4221614b1e3782dc1" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>get_data_layout_string</name></member>
      <member refid="classlbann_1_1slice__layer_1aa61c1f449a9f741f523921129dfb88e5" prot="public" virt="virtual"><scope>lbann::slice_layer</scope><name>get_description</name></member>
      <member refid="classlbann_1_1Layer_1adb561e140e0bb601f3c5a8ee053a71d2" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>get_error_signals</name></member>
      <member refid="classlbann_1_1Layer_1ae09bc5a240e9042371203ba5ff19990c" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>get_error_signals</name></member>
      <member refid="classlbann_1_1Layer_1aaeef8c7631204fc415a94dcdfbcfe93d" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>get_expected_num_child_layers</name></member>
      <member refid="classlbann_1_1Layer_1aa30dbf20929aaa58b5be98b98217ca88" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>get_expected_num_parent_layers</name></member>
      <member refid="classlbann_1_1Layer_1ac6b43c63399f717cc1a4a0a2007350f2" prot="public" virt="virtual"><scope>lbann::slice_layer</scope><name>get_fp_output</name></member>
      <member refid="classlbann_1_1Layer_1af4a093d91552cf079217eb346bbb847f" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>get_layer_names</name></member>
      <member refid="classlbann_1_1Layer_1a9f94210cbb973f1df89ef649899094a1" prot="public" virt="virtual"><scope>lbann::slice_layer</scope><name>get_layer_pointers</name></member>
      <member refid="classlbann_1_1Layer_1a4248f27acebf72b7b7b3ee39c8bcb62a" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>get_local_activations</name></member>
      <member refid="classlbann_1_1Layer_1aadbc466c72f455c10b53bf45dca56332" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>get_local_activations</name></member>
      <member refid="classlbann_1_1Layer_1af178d00b9d878aa7d87754bff2a91f3a" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>get_local_error_signals</name></member>
      <member refid="classlbann_1_1Layer_1acf76bc7fba1e8ab74947ef83a3c8a141" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>get_local_error_signals</name></member>
      <member refid="classlbann_1_1Layer_1a35397843bb0c84030000c7d872229acb" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>get_local_prev_activations</name></member>
      <member refid="classlbann_1_1Layer_1ab0f7b4d0fdb06004dfde5358781eeece" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>get_local_prev_activations</name></member>
      <member refid="classlbann_1_1Layer_1a82827edc5e869960144f3ccb2172bfcd" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>get_local_prev_error_signals</name></member>
      <member refid="classlbann_1_1Layer_1af3490fe9011ef620b827970bc5dcc7a7" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>get_local_prev_error_signals</name></member>
      <member refid="classlbann_1_1Layer_1afcfb6f55d12c728a59d107fe2d2fff0d" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>get_model</name></member>
      <member refid="classlbann_1_1Layer_1a80027550202fa7dbb1dd55fa8a66c84b" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>get_name</name></member>
      <member refid="classlbann_1_1slice__layer_1a824178abe2450bd331304ab0d50214ce" prot="protected" virt="virtual"><scope>lbann::slice_layer</scope><name>get_neuron_dims</name></member>
      <member refid="classlbann_1_1Layer_1a1409a117c31a7ea4f2c7a4d22a3e86c3" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>get_num_children</name></member>
      <member refid="classlbann_1_1Layer_1aa35561e662de84deae26045ccb53d862" prot="public" virt="virtual"><scope>lbann::slice_layer</scope><name>get_num_neuron_dims</name></member>
      <member refid="classlbann_1_1slice__layer_1ab36016849a59dfa23d37fd0cd2ec943c" prot="protected" virt="virtual"><scope>lbann::slice_layer</scope><name>get_num_neurons</name></member>
      <member refid="classlbann_1_1Layer_1ac9290d4a6453ccda5f6b4d8b57b49ba3" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>get_num_parents</name></member>
      <member refid="classlbann_1_1Layer_1ace32c7df942a8d97d7a25cb8ff8ce71d" prot="public" virt="virtual"><scope>lbann::slice_layer</scope><name>get_num_prev_neuron_dims</name></member>
      <member refid="classlbann_1_1Layer_1a27112eb70bbfbd7f3c3e749960400dec" prot="public" virt="virtual"><scope>lbann::slice_layer</scope><name>get_num_prev_neurons</name></member>
      <member refid="classlbann_1_1Layer_1a898e72b93752abf52d35b06459cd360e" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>get_parent_layers</name></member>
      <member refid="classlbann_1_1Layer_1a233ceaf4e6c6b5c24dd097ffff511579" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>get_parent_layers</name></member>
      <member refid="classlbann_1_1Layer_1afdf36947beec676a71ecd6167c3bb724" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>get_parent_names</name></member>
      <member refid="classlbann_1_1Layer_1a45853df73a2e72bfaa774665a0f37ed7" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>get_prev_activations</name></member>
      <member refid="classlbann_1_1Layer_1afc0611b7c3b1537914f25a538486a8cd" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>get_prev_activations</name></member>
      <member refid="classlbann_1_1Layer_1a7ac4579d3c1671dfaf86e3b618d6938a" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>get_prev_error_signals</name></member>
      <member refid="classlbann_1_1Layer_1aff2c8983548364c978acb09ddf58a6fc" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>get_prev_error_signals</name></member>
      <member refid="classlbann_1_1Layer_1a1acc0fa44acdeffbac158fdac3467973" prot="public" virt="virtual"><scope>lbann::slice_layer</scope><name>get_prev_neuron_dims</name></member>
      <member refid="classlbann_1_1Layer_1a0ac13af6f5ee8316d64c550bef919ee0" prot="public" virt="virtual"><scope>lbann::slice_layer</scope><name>get_sample_indices_per_mb</name></member>
      <member refid="classlbann_1_1slice__layer_1a5c02b2a15355be051f93e72f3b2803ce" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>get_slice_points</name></member>
      <member refid="classlbann_1_1slice__layer_1a88936fbabd04b06be6cf732fc5b73317" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>get_slice_points</name></member>
      <member refid="classlbann_1_1Layer_1a147a7f7dcf0027a60f10109439e5dcea" prot="public" virt="virtual"><scope>lbann::slice_layer</scope><name>get_topo_description</name></member>
      <member refid="classlbann_1_1slice__layer_1aa7c27032d75d8e0d36a76b0763c4f215" prot="public" virt="virtual"><scope>lbann::slice_layer</scope><name>get_type</name></member>
      <member refid="classlbann_1_1Layer_1a4ee78d42284421519dd18d27b4da0957" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>get_weights</name></member>
      <member refid="classlbann_1_1Layer_1ab9fe05ad8d21ba5d6dd4d22ee2e0dca0" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>get_weights</name></member>
      <member refid="classlbann_1_1Layer_1af3c0f9f32eb631f4fdf34ad040ef8637" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>is_frozen</name></member>
      <member refid="classlbann_1_1Layer_1a24e9c82354a0a2af1b70cbca2211e7d4" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>Layer</name></member>
      <member refid="classlbann_1_1Layer_1a247cc68c730284f10a2cb42985fe5f3a" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>Layer</name></member>
      <member refid="classlbann_1_1Layer_1a9e262970ecc64166e8b6610e2502ad30" prot="public" virt="virtual"><scope>lbann::slice_layer</scope><name>load_from_checkpoint_shared</name></member>
      <member refid="classlbann_1_1Layer_1a7ac9335d75d817fc2d5cf171da9b7e22" prot="public" virt="virtual"><scope>lbann::slice_layer</scope><name>loadFromCheckpoint</name></member>
      <member refid="classlbann_1_1Layer_1a1ae0e6015dd427c63236a07f8cbd3878" prot="public" virt="virtual"><scope>lbann::slice_layer</scope><name>loadFromFile</name></member>
      <member refid="classlbann_1_1Layer_1a7caf08e938141d1584e6939cefa4baed" prot="protected" virt="non-virtual"><scope>lbann::slice_layer</scope><name>m_activations</name></member>
      <member refid="classlbann_1_1Layer_1ae28626457a58943b25e7a2920fc271f0" prot="protected" virt="non-virtual"><scope>lbann::slice_layer</scope><name>m_bp_compute_time</name></member>
      <member refid="classlbann_1_1Layer_1aa60fc41627bcaa9c345775bf5737bb45" prot="protected" virt="non-virtual"><scope>lbann::slice_layer</scope><name>m_bp_time</name></member>
      <member refid="classlbann_1_1Layer_1ae348c0d2b4d05f74d809d09debb633c0" prot="protected" virt="non-virtual"><scope>lbann::slice_layer</scope><name>m_child_layers</name></member>
      <member refid="classlbann_1_1Layer_1a5de05c52f22e0bbd7c703bec3ad4dbf2" prot="protected" virt="non-virtual"><scope>lbann::slice_layer</scope><name>m_comm</name></member>
      <member refid="classlbann_1_1Layer_1a08dbb94239e3b8c96329786c57c72e21" prot="protected" virt="non-virtual"><scope>lbann::slice_layer</scope><name>m_cudnn</name></member>
      <member refid="classlbann_1_1Layer_1a452e22ac81c1a799f0614b3e942ea726" prot="protected" virt="non-virtual"><scope>lbann::slice_layer</scope><name>m_error_signals</name></member>
      <member refid="classlbann_1_1Layer_1ac08f133dddd150319650e220ab9a523a" prot="protected" virt="non-virtual"><scope>lbann::slice_layer</scope><name>m_expected_num_child_layers</name></member>
      <member refid="classlbann_1_1Layer_1a841b96b25555247f52921c7f13ae1dfa" prot="protected" virt="non-virtual"><scope>lbann::slice_layer</scope><name>m_expected_num_parent_layers</name></member>
      <member refid="classlbann_1_1Layer_1aa4e439c1d6a656e709dc4736c9380476" prot="protected" virt="non-virtual"><scope>lbann::slice_layer</scope><name>m_fp_compute_time</name></member>
      <member refid="classlbann_1_1Layer_1ab1bd9ab0a6f9e554f4dc936d8316028e" prot="protected" virt="non-virtual"><scope>lbann::slice_layer</scope><name>m_fp_time</name></member>
      <member refid="classlbann_1_1Layer_1afdc60df9731a3ecdeeeb8175fa483676" prot="protected" virt="non-virtual"><scope>lbann::slice_layer</scope><name>m_frozen</name></member>
      <member refid="classlbann_1_1slice__layer_1a3e64f86a9e999d3d72867c6009aa99ba" prot="private" virt="non-virtual"><scope>lbann::slice_layer</scope><name>m_input_region_v</name></member>
      <member refid="classlbann_1_1Layer_1a3d9315e99574166f2f33e37b572021d2" prot="protected" virt="non-virtual"><scope>lbann::slice_layer</scope><name>m_model</name></member>
      <member refid="classlbann_1_1Layer_1aa47109ad09b399142fa92f9d3702189f" prot="protected" virt="non-virtual"><scope>lbann::slice_layer</scope><name>m_name</name></member>
      <member refid="classlbann_1_1Layer_1abb34bb8031f57a483e2e327a5f229f48" prot="protected" virt="non-virtual"><scope>lbann::slice_layer</scope><name>m_neuron_dims</name></member>
      <member refid="classlbann_1_1Layer_1adfd6178d21498c9095cd947ae1eb2d6a" prot="protected" virt="non-virtual"><scope>lbann::slice_layer</scope><name>m_num_neuron_dims</name></member>
      <member refid="classlbann_1_1Layer_1a6b5ebc8a7d9329d8a773ed787e7b41d8" prot="protected" virt="non-virtual"><scope>lbann::slice_layer</scope><name>m_num_neurons</name></member>
      <member refid="classlbann_1_1Layer_1adc052afb38f170e839db00d3c8151d1e" prot="protected" virt="non-virtual"><scope>lbann::slice_layer</scope><name>m_num_prev_neuron_dims</name></member>
      <member refid="classlbann_1_1Layer_1ac7b30f4e28d58204bfcbb76886f9136d" prot="protected" virt="non-virtual"><scope>lbann::slice_layer</scope><name>m_num_prev_neurons</name></member>
      <member refid="classlbann_1_1slice__layer_1a9d72208fc8136641e91cb208c38f8b65" prot="private" virt="non-virtual"><scope>lbann::slice_layer</scope><name>m_output_region_v</name></member>
      <member refid="classlbann_1_1Layer_1a3fa7c6cf1a22bb14ab0e85e3dc6027c5" prot="protected" virt="non-virtual"><scope>lbann::slice_layer</scope><name>m_parent_layers</name></member>
      <member refid="classlbann_1_1Layer_1a52314601c3458268f56e017dc2ade357" prot="protected" virt="non-virtual"><scope>lbann::slice_layer</scope><name>m_prev_activations</name></member>
      <member refid="classlbann_1_1Layer_1a6fdcbf884150d0b20cffe678fefd7caa" prot="protected" virt="non-virtual"><scope>lbann::slice_layer</scope><name>m_prev_error_signals</name></member>
      <member refid="classlbann_1_1Layer_1ae204d1a2a79606eaa117273857ff62a3" prot="protected" virt="non-virtual"><scope>lbann::slice_layer</scope><name>m_prev_neuron_dims</name></member>
      <member refid="classlbann_1_1slice__layer_1a349dcd71f67d77d40247da24e4641ea2" prot="private" virt="non-virtual"><scope>lbann::slice_layer</scope><name>m_slice_axis</name></member>
      <member refid="classlbann_1_1slice__layer_1af79dab13a70da2e81209e7ae15166e30" prot="private" virt="non-virtual"><scope>lbann::slice_layer</scope><name>m_slice_points</name></member>
      <member refid="classlbann_1_1Layer_1ab7d84533662b02d01ba6685ad6f20935" prot="protected" virt="non-virtual"><scope>lbann::slice_layer</scope><name>m_update_time</name></member>
      <member refid="classlbann_1_1Layer_1af7881cb5eff5207c15fa835d65462e8f" prot="protected" virt="non-virtual"><scope>lbann::slice_layer</scope><name>m_using_gpus</name></member>
      <member refid="classlbann_1_1Layer_1a7954e30fbf9100a6ba4b56d02767a469" prot="protected" virt="non-virtual"><scope>lbann::slice_layer</scope><name>m_weights</name></member>
      <member refid="classlbann_1_1slice__layer_1a24fb9ce808d587210faa4e3b34dc1aff" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>operator=</name></member>
      <member refid="classlbann_1_1Layer_1a00d8acde68fda2f38c4a39ef8c89234a" prot="public" virt="non-virtual" ambiguityscope="lbann::transform_layer::"><scope>lbann::slice_layer</scope><name>operator=</name></member>
      <member refid="classlbann_1_1Layer_1ae9df4e0b0fe7c276c79575f9e11c53af" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>replace_weights</name></member>
      <member refid="classlbann_1_1Layer_1a979bb6891e6bf5edba2184cd0b59cf54" prot="public" virt="virtual"><scope>lbann::slice_layer</scope><name>reset_counters</name></member>
      <member refid="classlbann_1_1Layer_1afce0efa0f1c8f3b1c61069536b2fa8cc" prot="public" virt="virtual"><scope>lbann::slice_layer</scope><name>save_to_checkpoint_shared</name></member>
      <member refid="classlbann_1_1Layer_1a994a4beabbace598193b1611eb06b07e" prot="public" virt="virtual"><scope>lbann::slice_layer</scope><name>saveToCheckpoint</name></member>
      <member refid="classlbann_1_1Layer_1a131876b692c0e68c95d9ae1a86c446df" prot="public" virt="virtual"><scope>lbann::slice_layer</scope><name>saveToFile</name></member>
      <member refid="classlbann_1_1Layer_1a001ea76cdd05e2d0d475f408f24702ee" prot="public" virt="virtual"><scope>lbann::slice_layer</scope><name>set_layer_pointers</name></member>
      <member refid="classlbann_1_1Layer_1a8eed87b25ea902b223c6b7a23abf78b3" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>set_model</name></member>
      <member refid="classlbann_1_1Layer_1a82d8a038861b0af0d54fbf44ce715839" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>set_name</name></member>
      <member refid="classlbann_1_1Layer_1a524a78dc6a812ae92834a9e1aa83434b" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>set_weights</name></member>
      <member refid="classlbann_1_1Layer_1a93d6048c5959b27aa475673568dab956" prot="public" virt="virtual"><scope>lbann::slice_layer</scope><name>setup</name></member>
      <member refid="classlbann_1_1Layer_1a50a89f8a68762c677d48efe384676e81" prot="protected" virt="virtual"><scope>lbann::slice_layer</scope><name>setup_data</name></member>
      <member refid="classlbann_1_1slice__layer_1ac43785fc01d6cf6e49d3677adfaac297" prot="public" virt="virtual"><scope>lbann::slice_layer</scope><name>setup_dims</name></member>
      <member refid="classlbann_1_1Layer_1a36aa22ef90ce4de65abe729d38490863" prot="protected" virt="virtual"><scope>lbann::slice_layer</scope><name>setup_gpu</name></member>
      <member refid="classlbann_1_1slice__layer_1af3b6f79a53c9a80908b37c2587ff2cae" prot="public" virt="virtual"><scope>lbann::slice_layer</scope><name>setup_matrices</name></member>
      <member refid="classlbann_1_1slice__layer_1a701854f5906a25c58d4f9d851b20de29" prot="public" virt="virtual"><scope>lbann::slice_layer</scope><name>setup_pointers</name></member>
      <member refid="classlbann_1_1slice__layer_1a248cf99da690964ac0209684f8c13c1d" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>slice_layer</name></member>
      <member refid="classlbann_1_1slice__layer_1a650cf86c43a81a644bff4b8e9375f87f" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>slice_layer</name></member>
      <member refid="classlbann_1_1Layer_1af7e50932bb60d4cab3b21ab3fb0707ea" prot="public" virt="virtual"><scope>lbann::slice_layer</scope><name>summarize_matrices</name></member>
      <member refid="classlbann_1_1Layer_1a7f3f26e2ae0497f9a00fd6bc56b50543" prot="public" virt="virtual"><scope>lbann::slice_layer</scope><name>summarize_stats</name></member>
      <member refid="classlbann_1_1transform__layer_1a4b72501e0f4d0745c8b13c5331055e65" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>transform_layer</name></member>
      <member refid="classlbann_1_1Layer_1aa43ecf9fc67eb1d596c1a69cf35d1245" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>unfreeze</name></member>
      <member refid="classlbann_1_1Layer_1ae4a050e51e3a9bec431cf8b7a5660f2c" prot="public" virt="virtual"><scope>lbann::slice_layer</scope><name>update</name></member>
      <member refid="classlbann_1_1Layer_1a70e08fc96a612f67ade6ba3809536d85" prot="protected" virt="virtual"><scope>lbann::slice_layer</scope><name>update_compute</name></member>
      <member refid="classlbann_1_1Layer_1a6a75532bdaa2ca3879034f2a76085a06" prot="public" virt="non-virtual"><scope>lbann::slice_layer</scope><name>using_gpus</name></member>
      <member refid="classlbann_1_1Layer_1ab94eb4ac28bac0c472a1da83ade4adf1" prot="public" virt="virtual"><scope>lbann::slice_layer</scope><name>write_proto</name></member>
      <member refid="classlbann_1_1Layer_1a68c3f57587956da938406812f13ecb78" prot="public" virt="virtual"><scope>lbann::slice_layer</scope><name>~Layer</name></member>
      <member refid="classlbann_1_1slice__layer_1a12591fe9fbadca1a0345682c11788b03" prot="public" virt="virtual"><scope>lbann::slice_layer</scope><name>~slice_layer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
