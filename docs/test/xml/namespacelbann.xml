<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacelbann" kind="namespace" language="C++">
    <compoundname>lbann</compoundname>
    <innerclass refid="classlbann_1_1activation__layer" prot="public">lbann::activation_layer</innerclass>
    <innerclass refid="classlbann_1_1adagrad" prot="public">lbann::adagrad</innerclass>
    <innerclass refid="classlbann_1_1adam" prot="public">lbann::adam</innerclass>
    <innerclass refid="classlbann_1_1ascii__reader" prot="public">lbann::ascii_reader</innerclass>
    <innerclass refid="classlbann_1_1atan__layer" prot="public">lbann::atan_layer</innerclass>
    <innerclass refid="classlbann_1_1base__convolution__layer" prot="public">lbann::base_convolution_layer</innerclass>
    <innerclass refid="classlbann_1_1batch__normalization" prot="public">lbann::batch_normalization</innerclass>
    <innerclass refid="classlbann_1_1bent__identity__layer" prot="public">lbann::bent_identity_layer</innerclass>
    <innerclass refid="classlbann_1_1bernoulli__layer" prot="public">lbann::bernoulli_layer</innerclass>
    <innerclass refid="classlbann_1_1binary__cross__entropy" prot="public">lbann::binary_cross_entropy</innerclass>
    <innerclass refid="classlbann_1_1boolean__accuracy__metric" prot="public">lbann::boolean_accuracy_metric</innerclass>
    <innerclass refid="classlbann_1_1boolean__false__negatives__metric" prot="public">lbann::boolean_false_negatives_metric</innerclass>
    <innerclass refid="classlbann_1_1boolean__false__positives__metric" prot="public">lbann::boolean_false_positives_metric</innerclass>
    <innerclass refid="classlbann_1_1categorical__accuracy__metric" prot="public">lbann::categorical_accuracy_metric</innerclass>
    <innerclass refid="classlbann_1_1cifar10__reader" prot="public">lbann::cifar10_reader</innerclass>
    <innerclass refid="classlbann_1_1concatenation__layer" prot="public">lbann::concatenation_layer</innerclass>
    <innerclass refid="classlbann_1_1constant__initializer" prot="public">lbann::constant_initializer</innerclass>
    <innerclass refid="classlbann_1_1constant__layer" prot="public">lbann::constant_layer</innerclass>
    <innerclass refid="classlbann_1_1convolution__layer" prot="public">lbann::convolution_layer</innerclass>
    <innerclass refid="classlbann_1_1cross__entropy" prot="public">lbann::cross_entropy</innerclass>
    <innerclass refid="classlbann_1_1cross__entropy__with__uncertainty" prot="public">lbann::cross_entropy_with_uncertainty</innerclass>
    <innerclass refid="classlbann_1_1csv__reader" prot="public">lbann::csv_reader</innerclass>
    <innerclass refid="classlbann_1_1CUtility" prot="public">lbann::CUtility</innerclass>
    <innerclass refid="classlbann_1_1data__buffer" prot="public">lbann::data_buffer</innerclass>
    <innerclass refid="classlbann_1_1data__reader__jag" prot="public">lbann::data_reader_jag</innerclass>
    <innerclass refid="classlbann_1_1data__reader__merge__features" prot="public">lbann::data_reader_merge_features</innerclass>
    <innerclass refid="classlbann_1_1data__reader__merge__samples" prot="public">lbann::data_reader_merge_samples</innerclass>
    <innerclass refid="classlbann_1_1data__reader__mnist__siamese" prot="public">lbann::data_reader_mnist_siamese</innerclass>
    <innerclass refid="classlbann_1_1data__reader__multi__images" prot="public">lbann::data_reader_multi_images</innerclass>
    <innerclass refid="classlbann_1_1data__reader__nci" prot="public">lbann::data_reader_nci</innerclass>
    <innerclass refid="classlbann_1_1data__reader__synthetic" prot="public">lbann::data_reader_synthetic</innerclass>
    <innerclass refid="classlbann_1_1data__reader__triplet" prot="public">lbann::data_reader_triplet</innerclass>
    <innerclass refid="classlbann_1_1data__store__csv" prot="public">lbann::data_store_csv</innerclass>
    <innerclass refid="classlbann_1_1data__store__image" prot="public">lbann::data_store_image</innerclass>
    <innerclass refid="classlbann_1_1data__store__imagenet" prot="public">lbann::data_store_imagenet</innerclass>
    <innerclass refid="classlbann_1_1data__store__imagenet__patches" prot="public">lbann::data_store_imagenet_patches</innerclass>
    <innerclass refid="classlbann_1_1data__store__merge__features" prot="public">lbann::data_store_merge_features</innerclass>
    <innerclass refid="classlbann_1_1data__store__merge__samples" prot="public">lbann::data_store_merge_samples</innerclass>
    <innerclass refid="classlbann_1_1data__store__multi__images" prot="public">lbann::data_store_multi_images</innerclass>
    <innerclass refid="classlbann_1_1data__store__pilot2__molecular" prot="public">lbann::data_store_pilot2_molecular</innerclass>
    <innerclass refid="classlbann_1_1data__store__triplet" prot="public">lbann::data_store_triplet</innerclass>
    <innerclass refid="classlbann_1_1DataGenerator" prot="public">lbann::DataGenerator</innerclass>
    <innerclass refid="classlbann_1_1dataset" prot="public">lbann::dataset</innerclass>
    <innerclass refid="classlbann_1_1deconvolution__layer" prot="public">lbann::deconvolution_layer</innerclass>
    <innerclass refid="classlbann_1_1directed__acyclic__graph__model" prot="public">lbann::directed_acyclic_graph_model</innerclass>
    <innerclass refid="classlbann_1_1distributed__io__buffer" prot="public">lbann::distributed_io_buffer</innerclass>
    <innerclass refid="classlbann_1_1dropout" prot="public">lbann::dropout</innerclass>
    <innerclass refid="classlbann_1_1dummy__layer" prot="public">lbann::dummy_layer</innerclass>
    <innerclass refid="classlbann_1_1elu__layer" prot="public">lbann::elu_layer</innerclass>
    <innerclass refid="classlbann_1_1entrywise__activation__layer" prot="public">lbann::entrywise_activation_layer</innerclass>
    <innerclass refid="classlbann_1_1evaluation__layer" prot="public">lbann::evaluation_layer</innerclass>
    <innerclass refid="classlbann_1_1exponential__layer" prot="public">lbann::exponential_layer</innerclass>
    <innerclass refid="classlbann_1_1fan__in__fan__out__initializer" prot="public">lbann::fan_in_fan_out_initializer</innerclass>
    <innerclass refid="classlbann_1_1fetch__data__functor" prot="public">lbann::fetch_data_functor</innerclass>
    <innerclass refid="classlbann_1_1fully__connected__layer" prot="public">lbann::fully_connected_layer</innerclass>
    <innerclass refid="classlbann_1_1gaussian__layer" prot="public">lbann::gaussian_layer</innerclass>
    <innerclass refid="classlbann_1_1generic__compound__data__reader" prot="public">lbann::generic_compound_data_reader</innerclass>
    <innerclass refid="classlbann_1_1generic__data__reader" prot="public">lbann::generic_data_reader</innerclass>
    <innerclass refid="classlbann_1_1generic__data__store" prot="public">lbann::generic_data_store</innerclass>
    <innerclass refid="classlbann_1_1generic__input__layer" prot="public">lbann::generic_input_layer</innerclass>
    <innerclass refid="classlbann_1_1generic__io__buffer" prot="public">lbann::generic_io_buffer</innerclass>
    <innerclass refid="classlbann_1_1generic__target__layer" prot="public">lbann::generic_target_layer</innerclass>
    <innerclass refid="classlbann_1_1geom__negloglike" prot="public">lbann::geom_negloglike</innerclass>
    <innerclass refid="classlbann_1_1glorot__normal__initializer" prot="public">lbann::glorot_normal_initializer</innerclass>
    <innerclass refid="classlbann_1_1glorot__uniform__initializer" prot="public">lbann::glorot_uniform_initializer</innerclass>
    <innerclass refid="classlbann_1_1greedy__layerwise__autoencoder" prot="public">lbann::greedy_layerwise_autoencoder</innerclass>
    <innerclass refid="classlbann_1_1group__lasso__weight__regularization" prot="public">lbann::group_lasso_weight_regularization</innerclass>
    <innerclass refid="classlbann_1_1hadamard__layer" prot="public">lbann::hadamard_layer</innerclass>
    <innerclass refid="classlbann_1_1he__normal__initializer" prot="public">lbann::he_normal_initializer</innerclass>
    <innerclass refid="classlbann_1_1he__uniform__initializer" prot="public">lbann::he_uniform_initializer</innerclass>
    <innerclass refid="classlbann_1_1hypergradient__adam" prot="public">lbann::hypergradient_adam</innerclass>
    <innerclass refid="classlbann_1_1identity__layer" prot="public">lbann::identity_layer</innerclass>
    <innerclass refid="classlbann_1_1image__data__reader" prot="public">lbann::image_data_reader</innerclass>
    <innerclass refid="classlbann_1_1image__utils" prot="public">lbann::image_utils</innerclass>
    <innerclass refid="classlbann_1_1imagenet__reader" prot="public">lbann::imagenet_reader</innerclass>
    <innerclass refid="classlbann_1_1imagenet__reader__org" prot="public">lbann::imagenet_reader_org</innerclass>
    <innerclass refid="classlbann_1_1imagenet__reader__patches" prot="public">lbann::imagenet_reader_patches</innerclass>
    <innerclass refid="classlbann_1_1imagenet__reader__single" prot="public">lbann::imagenet_reader_single</innerclass>
    <innerclass refid="classlbann_1_1input__layer" prot="public">lbann::input_layer</innerclass>
    <innerclass refid="classlbann_1_1io__layer" prot="public">lbann::io_layer</innerclass>
    <innerclass refid="classlbann_1_1kl__divergence" prot="public">lbann::kl_divergence</innerclass>
    <innerclass refid="classlbann_1_1l1__weight__regularization" prot="public">lbann::l1_weight_regularization</innerclass>
    <innerclass refid="classlbann_1_1l2__weight__regularization" prot="public">lbann::l2_weight_regularization</innerclass>
    <innerclass refid="classlbann_1_1Layer" prot="public">lbann::Layer</innerclass>
    <innerclass refid="classlbann_1_1layer__term" prot="public">lbann::layer_term</innerclass>
    <innerclass refid="classlbann_1_1lbann__callback" prot="public">lbann::lbann_callback</innerclass>
    <innerclass refid="classlbann_1_1lbann__callback__adaptive__learning__rate" prot="public">lbann::lbann_callback_adaptive_learning_rate</innerclass>
    <innerclass refid="classlbann_1_1lbann__callback__check__dataset" prot="public">lbann::lbann_callback_check_dataset</innerclass>
    <innerclass refid="classlbann_1_1lbann__callback__check__init" prot="public">lbann::lbann_callback_check_init</innerclass>
    <innerclass refid="classlbann_1_1lbann__callback__check__reconstruction__error" prot="public">lbann::lbann_callback_check_reconstruction_error</innerclass>
    <innerclass refid="classlbann_1_1lbann__callback__checknan" prot="public">lbann::lbann_callback_checknan</innerclass>
    <innerclass refid="classlbann_1_1lbann__callback__checkpoint" prot="public">lbann::lbann_callback_checkpoint</innerclass>
    <innerclass refid="classlbann_1_1lbann__callback__checksmall" prot="public">lbann::lbann_callback_checksmall</innerclass>
    <innerclass refid="classlbann_1_1lbann__callback__debug" prot="public">lbann::lbann_callback_debug</innerclass>
    <innerclass refid="classlbann_1_1lbann__callback__debug__io" prot="public">lbann::lbann_callback_debug_io</innerclass>
    <innerclass refid="classlbann_1_1lbann__callback__drop__fixed__learning__rate" prot="public">lbann::lbann_callback_drop_fixed_learning_rate</innerclass>
    <innerclass refid="classlbann_1_1lbann__callback__dump__activations" prot="public">lbann::lbann_callback_dump_activations</innerclass>
    <innerclass refid="classlbann_1_1lbann__callback__dump__gradients" prot="public">lbann::lbann_callback_dump_gradients</innerclass>
    <innerclass refid="classlbann_1_1lbann__callback__dump__minibatch__sample__indices" prot="public">lbann::lbann_callback_dump_minibatch_sample_indices</innerclass>
    <innerclass refid="classlbann_1_1lbann__callback__dump__weights" prot="public">lbann::lbann_callback_dump_weights</innerclass>
    <innerclass refid="classlbann_1_1lbann__callback__early__stopping" prot="public">lbann::lbann_callback_early_stopping</innerclass>
    <innerclass refid="classlbann_1_1lbann__callback__gradient__check" prot="public">lbann::lbann_callback_gradient_check</innerclass>
    <innerclass refid="classlbann_1_1lbann__callback__hang" prot="public">lbann::lbann_callback_hang</innerclass>
    <innerclass refid="classlbann_1_1lbann__callback__imcomm" prot="public">lbann::lbann_callback_imcomm</innerclass>
    <innerclass refid="classlbann_1_1lbann__callback__io" prot="public">lbann::lbann_callback_io</innerclass>
    <innerclass refid="classlbann_1_1lbann__callback__learning__rate" prot="public">lbann::lbann_callback_learning_rate</innerclass>
    <innerclass refid="classlbann_1_1lbann__callback__linear__growth__learning__rate" prot="public">lbann::lbann_callback_linear_growth_learning_rate</innerclass>
    <innerclass refid="classlbann_1_1lbann__callback__ltfb" prot="public">lbann::lbann_callback_ltfb</innerclass>
    <innerclass refid="classlbann_1_1lbann__callback__minibatch__schedule" prot="public">lbann::lbann_callback_minibatch_schedule</innerclass>
    <innerclass refid="classlbann_1_1lbann__callback__optimizerwise__adaptive__learning__rate" prot="public">lbann::lbann_callback_optimizerwise_adaptive_learning_rate</innerclass>
    <innerclass refid="classlbann_1_1lbann__callback__poly__learning__rate" prot="public">lbann::lbann_callback_poly_learning_rate</innerclass>
    <innerclass refid="classlbann_1_1lbann__callback__print" prot="public">lbann::lbann_callback_print</innerclass>
    <innerclass refid="classlbann_1_1lbann__callback__profiler" prot="public">lbann::lbann_callback_profiler</innerclass>
    <innerclass refid="classlbann_1_1lbann__callback__save__images" prot="public">lbann::lbann_callback_save_images</innerclass>
    <innerclass refid="classlbann_1_1lbann__callback__save__model" prot="public">lbann::lbann_callback_save_model</innerclass>
    <innerclass refid="classlbann_1_1lbann__callback__step__learning__rate" prot="public">lbann::lbann_callback_step_learning_rate</innerclass>
    <innerclass refid="classlbann_1_1lbann__callback__step__minibatch" prot="public">lbann::lbann_callback_step_minibatch</innerclass>
    <innerclass refid="classlbann_1_1lbann__callback__summary" prot="public">lbann::lbann_callback_summary</innerclass>
    <innerclass refid="classlbann_1_1lbann__callback__timeline" prot="public">lbann::lbann_callback_timeline</innerclass>
    <innerclass refid="classlbann_1_1lbann__callback__timer" prot="public">lbann::lbann_callback_timer</innerclass>
    <innerclass refid="classlbann_1_1lbann__callback__variable__minibatch" prot="public">lbann::lbann_callback_variable_minibatch</innerclass>
    <innerclass refid="classlbann_1_1lbann__comm" prot="public">lbann::lbann_comm</innerclass>
    <innerclass refid="classlbann_1_1lbann__exception" prot="public">lbann::lbann_exception</innerclass>
    <innerclass refid="classlbann_1_1lbann__image__preprocessor" prot="public">lbann::lbann_image_preprocessor</innerclass>
    <innerclass refid="structlbann_1_1lbann__model__header" prot="public">lbann::lbann_model_header</innerclass>
    <innerclass refid="structlbann_1_1lbann__model__sequential__header" prot="public">lbann::lbann_model_sequential_header</innerclass>
    <innerclass refid="classlbann_1_1lbann__quantizer" prot="public">lbann::lbann_quantizer</innerclass>
    <innerclass refid="classlbann_1_1lbann__summary" prot="public">lbann::lbann_summary</innerclass>
    <innerclass refid="classlbann_1_1leaky__relu__layer" prot="public">lbann::leaky_relu_layer</innerclass>
    <innerclass refid="classlbann_1_1learning__layer" prot="public">lbann::learning_layer</innerclass>
    <innerclass refid="classlbann_1_1local__response__normalization__layer" prot="public">lbann::local_response_normalization_layer</innerclass>
    <innerclass refid="classlbann_1_1loss__function" prot="public">lbann::loss_function</innerclass>
    <innerclass refid="classlbann_1_1mean__absolute__deviation__loss" prot="public">lbann::mean_absolute_deviation_loss</innerclass>
    <innerclass refid="classlbann_1_1mean__absolute__deviation__metric" prot="public">lbann::mean_absolute_deviation_metric</innerclass>
    <innerclass refid="classlbann_1_1mean__absolute__error__loss" prot="public">lbann::mean_absolute_error_loss</innerclass>
    <innerclass refid="classlbann_1_1mean__squared__error__loss" prot="public">lbann::mean_squared_error_loss</innerclass>
    <innerclass refid="classlbann_1_1mean__squared__error__metric" prot="public">lbann::mean_squared_error_metric</innerclass>
    <innerclass refid="classlbann_1_1mesh__reader" prot="public">lbann::mesh_reader</innerclass>
    <innerclass refid="classlbann_1_1metric" prot="public">lbann::metric</innerclass>
    <innerclass refid="structlbann_1_1metric__statistics" prot="public">lbann::metric_statistics</innerclass>
    <innerclass refid="classlbann_1_1mnist__reader" prot="public">lbann::mnist_reader</innerclass>
    <innerclass refid="classlbann_1_1model" prot="public">lbann::model</innerclass>
    <innerclass refid="classlbann_1_1NetworkParams" prot="public">lbann::NetworkParams</innerclass>
    <innerclass refid="classlbann_1_1normal__initializer" prot="public">lbann::normal_initializer</innerclass>
    <innerclass refid="classlbann_1_1numpy__reader" prot="public">lbann::numpy_reader</innerclass>
    <innerclass refid="classlbann_1_1objective__function" prot="public">lbann::objective_function</innerclass>
    <innerclass refid="classlbann_1_1objective__function__term" prot="public">lbann::objective_function_term</innerclass>
    <innerclass refid="classlbann_1_1offline__patches__npz" prot="public">lbann::offline_patches_npz</innerclass>
    <innerclass refid="classlbann_1_1optimizer" prot="public">lbann::optimizer</innerclass>
    <innerclass refid="classlbann_1_1partitioned__io__buffer" prot="public">lbann::partitioned_io_buffer</innerclass>
    <innerclass refid="structlbann_1_1path__delimiter" prot="public">lbann::path_delimiter</innerclass>
    <innerclass refid="classlbann_1_1pearson__correlation__metric" prot="public">lbann::pearson_correlation_metric</innerclass>
    <innerclass refid="classlbann_1_1PerformanceParams" prot="public">lbann::PerformanceParams</innerclass>
    <innerclass refid="classlbann_1_1persist" prot="public">lbann::persist</innerclass>
    <innerclass refid="classlbann_1_1pilot2__molecular__reader" prot="public">lbann::pilot2_molecular_reader</innerclass>
    <innerclass refid="classlbann_1_1poisson__negloglike" prot="public">lbann::poisson_negloglike</innerclass>
    <innerclass refid="classlbann_1_1polya__negloglike" prot="public">lbann::polya_negloglike</innerclass>
    <innerclass refid="classlbann_1_1pooling__layer" prot="public">lbann::pooling_layer</innerclass>
    <innerclass refid="classlbann_1_1power__layer" prot="public">lbann::power_layer</innerclass>
    <innerclass refid="classlbann_1_1protobuf__utils" prot="public">lbann::protobuf_utils</innerclass>
    <innerclass refid="structlbann_1_1prototext__fn__triple" prot="public">lbann::prototext_fn_triple</innerclass>
    <innerclass refid="classlbann_1_1r2__metric" prot="public">lbann::r2_metric</innerclass>
    <innerclass refid="classlbann_1_1reconstruction__layer" prot="public">lbann::reconstruction_layer</innerclass>
    <innerclass refid="classlbann_1_1recurrent__model" prot="public">lbann::recurrent_model</innerclass>
    <innerclass refid="classlbann_1_1reduction__layer" prot="public">lbann::reduction_layer</innerclass>
    <innerclass refid="classlbann_1_1regularizer__layer" prot="public">lbann::regularizer_layer</innerclass>
    <innerclass refid="classlbann_1_1relu__layer" prot="public">lbann::relu_layer</innerclass>
    <innerclass refid="classlbann_1_1reshape__layer" prot="public">lbann::reshape_layer</innerclass>
    <innerclass refid="classlbann_1_1rmsprop" prot="public">lbann::rmsprop</innerclass>
    <innerclass refid="classlbann_1_1rng" prot="public">lbann::rng</innerclass>
    <innerclass refid="classlbann_1_1safe__inv__layer" prot="public">lbann::safe_inv_layer</innerclass>
    <innerclass refid="classlbann_1_1selu__dropout" prot="public">lbann::selu_dropout</innerclass>
    <innerclass refid="classlbann_1_1selu__layer" prot="public">lbann::selu_layer</innerclass>
    <innerclass refid="classlbann_1_1sequential__model" prot="public">lbann::sequential_model</innerclass>
    <innerclass refid="classlbann_1_1sgd" prot="public">lbann::sgd</innerclass>
    <innerclass refid="classlbann_1_1siamese__model" prot="public">lbann::siamese_model</innerclass>
    <innerclass refid="classlbann_1_1sigmoid__layer" prot="public">lbann::sigmoid_layer</innerclass>
    <innerclass refid="classlbann_1_1slice__layer" prot="public">lbann::slice_layer</innerclass>
    <innerclass refid="classlbann_1_1smooth__relu__layer" prot="public">lbann::smooth_relu_layer</innerclass>
    <innerclass refid="classlbann_1_1softmax__layer" prot="public">lbann::softmax_layer</innerclass>
    <innerclass refid="classlbann_1_1softplus__layer" prot="public">lbann::softplus_layer</innerclass>
    <innerclass refid="classlbann_1_1split__layer" prot="public">lbann::split_layer</innerclass>
    <innerclass refid="classlbann_1_1stack__profiler" prot="public">lbann::stack_profiler</innerclass>
    <innerclass refid="classlbann_1_1sum__layer" prot="public">lbann::sum_layer</innerclass>
    <innerclass refid="classlbann_1_1swish__layer" prot="public">lbann::swish_layer</innerclass>
    <innerclass refid="classlbann_1_1SystemParams" prot="public">lbann::SystemParams</innerclass>
    <innerclass refid="classlbann_1_1tanh__layer" prot="public">lbann::tanh_layer</innerclass>
    <innerclass refid="classlbann_1_1target__layer" prot="public">lbann::target_layer</innerclass>
    <innerclass refid="classlbann_1_1top__k__categorical__accuracy__metric" prot="public">lbann::top_k_categorical_accuracy_metric</innerclass>
    <innerclass refid="classlbann_1_1TrainingParams" prot="public">lbann::TrainingParams</innerclass>
    <innerclass refid="classlbann_1_1transform__layer" prot="public">lbann::transform_layer</innerclass>
    <innerclass refid="classlbann_1_1uniform__initializer" prot="public">lbann::uniform_initializer</innerclass>
    <innerclass refid="classlbann_1_1uniform__layer" prot="public">lbann::uniform_layer</innerclass>
    <innerclass refid="classlbann_1_1unpooling__layer" prot="public">lbann::unpooling_layer</innerclass>
    <innerclass refid="classlbann_1_1update__data__reader__functor" prot="public">lbann::update_data_reader_functor</innerclass>
    <innerclass refid="classlbann_1_1weights" prot="public">lbann::weights</innerclass>
    <innerclass refid="classlbann_1_1weights__initializer" prot="public">lbann::weights_initializer</innerclass>
    <innernamespace refid="namespacelbann_1_1Al">lbann::Al</innernamespace>
    <innernamespace refid="namespacelbann_1_1anonymous__namespace_02callback__ltfb_8cpp_03">lbann::anonymous_namespace{callback_ltfb.cpp}</innernamespace>
    <innernamespace refid="namespacelbann_1_1anonymous__namespace_02recurrent_8cpp_03">lbann::anonymous_namespace{recurrent.cpp}</innernamespace>
    <innernamespace refid="namespacelbann_1_1cnpy__utils">lbann::cnpy_utils</innernamespace>
    <innernamespace refid="namespacelbann_1_1cudnn">lbann::cudnn</innernamespace>
    <innernamespace refid="namespacelbann_1_1graph">lbann::graph</innernamespace>
    <innernamespace refid="namespacelbann_1_1proto">lbann::proto</innernamespace>
    <innernamespace refid="namespacelbann_1_1stack__trace">lbann::stack_trace</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacelbann_1adee41f31f15f3906cbdcce4a1417eb56" prot="public" static="no">
        <name>persist_type</name>
        <enumvalue id="namespacelbann_1adee41f31f15f3906cbdcce4a1417eb56a61b3a8faa9c1091806675c230a9abe64" prot="public">
          <name>train</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacelbann_1adee41f31f15f3906cbdcce4a1417eb56a20f35e630daf44dbfa4c3f68f5399d8c" prot="public">
          <name>model</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacelbann_1adee41f31f15f3906cbdcce4a1417eb56af9ab05454998236921a6b0e281fae632" prot="public">
          <name>validate</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/io/persist.hpp" line="37" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/io/persist.hpp" bodystart="37" bodyend="41"/>
      </memberdef>
      <memberdef kind="enum" id="namespacelbann_1a3ce21fcce81d74fe54c2f4b5b5b48d9a" prot="public" static="no">
        <name>device</name>
        <enumvalue id="namespacelbann_1a3ce21fcce81d74fe54c2f4b5b5b48d9aa2b55387dd066c5bac646ac61543d152d" prot="public">
          <name>CPU</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacelbann_1a3ce21fcce81d74fe54c2f4b5b5b48d9aaa33b7755e5f9b504d2d038eaca4ff28d" prot="public">
          <name>CUDA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/learning/fully_connected.hpp" line="43" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/learning/fully_connected.hpp" bodystart="43" bodyend="43"/>
      </memberdef>
      <memberdef kind="enum" id="namespacelbann_1a5975e1fb530a267728bfb01dc5c1be9b" prot="public" static="no">
        <name>reduction_mode</name>
        <enumvalue id="namespacelbann_1a5975e1fb530a267728bfb01dc5c1be9baccc0377a8afbf50e7094f5c23a8af223" prot="public">
          <name>INVALID</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacelbann_1a5975e1fb530a267728bfb01dc5c1be9ba6970bdc2201030b9c03fbdcf3973858a" prot="public">
          <name>SUM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacelbann_1a5975e1fb530a267728bfb01dc5c1be9ba16de38737a9f8366e9b2042b4e9b6290" prot="public">
          <name>AVERAGE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/reduction.hpp" line="35" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/layers/transform/reduction.hpp" bodystart="35" bodyend="35"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacelbann_1aab7fa584bac85b9085aa8b8c5a888356" prot="public" static="no">
        <type>std::mt19937</type>
        <definition>using lbann::rng_gen = typedef std::mt19937</definition>
        <argsstring></argsstring>
        <name>rng_gen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/random.hpp" line="37" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/random.hpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacelbann_1af16616ffa6a3616836eabadd6ce837ec" prot="public" static="no">
        <type>std::minstd_rand</type>
        <definition>using lbann::fast_rng_gen = typedef std::minstd_rand</definition>
        <argsstring></argsstring>
        <name>fast_rng_gen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/random.hpp" line="38" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/random.hpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacelbann_1add9e1dd52afa73f994d5d3a44c25a818" prot="public" static="yes" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; lbann::comm_type_names</definition>
        <argsstring></argsstring>
        <name>comm_type_names</name>
        <initializer>=
    { &quot;none&quot;, &quot;normal&quot;, &quot;onebit_quantization&quot;, &quot;thresh_quantization&quot;, &quot;adaptive_quantization&quot; }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/callbacks/callback_imcomm.cpp" line="266" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/callbacks/callback_imcomm.cpp" bodystart="266" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacelbann_1a3d91b615e42bf5744deeed770879bc8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classlbann_1_1lbann__comm" kindref="compound">lbann_comm</ref> *</type>
        <definition>lbann_comm * lbann::initialize</definition>
        <argsstring>(int &amp;argc, char **&amp;argv, int seed)</argsstring>
        <name>initialize</name>
        <param>
          <type>int &amp;</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **&amp;</type>
          <declname>argv</declname>
        </param>
        <param>
          <type>int</type>
          <declname>seed</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize LBANN. The comm instance this returns places every process in one model. This can be changed with <ref refid="classlbann_1_1lbann__comm_1a0ae02c4083623d2e1381336a73fdb379" kindref="member">lbann_comm::split_models</ref> afterward. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para>The program&apos;s argc. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>The program&apos;s argv. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional seed for random number generators. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/base.cpp" line="46" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/base.cpp" bodystart="46" bodyend="86"/>
        <references refid="file__io_8cpp_1ab048c6f9fcbcfaa57ce68b00263dbebe" compoundref="file__io_8cpp" startline="44">comm</references>
        <references refid="namespacelbann_1acef152f20e422b3aea1a3c1691a533ac" compoundref="random_8cpp" startline="106" endline="145">init_random</references>
        <references refid="namespacelbann_1a8987701a637ff0e678114aa77e9c4d40" compoundref="random_8cpp" startline="147" endline="164">init_data_seq_random</references>
        <references refid="namespacelbann_1_1stack__trace_1a1063a9a501d78a7525224461e155a483" compoundref="stack__trace_8cpp" startline="49" endline="51">lbann::stack_trace::set_lbann_stack_trace_world_rank</references>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a99724ee5a6647a1d8bff6764b9aa5fac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::finalize</definition>
        <argsstring>(lbann_comm *comm)</argsstring>
        <name>finalize</name>
        <param>
          <type><ref refid="classlbann_1_1lbann__comm" kindref="compound">lbann_comm</ref> *</type>
          <declname>comm</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform finalization. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/base.cpp" line="88" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/base.cpp" bodystart="88" bodyend="93"/>
        <references refid="file__io_8cpp_1ab048c6f9fcbcfaa57ce68b00263dbebe" compoundref="file__io_8cpp" startline="44">comm</references>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a35a39e949cfd1d7f8c15f94e4d44ecff" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool lbann::write_latest</definition>
        <argsstring>(const char *dir, const char *name, int epoch, int train)</argsstring>
        <name>write_latest</name>
        <param>
          <type>const char *</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>epoch</declname>
        </param>
        <param>
          <type>int</type>
          <declname>train</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/callbacks/callback_checkpoint.cpp" line="108" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/callbacks/callback_checkpoint.cpp" bodystart="108" bodyend="122"/>
        <references refid="namespacelbann_1af596e6d2be603e9cf808c98f5412490a" compoundref="file__io_8cpp" startline="119" endline="131">openwrite</references>
        <references refid="namespacelbann_1add2807d7303bd96d2804f0b14e894c68" compoundref="persist_8cpp" startline="700" endline="709">write_string</references>
        <references refid="namespacelbann_1aceeccedbbafccfa071b21ee99be794a5" compoundref="file__io_8cpp" startline="133" endline="153">closewrite</references>
        <referencedby refid="classlbann_1_1lbann__callback__checkpoint_1a23b6f5abb924b2c4d0694e98c7d6f4d5" compoundref="callback__checkpoint_8cpp" startline="145" endline="202">lbann::lbann_callback_checkpoint::checkpointShared</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1abebab8298e56db6a455a9ed08ab42bb4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool lbann::read_latest</definition>
        <argsstring>(const char *dir, const char *name, int *epochLast, int *trainLast)</argsstring>
        <name>read_latest</name>
        <param>
          <type>const char *</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>epochLast</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>trainLast</declname>
        </param>
        <briefdescription>
<para>Reads the &quot;latest&quot; file and returns the epoch number and sample offset for most recent checkpoint. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/callbacks/callback_checkpoint.cpp" line="124" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/callbacks/callback_checkpoint.cpp" bodystart="124" bodyend="143"/>
        <references refid="namespacelbann_1a6084b9319eea1997f8446fa3e6879532" compoundref="file__io_8cpp" startline="98" endline="104">openread</references>
        <references refid="namespacelbann_1a784843ebce0e596dba31c1d981a7f087" compoundref="persist_8cpp" startline="711" endline="720">read_string</references>
        <references refid="namespacelbann_1a38dd30b2ae8214f6595708264369ddb8" compoundref="file__io_8cpp" startline="106" endline="117">closeread</references>
        <referencedby refid="classlbann_1_1lbann__callback__checkpoint_1a40d369278bc5963ba2f3cca1750ba004" compoundref="callback__checkpoint_8cpp" startline="203" endline="256">lbann::lbann_callback_checkpoint::restartShared</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1ab5665dc52c53faca0caa55b509e2e654" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string lbann::get_comm_type_name</definition>
        <argsstring>(lbann_callback_imcomm::comm_type m)</argsstring>
        <name>get_comm_type_name</name>
        <param>
          <type><ref refid="classlbann_1_1lbann__callback__imcomm_1acf7e894b3381e7f9b71020dc73594d6a" kindref="member">lbann_callback_imcomm::comm_type</ref></type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns a string representation of the weight_initialization </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/callbacks/callback_imcomm.cpp" line="270" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/callbacks/callback_imcomm.cpp" bodystart="270" bodyend="276"/>
        <referencedby refid="classlbann_1_1lbann__callback__imcomm_1a13fe710b841f72e28daf8de029f6c2f9" compoundref="callback__imcomm_8hpp" startline="134" endline="136">lbann::lbann_callback_imcomm::reshape_mat</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a59f65281406da5bc57f49d8ec682be2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::load_mnist_data</definition>
        <argsstring>(const std::string imagepath, const std::string labelpath, const int m_first_n, std::vector&lt; std::vector&lt; unsigned char &gt; &gt; &amp;m_image_data)</argsstring>
        <name>load_mnist_data</name>
        <param>
          <type>const std::string</type>
          <declname>imagepath</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>labelpath</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>m_first_n</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; unsigned char &gt; &gt; &amp;</type>
          <declname>m_image_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/data_readers/data_reader_mnist.cpp" line="74" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/data_readers/data_reader_mnist.cpp" bodystart="74" bodyend="130"/>
        <references refid="namespacelbann_1a0fd8bc0ad31da913a124683f5ec4fdf1" compoundref="file__utils_8hpp" startline="90" endline="92">__swapEndianInt</references>
        <references refid="classlbann_1_1generic__data__reader_1a51af253029b7daea29bc46cbbef686b3" compoundref="data__reader_8hpp" startline="923">lbann::generic_data_reader::m_first_n</references>
        <references refid="classlbann_1_1mnist__reader_1a566ec18b29037abafe472b371f86aaca" compoundref="data__reader__mnist_8hpp" startline="61">lbann::mnist_reader::m_image_data</references>
        <referencedby refid="classlbann_1_1mnist__reader_1aacbd6c4dec95b9849083d96e0005b392" compoundref="data__reader__mnist_8cpp" startline="132" endline="168">lbann::mnist_reader::load</referencedby>
        <referencedby refid="classlbann_1_1data__reader__mnist__siamese_1a0f4171af4c56100c1c78cb53e938222c" compoundref="data__reader__mnist__siamese_8cpp" startline="253" endline="257">lbann::data_reader_mnist_siamese::fetch_label</referencedby>
        <referencedby refid="classlbann_1_1data__reader__mnist__siamese_1a2c60a89c5815fa24b34d4febfecfc3db" compoundref="data__reader__mnist__siamese_8cpp" startline="265" endline="301">lbann::data_reader_mnist_siamese::load</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a32006e2c89920b1ff6e8a2318650dd7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void lbann::Layer::instantiate_matrices&lt; data_layout::MODEL_PARALLEL &gt;</definition>
        <argsstring>(const El::Grid &amp;grid)</argsstring>
        <name>Layer::instantiate_matrices&lt; data_layout::MODEL_PARALLEL &gt;</name>
        <param>
          <type>const <ref refid="base_8hpp_1a9951bb1719d534e0401b1f06cad19eab" kindref="member">El::Grid</ref> &amp;</type>
          <declname>grid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/layers/layer.cpp" line="557" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/layers/layer.cpp" bodystart="557" bodyend="566"/>
        <references refid="classlbann_1_1Layer_1ac9290d4a6453ccda5f6b4d8b57b49ba3" compoundref="layer_8hpp" startline="269" endline="269">lbann::Layer::get_num_parents</references>
        <references refid="classlbann_1_1Layer_1a52314601c3458268f56e017dc2ade357" compoundref="layer_8hpp" startline="384">lbann::Layer::m_prev_activations</references>
        <references refid="classlbann_1_1Layer_1a452e22ac81c1a799f0614b3e942ea726" compoundref="layer_8hpp" startline="405">lbann::Layer::m_error_signals</references>
        <references refid="classlbann_1_1Layer_1a1409a117c31a7ea4f2c7a4d22a3e86c3" compoundref="layer_8hpp" startline="271" endline="271">lbann::Layer::get_num_children</references>
        <references refid="classlbann_1_1Layer_1a7caf08e938141d1584e6939cefa4baed" compoundref="layer_8hpp" startline="391">lbann::Layer::m_activations</references>
        <references refid="classlbann_1_1Layer_1a6fdcbf884150d0b20cffe678fefd7caa" compoundref="layer_8hpp" startline="398">lbann::Layer::m_prev_error_signals</references>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1af3507a38f8992e27898d63551a987341" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void lbann::Layer::instantiate_matrices&lt; data_layout::DATA_PARALLEL &gt;</definition>
        <argsstring>(const El::Grid &amp;grid)</argsstring>
        <name>Layer::instantiate_matrices&lt; data_layout::DATA_PARALLEL &gt;</name>
        <param>
          <type>const <ref refid="base_8hpp_1a9951bb1719d534e0401b1f06cad19eab" kindref="member">El::Grid</ref> &amp;</type>
          <declname>grid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/layers/layer.cpp" line="569" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/layers/layer.cpp" bodystart="569" bodyend="578"/>
        <references refid="classlbann_1_1Layer_1ac9290d4a6453ccda5f6b4d8b57b49ba3" compoundref="layer_8hpp" startline="269" endline="269">lbann::Layer::get_num_parents</references>
        <references refid="classlbann_1_1Layer_1a52314601c3458268f56e017dc2ade357" compoundref="layer_8hpp" startline="384">lbann::Layer::m_prev_activations</references>
        <references refid="classlbann_1_1Layer_1a452e22ac81c1a799f0614b3e942ea726" compoundref="layer_8hpp" startline="405">lbann::Layer::m_error_signals</references>
        <references refid="classlbann_1_1Layer_1a1409a117c31a7ea4f2c7a4d22a3e86c3" compoundref="layer_8hpp" startline="271" endline="271">lbann::Layer::get_num_children</references>
        <references refid="classlbann_1_1Layer_1a7caf08e938141d1584e6939cefa4baed" compoundref="layer_8hpp" startline="391">lbann::Layer::m_activations</references>
        <references refid="classlbann_1_1Layer_1a6fdcbf884150d0b20cffe678fefd7caa" compoundref="layer_8hpp" startline="398">lbann::Layer::m_prev_error_signals</references>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1af3f2c9055423e1fe3380b1ad4c4ab5ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt; int &gt; lbann::get_tokens</definition>
        <argsstring>(std::string str, const std::vector&lt; char &gt; delims)</argsstring>
        <name>get_tokens</name>
        <param>
          <type>std::string</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::vector&lt; char &gt;</type>
          <declname>delims</declname>
        </param>
        <briefdescription>
<para>Tokenize a string into integers by an ordered sequence of delimiter characters. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/file_utils.cpp" line="38" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/file_utils.cpp" bodystart="38" bodyend="53"/>
        <referencedby refid="structlbann_1_1path__delimiter_1a89e287e7a7c4b4fc2863da116f199a71" compoundref="file__utils_8hpp" startline="46" endline="48">lbann::path_delimiter::operator()</referencedby>
        <referencedby refid="classlbann_1_1data__reader__jag_1a1a5c6cbbaba03f9826cbbd7657427351" compoundref="data__reader__jag_8cpp" startline="191" endline="224">lbann::data_reader_jag::load</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1ac02a174553cf05f779743be1c92f1912" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; lbann::get_tokens</definition>
        <argsstring>(const std::string str, const std::string delims=&quot; :;\\\&quot;)</argsstring>
        <name>get_tokens</name>
        <param>
          <type>const std::string</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>delims</declname>
        </param>
        <briefdescription>
<para>Tokenize a string into substrings by set of delimiter characters. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/file_utils.cpp" line="55" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/file_utils.cpp" bodystart="55" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a1ce6832a54235a5fb333f50fffbe1b63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lbann::parse_path</definition>
        <argsstring>(const std::string &amp;path, std::string &amp;dir, std::string &amp;basename)</argsstring>
        <name>parse_path</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>basename</declname>
        </param>
        <briefdescription>
<para>Divide a given path into dir and basename. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/file_utils.cpp" line="71" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/file_utils.cpp" bodystart="71" bodyend="81"/>
        <referencedby refid="structlbann_1_1path__delimiter_1a89e287e7a7c4b4fc2863da116f199a71" compoundref="file__utils_8hpp" startline="46" endline="48">lbann::path_delimiter::operator()</referencedby>
        <referencedby refid="namespacelbann_1ad9a28639b0953886bbcb7fc366783a17" compoundref="file__utils_8cpp" startline="85" endline="95">get_ext_name</referencedby>
        <referencedby refid="namespacelbann_1aea9a4378326fd51236a8343c43cc4a7c" compoundref="file__utils_8cpp" startline="99" endline="109">get_basename_without_ext</referencedby>
        <referencedby refid="namespacelbann_1a351610c8df00514e8942756c2099fedc" compoundref="file__utils_8cpp" startline="137" endline="151">modify_file_name</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1ad9a28639b0953886bbcb7fc366783a17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string lbann::get_ext_name</definition>
        <argsstring>(const std::string file_name)</argsstring>
        <name>get_ext_name</name>
        <param>
          <type>const std::string</type>
          <declname>file_name</declname>
        </param>
        <briefdescription>
<para>Return file extention name. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/file_utils.cpp" line="85" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/file_utils.cpp" bodystart="85" bodyend="95"/>
        <references refid="namespacelbann_1a1ce6832a54235a5fb333f50fffbe1b63" compoundref="file__utils_8cpp" startline="71" endline="81">parse_path</references>
        <referencedby refid="structlbann_1_1path__delimiter_1a89e287e7a7c4b4fc2863da116f199a71" compoundref="file__utils_8hpp" startline="46" endline="48">lbann::path_delimiter::operator()</referencedby>
        <referencedby refid="namespacelbann_1a351610c8df00514e8942756c2099fedc" compoundref="file__utils_8cpp" startline="137" endline="151">modify_file_name</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1aea9a4378326fd51236a8343c43cc4a7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string lbann::get_basename_without_ext</definition>
        <argsstring>(const std::string file_name)</argsstring>
        <name>get_basename_without_ext</name>
        <param>
          <type>const std::string</type>
          <declname>file_name</declname>
        </param>
        <briefdescription>
<para>Return basename without extention. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/file_utils.cpp" line="99" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/file_utils.cpp" bodystart="99" bodyend="109"/>
        <references refid="namespacelbann_1a1ce6832a54235a5fb333f50fffbe1b63" compoundref="file__utils_8cpp" startline="71" endline="81">parse_path</references>
        <referencedby refid="structlbann_1_1path__delimiter_1a89e287e7a7c4b4fc2863da116f199a71" compoundref="file__utils_8hpp" startline="46" endline="48">lbann::path_delimiter::operator()</referencedby>
        <referencedby refid="namespacelbann_1a351610c8df00514e8942756c2099fedc" compoundref="file__utils_8cpp" startline="137" endline="151">modify_file_name</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a1b8b05bbf2e59808a51ead80c47a9359" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string lbann::add_delimiter</definition>
        <argsstring>(const std::string dir)</argsstring>
        <name>add_delimiter</name>
        <param>
          <type>const std::string</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This automatically attaches the directory deliminator at the end of the given directory as necessary. If &quot;&quot; is given, it will do nothing </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/file_utils.cpp" line="117" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/file_utils.cpp" bodystart="117" bodyend="128"/>
        <references refid="structlbann_1_1path__delimiter_1adb3d520b3e7b9f9aa8327245ea943bdf" compoundref="file__utils_8hpp" startline="43" endline="45">lbann::path_delimiter::check</references>
        <references refid="structlbann_1_1path__delimiter_1a4f3bb346e47a66b16419125b1485e2ef" compoundref="file__utils_8hpp" startline="40" endline="42">lbann::path_delimiter::preferred</references>
        <referencedby refid="structlbann_1_1path__delimiter_1a89e287e7a7c4b4fc2863da116f199a71" compoundref="file__utils_8hpp" startline="46" endline="48">lbann::path_delimiter::operator()</referencedby>
        <referencedby refid="classlbann_1_1data__reader__jag_1a1a5c6cbbaba03f9826cbbd7657427351" compoundref="data__reader__jag_8cpp" startline="191" endline="224">lbann::data_reader_jag::load</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a351610c8df00514e8942756c2099fedc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string lbann::modify_file_name</definition>
        <argsstring>(const std::string file_name, const std::string tag, const std::string new_ext)</argsstring>
        <name>modify_file_name</name>
        <param>
          <type>const std::string</type>
          <declname>file_name</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>new_ext</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add tag to a file name and/or change the extension. i.e., given a file_name as &quot;name.ext&quot;, a new name &quot;name.tag.new_ext&quot; is returned If a new extension is not specified, it assumes the same. To change the extension without adding a tag, set tag to a null string. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/file_utils.cpp" line="137" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/file_utils.cpp" bodystart="137" bodyend="151"/>
        <references refid="namespacelbann_1a1ce6832a54235a5fb333f50fffbe1b63" compoundref="file__utils_8cpp" startline="71" endline="81">parse_path</references>
        <references refid="namespacelbann_1ad9a28639b0953886bbcb7fc366783a17" compoundref="file__utils_8cpp" startline="85" endline="95">get_ext_name</references>
        <references refid="namespacelbann_1aea9a4378326fd51236a8343c43cc4a7c" compoundref="file__utils_8cpp" startline="99" endline="109">get_basename_without_ext</references>
        <referencedby refid="structlbann_1_1path__delimiter_1a89e287e7a7c4b4fc2863da116f199a71" compoundref="file__utils_8hpp" startline="46" endline="48">lbann::path_delimiter::operator()</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a4fac6c6483965395fa79d31061485f9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lbann::check_if_file_exists</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>check_if_file_exists</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Return true if a file with the given name exists. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/file_utils.cpp" line="155" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/file_utils.cpp" bodystart="155" bodyend="158"/>
        <references refid="namespacelbann_1a3ee4a1fa7a82c30999de9eb626c68311" compoundref="file__utils_8cpp" startline="171" endline="173">check_if_dir_exists</references>
        <referencedby refid="structlbann_1_1path__delimiter_1a89e287e7a7c4b4fc2863da116f199a71" compoundref="file__utils_8hpp" startline="46" endline="48">lbann::path_delimiter::operator()</referencedby>
        <referencedby refid="classlbann_1_1data__reader__jag_1a300a937eb6022b5b2cd6d9405beb3d83" compoundref="data__reader__jag_8cpp" startline="227" endline="289">lbann::data_reader_jag::load</referencedby>
        <referencedby refid="classlbann_1_1offline__patches__npz_1a29f1d64e32c857018d5ef21dd99fe7c4" compoundref="offline__patches__npz_8cpp" startline="40" endline="139">lbann::offline_patches_npz::load</referencedby>
        <referencedby refid="namespacelbann_1a3ee4a1fa7a82c30999de9eb626c68311" compoundref="file__utils_8cpp" startline="171" endline="173">check_if_dir_exists</referencedby>
        <referencedby refid="namespacelbann_1a1208673c880ccf0e1a9c5db6a8ed81f8" compoundref="file__utils_8cpp" startline="182" endline="218">create_dir</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a3ee4a1fa7a82c30999de9eb626c68311" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lbann::check_if_dir_exists</definition>
        <argsstring>(const std::string &amp;dirname)</argsstring>
        <name>check_if_dir_exists</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>dirname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/file_utils.cpp" line="171" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/file_utils.cpp" bodystart="171" bodyend="173"/>
        <references refid="namespacelbann_1a4fac6c6483965395fa79d31061485f9f" compoundref="file__utils_8cpp" startline="155" endline="158">check_if_file_exists</references>
        <referencedby refid="namespacelbann_1a4fac6c6483965395fa79d31061485f9f" compoundref="file__utils_8cpp" startline="155" endline="158">check_if_file_exists</referencedby>
        <referencedby refid="namespacelbann_1a1208673c880ccf0e1a9c5db6a8ed81f8" compoundref="file__utils_8cpp" startline="182" endline="218">create_dir</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a1208673c880ccf0e1a9c5db6a8ed81f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lbann::create_dir</definition>
        <argsstring>(const std::string dirname)</argsstring>
        <name>create_dir</name>
        <param>
          <type>const std::string</type>
          <declname>dirname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a directory, and return true if successful. If a directory with the same name already exists, simply return true. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/file_utils.cpp" line="182" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/file_utils.cpp" bodystart="182" bodyend="218"/>
        <references refid="structlbann_1_1path__delimiter_1adb3d520b3e7b9f9aa8327245ea943bdf" compoundref="file__utils_8hpp" startline="43" endline="45">lbann::path_delimiter::check</references>
        <references refid="namespacelbann_1a4fac6c6483965395fa79d31061485f9f" compoundref="file__utils_8cpp" startline="155" endline="158">check_if_file_exists</references>
        <references refid="namespacelbann_1a3ee4a1fa7a82c30999de9eb626c68311" compoundref="file__utils_8cpp" startline="171" endline="173">check_if_dir_exists</references>
        <referencedby refid="structlbann_1_1path__delimiter_1a89e287e7a7c4b4fc2863da116f199a71" compoundref="file__utils_8hpp" startline="46" endline="48">lbann::path_delimiter::operator()</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1aa3636a1979e40da2af91f30a12b90db9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::im2col</definition>
        <argsstring>(const Mat &amp;im, Mat &amp;col, int num_channels, int im_num_dims, const int *im_dims, const int *im_pads, const int *window_dims, const int *window_strides)</argsstring>
        <name>im2col</name>
        <param>
          <type>const <ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>im</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>col</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_channels</declname>
        </param>
        <param>
          <type>int</type>
          <declname>im_num_dims</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>im_dims</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>im_pads</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>window_dims</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>window_strides</declname>
        </param>
        <briefdescription>
<para>Rearrange image blocks into matrix columns. </para>        </briefdescription>
        <detaileddescription>
<para>The &apos;col&apos; matrix is generated from the &apos;im&apos; tensor im by shifting a window across im. Each column of col is produced by positioning the window, extracting entries from im, and flattening. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>im</parametername>
</parameternamelist>
<parameterdescription>
<para>im tensor, represented as a column vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>col matrix. Height should be equal to window size and width equal to number of window shifts. Data should be contiguous. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_channels</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of channels in im tensor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>im_num_dims</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of dimensions in im tensor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>im_dims</parametername>
</parameternamelist>
<parameterdescription>
<para>im tensor dimensions. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>im_pads</parametername>
</parameternamelist>
<parameterdescription>
<para>Zero pads for im tensor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>window_dims</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimensions of window. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>window_strides</parametername>
</parameternamelist>
<parameterdescription>
<para>Window shift strides. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/im2col.cpp" line="32" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/im2col.cpp" bodystart="32" bodyend="153"/>
        <references refid="namespacelbann_1a3d099edd7d1b09889e0d2133bb83d5bf" compoundref="im2col_8cpp" startline="350" endline="362">im2col_1x1</references>
        <references refid="namespacelbann_1adc05d10657be77ccd9a74b1621c416c3" compoundref="im2col_8cpp" startline="364" endline="427">im2col_2d</references>
        <referencedby refid="classlbann_1_1base__convolution__layer_1a0710d46aa54d92f94de920ed37f6ef11" compoundref="base__convolution_8hpp" startline="625" endline="682">lbann::base_convolution_layer::apply_convolution_im2col</referencedby>
        <referencedby refid="classlbann_1_1base__convolution__layer_1a8cb0b4fb33f058ce6c211ebaf6a17f63" compoundref="base__convolution_8hpp" startline="779" endline="879">lbann::base_convolution_layer::compute_gradients_im2col</referencedby>
        <referencedby refid="classlbann_1_1pooling__layer_1a76ce07a190fbe85685ea2ab4e53be7f9" compoundref="pooling_8hpp" startline="323" endline="409">lbann::pooling_layer&lt; T_layout &gt;::fp_compute_im2col</referencedby>
        <referencedby refid="classlbann_1_1unpooling__layer_1ad4607102ff59de2f233a87f13967cc04" compoundref="unpooling_8hpp" startline="190" endline="237">lbann::unpooling_layer&lt; T_layout &gt;::bp_compute_im2col</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a0e1225f72580ffb5166181392b68b651" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::col2im</definition>
        <argsstring>(const Mat &amp;col, Mat &amp;im, int num_channels, int im_num_dims, const int *im_dims, const int *im_pads, const int *window_dims, const int *window_strides)</argsstring>
        <name>col2im</name>
        <param>
          <type>const <ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>col</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>im</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_channels</declname>
        </param>
        <param>
          <type>int</type>
          <declname>im_num_dims</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>im_dims</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>im_pads</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>window_dims</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>window_strides</declname>
        </param>
        <briefdescription>
<para>Rearrange matrix columns into image blocks. </para>        </briefdescription>
        <detaileddescription>
<para>This is approximately the inverse of im2col. The output tensor im is produced from the input matrix col by shifting a window across im. Each column of col is matched with the corresponding window position and corresponding entries are added to im. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>col matrix. Height should be equal to window size and width equal to number of window shifts. Data should be contiguous. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>im</parametername>
</parameternamelist>
<parameterdescription>
<para>im tensor, represented as a column vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_channels</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of channels in im tensor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>im_num_dims</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of dimensions in im tensor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>im_dims</parametername>
</parameternamelist>
<parameterdescription>
<para>im tensor dimensions. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>im_pads</parametername>
</parameternamelist>
<parameterdescription>
<para>Zero pads for im tensor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>window_dims</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimensions of window. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>window_strides</parametername>
</parameternamelist>
<parameterdescription>
<para>Window shift strides. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/im2col.cpp" line="155" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/im2col.cpp" bodystart="155" bodyend="237"/>
        <references refid="namespacelbann_1ab4fccda3dc4c2c293d643815dfefe22a" compoundref="im2col_8cpp" startline="429" endline="441">col2im_1x1</references>
        <references refid="namespacelbann_1a1953674a43b284f0abb5c5e4db94b2b9" compoundref="im2col_8cpp" startline="443" endline="520">col2im_2d</references>
        <referencedby refid="classlbann_1_1base__convolution__layer_1a87fb2bf066a98052938e48a82dcd4fd2" compoundref="base__convolution_8hpp" startline="685" endline="748">lbann::base_convolution_layer::apply_transposed_convolution_im2col</referencedby>
        <referencedby refid="classlbann_1_1pooling__layer_1a704aca0e1e5bba7d27b7755133e6d50b" compoundref="pooling_8hpp" startline="412" endline="494">lbann::pooling_layer&lt; T_layout &gt;::bp_compute_im2col</referencedby>
        <referencedby refid="classlbann_1_1unpooling__layer_1ab4a0b7cc4711426434983c41cd7dbc63" compoundref="unpooling_8hpp" startline="135" endline="187">lbann::unpooling_layer&lt; T_layout &gt;::fp_compute_im2col</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1ab36806d08e7c852ad9cf3a0564f29b64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::col2im</definition>
        <argsstring>(const Mat &amp;col, Mat &amp;im, int num_channels, int im_num_dims, const int *im_dims, const int *im_pads, const int *window_dims, const int *window_strides, std::function&lt; DataType(const DataType &amp;, const DataType &amp;)&gt; reduction_op)</argsstring>
        <name>col2im</name>
        <param>
          <type>const <ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>col</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>im</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_channels</declname>
        </param>
        <param>
          <type>int</type>
          <declname>im_num_dims</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>im_dims</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>im_pads</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>window_dims</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>window_strides</declname>
        </param>
        <param>
          <type>std::function&lt; DataType(const DataType &amp;, const DataType &amp;)&gt;</type>
          <declname>reduction_op</declname>
        </param>
        <briefdescription>
<para>Rearrange matrix columns into image blocks. </para>        </briefdescription>
        <detaileddescription>
<para>This is approximately the inverse of im2col. The output tensor im is produced from the input matrix col by shifting a window across im. Each column of col is matched with the corresponding window position and corresponding entries are reduced to im. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>col matrix. Height should be equal to window size and width equal to number of window shifts. Data should be contiguous. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>im</parametername>
</parameternamelist>
<parameterdescription>
<para>im tensor, represented as a column vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_channels</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of channels in im tensor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>im_num_dims</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of dimensions in im tensor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>im_dims</parametername>
</parameternamelist>
<parameterdescription>
<para>im tensor dimensions. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>im_pads</parametername>
</parameternamelist>
<parameterdescription>
<para>Zero pads for im tensor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>window_dims</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimensions of window. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>window_strides</parametername>
</parameternamelist>
<parameterdescription>
<para>Window shift strides. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reduction_op</parametername>
</parameternamelist>
<parameterdescription>
<para>Reduction operation. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/im2col.cpp" line="239" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/im2col.cpp" bodystart="239" bodyend="348"/>
        <references refid="namespacelbann_1ab4fccda3dc4c2c293d643815dfefe22a" compoundref="im2col_8cpp" startline="429" endline="441">col2im_1x1</references>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a3d099edd7d1b09889e0d2133bb83d5bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::im2col_1x1</definition>
        <argsstring>(const DataType *input_buffer, DataType *output_buffer, int num_channels, int num_input_dims, const int *input_dims)</argsstring>
        <name>im2col_1x1</name>
        <param>
          <type>const DataType *</type>
          <declname>input_buffer</declname>
        </param>
        <param>
          <type>DataType *</type>
          <declname>output_buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_channels</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_input_dims</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>input_dims</declname>
        </param>
        <briefdescription>
<para>Rearrange 1x1 image blocks into matrix columns. </para>        </briefdescription>
        <detaileddescription>
<para>This is an optimized implementation of im2col when the window has a size of one, there is no padding, and the window stride is one. im2col will automatically call this routine if it detects a 1x1 im2col. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/im2col.cpp" line="350" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/im2col.cpp" bodystart="350" bodyend="362"/>
        <referencedby refid="namespacelbann_1aa3636a1979e40da2af91f30a12b90db9" compoundref="im2col_8cpp" startline="32" endline="153">im2col</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1adc05d10657be77ccd9a74b1621c416c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::im2col_2d</definition>
        <argsstring>(const DataType *__restrict__ input_buffer, DataType *__restrict__ output_buffer, int input_dim_x, int input_dim_y, int input_pad_x, int input_pad_y, int num_channels, int window_dim_x, int window_dim_y, int offset_stride_x, int offset_stride_y)</argsstring>
        <name>im2col_2d</name>
        <param>
          <type>const DataType *__restrict__</type>
          <declname>input_buffer</declname>
        </param>
        <param>
          <type>DataType *__restrict__</type>
          <declname>output_buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>input_dim_x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>input_dim_y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>input_pad_x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>input_pad_y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_channels</declname>
        </param>
        <param>
          <type>int</type>
          <declname>window_dim_x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>window_dim_y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_stride_x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_stride_y</declname>
        </param>
        <briefdescription>
<para>Rearrange 2D image blocks into matrix columns. </para>        </briefdescription>
        <detaileddescription>
<para>This is an optimized implementation of im2col for 2D data. im2col will automatically call this routine if it detects 2D data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/im2col.cpp" line="364" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/im2col.cpp" bodystart="364" bodyend="427"/>
        <referencedby refid="namespacelbann_1aa3636a1979e40da2af91f30a12b90db9" compoundref="im2col_8cpp" startline="32" endline="153">im2col</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1ab4fccda3dc4c2c293d643815dfefe22a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::col2im_1x1</definition>
        <argsstring>(const DataType *input_buffer, DataType *output_buffer, const int num_channels, const int num_output_dims, const int *output_dims)</argsstring>
        <name>col2im_1x1</name>
        <param>
          <type>const DataType *</type>
          <declname>input_buffer</declname>
        </param>
        <param>
          <type>DataType *</type>
          <declname>output_buffer</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>num_channels</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>num_output_dims</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>output_dims</declname>
        </param>
        <briefdescription>
<para>Rearrange matrix columns into 1x1 image blocks. </para>        </briefdescription>
        <detaileddescription>
<para>This is an optimized implementation of col2im when the window has a size of one, there is no padding, and the window stride is one. col2im will automatically call this routine if it detects a 1x1 col2im. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/im2col.cpp" line="429" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/im2col.cpp" bodystart="429" bodyend="441"/>
        <referencedby refid="namespacelbann_1a0e1225f72580ffb5166181392b68b651" compoundref="im2col_8cpp" startline="155" endline="237">col2im</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a1953674a43b284f0abb5c5e4db94b2b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::col2im_2d</definition>
        <argsstring>(const DataType *__restrict__ input_buffer, DataType *__restrict__ output_buffer, int output_dim_x, int output_dim_y, int output_pad_x, int output_pad_y, int num_channels, int window_dim_x, int window_dim_y, int offset_stride_x, int offset_stride_y)</argsstring>
        <name>col2im_2d</name>
        <param>
          <type>const DataType *__restrict__</type>
          <declname>input_buffer</declname>
        </param>
        <param>
          <type>DataType *__restrict__</type>
          <declname>output_buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>output_dim_x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>output_dim_y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>output_pad_x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>output_pad_y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_channels</declname>
        </param>
        <param>
          <type>int</type>
          <declname>window_dim_x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>window_dim_y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_stride_x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_stride_y</declname>
        </param>
        <briefdescription>
<para>Rearrange matrix columns into 2D image blocks. </para>        </briefdescription>
        <detaileddescription>
<para>This is an optimized implementation of col2im for 2D data. col2im will automatically call this routine if it detects 2D data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/im2col.cpp" line="443" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/im2col.cpp" bodystart="443" bodyend="520"/>
        <referencedby refid="namespacelbann_1a0e1225f72580ffb5166181392b68b651" compoundref="im2col_8cpp" startline="155" endline="237">col2im</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a26debfaa06e8490c7f258ed7923870c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::display_omp_setup</definition>
        <argsstring>()</argsstring>
        <name>display_omp_setup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/omp_diagnostics.cpp" line="198" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/omp_diagnostics.cpp" bodystart="198" bodyend="240"/>
        <references refid="namespacelbann_1a17d55032bad5bb02903f9b1d933836a4">get_sleep_sec</references>
        <references refid="namespacelbann_1aa4ee6571e54db5cee7f263029147e5f2">get_env_var</references>
        <references refid="namespacelbann_1acbd15ead7411cf84db559cc39a82f445">print_affinity_subset</references>
        <references refid="namespacelbann_1a4fd83a86cf27ca7bc1e01576a5ee36e0">print_affinity</references>
        <references refid="namespacelbann_1a31acedf53bb67180043939832c0220d3">th_print_affinity</references>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a4fea7ba21017b49d1e34394b4c20c764" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacelbann_1aab7fa584bac85b9085aa8b8c5a888356" kindref="member">rng_gen</ref> &amp;</type>
        <definition>rng_gen &amp; lbann::get_generator</definition>
        <argsstring>()</argsstring>
        <name>get_generator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a reference to the global LBANN random number generator. <simplesect kind="note"><para>If compiling with OpenMP, this is stored in a threadprivate variable. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/random.cpp" line="60" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/random.cpp" bodystart="60" bodyend="62"/>
        <references refid="namespaceanonymous__namespace_02random_8cpp_03_1a83826c4b587d1825f13b833be6fe047f" compoundref="random_8cpp" startline="46">anonymous_namespace{random.cpp}::generator</references>
        <referencedby refid="classlbann_1_1dropout_1aeafadecbcfc81734d0c1850b4004dcc3" compoundref="dropout_8hpp" startline="264" endline="310">lbann::dropout&lt; T_layout &gt;::bp_compute_gpu</referencedby>
        <referencedby refid="classlbann_1_1rng_1a1c8a2640dd522c6fc63bf2de09ff3e84" compoundref="random_8hpp" startline="169" endline="171">lbann::rng&lt; DistType, DType &gt;::gen</referencedby>
        <referencedby refid="classlbann_1_1lbann__image__preprocessor_1a27cb5182c4f764cbfa4edecbb78ef29d" compoundref="image__preprocessor_8cpp" startline="55" endline="131">lbann::lbann_image_preprocessor::augment</referencedby>
        <referencedby refid="namespacelbann_1acef152f20e422b3aea1a3c1691a533ac" compoundref="random_8cpp" startline="106" endline="145">init_random</referencedby>
        <referencedby refid="namespacelbann_1a2f40602f0503f9737325bb267e5c4dcc" compoundref="random_8cpp" startline="192" endline="206">gaussian_fill_procdet</referencedby>
        <referencedby refid="namespacelbann_1ad1e3fe84cfa5257be476de3be805064d" compoundref="random_8cpp" startline="208" endline="221">bernoulli_fill_procdet</referencedby>
        <referencedby refid="namespacelbann_1a93fc1b42be6ab461e803cb48d58c4d81" compoundref="random_8cpp" startline="223" endline="238">uniform_fill_procdet</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1ae6ce9c2fdec6f81803f6b1a6555c31c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacelbann_1af16616ffa6a3616836eabadd6ce837ec" kindref="member">fast_rng_gen</ref> &amp;</type>
        <definition>fast_rng_gen &amp; lbann::get_fast_generator</definition>
        <argsstring>()</argsstring>
        <name>get_fast_generator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a reference to a possibly-faster global LBANN random number generator. Compared to get_generator, this should be slightly faster. <simplesect kind="note"><para>If compiling with OpenMP, this is stored in a threadprivate variable. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/random.cpp" line="64" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/random.cpp" bodystart="64" bodyend="66"/>
        <references refid="namespaceanonymous__namespace_02random_8cpp_03_1a349f572cec05cd0e2469b799774a8602" compoundref="random_8cpp" startline="50">anonymous_namespace{random.cpp}::fast_generator</references>
        <referencedby refid="classlbann_1_1dropout_1a358c502d8e7eeb1fed8b5df468793b09" compoundref="dropout_8hpp" startline="182" endline="216">lbann::dropout&lt; T_layout &gt;::fp_compute_cpu</referencedby>
        <referencedby refid="namespacelbann_1_1anonymous__namespace_02callback__ltfb_8cpp_03_1a1865e25ff1f3b6ad417d1853ea0bc6f4" compoundref="callback__ltfb_8cpp" startline="43" endline="69">lbann::anonymous_namespace{callback_ltfb.cpp}::assign_partners</referencedby>
        <referencedby refid="classlbann_1_1mesh__reader_1a0ed2aa6d5ec6509c15d0cf7d9657df29" compoundref="data__reader__mesh_8cpp" startline="68" endline="82">lbann::mesh_reader::fetch_datum</referencedby>
        <referencedby refid="classlbann_1_1lbann__quantizer_1a4dd4696cbbfd93c73e5fb3c40fcb16c3" compoundref="quantizer_8cpp" startline="45" endline="133">lbann::lbann_quantizer::onebit_quantize</referencedby>
        <referencedby refid="classlbann_1_1lbann__quantizer_1aa5aabc1cb4163e95aee993d9b37b9b32" compoundref="quantizer_8cpp" startline="500" endline="580">lbann::lbann_quantizer::proportion_threshold</referencedby>
        <referencedby refid="classlbann_1_1lbann__quantizer_1af77beca5905ff8601ca9b8231a2a16e0" compoundref="quantizer_8cpp" startline="582" endline="679">lbann::lbann_quantizer::col_reconstruction</referencedby>
        <referencedby refid="namespacelbann_1acef152f20e422b3aea1a3c1691a533ac" compoundref="random_8cpp" startline="106" endline="145">init_random</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1aba9d11cb3a739cd84e7234ceeb32d098" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacelbann_1aab7fa584bac85b9085aa8b8c5a888356" kindref="member">rng_gen</ref> &amp;</type>
        <definition>rng_gen &amp; lbann::get_data_seq_generator</definition>
        <argsstring>()</argsstring>
        <name>get_data_seq_generator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a reference to the global LBANN random number generator used for shuffling the data samples within each mini-bathc <simplesect kind="note"><para>If compiling with OpenMP, this is stored in a threadprivate variable. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/random.cpp" line="68" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/random.cpp" bodystart="68" bodyend="70"/>
        <references refid="namespaceanonymous__namespace_02random_8cpp_03_1ac1d3d0259f3e9c9b75e9701ae727d16e" compoundref="random_8cpp" startline="54">anonymous_namespace{random.cpp}::data_seq_generator</references>
        <referencedby refid="classlbann_1_1generic__data__reader_1af1aaa4d1a693974c1b1f1318b6ed60b8" compoundref="data__reader_8cpp" startline="35" endline="41">lbann::generic_data_reader::shuffle_indices</referencedby>
        <referencedby refid="classlbann_1_1generic__data__reader_1a1d10dec5713fbe60e61b4dc400227ade" compoundref="data__reader_8cpp" startline="226" endline="279">lbann::generic_data_reader::update</referencedby>
        <referencedby refid="classlbann_1_1data__reader__mnist__siamese_1ad1949fc1a71af86d792e927c0181f87d" compoundref="data__reader__mnist__siamese_8cpp" startline="304" endline="318">lbann::data_reader_mnist_siamese::shuffle_indices</referencedby>
        <referencedby refid="namespacelbann_1a8987701a637ff0e678114aa77e9c4d40" compoundref="random_8cpp" startline="147" endline="164">init_data_seq_random</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1af68acf5b249e5360289d4c6a7bfa8985" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lbann::save_rng_to_checkpoint_shared</definition>
        <argsstring>(persist &amp;p)</argsstring>
        <name>save_rng_to_checkpoint_shared</name>
        <param>
          <type><ref refid="classlbann_1_1persist" kindref="compound">persist</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/random.cpp" line="72" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/random.cpp" bodystart="72" bodyend="87"/>
        <references refid="classlbann_1_1persist_1a17c2b08ec1815aba6d3eae6502397bb1" compoundref="persist_8hpp" startline="54">lbann::persist::m_checkpoint_dir</references>
        <references refid="namespaceanonymous__namespace_02random_8cpp_03_1ac1d3d0259f3e9c9b75e9701ae727d16e" compoundref="random_8cpp" startline="54">anonymous_namespace{random.cpp}::data_seq_generator</references>
        <references refid="namespaceanonymous__namespace_02random_8cpp_03_1a83826c4b587d1825f13b833be6fe047f" compoundref="random_8cpp" startline="46">anonymous_namespace{random.cpp}::generator</references>
        <references refid="namespaceanonymous__namespace_02random_8cpp_03_1a349f572cec05cd0e2469b799774a8602" compoundref="random_8cpp" startline="50">anonymous_namespace{random.cpp}::fast_generator</references>
        <referencedby refid="namespacelbann_1a2fe8cea17a147566b73260f557b51006" compoundref="random_8hpp" startline="81" endline="90">fast_rand_int_pow2</referencedby>
        <referencedby refid="classlbann_1_1model_1a3d589d2e46ad35d0a1221e25bef70fa4" compoundref="model_8cpp" startline="1151" endline="1171">lbann::model::save_to_checkpoint_shared</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1ab76114a0e8cc90c28bcb9e7d01eec89a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lbann::load_rng_from_checkpoint_shared</definition>
        <argsstring>(persist &amp;p)</argsstring>
        <name>load_rng_from_checkpoint_shared</name>
        <param>
          <type><ref refid="classlbann_1_1persist" kindref="compound">persist</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/random.cpp" line="89" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/random.cpp" bodystart="89" bodyend="104"/>
        <references refid="classlbann_1_1persist_1a17c2b08ec1815aba6d3eae6502397bb1" compoundref="persist_8hpp" startline="54">lbann::persist::m_checkpoint_dir</references>
        <references refid="namespaceanonymous__namespace_02random_8cpp_03_1ac1d3d0259f3e9c9b75e9701ae727d16e" compoundref="random_8cpp" startline="54">anonymous_namespace{random.cpp}::data_seq_generator</references>
        <references refid="namespaceanonymous__namespace_02random_8cpp_03_1a83826c4b587d1825f13b833be6fe047f" compoundref="random_8cpp" startline="46">anonymous_namespace{random.cpp}::generator</references>
        <references refid="namespaceanonymous__namespace_02random_8cpp_03_1a349f572cec05cd0e2469b799774a8602" compoundref="random_8cpp" startline="50">anonymous_namespace{random.cpp}::fast_generator</references>
        <referencedby refid="namespacelbann_1a2fe8cea17a147566b73260f557b51006" compoundref="random_8hpp" startline="81" endline="90">fast_rand_int_pow2</referencedby>
        <referencedby refid="classlbann_1_1model_1a2e02dda11636e015ea0c892ffa541881" compoundref="model_8cpp" startline="1173" endline="1209">lbann::model::load_from_checkpoint_shared</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1acef152f20e422b3aea1a3c1691a533ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::init_random</definition>
        <argsstring>(int seed, lbann_comm *comm)</argsstring>
        <name>init_random</name>
        <param>
          <type>int</type>
          <declname>seed</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type><ref refid="classlbann_1_1lbann__comm" kindref="compound">lbann_comm</ref> *</type>
          <declname>comm</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize the random number generator (with optional seed). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>comm</parametername>
</parameternamelist>
<parameterdescription>
<para>If present, mixes the process&apos;s rank within the model into the seed; if not, uses the MPI world rank. </para></parameterdescription>
</parameteritem>
</parameterlist>
<xrefsect id="todo_1_todo000030"><xreftitle>Todo</xreftitle><xrefdescription><para>Support saving/restoring the generator&apos;s state. This is directly supported via the &gt;&gt; and &lt;&lt; operators on the generator (reading/writing from/to a stream). </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/random.cpp" line="106" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/random.cpp" bodystart="106" bodyend="145"/>
        <references refid="namespacelbann_1a4fea7ba21017b49d1e34394b4c20c764" compoundref="random_8cpp" startline="60" endline="62">get_generator</references>
        <references refid="namespacelbann_1ae6ce9c2fdec6f81803f6b1a6555c31c5" compoundref="random_8cpp" startline="64" endline="66">get_fast_generator</references>
        <references refid="classlbann_1_1lbann__comm_1a789453454468a3b70de768537c50ca52" compoundref="comm_8hpp" startline="116" endline="118">lbann::lbann_comm::get_rank_in_model</references>
        <referencedby refid="namespacelbann_1a2fe8cea17a147566b73260f557b51006" compoundref="random_8hpp" startline="81" endline="90">fast_rand_int_pow2</referencedby>
        <referencedby refid="namespacelbann_1a3d91b615e42bf5744deeed770879bc8c" compoundref="base_8cpp" startline="46" endline="86">initialize</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a8987701a637ff0e678114aa77e9c4d40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::init_data_seq_random</definition>
        <argsstring>(int seed)</argsstring>
        <name>init_data_seq_random</name>
        <param>
          <type>int</type>
          <declname>seed</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize a random number generator (with optional seed) that is specifically used for sequencing the training / testing data samples. Using a separate RNG for the data sequences helps provide a stable training result that does not vary with how much I/O parallelism is applied. <xrefsect id="todo_1_todo000031"><xreftitle>Todo</xreftitle><xrefdescription><para>Support saving/restoring the generator&apos;s state. This is directly supported via the &gt;&gt; and &lt;&lt; operators on the generator (reading/writing from/to a stream). </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/random.cpp" line="147" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/random.cpp" bodystart="147" bodyend="164"/>
        <references refid="namespacelbann_1aba9d11cb3a739cd84e7234ceeb32d098" compoundref="random_8cpp" startline="68" endline="70">get_data_seq_generator</references>
        <referencedby refid="namespacelbann_1a2fe8cea17a147566b73260f557b51006" compoundref="random_8hpp" startline="81" endline="90">fast_rand_int_pow2</referencedby>
        <referencedby refid="namespacelbann_1a3d91b615e42bf5744deeed770879bc8c" compoundref="base_8cpp" startline="46" endline="86">initialize</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1abd116f95f55d0e29d9a0cc386139c4b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::gaussian_fill</definition>
        <argsstring>(AbsDistMat &amp;mat, El::Int m, El::Int n, DataType mean, DataType stddev)</argsstring>
        <name>gaussian_fill</name>
        <param>
          <type><ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>El::Int</type>
          <declname>m</declname>
        </param>
        <param>
          <type>El::Int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>DataType</type>
          <declname>mean</declname>
          <defval>0.0f</defval>
        </param>
        <param>
          <type>DataType</type>
          <declname>stddev</declname>
          <defval>1.0f</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Make mat into an m x n matrix where each entry is independently drawn from a Gaussian distribution with given mean and standard deviation. Unless selected so at compile-time, this ensures the entries of the matrix do not change as the grid it is distributed over changes; that is, it will have the same entries when mat spans any number of processes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/random.cpp" line="166" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/random.cpp" bodystart="166" bodyend="173"/>
        <references refid="namespacelbann_1a2f40602f0503f9737325bb267e5c4dcc" compoundref="random_8cpp" startline="192" endline="206">gaussian_fill_procdet</references>
        <referencedby refid="classlbann_1_1gaussian__layer_1a8a0f52d4f365180dbf11e9a09b359c5e" compoundref="gaussian_8hpp" startline="94" endline="101">lbann::gaussian_layer&lt; T_layout &gt;::fp_compute</referencedby>
        <referencedby refid="namespacelbann_1a2fe8cea17a147566b73260f557b51006" compoundref="random_8hpp" startline="81" endline="90">fast_rand_int_pow2</referencedby>
        <referencedby refid="classlbann_1_1glorot__normal__initializer_1a0bd7253159fe5ca9039af44b7fca1709" compoundref="fan__in__fan__out__initializers_8cpp" startline="34" endline="48">lbann::glorot_normal_initializer::initialize_entries</referencedby>
        <referencedby refid="classlbann_1_1glorot__uniform__initializer_1a3a44410934f791cee272183a6a36ae0c" compoundref="fan__in__fan__out__initializers_8cpp" startline="50" endline="64">lbann::glorot_uniform_initializer::initialize_entries</referencedby>
        <referencedby refid="classlbann_1_1he__normal__initializer_1a01d283880fc0c1b743bcc89e732f4e15" compoundref="fan__in__fan__out__initializers_8cpp" startline="66" endline="80">lbann::he_normal_initializer::initialize_entries</referencedby>
        <referencedby refid="classlbann_1_1he__uniform__initializer_1a8f86401b0b216ba159f57d3475769a24" compoundref="fan__in__fan__out__initializers_8cpp" startline="82" endline="96">lbann::he_uniform_initializer::initialize_entries</referencedby>
        <referencedby refid="classlbann_1_1normal__initializer_1a3958aa3e88af76077cc7559eba0a5a17" compoundref="initializer_8cpp" startline="92" endline="96">lbann::normal_initializer::initialize_entries</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1ae8bc674a3d676391666524b44cbc4068" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::bernoulli_fill</definition>
        <argsstring>(AbsDistMat &amp;mat, El::Int m, El::Int n, double p)</argsstring>
        <name>bernoulli_fill</name>
        <param>
          <type><ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>El::Int</type>
          <declname>m</declname>
        </param>
        <param>
          <type>El::Int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>double</type>
          <declname>p</declname>
          <defval>0.5</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Make mat into an m x n matrix where each entry is an indepenent Bernoulli random variable with parameter p. This makes the same guarantees as gaussian_fill. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/random.cpp" line="175" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/random.cpp" bodystart="175" bodyend="181"/>
        <references refid="namespacelbann_1ad1e3fe84cfa5257be476de3be805064d" compoundref="random_8cpp" startline="208" endline="221">bernoulli_fill_procdet</references>
        <referencedby refid="classlbann_1_1bernoulli__layer_1ad3b8939b6df375880247ef54f370ceb1" compoundref="bernoulli_8hpp" startline="89" endline="96">lbann::bernoulli_layer&lt; T_layout &gt;::fp_compute</referencedby>
        <referencedby refid="namespacelbann_1a2fe8cea17a147566b73260f557b51006" compoundref="random_8hpp" startline="81" endline="90">fast_rand_int_pow2</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a7336c565aa23c1dab784530c581db3d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::uniform_fill</definition>
        <argsstring>(AbsDistMat &amp;mat, El::Int m, El::Int n, DataType center, DataType radius)</argsstring>
        <name>uniform_fill</name>
        <param>
          <type><ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>El::Int</type>
          <declname>m</declname>
        </param>
        <param>
          <type>El::Int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>DataType</type>
          <declname>center</declname>
          <defval>0.0f</defval>
        </param>
        <param>
          <type>DataType</type>
          <declname>radius</declname>
          <defval>1.0f</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Make mat into an m x n matrix where each entry is independently uniformly sampled from a ball with the given center and radius. This makes the same guarantees as gaussian_fill. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/random.cpp" line="183" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/random.cpp" bodystart="183" bodyend="190"/>
        <references refid="namespacelbann_1a93fc1b42be6ab461e803cb48d58c4d81" compoundref="random_8cpp" startline="223" endline="238">uniform_fill_procdet</references>
        <referencedby refid="classlbann_1_1uniform__layer_1a975ba9cfcd974fe348ee9681d1feb879" compoundref="uniform_8hpp" startline="94" endline="103">lbann::uniform_layer&lt; T_layout &gt;::fp_compute</referencedby>
        <referencedby refid="namespacelbann_1a2fe8cea17a147566b73260f557b51006" compoundref="random_8hpp" startline="81" endline="90">fast_rand_int_pow2</referencedby>
        <referencedby refid="classlbann_1_1uniform__initializer_1a23461a8ab897f0aeafc524a61cb0f4eb" compoundref="initializer_8cpp" startline="84" endline="90">lbann::uniform_initializer::initialize_entries</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a2f40602f0503f9737325bb267e5c4dcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::gaussian_fill_procdet</definition>
        <argsstring>(AbsDistMat &amp;mat, El::Int m, El::Int n, DataType mean, DataType stddev)</argsstring>
        <name>gaussian_fill_procdet</name>
        <param>
          <type><ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>El::Int</type>
          <declname>m</declname>
        </param>
        <param>
          <type>El::Int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>DataType</type>
          <declname>mean</declname>
          <defval>0.0f</defval>
        </param>
        <param>
          <type>DataType</type>
          <declname>stddev</declname>
          <defval>1.0f</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Make mat into an m x n matrix where each entry is independently drawn from a Gaussian distribution with given mean and standard deviation. This always ensures that the entries of the matrix do not change as the grid it is distributed over changes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/random.cpp" line="192" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/random.cpp" bodystart="192" bodyend="206"/>
        <references refid="namespacelbann_1a4fea7ba21017b49d1e34394b4c20c764" compoundref="random_8cpp" startline="60" endline="62">get_generator</references>
        <referencedby refid="namespacelbann_1a2fe8cea17a147566b73260f557b51006" compoundref="random_8hpp" startline="81" endline="90">fast_rand_int_pow2</referencedby>
        <referencedby refid="namespacelbann_1abd116f95f55d0e29d9a0cc386139c4b4" compoundref="random_8cpp" startline="166" endline="173">gaussian_fill</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1ad1e3fe84cfa5257be476de3be805064d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::bernoulli_fill_procdet</definition>
        <argsstring>(AbsDistMat &amp;mat, El::Int m, El::Int n, double p)</argsstring>
        <name>bernoulli_fill_procdet</name>
        <param>
          <type><ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>El::Int</type>
          <declname>m</declname>
        </param>
        <param>
          <type>El::Int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>double</type>
          <declname>p</declname>
          <defval>0.5</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Make mat into an m x n matrix where each entry is an independent Bernoulli random variable with parameter p. This makes the same guarantees as gaussian_fill_procdet. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/random.cpp" line="208" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/random.cpp" bodystart="208" bodyend="221"/>
        <references refid="namespacelbann_1a4fea7ba21017b49d1e34394b4c20c764" compoundref="random_8cpp" startline="60" endline="62">get_generator</references>
        <referencedby refid="classlbann_1_1dropout_1a358c502d8e7eeb1fed8b5df468793b09" compoundref="dropout_8hpp" startline="182" endline="216">lbann::dropout&lt; T_layout &gt;::fp_compute_cpu</referencedby>
        <referencedby refid="namespacelbann_1a2fe8cea17a147566b73260f557b51006" compoundref="random_8hpp" startline="81" endline="90">fast_rand_int_pow2</referencedby>
        <referencedby refid="namespacelbann_1ae8bc674a3d676391666524b44cbc4068" compoundref="random_8cpp" startline="175" endline="181">bernoulli_fill</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a93fc1b42be6ab461e803cb48d58c4d81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::uniform_fill_procdet</definition>
        <argsstring>(AbsDistMat &amp;mat, El::Int m, El::Int n, DataType center, DataType radius)</argsstring>
        <name>uniform_fill_procdet</name>
        <param>
          <type><ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>El::Int</type>
          <declname>m</declname>
        </param>
        <param>
          <type>El::Int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>DataType</type>
          <declname>center</declname>
          <defval>0.0f</defval>
        </param>
        <param>
          <type>DataType</type>
          <declname>radius</declname>
          <defval>1.0f</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Make mat into an m x n matrix where each entry is independently uniformly sampled from a ball with the given center and radius. This makes the same guarantees as gaussian_fill_procdet. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/random.cpp" line="223" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/random.cpp" bodystart="223" bodyend="238"/>
        <references refid="namespacelbann_1a4fea7ba21017b49d1e34394b4c20c764" compoundref="random_8cpp" startline="60" endline="62">get_generator</references>
        <referencedby refid="namespacelbann_1a2fe8cea17a147566b73260f557b51006" compoundref="random_8hpp" startline="81" endline="90">fast_rand_int_pow2</referencedby>
        <referencedby refid="classlbann_1_1DataGenerator_1a8248cc6ea186c23147887ca83b1c4bd7" compoundref="lbann__data__generator_8cpp" startline="55" endline="62">lbann::DataGenerator::load</referencedby>
        <referencedby refid="namespacelbann_1a7336c565aa23c1dab784530c581db3d1" compoundref="random_8cpp" startline="183" endline="190">uniform_fill</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1aedcfce41af2eae595ce58b1180f66bd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lbann::count_sorter</definition>
        <argsstring>(const std::pair&lt; std::string, long &gt; &amp;a, const std::pair&lt; std::string, long &gt; &amp;b)</argsstring>
        <name>count_sorter</name>
        <param>
          <type>const std::pair&lt; std::string, long &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const std::pair&lt; std::string, long &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/stack_profiler.cpp" line="103" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/stack_profiler.cpp" bodystart="103" bodyend="105"/>
        <referencedby refid="classlbann_1_1stack__profiler_1a27d55f6551cf445d3d0e9836858f6872" compoundref="stack__profiler_8cpp" startline="107" endline="132">lbann::stack_profiler::print</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a604ae9da0173b8be2bfb6877997d6d5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::entrywise_mean_and_stdev</definition>
        <argsstring>(const Mat &amp;data, DataType &amp;mean, DataType &amp;stdev)</argsstring>
        <name>entrywise_mean_and_stdev</name>
        <param>
          <type>const <ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>DataType &amp;</type>
          <declname>mean</declname>
        </param>
        <param>
          <type>DataType &amp;</type>
          <declname>stdev</declname>
        </param>
        <briefdescription>
<para>Compute mean and standard deviation over matrix entries. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Input matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>means</parametername>
</parameternamelist>
<parameterdescription>
<para>Mean value (output). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stdevs</parametername>
</parameternamelist>
<parameterdescription>
<para>Standard deviation (output). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/statistics.cpp" line="32" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/statistics.cpp" bodystart="32" bodyend="65"/>
        <references refid="namespacelbann_1_1cnpy__utils_1a9ac86d96ccb1f8b4b2ea16441738781f" compoundref="cnpy__utils_8hpp" startline="52" endline="59">lbann::cnpy_utils::data</references>
        <referencedby refid="classlbann_1_1lbann__image__preprocessor_1ab499dd9f11d98998b5902d639f70fa8e" compoundref="image__preprocessor_8cpp" startline="149" endline="164">lbann::lbann_image_preprocessor::mean_subtraction</referencedby>
        <referencedby refid="classlbann_1_1lbann__image__preprocessor_1af9fcb483843230008a53d60c12975f61" compoundref="image__preprocessor_8cpp" startline="166" endline="189">lbann::lbann_image_preprocessor::unit_variance</referencedby>
        <referencedby refid="classlbann_1_1lbann__image__preprocessor_1aec67fb0dc7a1f5d718d5bb2e226f9b7a" compoundref="image__preprocessor_8cpp" startline="213" endline="238">lbann::lbann_image_preprocessor::z_score</referencedby>
        <referencedby refid="classlbann_1_1r2__metric_1a06c84d7944d1d5be896de6b98950e05e" compoundref="r2_8cpp" startline="32" endline="72">lbann::r2_metric::evaluate_compute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a99fdd84cb5f060ac1c78ec66769669ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::entrywise_mean_and_stdev</definition>
        <argsstring>(const AbsDistMat &amp;data, DataType &amp;mean, DataType &amp;stdev)</argsstring>
        <name>entrywise_mean_and_stdev</name>
        <param>
          <type>const <ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>DataType &amp;</type>
          <declname>mean</declname>
        </param>
        <param>
          <type>DataType &amp;</type>
          <declname>stdev</declname>
        </param>
        <briefdescription>
<para>Compute mean and standard deviation over matrix entries. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Input matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>means</parametername>
</parameternamelist>
<parameterdescription>
<para>Mean value (output). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stdevs</parametername>
</parameternamelist>
<parameterdescription>
<para>Standard deviation (output). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/statistics.cpp" line="67" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/statistics.cpp" bodystart="67" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a213d429a27c3e8676a3ebec40c24005c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::columnwise_mean_and_stdev</definition>
        <argsstring>(const Mat &amp;data, Mat &amp;means, Mat &amp;stdevs)</argsstring>
        <name>columnwise_mean_and_stdev</name>
        <param>
          <type>const <ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>means</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>stdevs</declname>
        </param>
        <briefdescription>
<para>Compute column-wise means and standard deviations. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Input matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>means</parametername>
</parameternamelist>
<parameterdescription>
<para>Mean vector. Output as a row vector with same number of columns as &apos;data&apos;. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stdevs</parametername>
</parameternamelist>
<parameterdescription>
<para>Standard deviation vector. Output as a row vector with same number of columns as &apos;data&apos;. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/statistics.cpp" line="100" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/statistics.cpp" bodystart="100" bodyend="133"/>
        <references refid="namespacelbann_1_1cnpy__utils_1a9ac86d96ccb1f8b4b2ea16441738781f" compoundref="cnpy__utils_8hpp" startline="52" endline="59">lbann::cnpy_utils::data</references>
        <referencedby refid="classlbann_1_1pearson__correlation__metric_1a28453718aa09d609ef5ab157823d8c24" compoundref="pearson__correlation_8cpp" startline="135" endline="163">lbann::pearson_correlation_metric::evaluate_compute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1ab043d2f2f9dea0ee861aff3a38216b24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::columnwise_sums_and_sqsums</definition>
        <argsstring>(const AbsDistMat &amp;data, AbsDistMat &amp;sums, AbsDistMat &amp;sqsums)</argsstring>
        <name>columnwise_sums_and_sqsums</name>
        <param>
          <type>const <ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref> &amp;</type>
          <declname>sums</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref> &amp;</type>
          <declname>sqsums</declname>
        </param>
        <briefdescription>
<para>Compute column-wise sum and sqsum. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000007"><xreftitle>Todo</xreftitle><xrefdescription><para>Numerically stable implementation </para></xrefdescription></xrefsect></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Input matrix in U,V format. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sum</parametername>
</parameternamelist>
<parameterdescription>
<para>Sum vector in STAR,V format. Output as a row vector with same number of columns as &apos;data&apos;. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sqsum</parametername>
</parameternamelist>
<parameterdescription>
<para>Sum of squared vector in STAR,V format. Output as a row vector with same number of columns as &apos;data&apos;. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/statistics.cpp" line="136" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/statistics.cpp" bodystart="136" bodyend="182"/>
        <referencedby refid="namespacelbann_1a085b697db535c10a6fd6689cc4445bd4" compoundref="statistics_8cpp" startline="184" endline="216">columnwise_mean_and_stdev</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a085b697db535c10a6fd6689cc4445bd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::columnwise_mean_and_stdev</definition>
        <argsstring>(const AbsDistMat &amp;data, AbsDistMat &amp;means, AbsDistMat &amp;stdevs)</argsstring>
        <name>columnwise_mean_and_stdev</name>
        <param>
          <type>const <ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref> &amp;</type>
          <declname>means</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref> &amp;</type>
          <declname>stdevs</declname>
        </param>
        <briefdescription>
<para>Compute column-wise means and standard deviations. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000008"><xreftitle>Todo</xreftitle><xrefdescription><para>Numerically stable implementation </para></xrefdescription></xrefsect></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Input matrix in U,V format. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>means</parametername>
</parameternamelist>
<parameterdescription>
<para>Mean vector in STAR,V format. Output as a row vector with same number of columns as &apos;data&apos;. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stdevs</parametername>
</parameternamelist>
<parameterdescription>
<para>Standard deviation vector in STAR,V format. Output as a row vector with same number of columns as &apos;data&apos;. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/statistics.cpp" line="184" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/statistics.cpp" bodystart="184" bodyend="216"/>
        <references refid="namespacelbann_1ab043d2f2f9dea0ee861aff3a38216b24" compoundref="statistics_8cpp" startline="136" endline="182">columnwise_sums_and_sqsums</references>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a0c713b77f8e191addc1e0210037f9e5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::rowwise_mean_and_stdev</definition>
        <argsstring>(const Mat &amp;data, Mat &amp;means, Mat &amp;stdevs)</argsstring>
        <name>rowwise_mean_and_stdev</name>
        <param>
          <type>const <ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>means</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>stdevs</declname>
        </param>
        <briefdescription>
<para>Compute row-wise means and standard deviations. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Input matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>means</parametername>
</parameternamelist>
<parameterdescription>
<para>Mean vector. Output as a column vector with same number of rows as &apos;data&apos;. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stdevs</parametername>
</parameternamelist>
<parameterdescription>
<para>Standard deviation vector. Output as a column vector with same number of rows as &apos;data&apos;. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/statistics.cpp" line="218" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/statistics.cpp" bodystart="218" bodyend="277"/>
        <references refid="namespacelbann_1_1cnpy__utils_1a9ac86d96ccb1f8b4b2ea16441738781f" compoundref="cnpy__utils_8hpp" startline="52" endline="59">lbann::cnpy_utils::data</references>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a6b342b3e5b3fbb08b97b6d90aa68d121" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::rowwise_sums_and_sqsums</definition>
        <argsstring>(const AbsDistMat &amp;data, AbsDistMat &amp;sums, AbsDistMat &amp;sqsums)</argsstring>
        <name>rowwise_sums_and_sqsums</name>
        <param>
          <type>const <ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref> &amp;</type>
          <declname>sums</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref> &amp;</type>
          <declname>sqsums</declname>
        </param>
        <briefdescription>
<para>Compute row-wise sum and sum of squares. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000009"><xreftitle>Todo</xreftitle><xrefdescription><para>Numerically stable implementation </para></xrefdescription></xrefsect></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Input matrix in U,V format. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sum</parametername>
</parameternamelist>
<parameterdescription>
<para>Sum vector in U,STAR format. Output as a column vector with same number of rows as &apos;data&apos;. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sqsum</parametername>
</parameternamelist>
<parameterdescription>
<para>Sum of squared in U,STAR format. Output as a column vector with same number of rows as &apos;data&apos;. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/statistics.cpp" line="280" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/statistics.cpp" bodystart="280" bodyend="335"/>
        <referencedby refid="namespacelbann_1a9b1fd2f864f421aa0bd9f8582ad87c14" compoundref="statistics_8cpp" startline="338" endline="363">rowwise_mean_and_stdev</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a9b1fd2f864f421aa0bd9f8582ad87c14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::rowwise_mean_and_stdev</definition>
        <argsstring>(const AbsDistMat &amp;data, AbsDistMat &amp;means, AbsDistMat &amp;stdevs)</argsstring>
        <name>rowwise_mean_and_stdev</name>
        <param>
          <type>const <ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref> &amp;</type>
          <declname>means</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref> &amp;</type>
          <declname>stdevs</declname>
        </param>
        <briefdescription>
<para>Compute row-wise means and standard deviations. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000010"><xreftitle>Todo</xreftitle><xrefdescription><para>Numerically stable implementation </para></xrefdescription></xrefsect></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Input matrix in U,V format. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>means</parametername>
</parameternamelist>
<parameterdescription>
<para>Mean vector in U,STAR format. Output as a column vector with same number of rows as &apos;data&apos;. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stdevs</parametername>
</parameternamelist>
<parameterdescription>
<para>Standard deviation vector in U,STAR format. Output as a column vector with same number of rows as &apos;data&apos;. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/statistics.cpp" line="338" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/statistics.cpp" bodystart="338" bodyend="363"/>
        <references refid="namespacelbann_1a6b342b3e5b3fbb08b97b6d90aa68d121" compoundref="statistics_8cpp" startline="280" endline="335">rowwise_sums_and_sqsums</references>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a47ac6e95c1670424f9867770fd5b9f60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::columnwise_covariance</definition>
        <argsstring>(const AbsDistMat &amp;data1, const AbsDistMat &amp;data2, const AbsDistMat &amp;means1, const AbsDistMat &amp;means2, AbsDistMat &amp;cov)</argsstring>
        <name>columnwise_covariance</name>
        <param>
          <type>const <ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref> &amp;</type>
          <declname>data1</declname>
        </param>
        <param>
          <type>const <ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref> &amp;</type>
          <declname>data2</declname>
        </param>
        <param>
          <type>const <ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref> &amp;</type>
          <declname>means1</declname>
        </param>
        <param>
          <type>const <ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref> &amp;</type>
          <declname>means2</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref> &amp;</type>
          <declname>cov</declname>
        </param>
        <briefdescription>
<para>Compute column-wise covariances. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data1</parametername>
</parameternamelist>
<parameterdescription>
<para>Input matrix in U,V format. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data2</parametername>
</parameternamelist>
<parameterdescription>
<para>Input matrix in U,V format. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>means1</parametername>
</parameternamelist>
<parameterdescription>
<para>Column-wise mean vector for data1 in STAR,V format. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>means2</parametername>
</parameternamelist>
<parameterdescription>
<para>Column-wise mean vector for data2 in STAR,V format. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cov</parametername>
</parameternamelist>
<parameterdescription>
<para>Covariance vector in STAR,V format. Output as a row vector with same number of columns as &apos;data1&apos;. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/statistics.cpp" line="365" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/statistics.cpp" bodystart="365" bodyend="417"/>
        <referencedby refid="classlbann_1_1pearson__correlation__metric_1a28453718aa09d609ef5ab157823d8c24" compoundref="pearson__correlation_8cpp" startline="135" endline="163">lbann::pearson_correlation_metric::evaluate_compute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a02f197bc772ef04f1ac51eb191a02cab" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool lbann::endsWith</definition>
        <argsstring>(const std::string mainStr, const std::string &amp;toMatch)</argsstring>
        <name>endsWith</name>
        <param>
          <type>const std::string</type>
          <declname>mainStr</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>toMatch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/base.hpp" line="142" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/base.hpp" bodystart="142" bodyend="149"/>
        <referencedby refid="classlbann_1_1generic__data__reader_1a94a6db0b62d4c98202ef309eb76b220c" compoundref="data__reader_8cpp" startline="411" endline="417">lbann::generic_data_reader::set_file_dir</referencedby>
        <referencedby refid="proto__common_8hpp_1a32d4c032abc19c091fa65ace580fc057" compoundref="proto__common_8cpp" startline="41" endline="270">init_data_readers</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a93facff1f3ce4e10e5d25cf80077fb93" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void lbann::set_minibatch_item</definition>
        <argsstring>(Mat &amp;M, const int mb_idx, const T *const ptr, const size_t count)</argsstring>
        <name>set_minibatch_item</name>
        <param>
          <type><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref> &amp;</type>
          <declname>M</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>mb_idx</declname>
        </param>
        <param>
          <type>const T *const</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/data_readers/data_reader_jag.hpp" line="185" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/data_readers/data_reader_jag.hpp" bodystart="185" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a8830dea8eef0ab5b93d68e2358ceeb1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lbann::makedir</definition>
        <argsstring>(const char *dirname)</argsstring>
        <name>makedir</name>
        <param>
          <type>const char *</type>
          <declname>dirname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/io/file_io.hpp" line="38" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/io/file_io.cpp" bodystart="49" bodyend="77"/>
        <references refid="file__io_8cpp_1ab048c6f9fcbcfaa57ce68b00263dbebe" compoundref="file__io_8cpp" startline="44">comm</references>
        <references refid="file__io_8cpp_1a8a08135bfddb4c7375212d2ace2e24b7" compoundref="file__io_8cpp" startline="43">mode_dir</references>
        <referencedby refid="classlbann_1_1lbann__callback__checkpoint_1a23b6f5abb924b2c4d0694e98c7d6f4d5" compoundref="callback__checkpoint_8cpp" startline="145" endline="202">lbann::lbann_callback_checkpoint::checkpointShared</referencedby>
        <referencedby refid="classlbann_1_1persist_1a32a8f71995b674a62b21087ec4be9575" compoundref="persist_8cpp" startline="204" endline="255">lbann::persist::open_checkpoint</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1aefae2a9fc9d742ece0fa8ca7ed9ee137" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lbann::exists</definition>
        <argsstring>(const char *filename)</argsstring>
        <name>exists</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/io/file_io.hpp" line="40" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/io/file_io.cpp" bodystart="79" bodyend="96"/>
        <references refid="file__io_8cpp_1ab048c6f9fcbcfaa57ce68b00263dbebe" compoundref="file__io_8cpp" startline="44">comm</references>
        <referencedby refid="classlbann_1_1persist_1aa98be93f33b510e5b506b61de6bd79bd" compoundref="persist_8cpp" startline="362" endline="387">lbann::persist::read_distmat</referencedby>
        <referencedby refid="namespacelbann_1a0306ed35d6d90cf4fbdce7a72ad62ca7" compoundref="persist_8cpp" startline="619" endline="634">read_distmat</referencedby>
        <referencedby refid="proto__common_8hpp_1a4f1af470c45e9ed06039685e5f72ea4a" compoundref="proto__common_8cpp" startline="695" endline="779">save_session</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a6084b9319eea1997f8446fa3e6879532" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lbann::openread</definition>
        <argsstring>(const char *filename)</argsstring>
        <name>openread</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/io/file_io.hpp" line="42" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/io/file_io.cpp" bodystart="98" bodyend="104"/>
        <referencedby refid="namespacelbann_1abebab8298e56db6a455a9ed08ab42bb4" compoundref="callback__checkpoint_8cpp" startline="124" endline="143">read_latest</referencedby>
        <referencedby refid="classlbann_1_1persist_1a123cbc1d2b693640c784a45cbc6d2d97" compoundref="persist_8cpp" startline="275" endline="326">lbann::persist::open_restart</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a38dd30b2ae8214f6595708264369ddb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lbann::closeread</definition>
        <argsstring>(int fd, const char *filename)</argsstring>
        <name>closeread</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/io/file_io.hpp" line="43" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/io/file_io.cpp" bodystart="106" bodyend="117"/>
        <referencedby refid="namespacelbann_1abebab8298e56db6a455a9ed08ab42bb4" compoundref="callback__checkpoint_8cpp" startline="124" endline="143">read_latest</referencedby>
        <referencedby refid="classlbann_1_1persist_1afeef05548e1d17bd09d3805607edd621" compoundref="persist_8cpp" startline="328" endline="340">lbann::persist::close_restart</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1af596e6d2be603e9cf808c98f5412490a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lbann::openwrite</definition>
        <argsstring>(const char *filename)</argsstring>
        <name>openwrite</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/io/file_io.hpp" line="45" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/io/file_io.cpp" bodystart="119" bodyend="131"/>
        <referencedby refid="namespacelbann_1a35a39e949cfd1d7f8c15f94e4d44ecff" compoundref="callback__checkpoint_8cpp" startline="108" endline="122">write_latest</referencedby>
        <referencedby refid="classlbann_1_1persist_1a32a8f71995b674a62b21087ec4be9575" compoundref="persist_8cpp" startline="204" endline="255">lbann::persist::open_checkpoint</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1aceeccedbbafccfa071b21ee99be794a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lbann::closewrite</definition>
        <argsstring>(int fd, const char *filename)</argsstring>
        <name>closewrite</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/io/file_io.hpp" line="46" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/io/file_io.cpp" bodystart="133" bodyend="153"/>
        <referencedby refid="namespacelbann_1a35a39e949cfd1d7f8c15f94e4d44ecff" compoundref="callback__checkpoint_8cpp" startline="108" endline="122">write_latest</referencedby>
        <referencedby refid="classlbann_1_1persist_1ab099939d0d91101fbfaf2b85e78be032" compoundref="persist_8cpp" startline="257" endline="273">lbann::persist::close_checkpoint</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1af640a9302803636e0b5deb110c1aee57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lbann::writeDist</definition>
        <argsstring>(int fd, const char *filename, const DistMat &amp;M, uint64_t *bytes)</argsstring>
        <name>writeDist</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const <ref refid="base_8hpp_1a0fab5387556805cfeac3e7e567bf66c5" kindref="member">DistMat</ref> &amp;</type>
          <declname>M</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>Given an open file descriptor, file name, and a matrix, write the matrix to the file descriptor, return the number of bytes written. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/io/persist.hpp" line="104" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/io/persist.cpp" bodystart="66" bodyend="115"/>
        <references refid="structlayer__header_1a325142c0466170c6627710106275c7fd" compoundref="persist_8cpp" startline="56">layer_header::rank</references>
        <references refid="structlayer__header_1af1f45c9c74db048ea424114418f22d50" compoundref="persist_8cpp" startline="57">layer_header::width</references>
        <references refid="structlayer__header_1ad986e4b92e5b455e066fd349725c6bd9" compoundref="persist_8cpp" startline="58">layer_header::height</references>
        <references refid="structlayer__header_1abb4a41358a68da8466879972fbcd034d" compoundref="persist_8cpp" startline="59">layer_header::localwidth</references>
        <references refid="structlayer__header_1a9ba1c0891787cf3b01611ef27e575a8b" compoundref="persist_8cpp" startline="60">layer_header::localheight</references>
        <references refid="structlayer__header_1a5b4ee2de6371d894b5646b74ceb5c321" compoundref="persist_8cpp" startline="61">layer_header::ldim</references>
        <referencedby refid="classlbann_1_1persist_1ad759657d69e88a491729ce8e4bf9510e" compoundref="persist_8hpp" startline="69" endline="71">lbann::persist::get_bytes</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1ab2c2ad3c98b9991a6307b123617dbfb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lbann::readDist</definition>
        <argsstring>(int fd, const char *filename, DistMat &amp;M, uint64_t *bytes)</argsstring>
        <name>readDist</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a0fab5387556805cfeac3e7e567bf66c5" kindref="member">DistMat</ref> &amp;</type>
          <declname>M</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>Given an open file descriptor, file name, and a matrix, read the matrix from the file descriptor, return the number of bytes read. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/io/persist.hpp" line="105" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/io/persist.cpp" bodystart="119" bodyend="185"/>
        <references refid="structlayer__header_1ad986e4b92e5b455e066fd349725c6bd9" compoundref="persist_8cpp" startline="58">layer_header::height</references>
        <references refid="structlayer__header_1af1f45c9c74db048ea424114418f22d50" compoundref="persist_8cpp" startline="57">layer_header::width</references>
        <referencedby refid="classlbann_1_1persist_1ad759657d69e88a491729ce8e4bf9510e" compoundref="persist_8hpp" startline="69" endline="71">lbann::persist::get_bytes</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1aa7b4e710f444588dfcf4188b84b33420" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lbann::write_distmat</definition>
        <argsstring>(int fd, const char *name, DistMat *M, uint64_t *bytes)</argsstring>
        <name>write_distmat</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a0fab5387556805cfeac3e7e567bf66c5" kindref="member">DistMat</ref> *</type>
          <declname>M</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/io/persist.hpp" line="107" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/io/persist.cpp" bodystart="609" bodyend="617"/>
        <referencedby refid="classlbann_1_1persist_1ad759657d69e88a491729ce8e4bf9510e" compoundref="persist_8hpp" startline="69" endline="71">lbann::persist::get_bytes</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a0306ed35d6d90cf4fbdce7a72ad62ca7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lbann::read_distmat</definition>
        <argsstring>(int fd, const char *name, DistMat *M, uint64_t *bytes)</argsstring>
        <name>read_distmat</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a0fab5387556805cfeac3e7e567bf66c5" kindref="member">DistMat</ref> *</type>
          <declname>M</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/io/persist.hpp" line="108" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/io/persist.cpp" bodystart="619" bodyend="634"/>
        <references refid="namespacelbann_1aefae2a9fc9d742ece0fa8ca7ed9ee137" compoundref="file__io_8cpp" startline="79" endline="96">exists</references>
        <referencedby refid="classlbann_1_1persist_1ad759657d69e88a491729ce8e4bf9510e" compoundref="persist_8hpp" startline="69" endline="71">lbann::persist::get_bytes</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1aed95061796f19fa1648dcc99dc335abd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lbann::write_bytes</definition>
        <argsstring>(int fd, const char *name, const void *buf, size_t size)</argsstring>
        <name>write_bytes</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/io/persist.hpp" line="110" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/io/persist.cpp" bodystart="636" bodyend="645"/>
        <referencedby refid="classlbann_1_1persist_1ad759657d69e88a491729ce8e4bf9510e" compoundref="persist_8hpp" startline="69" endline="71">lbann::persist::get_bytes</referencedby>
        <referencedby refid="classlbann_1_1persist_1a742334568de0aca958dbaf7bbabd3cba" compoundref="persist_8cpp" startline="415" endline="417">lbann::persist::write_uint32</referencedby>
        <referencedby refid="classlbann_1_1persist_1aced95e3bc711276b072af97b65ef9fc1" compoundref="persist_8cpp" startline="423" endline="425">lbann::persist::write_uint64</referencedby>
        <referencedby refid="classlbann_1_1persist_1a199cd86b1e1f0fd5f2d0458fc6d25828" compoundref="persist_8cpp" startline="551" endline="554">lbann::persist::write_int32_contig</referencedby>
        <referencedby refid="classlbann_1_1persist_1ab5be1e98f9d962c41fc9c3f2ac918c6e" compoundref="persist_8cpp" startline="561" endline="563">lbann::persist::write_float</referencedby>
        <referencedby refid="classlbann_1_1persist_1ad29ebcbacdef90a91a9d474d4d6e1bcd" compoundref="persist_8cpp" startline="569" endline="571">lbann::persist::write_double</referencedby>
        <referencedby refid="classlbann_1_1persist_1a5edc3f9cc3540b50d417993da2a6b5ce" compoundref="persist_8cpp" startline="577" endline="579">lbann::persist::write_datatype</referencedby>
        <referencedby refid="classlbann_1_1persist_1a04afef84e7caa8509e65367225ceeba5" compoundref="persist_8cpp" startline="585" endline="587">lbann::persist::write_string</referencedby>
        <referencedby refid="namespacelbann_1a3a801c9f48655f81b886af4bff083f27" compoundref="persist_8cpp" startline="658" endline="660">write_uint32</referencedby>
        <referencedby refid="namespacelbann_1a234f8c7b9bbc2d9310d3e40314eb497c" compoundref="persist_8cpp" startline="666" endline="668">write_uint64</referencedby>
        <referencedby refid="namespacelbann_1a917727ad7e4f0dfd6d5a609cdc6dd9e2" compoundref="persist_8cpp" startline="674" endline="677">write_int32_contig</referencedby>
        <referencedby refid="namespacelbann_1a73339e4587f8ce7f653be03a3a6cbcd0" compoundref="persist_8cpp" startline="684" endline="686">write_float</referencedby>
        <referencedby refid="namespacelbann_1a827b050911630a21f248b128e3859044" compoundref="persist_8cpp" startline="692" endline="694">write_double</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a85385e2a9e058b6720300b4cbdd2b1d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lbann::read_bytes</definition>
        <argsstring>(int fd, const char *name, void *buf, size_t size)</argsstring>
        <name>read_bytes</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/io/persist.hpp" line="111" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/io/persist.cpp" bodystart="647" bodyend="656"/>
        <referencedby refid="classlbann_1_1persist_1ad759657d69e88a491729ce8e4bf9510e" compoundref="persist_8hpp" startline="69" endline="71">lbann::persist::get_bytes</referencedby>
        <referencedby refid="classlbann_1_1persist_1ace1ebb58e2570693cdce0ebd2817113b" compoundref="persist_8cpp" startline="419" endline="421">lbann::persist::read_uint32</referencedby>
        <referencedby refid="classlbann_1_1persist_1aa6d996db3714a7ae055adac0d8e8ac63" compoundref="persist_8cpp" startline="427" endline="429">lbann::persist::read_uint64</referencedby>
        <referencedby refid="classlbann_1_1persist_1a2944c32f6634223c0902b38a697a0957" compoundref="persist_8cpp" startline="556" endline="559">lbann::persist::read_int32_contig</referencedby>
        <referencedby refid="classlbann_1_1persist_1ac5e659a6612e5f2911e195fc1b6c045b" compoundref="persist_8cpp" startline="565" endline="567">lbann::persist::read_float</referencedby>
        <referencedby refid="classlbann_1_1persist_1ae3a0b96ece72901bb0a05d26a4eb4791" compoundref="persist_8cpp" startline="573" endline="575">lbann::persist::read_double</referencedby>
        <referencedby refid="classlbann_1_1persist_1a1e84eff891affad6001f3c5fa803cae2" compoundref="persist_8cpp" startline="581" endline="583">lbann::persist::read_datatype</referencedby>
        <referencedby refid="classlbann_1_1persist_1a19c0a5dbee697aff0a5a5588f2d370b9" compoundref="persist_8cpp" startline="589" endline="591">lbann::persist::read_string</referencedby>
        <referencedby refid="namespacelbann_1aedcde4d93c4feb5090c927de1c45b90d" compoundref="persist_8cpp" startline="662" endline="664">read_uint32</referencedby>
        <referencedby refid="namespacelbann_1a7ca20ac4f0ec9feaa2f6d5b6ef3c8865" compoundref="persist_8cpp" startline="670" endline="672">read_uint64</referencedby>
        <referencedby refid="namespacelbann_1acb5b0f1b30c9ab2fba700bb953515810" compoundref="persist_8cpp" startline="679" endline="682">read_int32_contig</referencedby>
        <referencedby refid="namespacelbann_1acd0595f8c31773a3a46f477a83e4c0f3" compoundref="persist_8cpp" startline="688" endline="690">read_float</referencedby>
        <referencedby refid="namespacelbann_1a66f98f36cf54dca622f1186309961dd4" compoundref="persist_8cpp" startline="696" endline="698">read_double</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a3a801c9f48655f81b886af4bff083f27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lbann::write_uint32</definition>
        <argsstring>(int fd, const char *name, uint32_t val)</argsstring>
        <name>write_uint32</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/io/persist.hpp" line="113" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/io/persist.cpp" bodystart="658" bodyend="660"/>
        <references refid="namespacelbann_1aed95061796f19fa1648dcc99dc335abd" compoundref="persist_8cpp" startline="636" endline="645">write_bytes</references>
        <referencedby refid="classlbann_1_1persist_1ad759657d69e88a491729ce8e4bf9510e" compoundref="persist_8hpp" startline="69" endline="71">lbann::persist::get_bytes</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1aedcde4d93c4feb5090c927de1c45b90d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lbann::read_uint32</definition>
        <argsstring>(int fd, const char *name, uint32_t *val)</argsstring>
        <name>read_uint32</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/io/persist.hpp" line="114" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/io/persist.cpp" bodystart="662" bodyend="664"/>
        <references refid="namespacelbann_1a85385e2a9e058b6720300b4cbdd2b1d0" compoundref="persist_8cpp" startline="647" endline="656">read_bytes</references>
        <referencedby refid="classlbann_1_1persist_1ad759657d69e88a491729ce8e4bf9510e" compoundref="persist_8hpp" startline="69" endline="71">lbann::persist::get_bytes</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a234f8c7b9bbc2d9310d3e40314eb497c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lbann::write_uint64</definition>
        <argsstring>(int fd, const char *name, uint64_t val)</argsstring>
        <name>write_uint64</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/io/persist.hpp" line="116" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/io/persist.cpp" bodystart="666" bodyend="668"/>
        <references refid="namespacelbann_1aed95061796f19fa1648dcc99dc335abd" compoundref="persist_8cpp" startline="636" endline="645">write_bytes</references>
        <referencedby refid="classlbann_1_1persist_1ad759657d69e88a491729ce8e4bf9510e" compoundref="persist_8hpp" startline="69" endline="71">lbann::persist::get_bytes</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a7ca20ac4f0ec9feaa2f6d5b6ef3c8865" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lbann::read_uint64</definition>
        <argsstring>(int fd, const char *name, uint64_t *val)</argsstring>
        <name>read_uint64</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/io/persist.hpp" line="117" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/io/persist.cpp" bodystart="670" bodyend="672"/>
        <references refid="namespacelbann_1a85385e2a9e058b6720300b4cbdd2b1d0" compoundref="persist_8cpp" startline="647" endline="656">read_bytes</references>
        <referencedby refid="classlbann_1_1persist_1ad759657d69e88a491729ce8e4bf9510e" compoundref="persist_8hpp" startline="69" endline="71">lbann::persist::get_bytes</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a917727ad7e4f0dfd6d5a609cdc6dd9e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lbann::write_int32_contig</definition>
        <argsstring>(int fd, const char *name, const int32_t *buf, uint64_t count)</argsstring>
        <name>write_int32_contig</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/io/persist.hpp" line="119" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/io/persist.cpp" bodystart="674" bodyend="677"/>
        <references refid="namespacelbann_1aed95061796f19fa1648dcc99dc335abd" compoundref="persist_8cpp" startline="636" endline="645">write_bytes</references>
        <referencedby refid="classlbann_1_1persist_1ad759657d69e88a491729ce8e4bf9510e" compoundref="persist_8hpp" startline="69" endline="71">lbann::persist::get_bytes</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1acb5b0f1b30c9ab2fba700bb953515810" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lbann::read_int32_contig</definition>
        <argsstring>(int fd, const char *name, int32_t *buf, uint64_t count)</argsstring>
        <name>read_int32_contig</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/io/persist.hpp" line="120" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/io/persist.cpp" bodystart="679" bodyend="682"/>
        <references refid="namespacelbann_1a85385e2a9e058b6720300b4cbdd2b1d0" compoundref="persist_8cpp" startline="647" endline="656">read_bytes</references>
        <referencedby refid="classlbann_1_1persist_1ad759657d69e88a491729ce8e4bf9510e" compoundref="persist_8hpp" startline="69" endline="71">lbann::persist::get_bytes</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a73339e4587f8ce7f653be03a3a6cbcd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lbann::write_float</definition>
        <argsstring>(int fd, const char *name, float val)</argsstring>
        <name>write_float</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>float</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/io/persist.hpp" line="122" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/io/persist.cpp" bodystart="684" bodyend="686"/>
        <references refid="namespacelbann_1aed95061796f19fa1648dcc99dc335abd" compoundref="persist_8cpp" startline="636" endline="645">write_bytes</references>
        <referencedby refid="classlbann_1_1persist_1ad759657d69e88a491729ce8e4bf9510e" compoundref="persist_8hpp" startline="69" endline="71">lbann::persist::get_bytes</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1acd0595f8c31773a3a46f477a83e4c0f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lbann::read_float</definition>
        <argsstring>(int fd, const char *name, float *val)</argsstring>
        <name>read_float</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/io/persist.hpp" line="123" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/io/persist.cpp" bodystart="688" bodyend="690"/>
        <references refid="namespacelbann_1a85385e2a9e058b6720300b4cbdd2b1d0" compoundref="persist_8cpp" startline="647" endline="656">read_bytes</references>
        <referencedby refid="classlbann_1_1persist_1ad759657d69e88a491729ce8e4bf9510e" compoundref="persist_8hpp" startline="69" endline="71">lbann::persist::get_bytes</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a827b050911630a21f248b128e3859044" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lbann::write_double</definition>
        <argsstring>(int fd, const char *name, double val)</argsstring>
        <name>write_double</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/io/persist.hpp" line="125" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/io/persist.cpp" bodystart="692" bodyend="694"/>
        <references refid="namespacelbann_1aed95061796f19fa1648dcc99dc335abd" compoundref="persist_8cpp" startline="636" endline="645">write_bytes</references>
        <referencedby refid="classlbann_1_1persist_1ad759657d69e88a491729ce8e4bf9510e" compoundref="persist_8hpp" startline="69" endline="71">lbann::persist::get_bytes</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a66f98f36cf54dca622f1186309961dd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lbann::read_double</definition>
        <argsstring>(int fd, const char *name, double *val)</argsstring>
        <name>read_double</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/io/persist.hpp" line="126" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/io/persist.cpp" bodystart="696" bodyend="698"/>
        <references refid="namespacelbann_1a85385e2a9e058b6720300b4cbdd2b1d0" compoundref="persist_8cpp" startline="647" endline="656">read_bytes</references>
        <referencedby refid="classlbann_1_1persist_1ad759657d69e88a491729ce8e4bf9510e" compoundref="persist_8hpp" startline="69" endline="71">lbann::persist::get_bytes</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1add2807d7303bd96d2804f0b14e894c68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lbann::write_string</definition>
        <argsstring>(int fd, const char *name, const char *buf, size_t size)</argsstring>
        <name>write_string</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/io/persist.hpp" line="128" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/io/persist.cpp" bodystart="700" bodyend="709"/>
        <referencedby refid="classlbann_1_1persist_1ad759657d69e88a491729ce8e4bf9510e" compoundref="persist_8hpp" startline="69" endline="71">lbann::persist::get_bytes</referencedby>
        <referencedby refid="namespacelbann_1a35a39e949cfd1d7f8c15f94e4d44ecff" compoundref="callback__checkpoint_8cpp" startline="108" endline="122">write_latest</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a784843ebce0e596dba31c1d981a7f087" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lbann::read_string</definition>
        <argsstring>(int fd, const char *name, char *buf, size_t size)</argsstring>
        <name>read_string</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/io/persist.hpp" line="129" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/io/persist.cpp" bodystart="711" bodyend="720"/>
        <referencedby refid="classlbann_1_1persist_1ad759657d69e88a491729ce8e4bf9510e" compoundref="persist_8hpp" startline="69" endline="71">lbann::persist::get_bytes</referencedby>
        <referencedby refid="namespacelbann_1abebab8298e56db6a455a9ed08ab42bb4" compoundref="callback__checkpoint_8cpp" startline="124" endline="143">read_latest</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1aedccb3bf2d674ccb5573ab9960720731" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::lbann_report_exception</definition>
        <argsstring>(lbann_exception &amp;e, lbann_comm *comm=nullptr, std::ostream &amp;os=std::cerr)</argsstring>
        <name>lbann_report_exception</name>
        <param>
          <type><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="classlbann_1_1lbann__comm" kindref="compound">lbann_comm</ref> *</type>
          <declname>comm</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
          <defval>std::cerr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/exception.hpp" line="55" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/exception.hpp" bodystart="55" bodyend="65"/>
        <references refid="classlbann_1_1lbann__exception_1ad36592ddd0ff6a24f31ec6a31b83e920" compoundref="exception_8hpp" startline="47" endline="49">lbann::lbann_exception::what</references>
        <references refid="file__io_8cpp_1ab048c6f9fcbcfaa57ce68b00263dbebe" compoundref="file__io_8cpp" startline="44">comm</references>
        <referencedby refid="classlbann_1_1generic__data__reader_1a46b658ba4f6b746632b683568ab76f77" compoundref="data__reader_8cpp" startline="63" endline="132">lbann::generic_data_reader::fetch_data</referencedby>
        <referencedby refid="classlbann_1_1generic__data__reader_1a7e624f92e38b0ee4224a6afaaf2acbdb" compoundref="data__reader_8cpp" startline="134" endline="177">lbann::generic_data_reader::fetch_labels</referencedby>
        <referencedby refid="classlbann_1_1generic__data__reader_1aeaa97d3683add33d1c6d69a769dd6a20" compoundref="data__reader_8cpp" startline="179" endline="214">lbann::generic_data_reader::fetch_responses</referencedby>
        <referencedby refid="classlbann_1_1data__reader__mnist__siamese_1ac44a7118e94338e14f7b6a9e33239155" compoundref="data__reader__mnist__siamese_8cpp" startline="90" endline="146">lbann::data_reader_mnist_siamese::fetch_data</referencedby>
        <referencedby refid="classlbann_1_1data__reader__mnist__siamese_1a1709140fcdcea9baaaf1bab7a48f3bce" compoundref="data__reader__mnist__siamese_8cpp" startline="152" endline="195">lbann::data_reader_mnist_siamese::fetch_labels</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a9c2447a7dfde8f6fb73c5f12f20046f9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
            <defval>std::vector&lt;unsigned char&gt;</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool lbann::load_file</definition>
        <argsstring>(const std::string filename, T &amp;buf)</argsstring>
        <name>load_file</name>
        <param>
          <type>const std::string</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Load a file into a buffer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/file_utils.hpp" line="68" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/file_utils.hpp" bodystart="68" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a0fd8bc0ad31da913a124683f5ec4fdf1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::__swapEndianInt</definition>
        <argsstring>(unsigned int &amp;ui)</argsstring>
        <name>__swapEndianInt</name>
        <param>
          <type>unsigned int &amp;</type>
          <declname>ui</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/file_utils.hpp" line="90" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/file_utils.hpp" bodystart="90" bodyend="92"/>
        <referencedby refid="namespacelbann_1a59f65281406da5bc57f49d8ec682be2d" compoundref="data__reader__mnist_8cpp" startline="74" endline="130">load_mnist_data</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a840c9f1d5f27bc30d081fb90529889e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; lbann::glob</definition>
        <argsstring>(const std::string &amp;pattern)</argsstring>
        <name>glob</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>pattern</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Wrapper around glob, which searches for paths matching pattern according to the shell. Note this does not do tilde expansion. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/glob.hpp" line="42" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/glob.hpp" bodystart="42" bodyend="59"/>
        <referencedby refid="classlbann_1_1mesh__reader_1a445c5a63f82da4d94905a205783dc377" compoundref="data__reader__mesh_8cpp" startline="37" endline="66">lbann::mesh_reader::load</referencedby>
        <referencedby refid="proto__common_8hpp_1a32d4c032abc19c091fa65ace580fc057" compoundref="proto__common_8cpp" startline="41" endline="270">init_data_readers</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1abee17f56525b3894b0d3621a307faebd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lbann::get_num_pus</definition>
        <argsstring>()</argsstring>
        <name>get_num_pus</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/omp_diagnostics.hpp" line="32" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a4b08fd1410911d1303176bafa031fcb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lbann::get_affinity</definition>
        <argsstring>(uint8_t *cpus, uint8_t *count)</argsstring>
        <name>get_affinity</name>
        <param>
          <type>uint8_t *</type>
          <declname>cpus</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/omp_diagnostics.hpp" line="33" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a31acedf53bb67180043939832c0220d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::th_print_affinity</definition>
        <argsstring>(int rank, int np, char *host)</argsstring>
        <name>th_print_affinity</name>
        <param>
          <type>int</type>
          <declname>rank</declname>
        </param>
        <param>
          <type>int</type>
          <declname>np</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>host</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/omp_diagnostics.hpp" line="34" column="1"/>
        <referencedby refid="namespacelbann_1a26debfaa06e8490c7f258ed7923870c7" compoundref="omp__diagnostics_8cpp" startline="198" endline="240">display_omp_setup</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a4fd83a86cf27ca7bc1e01576a5ee36e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::print_affinity</definition>
        <argsstring>(int rank, int np, char *host)</argsstring>
        <name>print_affinity</name>
        <param>
          <type>int</type>
          <declname>rank</declname>
        </param>
        <param>
          <type>int</type>
          <declname>np</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>host</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/omp_diagnostics.hpp" line="35" column="1"/>
        <referencedby refid="namespacelbann_1a26debfaa06e8490c7f258ed7923870c7" compoundref="omp__diagnostics_8cpp" startline="198" endline="240">display_omp_setup</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1aa4ee6571e54db5cee7f263029147e5f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lbann::get_env_var</definition>
        <argsstring>(const char *id)</argsstring>
        <name>get_env_var</name>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/omp_diagnostics.hpp" line="36" column="1"/>
        <referencedby refid="namespacelbann_1a26debfaa06e8490c7f258ed7923870c7" compoundref="omp__diagnostics_8cpp" startline="198" endline="240">display_omp_setup</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a17d55032bad5bb02903f9b1d933836a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lbann::get_sleep_sec</definition>
        <argsstring>()</argsstring>
        <name>get_sleep_sec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/omp_diagnostics.hpp" line="37" column="1"/>
        <referencedby refid="namespacelbann_1a26debfaa06e8490c7f258ed7923870c7" compoundref="omp__diagnostics_8cpp" startline="198" endline="240">display_omp_setup</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1acbd15ead7411cf84db559cc39a82f445" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::print_affinity_subset</definition>
        <argsstring>(int rank, int np, char *host)</argsstring>
        <name>print_affinity_subset</name>
        <param>
          <type>int</type>
          <declname>rank</declname>
        </param>
        <param>
          <type>int</type>
          <declname>np</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>host</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/omp_diagnostics.hpp" line="38" column="1"/>
        <referencedby refid="namespacelbann_1a26debfaa06e8490c7f258ed7923870c7" compoundref="omp__diagnostics_8cpp" startline="198" endline="240">display_omp_setup</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a557aaed6267e7aaf583a75149e9c670c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Generator</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T lbann::fast_rand_int</definition>
        <argsstring>(Generator &amp;g, T max)</argsstring>
        <name>fast_rand_int</name>
        <param>
          <type>Generator &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>T</type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return random integers uniformly distributed in [0, max). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>C++ uniform random bit generator. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>Upper bound on the distribution. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>It turns out that the GCC std::uniform_int_distribution is really slow. That implementation is used by most compilers. This implementation is roughly five times faster than that one. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/random.hpp" line="68" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/random.hpp" bodystart="68" bodyend="74"/>
        <referencedby refid="classlbann_1_1lbann__quantizer_1a4dd4696cbbfd93c73e5fb3c40fcb16c3" compoundref="quantizer_8cpp" startline="45" endline="133">lbann::lbann_quantizer::onebit_quantize</referencedby>
        <referencedby refid="classlbann_1_1lbann__quantizer_1aa5aabc1cb4163e95aee993d9b37b9b32" compoundref="quantizer_8cpp" startline="500" endline="580">lbann::lbann_quantizer::proportion_threshold</referencedby>
        <referencedby refid="classlbann_1_1lbann__quantizer_1af77beca5905ff8601ca9b8231a2a16e0" compoundref="quantizer_8cpp" startline="582" endline="679">lbann::lbann_quantizer::col_reconstruction</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a2fe8cea17a147566b73260f557b51006" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Generator</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T lbann::fast_rand_int_pow2</definition>
        <argsstring>(Generator &amp;g, T max)</argsstring>
        <name>fast_rand_int_pow2</name>
        <param>
          <type>Generator &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>T</type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Faster variant of fast_rand_int in the case that max is a power of 2. Do not call this if max is not a power of 2. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/random.hpp" line="81" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/random.hpp" bodystart="81" bodyend="90"/>
        <references refid="namespacelbann_1acef152f20e422b3aea1a3c1691a533ac" compoundref="random_8cpp" startline="106" endline="145">init_random</references>
        <references refid="file__io_8cpp_1ab048c6f9fcbcfaa57ce68b00263dbebe" compoundref="file__io_8cpp" startline="44">comm</references>
        <references refid="namespacelbann_1a8987701a637ff0e678114aa77e9c4d40" compoundref="random_8cpp" startline="147" endline="164">init_data_seq_random</references>
        <references refid="namespacelbann_1abd116f95f55d0e29d9a0cc386139c4b4" compoundref="random_8cpp" startline="166" endline="173">gaussian_fill</references>
        <references refid="namespacelbann_1ae8bc674a3d676391666524b44cbc4068" compoundref="random_8cpp" startline="175" endline="181">bernoulli_fill</references>
        <references refid="namespacelbann_1a7336c565aa23c1dab784530c581db3d1" compoundref="random_8cpp" startline="183" endline="190">uniform_fill</references>
        <references refid="namespacelbann_1a2f40602f0503f9737325bb267e5c4dcc" compoundref="random_8cpp" startline="192" endline="206">gaussian_fill_procdet</references>
        <references refid="namespacelbann_1ad1e3fe84cfa5257be476de3be805064d" compoundref="random_8cpp" startline="208" endline="221">bernoulli_fill_procdet</references>
        <references refid="namespacelbann_1a93fc1b42be6ab461e803cb48d58c4d81" compoundref="random_8cpp" startline="223" endline="238">uniform_fill_procdet</references>
        <references refid="namespacelbann_1af68acf5b249e5360289d4c6a7bfa8985" compoundref="random_8cpp" startline="72" endline="87">save_rng_to_checkpoint_shared</references>
        <references refid="namespacelbann_1ab76114a0e8cc90c28bcb9e7d01eec89a" compoundref="random_8cpp" startline="89" endline="104">load_rng_from_checkpoint_shared</references>
        <referencedby refid="classlbann_1_1lbann__quantizer_1af77beca5905ff8601ca9b8231a2a16e0" compoundref="quantizer_8cpp" startline="582" endline="679">lbann::lbann_quantizer::col_reconstruction</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a481f0c268c74d3ec8b81861472559870" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DType</type>
            <defval>DataType</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void lbann::rng_bernoulli</definition>
        <argsstring>(const float p, DistMat *m)</argsstring>
        <name>rng_bernoulli</name>
        <param>
          <type>const float</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="base_8hpp_1a0fab5387556805cfeac3e7e567bf66c5" kindref="member">DistMat</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiply entries of distributed matrix with a multiplier generated according to bernoulli_distribution </para>        </detaileddescription>
        <inbodydescription>
<para>the scale for undropped inputs at training time given as <formula id="21">$ 1 / (1 - p) $</formula> </para>        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/random.hpp" line="183" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/random.hpp" bodystart="183" bodyend="196"/>
        <references refid="classlbann_1_1rng_1a1c8a2640dd522c6fc63bf2de09ff3e84" compoundref="random_8hpp" startline="169" endline="171">lbann::rng&lt; DistType, DType &gt;::gen</references>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1a478d36031ff0659893c4322cd856157f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double lbann::get_time</definition>
        <argsstring>()</argsstring>
        <name>get_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return time in fractional seconds since an epoch. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/timer.hpp" line="37" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/timer.hpp" bodystart="37" bodyend="41"/>
        <referencedby refid="classlbann_1_1lbann__callback__timeline_1a67da1376356bf2153ab67489014e0ad4" compoundref="callback__timeline_8hpp" startline="72" endline="72">lbann::lbann_callback_timeline::get_rel_time</referencedby>
        <referencedby refid="classlbann_1_1lbann__callback__imcomm_1a0a425ba562f7637b25cd6ba094e7885b" compoundref="callback__imcomm_8cpp" startline="156" endline="205">lbann::lbann_callback_imcomm::on_backward_prop_end</referencedby>
        <referencedby refid="classlbann_1_1lbann__callback__timeline_1a35a431c2545b4087d6f970d45f86c054" compoundref="callback__timeline_8cpp" startline="35" endline="47">lbann::lbann_callback_timeline::on_train_begin</referencedby>
        <referencedby refid="classlbann_1_1lbann__callback__timer_1a6a8a59707a52b8b570b7605b90fdd159" compoundref="callback__timer_8cpp" startline="35" endline="37">lbann::lbann_callback_timer::batch_timing_begin</referencedby>
        <referencedby refid="classlbann_1_1lbann__callback__timer_1afbf58bd4e1b4c1bcae2e50f78c9507f0" compoundref="callback__timer_8cpp" startline="39" endline="45">lbann::lbann_callback_timer::batch_timing_end</referencedby>
        <referencedby refid="classlbann_1_1lbann__callback__timer_1a5eb2a9d5c0c2fe4a7d7f45369928e2fd" compoundref="callback__timer_8cpp" startline="47" endline="50">lbann::lbann_callback_timer::timing_begin</referencedby>
        <referencedby refid="classlbann_1_1lbann__callback__timer_1a955e59858c6803e96b21fe494cdf3971" compoundref="callback__timer_8cpp" startline="52" endline="166">lbann::lbann_callback_timer::timing_end</referencedby>
        <referencedby refid="classlbann_1_1lbann__comm_1a99bc2f8128f0b0e2ebdf876a3a343635" compoundref="comm_8cpp" startline="376" endline="431">lbann::lbann_comm::recursive_doubling_allreduce_pow2</referencedby>
        <referencedby refid="classlbann_1_1lbann__comm_1ac294fe5fa47f283aba31fa1abfa99438" compoundref="comm_8cpp" startline="433" endline="651">lbann::lbann_comm::pe_ring_allreduce</referencedby>
        <referencedby refid="classlbann_1_1lbann__comm_1a88162511dc2733dccd9c245e6c7ba53b" compoundref="comm_8cpp" startline="653" endline="824">lbann::lbann_comm::ring_allreduce</referencedby>
        <referencedby refid="classlbann_1_1lbann__comm_1a925fcf1c15cb8ff10daed1dc1faed9ac" compoundref="comm_8cpp" startline="826" endline="1003">lbann::lbann_comm::rabenseifner_allreduce</referencedby>
        <referencedby refid="classlbann_1_1data__store__csv_1a184c7e6f27c5e07255b9c889ace02407" compoundref="data__store__csv_8cpp" startline="46" endline="109">lbann::data_store_csv::setup</referencedby>
        <referencedby refid="classlbann_1_1data__store__csv_1acacd039d3ca8caf8958b731a1ce382c6" compoundref="data__store__csv_8cpp" startline="156" endline="221">lbann::data_store_csv::exchange_data</referencedby>
        <referencedby refid="classlbann_1_1data__store__image_1a79280b3aa9a207dfacad2bcc9824ec73" compoundref="data__store__image_8cpp" startline="38" endline="81">lbann::data_store_image::setup</referencedby>
        <referencedby refid="classlbann_1_1data__store__imagenet_1a611aa1734a491c443396a077b49fe4fe" compoundref="data__store__imagenet_8cpp" startline="36" endline="82">lbann::data_store_imagenet::setup</referencedby>
        <referencedby refid="classlbann_1_1data__store__multi__images_1a7b5e9ec7b7132872299a204d5d24ee62" compoundref="data__store__multi__images_8cpp" startline="44" endline="78">lbann::data_store_multi_images::setup</referencedby>
        <referencedby refid="classlbann_1_1data__store__pilot2__molecular_1a975d7907053a8b2e92ea5f77ca4ae7a3" compoundref="data__store__pilot2__molecular_8cpp" startline="47" endline="107">lbann::data_store_pilot2_molecular::setup</referencedby>
        <referencedby refid="classlbann_1_1data__store__pilot2__molecular_1addaa6db4e1b3a25424da9da63c0b3616" compoundref="data__store__pilot2__molecular_8cpp" startline="251" endline="300">lbann::data_store_pilot2_molecular::exchange_data</referencedby>
        <referencedby refid="classlbann_1_1data__store__triplet_1aca66b9cf71d7ba2b9870e76c5b92b5e8" compoundref="data__store__triplet_8cpp" startline="42" endline="74">lbann::data_store_triplet::setup</referencedby>
        <referencedby refid="classlbann_1_1Layer_1a2483ccd8a4406a6891f6176f1001b4e5" compoundref="layer_8cpp" startline="247" endline="275">lbann::Layer::forward_prop</referencedby>
        <referencedby refid="classlbann_1_1Layer_1a0a502d9218d7dbbfd10ebebb6f917033" compoundref="layer_8cpp" startline="277" endline="305">lbann::Layer::back_prop</referencedby>
        <referencedby refid="classlbann_1_1Layer_1ae4a050e51e3a9bec431cf8b7a5660f2c" compoundref="layer_8cpp" startline="307" endline="314">lbann::Layer::update</referencedby>
        <referencedby refid="classlbann_1_1metric_1ab4e14cb4296c7b47719071b210448dec" compoundref="metric_8cpp" startline="105" endline="126">lbann::metric::evaluate</referencedby>
        <referencedby refid="classlbann_1_1objective__function_1a3edb6708894d31ec2a014c6eb8a61df2" compoundref="objective__function_8cpp" startline="75" endline="82">lbann::objective_function::start_evaluation</referencedby>
        <referencedby refid="classlbann_1_1objective__function_1ad35ce9b7daa87d197d00b1762b691a02" compoundref="objective__function_8cpp" startline="84" endline="95">lbann::objective_function::finish_evaluation</referencedby>
        <referencedby refid="classlbann_1_1objective__function_1ae8b7314bdc12ba52d270b46a35acd138" compoundref="objective__function_8cpp" startline="97" endline="103">lbann::objective_function::differentiate</referencedby>
        <referencedby refid="classlbann_1_1objective__function_1a7b7f8869bf110846e971fef995db51e1" compoundref="objective__function_8cpp" startline="105" endline="111">lbann::objective_function::compute_weight_regularization</referencedby>
        <referencedby refid="classlbann_1_1optimizer_1aa9f43ca3f22edc0a25d0509b6514a411" compoundref="optimizer_8cpp" startline="444" endline="470">lbann::optimizer::step</referencedby>
        <referencedby refid="classlbann_1_1lbann__quantizer_1aa5aabc1cb4163e95aee993d9b37b9b32" compoundref="quantizer_8cpp" startline="500" endline="580">lbann::lbann_quantizer::proportion_threshold</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>OpenMP Diagnostic code from Edgar Leon at LLNL. </para>    </briefdescription>
    <detaileddescription>
<para>all methods in <ref refid="classlbann_1_1protobuf__utils" kindref="compound">protobuf_utils</ref> are static </para>    </detaileddescription>
    <location file="/Users/mckinney27/doxy-testbed/lbann/src/base.cpp" line="44" column="1"/>
  </compounddef>
</doxygen>
