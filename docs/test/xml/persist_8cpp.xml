<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="persist_8cpp" kind="file" language="C++">
    <compoundname>persist.cpp</compoundname>
    <includes local="no">sys/stat.h</includes>
    <includes local="no">sys/types.h</includes>
    <includes local="no">cerrno</includes>
    <includes local="no">cstring</includes>
    <includes local="no">cstdio</includes>
    <includes refid="exception_8hpp" local="yes">lbann/utils/exception.hpp</includes>
    <includes refid="file__io_8hpp" local="yes">lbann/io/file_io.hpp</includes>
    <includes refid="persist_8hpp" local="yes">lbann/io/persist.hpp</includes>
    <includes local="no">fcntl.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="yes">El.hpp</includes>
    <includes local="yes">mpi.h</includes>
    <incdepgraph>
      <node id="20782">
        <label>sys/stat.h</label>
      </node>
      <node id="20807">
        <label>lbann/io/persist.hpp</label>
        <link refid="persist_8hpp"/>
        <childnode refid="20788" relation="include">
        </childnode>
        <childnode refid="20789" relation="include">
        </childnode>
      </node>
      <node id="20789">
        <label>El.hpp</label>
      </node>
      <node id="20788">
        <label>lbann/base.hpp</label>
        <link refid="base_8hpp"/>
        <childnode refid="20789" relation="include">
        </childnode>
        <childnode refid="20790" relation="include">
        </childnode>
        <childnode refid="20791" relation="include">
        </childnode>
        <childnode refid="20795" relation="include">
        </childnode>
      </node>
      <node id="20806">
        <label>fcntl.h</label>
      </node>
      <node id="20802">
        <label>string</label>
      </node>
      <node id="20798">
        <label>map</label>
      </node>
      <node id="20804">
        <label>exception</label>
      </node>
      <node id="20783">
        <label>sys/types.h</label>
      </node>
      <node id="20786">
        <label>cstdio</label>
      </node>
      <node id="20800">
        <label>lbann/utils/stack_trace.hpp</label>
        <link refid="stack__trace_8hpp"/>
        <childnode refid="20801" relation="include">
        </childnode>
        <childnode refid="20802" relation="include">
        </childnode>
      </node>
      <node id="20794">
        <label>cxxabi.h</label>
      </node>
      <node id="20787">
        <label>lbann/utils/exception.hpp</label>
        <link refid="exception_8hpp"/>
        <childnode refid="20788" relation="include">
        </childnode>
        <childnode refid="20796" relation="include">
        </childnode>
        <childnode refid="20800" relation="include">
        </childnode>
        <childnode refid="20803" relation="include">
        </childnode>
        <childnode refid="20804" relation="include">
        </childnode>
      </node>
      <node id="20808">
        <label>unistd.h</label>
      </node>
      <node id="20797">
        <label>vector</label>
      </node>
      <node id="20796">
        <label>lbann/comm.hpp</label>
        <link refid="comm_8hpp"/>
        <childnode refid="20797" relation="include">
        </childnode>
        <childnode refid="20798" relation="include">
        </childnode>
        <childnode refid="20799" relation="include">
        </childnode>
        <childnode refid="20788" relation="include">
        </childnode>
      </node>
      <node id="20805">
        <label>lbann/io/file_io.hpp</label>
        <link refid="file__io_8hpp"/>
        <childnode refid="20782" relation="include">
        </childnode>
        <childnode refid="20783" relation="include">
        </childnode>
        <childnode refid="20806" relation="include">
        </childnode>
      </node>
      <node id="20784">
        <label>cerrno</label>
      </node>
      <node id="20792">
        <label>cstdlib</label>
      </node>
      <node id="20803">
        <label>iostream</label>
      </node>
      <node id="20781">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/io/persist.cpp</label>
        <link refid="persist_8cpp"/>
        <childnode refid="20782" relation="include">
        </childnode>
        <childnode refid="20783" relation="include">
        </childnode>
        <childnode refid="20784" relation="include">
        </childnode>
        <childnode refid="20785" relation="include">
        </childnode>
        <childnode refid="20786" relation="include">
        </childnode>
        <childnode refid="20787" relation="include">
        </childnode>
        <childnode refid="20805" relation="include">
        </childnode>
        <childnode refid="20807" relation="include">
        </childnode>
        <childnode refid="20806" relation="include">
        </childnode>
        <childnode refid="20808" relation="include">
        </childnode>
        <childnode refid="20789" relation="include">
        </childnode>
        <childnode refid="20809" relation="include">
        </childnode>
      </node>
      <node id="20801">
        <label>csignal</label>
      </node>
      <node id="20809">
        <label>mpi.h</label>
      </node>
      <node id="20795">
        <label>lbann_config.hpp</label>
      </node>
      <node id="20791">
        <label>lbann/utils/cyg_profile.hpp</label>
        <link refid="cyg__profile_8hpp"/>
        <childnode refid="20792" relation="include">
        </childnode>
        <childnode refid="20786" relation="include">
        </childnode>
        <childnode refid="20793" relation="include">
        </childnode>
        <childnode refid="20794" relation="include">
        </childnode>
      </node>
      <node id="20785">
        <label>cstring</label>
      </node>
      <node id="20790">
        <label>lbann/Elemental_extensions.hpp</label>
        <link refid="Elemental__extensions_8hpp"/>
        <childnode refid="20789" relation="include">
        </childnode>
      </node>
      <node id="20799">
        <label>typeindex</label>
      </node>
      <node id="20793">
        <label>dlfcn.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structlayer__header" prot="public">layer_header</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2014-2016,<sp/>Lawrence<sp/>Livermore<sp/>National<sp/>Security,<sp/>LLC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Produced<sp/>at<sp/>the<sp/>Lawrence<sp/>Livermore<sp/>National<sp/>Laboratory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Written<sp/>by<sp/>the<sp/>LBANN<sp/>Research<sp/>Team<sp/>(B.<sp/>Van<sp/>Essen,<sp/>et<sp/>al.)<sp/>listed<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>CONTRIBUTORS<sp/>file.<sp/>&lt;lbann-dev@llnl.gov&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LLNL-CODE-697807.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>LBANN:<sp/>Livermore<sp/>Big<sp/>Artificial<sp/>Neural<sp/>Network</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Toolkit.<sp/>For<sp/>details,<sp/>see<sp/>http://software.llnl.gov/LBANN<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://github.com/LLNL/LBANN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;Licensee&quot;);<sp/>you</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implied.<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>license.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/stat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cerrno&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="exception_8hpp" kindref="compound">lbann/utils/exception.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="file__io_8hpp" kindref="compound">lbann/io/file_io.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="persist_8hpp" kindref="compound">lbann/io/persist.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/stat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fcntl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;El.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mpi.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">/****************************************************</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>These<sp/>functions<sp/>will<sp/>save<sp/>a<sp/>libElemental<sp/>matrix</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>using<sp/>a<sp/>file-per-process</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>****************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>TODO:<sp/>user<sp/>buffered<sp/>I/O<sp/>for<sp/>more<sp/>efficient<sp/>writes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="structlayer__header" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlayer__header" kindref="compound">layer_header</ref><sp/>{</highlight></codeline>
<codeline lineno="56" refid="structlayer__header_1a325142c0466170c6627710106275c7fd" refkind="member"><highlight class="normal"><sp/><sp/>uint64_t<sp/><ref refid="structlayer__header_1a325142c0466170c6627710106275c7fd" kindref="member">rank</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="57" refid="structlayer__header_1af1f45c9c74db048ea424114418f22d50" refkind="member"><highlight class="normal"><sp/><sp/>uint64_t<sp/><ref refid="structlayer__header_1af1f45c9c74db048ea424114418f22d50" kindref="member">width</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="58" refid="structlayer__header_1ad986e4b92e5b455e066fd349725c6bd9" refkind="member"><highlight class="normal"><sp/><sp/>uint64_t<sp/><ref refid="structlayer__header_1ad986e4b92e5b455e066fd349725c6bd9" kindref="member">height</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="59" refid="structlayer__header_1abb4a41358a68da8466879972fbcd034d" refkind="member"><highlight class="normal"><sp/><sp/>uint64_t<sp/><ref refid="structlayer__header_1abb4a41358a68da8466879972fbcd034d" kindref="member">localwidth</ref>;<sp/></highlight></codeline>
<codeline lineno="60" refid="structlayer__header_1a9ba1c0891787cf3b01611ef27e575a8b" refkind="member"><highlight class="normal"><sp/><sp/>uint64_t<sp/><ref refid="structlayer__header_1a9ba1c0891787cf3b01611ef27e575a8b" kindref="member">localheight</ref>;</highlight></codeline>
<codeline lineno="61" refid="structlayer__header_1a5b4ee2de6371d894b5646b74ceb5c321" refkind="member"><highlight class="normal"><sp/><sp/>uint64_t<sp/><ref refid="structlayer__header_1a5b4ee2de6371d894b5646b74ceb5c321" kindref="member">ldim</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="62"><highlight class="normal">};</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="namespacelbann_1af640a9302803636e0b5deb110c1aee57" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1af640a9302803636e0b5deb110c1aee57" kindref="member">lbann::writeDist</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="base_8hpp_1a0fab5387556805cfeac3e7e567bf66c5" kindref="member">DistMat</ref>&amp;<sp/>M,<sp/>uint64_t<sp/>*bytes)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>store<sp/>in<sp/>network<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>our<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlayer__header" kindref="compound">layer_header</ref><sp/>header;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>header.<ref refid="structlayer__header_1a325142c0466170c6627710106275c7fd" kindref="member">rank</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(uint64_t)<sp/>M.Grid().Rank();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>header.<ref refid="structlayer__header_1af1f45c9c74db048ea424114418f22d50" kindref="member">width</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(uint64_t)<sp/>M.Width();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>header.<ref refid="structlayer__header_1ad986e4b92e5b455e066fd349725c6bd9" kindref="member">height</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(uint64_t)<sp/>M.Height();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>header.<ref refid="structlayer__header_1abb4a41358a68da8466879972fbcd034d" kindref="member">localwidth</ref><sp/><sp/>=<sp/>(uint64_t)<sp/>M.LocalWidth();</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>header.<ref refid="structlayer__header_1a9ba1c0891787cf3b01611ef27e575a8b" kindref="member">localheight</ref><sp/>=<sp/>(uint64_t)<sp/>M.LocalHeight();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>header.<ref refid="structlayer__header_1a5b4ee2de6371d894b5646b74ceb5c321" kindref="member">ldim</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(uint64_t)<sp/>M.LDim();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>the<sp/>header<sp/>to<sp/>the<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>ssize_t<sp/>write_rc<sp/>=<sp/>write(fd,<sp/>&amp;header,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(header));</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(write_rc<sp/>!=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(header))<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>error!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>*bytes<sp/>+=<sp/>write_rc;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>write<sp/>the<sp/>data<sp/>for<sp/>our<sp/>part<sp/>of<sp/>the<sp/>distributed<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Int<sp/>localHeight<sp/>=<sp/>M.LocalHeight();</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Int<sp/>localWidth<sp/>=<sp/>M.LocalWidth();</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Int<sp/>lDim<sp/>=<sp/>M.LDim();</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(localHeight<sp/>==<sp/>lDim)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>local<sp/>dimension<sp/>in<sp/>memory<sp/>matches<sp/>the<sp/>local<sp/>height,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>we<sp/>can<sp/>write<sp/>our<sp/>data<sp/>in<sp/>a<sp/>single<sp/>shot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*buf<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>M.LockedBuffer();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>El::Int<sp/>bufsize<sp/>=<sp/>localHeight<sp/>*<sp/>localWidth<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(DataType);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>write_rc<sp/>=<sp/>write(fd,<sp/>buf,<sp/>bufsize);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(write_rc<sp/>!=<sp/>bufsize)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>error!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>*bytes<sp/>+=<sp/>write_rc;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>if<sp/>this<sp/>padding<sp/>is<sp/>small,<sp/>may<sp/>not<sp/>be<sp/>a<sp/>big<sp/>deal<sp/>to<sp/>write<sp/>it<sp/>out<sp/>anyway</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we&apos;ve<sp/>got<sp/>some<sp/>padding<sp/>along<sp/>the<sp/>first<sp/>dimension</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>while<sp/>storing<sp/>the<sp/>matrix<sp/>in<sp/>memory,<sp/>avoid<sp/>writing<sp/>the<sp/>padding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(El::Int<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>localWidth;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*buf<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>M.LockedBuffer(0,<sp/>j);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>El::Int<sp/>bufsize<sp/>=<sp/>localHeight<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(DataType);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>write_rc<sp/>=<sp/>write(fd,<sp/>buf,<sp/>bufsize);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(write_rc<sp/>!=<sp/>bufsize)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>error!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*bytes<sp/>+=<sp/>write_rc;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="namespacelbann_1ab2c2ad3c98b9991a6307b123617dbfb2" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1ab2c2ad3c98b9991a6307b123617dbfb2" kindref="member">lbann::readDist</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/><ref refid="base_8hpp_1a0fab5387556805cfeac3e7e567bf66c5" kindref="member">DistMat</ref>&amp;<sp/>M,<sp/>uint64_t<sp/>*bytes)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>in<sp/>the<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlayer__header" kindref="compound">layer_header</ref><sp/>header;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>ssize_t<sp/>read_rc<sp/>=<sp/>read(fd,<sp/>&amp;header,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(header));</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(read_rc<sp/>!=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(header))<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>error!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>layer<sp/>header&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>*bytes<sp/>+=<sp/>read_rc;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>resize<sp/>our<sp/>global<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>El::Int<sp/><ref refid="structlayer__header_1ad986e4b92e5b455e066fd349725c6bd9" kindref="member">height</ref><sp/>=<sp/>header.<ref refid="structlayer__header_1ad986e4b92e5b455e066fd349725c6bd9" kindref="member">height</ref>;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>El::Int<sp/><ref refid="structlayer__header_1af1f45c9c74db048ea424114418f22d50" kindref="member">width</ref><sp/><sp/>=<sp/>header.<ref refid="structlayer__header_1af1f45c9c74db048ea424114418f22d50" kindref="member">width</ref>;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>M.Resize(height,<sp/>width);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>check<sp/>that<sp/>header<sp/>values<sp/>match<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(M.ColStride()<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>M.RowStride()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(M.Height()<sp/>==<sp/>M.LDim())<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*buf<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>M.Buffer();</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>El::Int<sp/>bufsize<sp/>=<sp/>height<sp/>*<sp/>width<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(DataType);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>read_rc<sp/>=<sp/>read(fd,<sp/>buf,<sp/>bufsize);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(read_rc<sp/>!=<sp/>bufsize)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>error!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>layer<sp/>data&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*bytes<sp/>+=<sp/>read_rc;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(El::Int<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="structlayer__header_1af1f45c9c74db048ea424114418f22d50" kindref="member">width</ref>;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*buf<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>M.Buffer(0,<sp/>j);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>El::Int<sp/>bufsize<sp/>=<sp/>height<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(DataType);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>read_rc<sp/>=<sp/>read(fd,<sp/>buf,<sp/>bufsize);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(read_rc<sp/>!=<sp/>bufsize)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>error!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>layer<sp/>data&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*bytes<sp/>+=<sp/>read_rc;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Int<sp/>localHeight<sp/>=<sp/>M.LocalHeight();</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Int<sp/>localWidth<sp/>=<sp/>M.LocalWidth();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Int<sp/>lDim<sp/>=<sp/>M.LDim();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(localHeight<sp/>==<sp/>lDim)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*buf<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>M.Buffer();</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>El::Int<sp/>bufsize<sp/>=<sp/>localHeight<sp/>*<sp/>localWidth<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(DataType);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>read_rc<sp/>=<sp/>read(fd,<sp/>buf,<sp/>bufsize);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(read_rc<sp/>!=<sp/>bufsize)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>error!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>layer<sp/>data&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*bytes<sp/>+=<sp/>read_rc;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(El::Int<sp/>jLoc<sp/>=<sp/>0;<sp/>jLoc<sp/>&lt;<sp/>localWidth;<sp/>++jLoc)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*buf<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>M.Buffer(0,<sp/>jLoc);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>El::Int<sp/>bufsize<sp/>=<sp/>localHeight<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(DataType);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>read_rc<sp/>=<sp/>read(fd,<sp/>buf,<sp/>bufsize);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(read_rc<sp/>!=<sp/>bufsize)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>error!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>layer<sp/>data&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*bytes<sp/>+=<sp/>read_rc;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">/****************************************************</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*<sp/>Functions<sp/>to<sp/>read/write<sp/>values<sp/>to<sp/>files</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>****************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191" refid="classlbann_1_1persist_1abf1454f4d5b61617ccfa60ba9989f1a3" refkind="member"><highlight class="normal"><ref refid="classlbann_1_1persist_1abf1454f4d5b61617ccfa60ba9989f1a3" kindref="member">lbann::persist::persist</ref>()<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>lookup<sp/>our<sp/>MPI<sp/>rank</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>MPI_Comm_rank(MPI_COMM_WORLD,<sp/>&amp;m_rank);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>number<sp/>of<sp/>bytes<sp/>written</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>m_bytes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>file<sp/>descriptors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>m_model_fd<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>m_train_fd<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>m_validate_fd<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204" refid="classlbann_1_1persist_1a32a8f71995b674a62b21087ec4be9575" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1persist_1a32a8f71995b674a62b21087ec4be9575" kindref="member">lbann::persist::open_checkpoint</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dir,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>per_rank,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>val_end)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>directory<sp/>for<sp/>checkpoint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><ref refid="namespacelbann_1a8830dea8eef0ab5b93d68e2358ceeb1a" kindref="member">lbann::makedir</ref>(dir);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>checkpoint<sp/>directory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>strcpy(m_checkpoint_dir,<sp/>dir);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>define<sp/>filename<sp/>for<sp/>model<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(per_rank){</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(m_model_filename,<sp/></highlight><highlight class="stringliteral">&quot;%s/model_%d&quot;</highlight><highlight class="normal">,<sp/>dir,<sp/>m_rank);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>define<sp/>filename<sp/>for<sp/>train<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(m_train_filename,<sp/></highlight><highlight class="stringliteral">&quot;%s/train_%d&quot;</highlight><highlight class="normal">,<sp/>dir,<sp/>m_rank);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>m_model_fd<sp/>=<sp/><ref refid="namespacelbann_1af596e6d2be603e9cf808c98f5412490a" kindref="member">lbann::openwrite</ref>(m_model_filename);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>all_success;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Allreduce(&amp;m_model_fd,<sp/>&amp;all_success,<sp/>1,<sp/>MPI_INT,<sp/>MPI_LAND,<sp/>MPI_COMM_WORLD);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!all_success)<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>failed<sp/>to<sp/>open<sp/>checkpoint<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_train_fd<sp/>=<sp/><ref refid="namespacelbann_1af596e6d2be603e9cf808c98f5412490a" kindref="member">lbann::openwrite</ref>(m_train_filename);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MPI_Allreduce(&amp;m_train_fd,<sp/>&amp;all_success,<sp/>1,<sp/>MPI_INT,<sp/>MPI_LAND,<sp/>MPI_COMM_WORLD);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!all_success)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>failed<sp/>to<sp/>open<sp/>checkpoint<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>open<sp/>the<sp/>file<sp/>for<sp/>writing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!per_rank<sp/>&amp;&amp;<sp/>m_rank<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>sprintf(m_model_filename,<sp/></highlight><highlight class="stringliteral">&quot;%s/model&quot;</highlight><highlight class="normal">,<sp/>dir);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>define<sp/>filename<sp/>for<sp/>train<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(m_train_filename,<sp/></highlight><highlight class="stringliteral">&quot;%s/train&quot;</highlight><highlight class="normal">,<sp/>dir);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(m_validate_filename,<sp/></highlight><highlight class="stringliteral">&quot;%s/validate&quot;</highlight><highlight class="normal">,<sp/>dir);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!val_end){</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_model_fd<sp/>=<sp/><ref refid="namespacelbann_1af596e6d2be603e9cf808c98f5412490a" kindref="member">lbann::openwrite</ref>(m_model_filename);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_model_fd<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>failed<sp/>to<sp/>open<sp/>checkpoint<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_train_fd<sp/>=<sp/><ref refid="namespacelbann_1af596e6d2be603e9cf808c98f5412490a" kindref="member">lbann::openwrite</ref>(m_train_filename);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_train_fd<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>failed<sp/>to<sp/>open<sp/>checkpoint<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val_end){</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_validate_fd<sp/>=<sp/><ref refid="namespacelbann_1af596e6d2be603e9cf808c98f5412490a" kindref="member">lbann::openwrite</ref>(m_validate_filename);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_validate_fd<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>failed<sp/>to<sp/>open<sp/>checkpoint<sp/>file<sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257" refid="classlbann_1_1persist_1ab099939d0d91101fbfaf2b85e78be032" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1persist_1ab099939d0d91101fbfaf2b85e78be032" kindref="member">lbann::persist::close_checkpoint</ref>()<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>close<sp/>model<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_model_fd<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelbann_1aceeccedbbafccfa071b21ee99be794a5" kindref="member">lbann::closewrite</ref>(m_model_fd,<sp/>m_model_filename);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>m_model_fd<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>close<sp/>training<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_train_fd<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelbann_1aceeccedbbafccfa071b21ee99be794a5" kindref="member">lbann::closewrite</ref>(m_train_fd,<sp/>m_train_filename);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>m_train_fd<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_validate_fd<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelbann_1aceeccedbbafccfa071b21ee99be794a5" kindref="member">lbann::closewrite</ref>(m_validate_fd,<sp/>m_validate_filename);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>m_validate_fd<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275" refid="classlbann_1_1persist_1a123cbc1d2b693640c784a45cbc6d2d97" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1persist_1a123cbc1d2b693640c784a45cbc6d2d97" kindref="member">lbann::persist::open_restart</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dir,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>per_rank)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>checkpoint<sp/>directory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>strcpy(m_checkpoint_dir,<sp/>dir);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(per_rank){</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>define<sp/>filename<sp/>for<sp/>model<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(m_model_filename,<sp/></highlight><highlight class="stringliteral">&quot;%s/model_%d&quot;</highlight><highlight class="normal">,<sp/>dir,<sp/>m_rank);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>define<sp/>filename<sp/>for<sp/>train<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(m_train_filename,<sp/></highlight><highlight class="stringliteral">&quot;%s/train_%d&quot;</highlight><highlight class="normal">,<sp/>dir,<sp/>m_rank);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>m_model_fd<sp/>=<sp/><ref refid="namespacelbann_1a6084b9319eea1997f8446fa3e6879532" kindref="member">lbann::openread</ref>(m_model_filename);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>all_success;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Allreduce(&amp;m_model_fd,<sp/>&amp;all_success,<sp/>1,<sp/>MPI_INT,<sp/>MPI_LAND,<sp/>MPI_COMM_WORLD);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!all_success)<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>restart<sp/>failed,<sp/>throw<sp/>exception</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(std::string(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>file:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>m_model_filename);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_train_fd<sp/>=<sp/><ref refid="namespacelbann_1a6084b9319eea1997f8446fa3e6879532" kindref="member">lbann::openread</ref>(m_train_filename);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MPI_Allreduce(&amp;m_train_fd,<sp/>&amp;all_success,<sp/>1,<sp/>MPI_INT,<sp/>MPI_LAND,<sp/>MPI_COMM_WORLD);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!all_success)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>restart<sp/>failed,<sp/>throw<sp/>exception</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(std::string(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>file:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>m_train_filename);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>open<sp/>the<sp/>file<sp/>for<sp/>writing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!per_rank<sp/>&amp;&amp;<sp/>m_rank<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(m_model_filename,<sp/></highlight><highlight class="stringliteral">&quot;%s/model&quot;</highlight><highlight class="normal">,<sp/>dir);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>define<sp/>filename<sp/>for<sp/>train<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(m_train_filename,<sp/></highlight><highlight class="stringliteral">&quot;%s/train&quot;</highlight><highlight class="normal">,<sp/>dir);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(m_validate_filename,<sp/></highlight><highlight class="stringliteral">&quot;%s/validate&quot;</highlight><highlight class="normal">,<sp/>dir);<sp/><sp/></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>m_model_fd<sp/>=<sp/><ref refid="namespacelbann_1a6084b9319eea1997f8446fa3e6879532" kindref="member">lbann::openread</ref>(m_model_filename);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_model_fd<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>restart<sp/>failed,<sp/>throw<sp/>exception</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(std::string(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>file:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>m_model_filename);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>m_train_fd<sp/>=<sp/><ref refid="namespacelbann_1a6084b9319eea1997f8446fa3e6879532" kindref="member">lbann::openread</ref>(m_train_filename);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_train_fd<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>restart<sp/>failed,<sp/>throw<sp/>exception</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(std::string(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>file:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>m_train_filename);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>m_validate_fd<sp/>=<sp/><ref refid="namespacelbann_1a6084b9319eea1997f8446fa3e6879532" kindref="member">lbann::openread</ref>(m_validate_filename);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_validate_fd<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>restart<sp/>failed,<sp/>throw<sp/>exception</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(std::string(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>file:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>m_validate_filename);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328" refid="classlbann_1_1persist_1afeef05548e1d17bd09d3805607edd621" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1persist_1afeef05548e1d17bd09d3805607edd621" kindref="member">lbann::persist::close_restart</ref>()<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>close<sp/>model<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_model_fd<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelbann_1a38dd30b2ae8214f6595708264369ddb8" kindref="member">lbann::closeread</ref>(m_model_fd,<sp/>m_model_filename);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>m_model_fd<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>close<sp/>training<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_train_fd<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelbann_1a38dd30b2ae8214f6595708264369ddb8" kindref="member">lbann::closeread</ref>(m_train_fd,<sp/>m_train_filename);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>m_train_fd<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342" refid="classlbann_1_1persist_1a9170de652405d86d9ba9b3793f8781c6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1persist_1a9170de652405d86d9ba9b3793f8781c6" kindref="member">lbann::persist::write_distmat</ref>(<ref refid="namespacelbann_1adee41f31f15f3906cbdcce4a1417eb56" kindref="member">persist_type</ref><sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/><ref refid="base_8hpp_1a0fab5387556805cfeac3e7e567bf66c5" kindref="member">DistMat</ref><sp/>*M)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>define<sp/>full<sp/>path<sp/>to<sp/>file<sp/>to<sp/>store<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>std::string<sp/>filename<sp/>=<sp/>m_checkpoint_dir;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/>persist_type::train)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>filename<sp/>+=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;/train_&quot;</highlight><highlight class="normal">)<sp/>+<sp/>name;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/>persist_type::model)<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>filename<sp/>+=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;/model_&quot;</highlight><highlight class="normal">)<sp/>+<sp/>name;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight><highlight class="stringliteral">&quot;persist:<sp/>invalid<sp/>persist_type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>Write(*M,<sp/>filename,<sp/>El::BINARY,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Write_MPI(M,<sp/>filename,<sp/>BINARY,<sp/>&quot;&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>uint64_t<sp/>bytes<sp/>=<sp/>2<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int)<sp/>+<sp/>M-&gt;Height()<sp/>*<sp/>M-&gt;Width()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(DataType);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>m_bytes<sp/>+=<sp/>bytes;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362" refid="classlbann_1_1persist_1aa98be93f33b510e5b506b61de6bd79bd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1persist_1aa98be93f33b510e5b506b61de6bd79bd" kindref="member">lbann::persist::read_distmat</ref>(<ref refid="namespacelbann_1adee41f31f15f3906cbdcce4a1417eb56" kindref="member">persist_type</ref><sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/><ref refid="base_8hpp_1a0fab5387556805cfeac3e7e567bf66c5" kindref="member">DistMat</ref><sp/>*M)<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>define<sp/>full<sp/>path<sp/>to<sp/>file<sp/>to<sp/>store<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>std::string<sp/>filename<sp/>=<sp/>m_checkpoint_dir;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/>persist_type::train)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>filename<sp/>+=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;/train_&quot;</highlight><highlight class="normal">)<sp/>+<sp/>name;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/>persist_type::model)<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>filename<sp/>+=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;/model_&quot;</highlight><highlight class="normal">)<sp/>+<sp/>name;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight><highlight class="stringliteral">&quot;persist:<sp/>invalid<sp/>persist_type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>whether<sp/>file<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1aefae2a9fc9d742ece0fa8ca7ed9ee137" kindref="member">exists</ref><sp/>=<sp/><ref refid="namespacelbann_1aefae2a9fc9d742ece0fa8ca7ed9ee137" kindref="member">lbann::exists</ref>(filename.c_str());</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>exists)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(std::string(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>distmat:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>filename);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>Read(*M,<sp/>filename,<sp/>El::BINARY,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Read_MPI(M,<sp/>filename,<sp/>BINARY,<sp/>1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>uint64_t<sp/>bytes<sp/>=<sp/>2<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int)<sp/>+<sp/>M-&gt;Height()<sp/>*<sp/>M-&gt;Width()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(DataType);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>m_bytes<sp/>+=<sp/>bytes;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389" refid="classlbann_1_1persist_1a8729c7c90f4ca3090cd678fce91a0eb0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1persist_1a8729c7c90f4ca3090cd678fce91a0eb0" kindref="member">lbann::persist::write_bytes</ref>(<ref refid="namespacelbann_1adee41f31f15f3906cbdcce4a1417eb56" kindref="member">persist_type</ref><sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd<sp/>=<sp/>get_fd(type);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>ssize_t<sp/>rc<sp/>=<sp/>write(fd,<sp/>buf,<sp/>size);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rc<sp/>!=<sp/>(ssize_t)<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(std::string(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>write:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>name);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>m_bytes<sp/>+=<sp/>size;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="400"><highlight class="normal">}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402" refid="classlbann_1_1persist_1af24f635f634c8cf30cf53a0e90ec641b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1persist_1af24f635f634c8cf30cf53a0e90ec641b" kindref="member">lbann::persist::read_bytes</ref>(<ref refid="namespacelbann_1adee41f31f15f3906cbdcce4a1417eb56" kindref="member">persist_type</ref><sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd<sp/>=<sp/>get_fd(type);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>ssize_t<sp/>rc<sp/>=<sp/>read(fd,<sp/>buf,<sp/>size);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rc<sp/>!=<sp/>(ssize_t)<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(std::string(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>name);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>m_bytes<sp/>+=<sp/>size;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="413"><highlight class="normal">}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415" refid="classlbann_1_1persist_1a742334568de0aca958dbaf7bbabd3cba" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1persist_1a742334568de0aca958dbaf7bbabd3cba" kindref="member">lbann::persist::write_uint32</ref>(<ref refid="namespacelbann_1adee41f31f15f3906cbdcce4a1417eb56" kindref="member">persist_type</ref><sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/>uint32_t<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1aed95061796f19fa1648dcc99dc335abd" kindref="member">write_bytes</ref>(type,<sp/>name,<sp/>&amp;val,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t));</highlight></codeline>
<codeline lineno="417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419" refid="classlbann_1_1persist_1ace1ebb58e2570693cdce0ebd2817113b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1persist_1ace1ebb58e2570693cdce0ebd2817113b" kindref="member">lbann::persist::read_uint32</ref>(<ref refid="namespacelbann_1adee41f31f15f3906cbdcce4a1417eb56" kindref="member">persist_type</ref><sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/>uint32_t<sp/>*val)<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1a85385e2a9e058b6720300b4cbdd2b1d0" kindref="member">read_bytes</ref>(type,<sp/>name,<sp/>val,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t));</highlight></codeline>
<codeline lineno="421"><highlight class="normal">}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423" refid="classlbann_1_1persist_1aced95e3bc711276b072af97b65ef9fc1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1persist_1aced95e3bc711276b072af97b65ef9fc1" kindref="member">lbann::persist::write_uint64</ref>(<ref refid="namespacelbann_1adee41f31f15f3906cbdcce4a1417eb56" kindref="member">persist_type</ref><sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/>uint64_t<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1aed95061796f19fa1648dcc99dc335abd" kindref="member">write_bytes</ref>(type,<sp/>name,<sp/>&amp;val,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint64_t));</highlight></codeline>
<codeline lineno="425"><highlight class="normal">}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427" refid="classlbann_1_1persist_1aa6d996db3714a7ae055adac0d8e8ac63" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1persist_1aa6d996db3714a7ae055adac0d8e8ac63" kindref="member">lbann::persist::read_uint64</ref>(<ref refid="namespacelbann_1adee41f31f15f3906cbdcce4a1417eb56" kindref="member">persist_type</ref><sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/>uint64_t<sp/>*val)<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1a85385e2a9e058b6720300b4cbdd2b1d0" kindref="member">read_bytes</ref>(type,<sp/>name,<sp/>val,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint64_t));</highlight></codeline>
<codeline lineno="429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="comment">//<sp/>First<sp/>(wrong)<sp/>hack<sp/>at<sp/>per<sp/>file.<sp/>works<sp/>but<sp/>not<sp/>ideal.<sp/>not<sp/>deleting<sp/>for<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="comment">/*bool<sp/>lbann::persist::write_uint64_per_rank(persist_type<sp/>type,<sp/>const<sp/>char<sp/>*name,<sp/>uint64_t<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="comment"><sp/><sp/>int<sp/>size<sp/>=<sp/>sizeof(uint64_t);</highlight></codeline>
<codeline lineno="433"><highlight class="comment"><sp/><sp/>char<sp/>rank[24];<sp/></highlight></codeline>
<codeline lineno="434"><highlight class="comment"><sp/><sp/>sprintf(rank,&quot;_%d&quot;,this-&gt;get_rank());<sp/><sp/></highlight></codeline>
<codeline lineno="435"><highlight class="comment"><sp/><sp/>std::string<sp/>filename<sp/>=<sp/>m_checkpoint_dir;</highlight></codeline>
<codeline lineno="436"><highlight class="comment"><sp/><sp/>if<sp/>(type<sp/>==<sp/>persist_type::train)<sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/><sp/><sp/><sp/>filename<sp/>+=<sp/>std::string(&quot;/train_&quot;)<sp/>+<sp/>name<sp/>+<sp/>rank;</highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/><sp/>}<sp/>else<sp/>if<sp/>(type<sp/>==<sp/>persist_type::model)<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/><sp/><sp/><sp/>filename<sp/>+=<sp/>std::string(&quot;/model_&quot;)<sp/>+<sp/>name<sp/>+<sp/>rank;</highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="comment"><sp/><sp/><sp/><sp/>throw<sp/>lbann_exception(&quot;persist:<sp/>invalid<sp/>persist_type&quot;);</highlight></codeline>
<codeline lineno="442"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="comment"></highlight></codeline>
<codeline lineno="444"><highlight class="comment"><sp/><sp/>int<sp/>m_rank_fd<sp/>=<sp/>lbann::openwrite(filename.c_str());</highlight></codeline>
<codeline lineno="445"><highlight class="comment"><sp/><sp/>if<sp/>(m_rank_fd<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="comment"><sp/><sp/><sp/><sp/>ssize_t<sp/>rc<sp/>=<sp/>write(m_rank_fd,<sp/>&amp;val,<sp/>size);</highlight></codeline>
<codeline lineno="447"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(rc<sp/>!=<sp/>(ssize_t)<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>lbann_exception(std::string(&quot;Failed<sp/>to<sp/>write:<sp/>&quot;)<sp/>+<sp/>name);</highlight></codeline>
<codeline lineno="449"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="450"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="451"><highlight class="comment"><sp/><sp/><sp/><sp/>m_bytes<sp/>+=<sp/>size;</highlight></codeline>
<codeline lineno="452"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="comment"><sp/><sp/>lbann::closewrite(m_rank_fd,filename.c_str());</highlight></codeline>
<codeline lineno="454"><highlight class="comment"><sp/><sp/>return<sp/>true;<sp/><sp/></highlight></codeline>
<codeline lineno="455"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="456"><highlight class="comment">}</highlight></codeline>
<codeline lineno="457"><highlight class="comment"></highlight></codeline>
<codeline lineno="458"><highlight class="comment">bool<sp/>lbann::persist::read_uint64_per_rank(persist_type<sp/>type,<sp/>const<sp/>char<sp/>*name,<sp/>uint64_t<sp/>*val)<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="comment"><sp/><sp/>int<sp/>size<sp/>=<sp/>sizeof(uint64_t);</highlight></codeline>
<codeline lineno="460"><highlight class="comment"><sp/><sp/>char<sp/>rank[24];<sp/></highlight></codeline>
<codeline lineno="461"><highlight class="comment"><sp/><sp/>sprintf(rank,&quot;_%d&quot;,this-&gt;get_rank());<sp/><sp/></highlight></codeline>
<codeline lineno="462"><highlight class="comment"><sp/><sp/>std::string<sp/>filename<sp/>=<sp/>m_checkpoint_dir;</highlight></codeline>
<codeline lineno="463"><highlight class="comment"><sp/><sp/>if<sp/>(type<sp/>==<sp/>persist_type::train)<sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="comment"><sp/><sp/><sp/><sp/>filename<sp/>+=<sp/>std::string(&quot;/train_&quot;)<sp/>+<sp/>name<sp/>+<sp/>rank;</highlight></codeline>
<codeline lineno="465"><highlight class="comment"><sp/><sp/>}<sp/>else<sp/>if<sp/>(type<sp/>==<sp/>persist_type::model)<sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="comment"><sp/><sp/><sp/><sp/>filename<sp/>+=<sp/>std::string(&quot;/model_&quot;)<sp/>+<sp/>name<sp/>+<sp/>rank;</highlight></codeline>
<codeline lineno="467"><highlight class="comment"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="comment"><sp/><sp/><sp/><sp/>throw<sp/>lbann_exception(&quot;persist:<sp/>invalid<sp/>persist_type&quot;);</highlight></codeline>
<codeline lineno="469"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="comment"></highlight></codeline>
<codeline lineno="471"><highlight class="comment"><sp/><sp/>int<sp/>exists<sp/>=<sp/>lbann::exists(filename.c_str());</highlight></codeline>
<codeline lineno="472"><highlight class="comment"><sp/><sp/>if<sp/>(!<sp/>exists)<sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="comment"><sp/><sp/><sp/><sp/>throw<sp/>lbann_exception(std::string(&quot;Failed<sp/>to<sp/>read<sp/>distmat:<sp/>&quot;)<sp/>+<sp/>filename);</highlight></codeline>
<codeline lineno="474"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="comment"><sp/><sp/>int<sp/>m_rank_fd<sp/>=<sp/>lbann::openread(filename.c_str());</highlight></codeline>
<codeline lineno="477"><highlight class="comment"><sp/><sp/>if<sp/>(m_rank_fd<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="478"><highlight class="comment"><sp/><sp/><sp/><sp/>ssize_t<sp/>rc<sp/>=<sp/>read(m_rank_fd,<sp/>val,<sp/>size);</highlight></codeline>
<codeline lineno="479"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(rc<sp/>!=<sp/>(ssize_t)<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>lbann_exception(std::string(&quot;Failed<sp/>to<sp/>read:<sp/>&quot;)<sp/>+<sp/>name);</highlight></codeline>
<codeline lineno="481"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="482"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/><sp/><sp/><sp/>lbann::closeread(m_rank_fd,filename.c_str());</highlight></codeline>
<codeline lineno="484"><highlight class="comment"><sp/><sp/><sp/><sp/>m_bytes<sp/>+=<sp/>size;</highlight></codeline>
<codeline lineno="485"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="487"><highlight class="comment"><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="488"><highlight class="comment"></highlight></codeline>
<codeline lineno="489"><highlight class="comment"><sp/><sp/>//return<sp/>read_bytes(type,<sp/>name,<sp/>val,<sp/>sizeof(uint64_t));</highlight></codeline>
<codeline lineno="490"><highlight class="comment">}</highlight></codeline>
<codeline lineno="491"><highlight class="comment"></highlight></codeline>
<codeline lineno="492"><highlight class="comment"></highlight></codeline>
<codeline lineno="493"><highlight class="comment">bool<sp/>lbann::persist::write_int32_contig_per_rank(persist_type<sp/>type,<sp/>const<sp/>char<sp/>*name,<sp/>const<sp/>int32_t<sp/>*buf,<sp/>uint64_t<sp/>count)<sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="comment"><sp/><sp/>size_t<sp/>bytes<sp/>=<sp/>count<sp/>*<sp/>sizeof(int32_t);</highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/><sp/>char<sp/>rank[24];<sp/></highlight></codeline>
<codeline lineno="496"><highlight class="comment"><sp/><sp/>sprintf(rank,&quot;_%d&quot;,this-&gt;get_rank());<sp/><sp/></highlight></codeline>
<codeline lineno="497"><highlight class="comment"><sp/><sp/>std::string<sp/>filename<sp/>=<sp/>m_checkpoint_dir;</highlight></codeline>
<codeline lineno="498"><highlight class="comment"><sp/><sp/>if<sp/>(type<sp/>==<sp/>persist_type::train)<sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="comment"><sp/><sp/><sp/><sp/>filename<sp/>+=<sp/>std::string(&quot;/train_&quot;)<sp/>+<sp/>name<sp/>+<sp/>rank;</highlight></codeline>
<codeline lineno="500"><highlight class="comment"><sp/><sp/>}<sp/>else<sp/>if<sp/>(type<sp/>==<sp/>persist_type::model)<sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="comment"><sp/><sp/><sp/><sp/>filename<sp/>+=<sp/>std::string(&quot;/model_&quot;)<sp/>+<sp/>name<sp/>+<sp/>rank;</highlight></codeline>
<codeline lineno="502"><highlight class="comment"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="comment"><sp/><sp/><sp/><sp/>throw<sp/>lbann_exception(&quot;persist:<sp/>invalid<sp/>persist_type&quot;);</highlight></codeline>
<codeline lineno="504"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="comment"></highlight></codeline>
<codeline lineno="506"><highlight class="comment"><sp/><sp/>int<sp/>m_rank_fd<sp/>=<sp/>lbann::openwrite(filename.c_str());</highlight></codeline>
<codeline lineno="507"><highlight class="comment"><sp/><sp/>if<sp/>(m_rank_fd<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="comment"><sp/><sp/><sp/><sp/>ssize_t<sp/>rc<sp/>=<sp/>write(m_rank_fd,<sp/>buf,<sp/>bytes);</highlight></codeline>
<codeline lineno="509"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(rc<sp/>!=<sp/>(ssize_t)<sp/>bytes)<sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>lbann_exception(std::string(&quot;Failed<sp/>to<sp/>write:<sp/>&quot;)<sp/>+<sp/>name);</highlight></codeline>
<codeline lineno="511"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="512"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="513"><highlight class="comment"><sp/><sp/><sp/><sp/>m_bytes<sp/>+=<sp/>bytes;</highlight></codeline>
<codeline lineno="514"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="515"><highlight class="comment"><sp/><sp/>lbann::closewrite(m_rank_fd,filename.c_str());</highlight></codeline>
<codeline lineno="516"><highlight class="comment"><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="517"><highlight class="comment">}</highlight></codeline>
<codeline lineno="518"><highlight class="comment"></highlight></codeline>
<codeline lineno="519"><highlight class="comment">bool<sp/>lbann::persist::read_int32_contig_per_rank(persist_type<sp/>type,<sp/>const<sp/>char<sp/>*name,<sp/>int32_t<sp/>*buf,<sp/>uint64_t<sp/>count)<sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="comment"><sp/><sp/>size_t<sp/>bytes<sp/>=<sp/>count<sp/>*<sp/>sizeof(int32_t);</highlight></codeline>
<codeline lineno="521"><highlight class="comment"><sp/><sp/>char<sp/>rank[24];</highlight></codeline>
<codeline lineno="522"><highlight class="comment"><sp/><sp/>sprintf(rank,&quot;_%d&quot;,this-&gt;get_rank());</highlight></codeline>
<codeline lineno="523"><highlight class="comment"><sp/><sp/>std::string<sp/>filename<sp/>=<sp/>m_checkpoint_dir;</highlight></codeline>
<codeline lineno="524"><highlight class="comment"><sp/><sp/>if<sp/>(type<sp/>==<sp/>persist_type::train)<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="comment"><sp/><sp/><sp/><sp/>filename<sp/>+=<sp/>std::string(&quot;/train_&quot;)<sp/>+<sp/>name<sp/>+<sp/>rank;</highlight></codeline>
<codeline lineno="526"><highlight class="comment"><sp/><sp/>}<sp/>else<sp/>if<sp/>(type<sp/>==<sp/>persist_type::model)<sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="comment"><sp/><sp/><sp/><sp/>filename<sp/>+=<sp/>std::string(&quot;/model_&quot;)<sp/>+<sp/>name<sp/>+<sp/>rank;</highlight></codeline>
<codeline lineno="528"><highlight class="comment"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="comment"><sp/><sp/><sp/><sp/>throw<sp/>lbann_exception(&quot;persist:<sp/>invalid<sp/>persist_type&quot;);</highlight></codeline>
<codeline lineno="530"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="531"><highlight class="comment"></highlight></codeline>
<codeline lineno="532"><highlight class="comment"><sp/><sp/>int<sp/>exists<sp/>=<sp/>lbann::exists(filename.c_str());</highlight></codeline>
<codeline lineno="533"><highlight class="comment"><sp/><sp/>if<sp/>(!<sp/>exists)<sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="comment"><sp/><sp/><sp/><sp/>throw<sp/>lbann_exception(std::string(&quot;Failed<sp/>to<sp/>read<sp/>distmat:<sp/>&quot;)<sp/>+<sp/>filename);</highlight></codeline>
<codeline lineno="535"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="536"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="comment"><sp/><sp/>int<sp/>m_rank_fd<sp/>=<sp/>lbann::openread(filename.c_str());</highlight></codeline>
<codeline lineno="538"><highlight class="comment"><sp/><sp/>if<sp/>(m_rank_fd<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="comment"><sp/><sp/><sp/><sp/>ssize_t<sp/>rc<sp/>=<sp/>read(m_rank_fd,<sp/>buf,<sp/>bytes);</highlight></codeline>
<codeline lineno="540"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(rc<sp/>!=<sp/>(ssize_t)<sp/>bytes)<sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>lbann_exception(std::string(&quot;Failed<sp/>to<sp/>read:<sp/>&quot;)<sp/>+<sp/>name);</highlight></codeline>
<codeline lineno="542"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="543"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="comment"><sp/><sp/><sp/><sp/>m_bytes<sp/>+=<sp/>bytes;</highlight></codeline>
<codeline lineno="545"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="546"><highlight class="comment"><sp/><sp/>lbann::closeread(m_rank_fd,filename.c_str());</highlight></codeline>
<codeline lineno="547"><highlight class="comment"><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="548"><highlight class="comment">}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551" refid="classlbann_1_1persist_1a199cd86b1e1f0fd5f2d0458fc6d25828" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1persist_1a199cd86b1e1f0fd5f2d0458fc6d25828" kindref="member">lbann::persist::write_int32_contig</ref>(<ref refid="namespacelbann_1adee41f31f15f3906cbdcce4a1417eb56" kindref="member">persist_type</ref><sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32_t<sp/>*buf,<sp/>uint64_t<sp/>count)<sp/>{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes<sp/>=<sp/>count<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32_t);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1aed95061796f19fa1648dcc99dc335abd" kindref="member">write_bytes</ref>(type,<sp/>name,<sp/>buf,<sp/>bytes);</highlight></codeline>
<codeline lineno="554"><highlight class="normal">}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556" refid="classlbann_1_1persist_1a2944c32f6634223c0902b38a697a0957" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1persist_1a2944c32f6634223c0902b38a697a0957" kindref="member">lbann::persist::read_int32_contig</ref>(<ref refid="namespacelbann_1adee41f31f15f3906cbdcce4a1417eb56" kindref="member">persist_type</ref><sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/>int32_t<sp/>*buf,<sp/>uint64_t<sp/>count)<sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes<sp/>=<sp/>count<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32_t);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1a85385e2a9e058b6720300b4cbdd2b1d0" kindref="member">read_bytes</ref>(type,<sp/>name,<sp/>buf,<sp/>bytes);</highlight></codeline>
<codeline lineno="559"><highlight class="normal">}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561" refid="classlbann_1_1persist_1ab5be1e98f9d962c41fc9c3f2ac918c6e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1persist_1ab5be1e98f9d962c41fc9c3f2ac918c6e" kindref="member">lbann::persist::write_float</ref>(<ref refid="namespacelbann_1adee41f31f15f3906cbdcce4a1417eb56" kindref="member">persist_type</ref><sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1aed95061796f19fa1648dcc99dc335abd" kindref="member">write_bytes</ref>(type,<sp/>name,<sp/>&amp;val,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565" refid="classlbann_1_1persist_1ac5e659a6612e5f2911e195fc1b6c045b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1persist_1ac5e659a6612e5f2911e195fc1b6c045b" kindref="member">lbann::persist::read_float</ref>(<ref refid="namespacelbann_1adee41f31f15f3906cbdcce4a1417eb56" kindref="member">persist_type</ref><sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*val)<sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1a85385e2a9e058b6720300b4cbdd2b1d0" kindref="member">read_bytes</ref>(type,<sp/>name,<sp/>val,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="567"><highlight class="normal">}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569" refid="classlbann_1_1persist_1ad29ebcbacdef90a91a9d474d4d6e1bcd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1persist_1ad29ebcbacdef90a91a9d474d4d6e1bcd" kindref="member">lbann::persist::write_double</ref>(<ref refid="namespacelbann_1adee41f31f15f3906cbdcce4a1417eb56" kindref="member">persist_type</ref><sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1aed95061796f19fa1648dcc99dc335abd" kindref="member">write_bytes</ref>(type,<sp/>name,<sp/>&amp;val,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="571"><highlight class="normal">}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573" refid="classlbann_1_1persist_1ae3a0b96ece72901bb0a05d26a4eb4791" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1persist_1ae3a0b96ece72901bb0a05d26a4eb4791" kindref="member">lbann::persist::read_double</ref>(<ref refid="namespacelbann_1adee41f31f15f3906cbdcce4a1417eb56" kindref="member">persist_type</ref><sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*val)<sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1a85385e2a9e058b6720300b4cbdd2b1d0" kindref="member">read_bytes</ref>(type,<sp/>name,<sp/>val,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="575"><highlight class="normal">}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577" refid="classlbann_1_1persist_1a5edc3f9cc3540b50d417993da2a6b5ce" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1persist_1a5edc3f9cc3540b50d417993da2a6b5ce" kindref="member">lbann::persist::write_datatype</ref>(<ref refid="namespacelbann_1adee41f31f15f3906cbdcce4a1417eb56" kindref="member">persist_type</ref><sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/>DataType<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1aed95061796f19fa1648dcc99dc335abd" kindref="member">write_bytes</ref>(type,<sp/>name,<sp/>&amp;val,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(DataType));</highlight></codeline>
<codeline lineno="579"><highlight class="normal">}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581" refid="classlbann_1_1persist_1a1e84eff891affad6001f3c5fa803cae2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1persist_1a1e84eff891affad6001f3c5fa803cae2" kindref="member">lbann::persist::read_datatype</ref>(<ref refid="namespacelbann_1adee41f31f15f3906cbdcce4a1417eb56" kindref="member">persist_type</ref><sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/>DataType<sp/>*val)<sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1a85385e2a9e058b6720300b4cbdd2b1d0" kindref="member">read_bytes</ref>(type,<sp/>name,<sp/>val,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(DataType));</highlight></codeline>
<codeline lineno="583"><highlight class="normal">}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585" refid="classlbann_1_1persist_1a04afef84e7caa8509e65367225ceeba5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1persist_1a04afef84e7caa8509e65367225ceeba5" kindref="member">lbann::persist::write_string</ref>(<ref refid="namespacelbann_1adee41f31f15f3906cbdcce4a1417eb56" kindref="member">persist_type</ref><sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*val,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>str_length)<sp/>{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1aed95061796f19fa1648dcc99dc335abd" kindref="member">write_bytes</ref>(type,<sp/>name,<sp/>val,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>*<sp/>str_length);</highlight></codeline>
<codeline lineno="587"><highlight class="normal">}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589" refid="classlbann_1_1persist_1a19c0a5dbee697aff0a5a5588f2d370b9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1persist_1a19c0a5dbee697aff0a5a5588f2d370b9" kindref="member">lbann::persist::read_string</ref>(<ref refid="namespacelbann_1adee41f31f15f3906cbdcce4a1417eb56" kindref="member">persist_type</ref><sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*val,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>str_length)<sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1a85385e2a9e058b6720300b4cbdd2b1d0" kindref="member">read_bytes</ref>(type,<sp/>name,<sp/>val,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>*<sp/>str_length);</highlight></codeline>
<codeline lineno="591"><highlight class="normal">}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593" refid="classlbann_1_1persist_1a0fe7bbf6a5a47417aa904d0cb64af3fd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1persist_1a0fe7bbf6a5a47417aa904d0cb64af3fd" kindref="member">lbann::persist::get_fd</ref>(<ref refid="namespacelbann_1adee41f31f15f3906cbdcce4a1417eb56" kindref="member">persist_type</ref><sp/>type)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/>persist_type::train)<sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>fd<sp/>=<sp/>m_train_fd;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/>persist_type::model)<sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>fd<sp/>=<sp/>m_model_fd;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/>persist_type::validate)<sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>fd<sp/>=<sp/>m_validate_fd;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fd;</highlight></codeline>
<codeline lineno="603"><highlight class="normal">}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="comment">/****************************************************</highlight></codeline>
<codeline lineno="606"><highlight class="comment"><sp/>*<sp/>Functions<sp/>to<sp/>read/write<sp/>values<sp/>to<sp/>files</highlight></codeline>
<codeline lineno="607"><highlight class="comment"><sp/>****************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609" refid="namespacelbann_1aa7b4e710f444588dfcf4188b84b33420" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1aa7b4e710f444588dfcf4188b84b33420" kindref="member">lbann::write_distmat</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/><ref refid="base_8hpp_1a0fab5387556805cfeac3e7e567bf66c5" kindref="member">DistMat</ref><sp/>*M,<sp/>uint64_t<sp/>*bytes)<sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>Write(*M,<sp/>name,<sp/>El::BINARY,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Write_MPI(M,<sp/>name,<sp/>BINARY,<sp/>&quot;&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>uint64_t<sp/>bytes_written<sp/>=<sp/>2<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int)<sp/>+<sp/>M-&gt;Height()<sp/>*<sp/>M-&gt;Width()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(DataType);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/>*bytes<sp/>+=<sp/>bytes_written;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="617"><highlight class="normal">}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619" refid="namespacelbann_1a0306ed35d6d90cf4fbdce7a72ad62ca7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1a0306ed35d6d90cf4fbdce7a72ad62ca7" kindref="member">lbann::read_distmat</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/><ref refid="base_8hpp_1a0fab5387556805cfeac3e7e567bf66c5" kindref="member">DistMat</ref><sp/>*M,<sp/>uint64_t<sp/>*bytes)<sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>whether<sp/>file<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1aefae2a9fc9d742ece0fa8ca7ed9ee137" kindref="member">exists</ref><sp/>=<sp/><ref refid="namespacelbann_1aefae2a9fc9d742ece0fa8ca7ed9ee137" kindref="member">lbann::exists</ref>(name);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>exists)<sp/>{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(std::string(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>distmat:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>name);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>Read(*M,<sp/>name,<sp/>El::BINARY,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Read_MPI(M,<sp/>name,<sp/>BINARY,<sp/>1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/>uint64_t<sp/>bytes_read<sp/>=<sp/>2<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int)<sp/>+<sp/>M-&gt;Height()<sp/>*<sp/>M-&gt;Width()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(DataType);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/>*bytes<sp/>+=<sp/>bytes_read;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="634"><highlight class="normal">}</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636" refid="namespacelbann_1aed95061796f19fa1648dcc99dc335abd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1aed95061796f19fa1648dcc99dc335abd" kindref="member">lbann::write_bytes</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>ssize_t<sp/>rc<sp/>=<sp/>write(fd,<sp/>buf,<sp/>size);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rc<sp/>!=<sp/>(ssize_t)<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(std::string(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>write:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>name);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="645"><highlight class="normal">}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647" refid="namespacelbann_1a85385e2a9e058b6720300b4cbdd2b1d0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1a85385e2a9e058b6720300b4cbdd2b1d0" kindref="member">lbann::read_bytes</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>ssize_t<sp/>rc<sp/>=<sp/>read(fd,<sp/>buf,<sp/>size);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rc<sp/>!=<sp/>(ssize_t)<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(std::string(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>name);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="656"><highlight class="normal">}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658" refid="namespacelbann_1a3a801c9f48655f81b886af4bff083f27" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1a3a801c9f48655f81b886af4bff083f27" kindref="member">lbann::write_uint32</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/>uint32_t<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1aed95061796f19fa1648dcc99dc335abd" kindref="member">lbann::write_bytes</ref>(fd,<sp/>name,<sp/>&amp;val,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t));</highlight></codeline>
<codeline lineno="660"><highlight class="normal">}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662" refid="namespacelbann_1aedcde4d93c4feb5090c927de1c45b90d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1aedcde4d93c4feb5090c927de1c45b90d" kindref="member">lbann::read_uint32</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/>uint32_t<sp/>*val)<sp/>{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1a85385e2a9e058b6720300b4cbdd2b1d0" kindref="member">lbann::read_bytes</ref>(fd,<sp/>name,<sp/>val,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t));</highlight></codeline>
<codeline lineno="664"><highlight class="normal">}</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666" refid="namespacelbann_1a234f8c7b9bbc2d9310d3e40314eb497c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1a234f8c7b9bbc2d9310d3e40314eb497c" kindref="member">lbann::write_uint64</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/>uint64_t<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1aed95061796f19fa1648dcc99dc335abd" kindref="member">lbann::write_bytes</ref>(fd,<sp/>name,<sp/>&amp;val,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint64_t));</highlight></codeline>
<codeline lineno="668"><highlight class="normal">}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670" refid="namespacelbann_1a7ca20ac4f0ec9feaa2f6d5b6ef3c8865" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1a7ca20ac4f0ec9feaa2f6d5b6ef3c8865" kindref="member">lbann::read_uint64</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/>uint64_t<sp/>*val)<sp/>{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1a85385e2a9e058b6720300b4cbdd2b1d0" kindref="member">lbann::read_bytes</ref>(fd,<sp/>name,<sp/>val,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint64_t));</highlight></codeline>
<codeline lineno="672"><highlight class="normal">}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674" refid="namespacelbann_1a917727ad7e4f0dfd6d5a609cdc6dd9e2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1a917727ad7e4f0dfd6d5a609cdc6dd9e2" kindref="member">lbann::write_int32_contig</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32_t<sp/>*buf,<sp/>uint64_t<sp/>count)<sp/>{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes<sp/>=<sp/>count<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32_t);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1aed95061796f19fa1648dcc99dc335abd" kindref="member">lbann::write_bytes</ref>(fd,<sp/>name,<sp/>buf,<sp/>bytes);</highlight></codeline>
<codeline lineno="677"><highlight class="normal">}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679" refid="namespacelbann_1acb5b0f1b30c9ab2fba700bb953515810" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1acb5b0f1b30c9ab2fba700bb953515810" kindref="member">lbann::read_int32_contig</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/>int32_t<sp/>*buf,<sp/>uint64_t<sp/>count)<sp/>{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes<sp/>=<sp/>count<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32_t);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1a85385e2a9e058b6720300b4cbdd2b1d0" kindref="member">lbann::read_bytes</ref>(fd,<sp/>name,<sp/>buf,<sp/>bytes);</highlight></codeline>
<codeline lineno="682"><highlight class="normal">}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684" refid="namespacelbann_1a73339e4587f8ce7f653be03a3a6cbcd0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1a73339e4587f8ce7f653be03a3a6cbcd0" kindref="member">lbann::write_float</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1aed95061796f19fa1648dcc99dc335abd" kindref="member">lbann::write_bytes</ref>(fd,<sp/>name,<sp/>&amp;val,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="686"><highlight class="normal">}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688" refid="namespacelbann_1acd0595f8c31773a3a46f477a83e4c0f3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1acd0595f8c31773a3a46f477a83e4c0f3" kindref="member">lbann::read_float</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*val)<sp/>{</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1a85385e2a9e058b6720300b4cbdd2b1d0" kindref="member">lbann::read_bytes</ref>(fd,<sp/>name,<sp/>val,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="690"><highlight class="normal">}</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692" refid="namespacelbann_1a827b050911630a21f248b128e3859044" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1a827b050911630a21f248b128e3859044" kindref="member">lbann::write_double</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1aed95061796f19fa1648dcc99dc335abd" kindref="member">lbann::write_bytes</ref>(fd,<sp/>name,<sp/>&amp;val,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="694"><highlight class="normal">}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696" refid="namespacelbann_1a66f98f36cf54dca622f1186309961dd4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1a66f98f36cf54dca622f1186309961dd4" kindref="member">lbann::read_double</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*val)<sp/>{</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1a85385e2a9e058b6720300b4cbdd2b1d0" kindref="member">lbann::read_bytes</ref>(fd,<sp/>name,<sp/>val,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="698"><highlight class="normal">}</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700" refid="namespacelbann_1add2807d7303bd96d2804f0b14e894c68" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1add2807d7303bd96d2804f0b14e894c68" kindref="member">lbann::write_string</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>ssize_t<sp/>rc<sp/>=<sp/>write(fd,<sp/>buf,<sp/>size);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rc<sp/>!=<sp/>(ssize_t)<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(std::string(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>write:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>name);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="709"><highlight class="normal">}</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711" refid="namespacelbann_1a784843ebce0e596dba31c1d981a7f087" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1a784843ebce0e596dba31c1d981a7f087" kindref="member">lbann::read_string</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/>ssize_t<sp/>rc<sp/>=<sp/>read(fd,<sp/>buf,<sp/>size);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rc<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(std::string(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>name);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="720"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/mckinney27/doxy-testbed/lbann/src/io/persist.cpp"/>
  </compounddef>
</doxygen>
