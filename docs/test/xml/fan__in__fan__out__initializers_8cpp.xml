<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="fan__in__fan__out__initializers_8cpp" kind="file" language="C++">
    <compoundname>fan_in_fan_out_initializers.cpp</compoundname>
    <includes refid="fan__in__fan__out__initializers_8hpp" local="yes">lbann/weights/fan_in_fan_out_initializers.hpp</includes>
    <includes refid="random_8hpp" local="yes">lbann/utils/random.hpp</includes>
    <incdepgraph>
      <node id="25866">
        <label>lbann/weights/fan_in_fan_out_initializers.hpp</label>
        <link refid="fan__in__fan__out__initializers_8hpp"/>
        <childnode refid="25867" relation="include">
        </childnode>
      </node>
      <node id="25865">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/weights/fan_in_fan_out_initializers.cpp</label>
        <link refid="fan__in__fan__out__initializers_8cpp"/>
        <childnode refid="25866" relation="include">
        </childnode>
        <childnode refid="25888" relation="include">
        </childnode>
      </node>
      <node id="25889">
        <label>lbann/io/persist.hpp</label>
        <link refid="persist_8hpp"/>
        <childnode refid="25868" relation="include">
        </childnode>
        <childnode refid="25869" relation="include">
        </childnode>
      </node>
      <node id="25869">
        <label>El.hpp</label>
      </node>
      <node id="25868">
        <label>lbann/base.hpp</label>
        <link refid="base_8hpp"/>
        <childnode refid="25869" relation="include">
        </childnode>
        <childnode refid="25870" relation="include">
        </childnode>
        <childnode refid="25871" relation="include">
        </childnode>
        <childnode refid="25876" relation="include">
        </childnode>
      </node>
      <node id="25884">
        <label>string</label>
      </node>
      <node id="25887">
        <label>lbann/utils/cudnn_wrapper.hpp</label>
        <link refid="cudnn__wrapper_8hpp"/>
        <childnode refid="25878" relation="include">
        </childnode>
        <childnode refid="25868" relation="include">
        </childnode>
        <childnode refid="25877" relation="include">
        </childnode>
        <childnode refid="25881" relation="include">
        </childnode>
      </node>
      <node id="25879">
        <label>map</label>
      </node>
      <node id="25886">
        <label>exception</label>
      </node>
      <node id="25890">
        <label>random</label>
      </node>
      <node id="25867">
        <label>lbann/weights/initializer.hpp</label>
        <link refid="initializer_8hpp"/>
        <childnode refid="25868" relation="include">
        </childnode>
        <childnode refid="25877" relation="include">
        </childnode>
        <childnode refid="25881" relation="include">
        </childnode>
        <childnode refid="25887" relation="include">
        </childnode>
      </node>
      <node id="25873">
        <label>cstdio</label>
      </node>
      <node id="25882">
        <label>lbann/utils/stack_trace.hpp</label>
        <link refid="stack__trace_8hpp"/>
        <childnode refid="25883" relation="include">
        </childnode>
        <childnode refid="25884" relation="include">
        </childnode>
      </node>
      <node id="25875">
        <label>cxxabi.h</label>
      </node>
      <node id="25881">
        <label>lbann/utils/exception.hpp</label>
        <link refid="exception_8hpp"/>
        <childnode refid="25868" relation="include">
        </childnode>
        <childnode refid="25877" relation="include">
        </childnode>
        <childnode refid="25882" relation="include">
        </childnode>
        <childnode refid="25885" relation="include">
        </childnode>
        <childnode refid="25886" relation="include">
        </childnode>
      </node>
      <node id="25878">
        <label>vector</label>
      </node>
      <node id="25877">
        <label>lbann/comm.hpp</label>
        <link refid="comm_8hpp"/>
        <childnode refid="25878" relation="include">
        </childnode>
        <childnode refid="25879" relation="include">
        </childnode>
        <childnode refid="25880" relation="include">
        </childnode>
        <childnode refid="25868" relation="include">
        </childnode>
      </node>
      <node id="25872">
        <label>cstdlib</label>
      </node>
      <node id="25885">
        <label>iostream</label>
      </node>
      <node id="25888">
        <label>lbann/utils/random.hpp</label>
        <link refid="random_8hpp"/>
        <childnode refid="25868" relation="include">
        </childnode>
        <childnode refid="25877" relation="include">
        </childnode>
        <childnode refid="25889" relation="include">
        </childnode>
        <childnode refid="25890" relation="include">
        </childnode>
      </node>
      <node id="25883">
        <label>csignal</label>
      </node>
      <node id="25876">
        <label>lbann_config.hpp</label>
      </node>
      <node id="25871">
        <label>lbann/utils/cyg_profile.hpp</label>
        <link refid="cyg__profile_8hpp"/>
        <childnode refid="25872" relation="include">
        </childnode>
        <childnode refid="25873" relation="include">
        </childnode>
        <childnode refid="25874" relation="include">
        </childnode>
        <childnode refid="25875" relation="include">
        </childnode>
      </node>
      <node id="25870">
        <label>lbann/Elemental_extensions.hpp</label>
        <link refid="Elemental__extensions_8hpp"/>
        <childnode refid="25869" relation="include">
        </childnode>
      </node>
      <node id="25880">
        <label>typeindex</label>
      </node>
      <node id="25874">
        <label>dlfcn.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacelbann">lbann</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2014-2016,<sp/>Lawrence<sp/>Livermore<sp/>National<sp/>Security,<sp/>LLC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Produced<sp/>at<sp/>the<sp/>Lawrence<sp/>Livermore<sp/>National<sp/>Laboratory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Written<sp/>by<sp/>the<sp/>LBANN<sp/>Research<sp/>Team<sp/>(B.<sp/>Van<sp/>Essen,<sp/>et<sp/>al.)<sp/>listed<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>CONTRIBUTORS<sp/>file.<sp/>&lt;lbann-dev@llnl.gov&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LLNL-CODE-697807.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>LBANN:<sp/>Livermore<sp/>Big<sp/>Artificial<sp/>Neural<sp/>Network</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Toolkit.<sp/>For<sp/>details,<sp/>see<sp/>http://software.llnl.gov/LBANN<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://github.com/LLNL/LBANN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;Licensee&quot;);<sp/>you</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implied.<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>license.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>fan_in_fan_out_initializer<sp/>.hpp<sp/>.cpp<sp/>-<sp/>Fan-in-fan-out<sp/>initializer<sp/>classes</highlight></codeline>
<codeline lineno="28"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="fan__in__fan__out__initializers_8hpp" kindref="compound">lbann/weights/fan_in_fan_out_initializers.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="random_8hpp" kindref="compound">lbann/utils/random.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacelbann" kindref="compound">lbann</ref><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="classlbann_1_1glorot__normal__initializer_1a0bd7253159fe5ca9039af44b7fca1709" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1glorot__normal__initializer_1a0bd7253159fe5ca9039af44b7fca1709" kindref="member">glorot_normal_initializer::initialize_entries</ref>(<ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref>&amp;<sp/>weights_matrix)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1fan__in__fan__out__initializer_1aea6639db271d9050f0a2e4f8c8dfa6cd" kindref="member">m_fan_in</ref><sp/>&lt;=<sp/>0<sp/>||<sp/><ref refid="classlbann_1_1fan__in__fan__out__initializer_1ac67d275ab8574780525d2af59b738338" kindref="member">m_fan_out</ref><sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>err;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>&lt;&lt;<sp/>__FILE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>__LINE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>dimensions<sp/>for<sp/>Glorot<sp/>normal<sp/>initialization<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(fan_in=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>this-&gt;<ref refid="classlbann_1_1fan__in__fan__out__initializer_1aea6639db271d9050f0a2e4f8c8dfa6cd" kindref="member">m_fan_in</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,fan_out=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>this-&gt;<ref refid="classlbann_1_1fan__in__fan__out__initializer_1ac67d275ab8574780525d2af59b738338" kindref="member">m_fan_out</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(err.str());</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType<sp/>variance<sp/>=<sp/>DataType(2)<sp/>/<sp/>(<ref refid="classlbann_1_1fan__in__fan__out__initializer_1aea6639db271d9050f0a2e4f8c8dfa6cd" kindref="member">m_fan_in</ref><sp/>+<sp/><ref refid="classlbann_1_1fan__in__fan__out__initializer_1ac67d275ab8574780525d2af59b738338" kindref="member">m_fan_out</ref>);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><ref refid="namespacelbann_1abd116f95f55d0e29d9a0cc386139c4b4" kindref="member">gaussian_fill</ref>(weights_matrix,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weights_matrix.Height(),</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weights_matrix.Width(),</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataType(0),</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sqrt(variance));</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="classlbann_1_1glorot__uniform__initializer_1a3a44410934f791cee272183a6a36ae0c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1glorot__uniform__initializer_1a3a44410934f791cee272183a6a36ae0c" kindref="member">glorot_uniform_initializer::initialize_entries</ref>(<ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref>&amp;<sp/>weights_matrix)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1fan__in__fan__out__initializer_1aea6639db271d9050f0a2e4f8c8dfa6cd" kindref="member">m_fan_in</ref><sp/>&lt;=<sp/>0<sp/>||<sp/><ref refid="classlbann_1_1fan__in__fan__out__initializer_1ac67d275ab8574780525d2af59b738338" kindref="member">m_fan_out</ref><sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>err;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>&lt;&lt;<sp/>__FILE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>__LINE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>dimensions<sp/>for<sp/>Glorot<sp/>uniform<sp/>initialization<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(fan_in=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>this-&gt;<ref refid="classlbann_1_1fan__in__fan__out__initializer_1aea6639db271d9050f0a2e4f8c8dfa6cd" kindref="member">m_fan_in</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,fan_out=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>this-&gt;<ref refid="classlbann_1_1fan__in__fan__out__initializer_1ac67d275ab8574780525d2af59b738338" kindref="member">m_fan_out</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(err.str());</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType<sp/>variance<sp/>=<sp/>DataType(2)<sp/>/<sp/>(<ref refid="classlbann_1_1fan__in__fan__out__initializer_1aea6639db271d9050f0a2e4f8c8dfa6cd" kindref="member">m_fan_in</ref><sp/>+<sp/><ref refid="classlbann_1_1fan__in__fan__out__initializer_1ac67d275ab8574780525d2af59b738338" kindref="member">m_fan_out</ref>);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><ref refid="namespacelbann_1abd116f95f55d0e29d9a0cc386139c4b4" kindref="member">gaussian_fill</ref>(weights_matrix,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weights_matrix.Height(),</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weights_matrix.Width(),</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataType(0),</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sqrt(3*variance));</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="classlbann_1_1he__normal__initializer_1a01d283880fc0c1b743bcc89e732f4e15" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1he__normal__initializer_1a01d283880fc0c1b743bcc89e732f4e15" kindref="member">he_normal_initializer::initialize_entries</ref>(<ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref>&amp;<sp/>weights_matrix)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1fan__in__fan__out__initializer_1aea6639db271d9050f0a2e4f8c8dfa6cd" kindref="member">m_fan_in</ref><sp/>&lt;=<sp/>0<sp/>||<sp/><ref refid="classlbann_1_1fan__in__fan__out__initializer_1ac67d275ab8574780525d2af59b738338" kindref="member">m_fan_out</ref><sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>err;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>&lt;&lt;<sp/>__FILE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>__LINE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>dimensions<sp/>for<sp/>He<sp/>normal<sp/>initialization<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(fan_in=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>this-&gt;<ref refid="classlbann_1_1fan__in__fan__out__initializer_1aea6639db271d9050f0a2e4f8c8dfa6cd" kindref="member">m_fan_in</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,fan_out=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>this-&gt;<ref refid="classlbann_1_1fan__in__fan__out__initializer_1ac67d275ab8574780525d2af59b738338" kindref="member">m_fan_out</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(err.str());</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType<sp/>variance<sp/>=<sp/>DataType(1)<sp/>/<sp/><ref refid="classlbann_1_1fan__in__fan__out__initializer_1aea6639db271d9050f0a2e4f8c8dfa6cd" kindref="member">m_fan_in</ref>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><ref refid="namespacelbann_1abd116f95f55d0e29d9a0cc386139c4b4" kindref="member">gaussian_fill</ref>(weights_matrix,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weights_matrix.Height(),</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weights_matrix.Width(),</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataType(0),</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sqrt(variance));</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="classlbann_1_1he__uniform__initializer_1a8f86401b0b216ba159f57d3475769a24" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1he__uniform__initializer_1a8f86401b0b216ba159f57d3475769a24" kindref="member">he_uniform_initializer::initialize_entries</ref>(<ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref>&amp;<sp/>weights_matrix)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1fan__in__fan__out__initializer_1aea6639db271d9050f0a2e4f8c8dfa6cd" kindref="member">m_fan_in</ref><sp/>&lt;=<sp/>0<sp/>||<sp/><ref refid="classlbann_1_1fan__in__fan__out__initializer_1ac67d275ab8574780525d2af59b738338" kindref="member">m_fan_out</ref><sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>err;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>&lt;&lt;<sp/>__FILE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>__LINE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>dimensions<sp/>for<sp/>He<sp/>uniform<sp/>initialization<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(fan_in=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>this-&gt;<ref refid="classlbann_1_1fan__in__fan__out__initializer_1aea6639db271d9050f0a2e4f8c8dfa6cd" kindref="member">m_fan_in</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,fan_out=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>this-&gt;<ref refid="classlbann_1_1fan__in__fan__out__initializer_1ac67d275ab8574780525d2af59b738338" kindref="member">m_fan_out</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(err.str());</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType<sp/>variance<sp/>=<sp/>DataType(1)<sp/>/<sp/><ref refid="classlbann_1_1fan__in__fan__out__initializer_1aea6639db271d9050f0a2e4f8c8dfa6cd" kindref="member">m_fan_in</ref>;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><ref refid="namespacelbann_1abd116f95f55d0e29d9a0cc386139c4b4" kindref="member">gaussian_fill</ref>(weights_matrix,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weights_matrix.Height(),</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weights_matrix.Width(),</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataType(0),</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sqrt(3*variance));</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>lbann</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/mckinney27/doxy-testbed/lbann/src/weights/fan_in_fan_out_initializers.cpp"/>
  </compounddef>
</doxygen>
