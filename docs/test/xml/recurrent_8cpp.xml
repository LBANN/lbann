<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="recurrent_8cpp" kind="file" language="C++">
    <compoundname>recurrent.cpp</compoundname>
    <includes local="no">algorithm</includes>
    <includes refid="recurrent_8hpp" local="yes">lbann/models/recurrent.hpp</includes>
    <includes refid="generic__input__layer_8hpp" local="yes">lbann/layers/io/input/generic_input_layer.hpp</includes>
    <includes refid="generic__target__layer_8hpp" local="yes">lbann/layers/io/target/generic_target_layer.hpp</includes>
    <includes refid="slice_8hpp" local="yes">lbann/layers/transform/slice.hpp</includes>
    <includes refid="split_8hpp" local="yes">lbann/layers/transform/split.hpp</includes>
    <includes refid="concatenation_8hpp" local="yes">lbann/layers/transform/concatenation.hpp</includes>
    <includes refid="constant_8hpp" local="yes">lbann/layers/transform/constant.hpp</includes>
    <includes refid="dummy_8hpp" local="yes">lbann/layers/transform/dummy.hpp</includes>
    <incdepgraph>
      <node id="21671">
        <label>sys/stat.h</label>
      </node>
      <node id="21651">
        <label>lbann/utils/summary.hpp</label>
        <link refid="summary_8hpp"/>
        <childnode refid="21652" relation="include">
        </childnode>
        <childnode refid="21647" relation="include">
        </childnode>
        <childnode refid="21637" relation="include">
        </childnode>
        <childnode refid="21646" relation="include">
        </childnode>
      </node>
      <node id="21692">
        <label>lbann/utils/quantizer.hpp</label>
        <link refid="quantizer_8hpp"/>
        <childnode refid="21677" relation="include">
        </childnode>
        <childnode refid="21637" relation="include">
        </childnode>
        <childnode refid="21646" relation="include">
        </childnode>
        <childnode refid="21666" relation="include">
        </childnode>
        <childnode refid="21655" relation="include">
        </childnode>
        <childnode refid="21693" relation="include">
        </childnode>
        <childnode refid="21694" relation="include">
        </childnode>
      </node>
      <node id="21683">
        <label>lbann/data_readers/image_preprocessor.hpp</label>
        <link refid="image__preprocessor_8hpp"/>
        <childnode refid="21645" relation="include">
        </childnode>
        <childnode refid="21637" relation="include">
        </childnode>
      </node>
      <node id="21700">
        <label>lbann/layers/transform/concatenation.hpp</label>
        <link refid="concatenation_8hpp"/>
        <childnode refid="21697" relation="include">
        </childnode>
        <childnode refid="21655" relation="include">
        </childnode>
        <childnode refid="21698" relation="include">
        </childnode>
      </node>
      <node id="21663">
        <label>lbann/io/persist.hpp</label>
        <link refid="persist_8hpp"/>
        <childnode refid="21637" relation="include">
        </childnode>
        <childnode refid="21638" relation="include">
        </childnode>
      </node>
      <node id="21638">
        <label>El.hpp</label>
      </node>
      <node id="21637">
        <label>lbann/base.hpp</label>
        <link refid="base_8hpp"/>
        <childnode refid="21638" relation="include">
        </childnode>
        <childnode refid="21639" relation="include">
        </childnode>
        <childnode refid="21640" relation="include">
        </childnode>
        <childnode refid="21645" relation="include">
        </childnode>
      </node>
      <node id="21689">
        <label>lbann/io/data_buffers/distributed_io_buffer.hpp</label>
        <link refid="distributed__io__buffer_8hpp"/>
        <childnode refid="21687" relation="include">
        </childnode>
      </node>
      <node id="21690">
        <label>lbann/callbacks/callback_imcomm.hpp</label>
        <link refid="callback__imcomm_8hpp"/>
        <childnode refid="21647" relation="include">
        </childnode>
        <childnode refid="21665" relation="include">
        </childnode>
        <childnode refid="21677" relation="include">
        </childnode>
        <childnode refid="21691" relation="include">
        </childnode>
        <childnode refid="21692" relation="include">
        </childnode>
      </node>
      <node id="21684">
        <label>cassert</label>
      </node>
      <node id="21673">
        <label>fcntl.h</label>
      </node>
      <node id="21676">
        <label>lbann/metrics/metric.hpp</label>
        <link refid="metric_8hpp"/>
        <childnode refid="21637" relation="include">
        </childnode>
        <childnode refid="21646" relation="include">
        </childnode>
        <childnode refid="21655" relation="include">
        </childnode>
        <childnode refid="21663" relation="include">
        </childnode>
      </node>
      <node id="21679">
        <label>lbann/layers/io/io_layer.hpp</label>
        <link refid="io__layer_8hpp"/>
        <childnode refid="21650" relation="include">
        </childnode>
        <childnode refid="21680" relation="include">
        </childnode>
        <childnode refid="21686" relation="include">
        </childnode>
        <childnode refid="21663" relation="include">
        </childnode>
        <childnode refid="21655" relation="include">
        </childnode>
        <childnode refid="21652" relation="include">
        </childnode>
        <childnode refid="21672" relation="include">
        </childnode>
        <childnode refid="21671" relation="include">
        </childnode>
        <childnode refid="21685" relation="include">
        </childnode>
        <childnode refid="21642" relation="include">
        </childnode>
      </node>
      <node id="21652">
        <label>string</label>
      </node>
      <node id="21687">
        <label>lbann/io/data_buffers/generic_io_buffer.hpp</label>
        <link refid="generic__io__buffer_8hpp"/>
        <childnode refid="21637" relation="include">
        </childnode>
        <childnode refid="21646" relation="include">
        </childnode>
        <childnode refid="21680" relation="include">
        </childnode>
      </node>
      <node id="21632">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/models/recurrent.cpp</label>
        <link refid="recurrent_8cpp"/>
        <childnode refid="21633" relation="include">
        </childnode>
        <childnode refid="21634" relation="include">
        </childnode>
        <childnode refid="21678" relation="include">
        </childnode>
        <childnode refid="21695" relation="include">
        </childnode>
        <childnode refid="21696" relation="include">
        </childnode>
        <childnode refid="21699" relation="include">
        </childnode>
        <childnode refid="21700" relation="include">
        </childnode>
        <childnode refid="21701" relation="include">
        </childnode>
        <childnode refid="21702" relation="include">
        </childnode>
      </node>
      <node id="21660">
        <label>lbann/utils/cudnn_wrapper.hpp</label>
        <link refid="cudnn__wrapper_8hpp"/>
        <childnode refid="21647" relation="include">
        </childnode>
        <childnode refid="21637" relation="include">
        </childnode>
        <childnode refid="21646" relation="include">
        </childnode>
        <childnode refid="21655" relation="include">
        </childnode>
      </node>
      <node id="21666">
        <label>lbann/utils/timer.hpp</label>
        <link refid="timer_8hpp"/>
        <childnode refid="21667" relation="include">
        </childnode>
      </node>
      <node id="21648">
        <label>map</label>
      </node>
      <node id="21698">
        <label>lbann/utils/cublas_wrapper.hpp</label>
        <link refid="cublas__wrapper_8hpp"/>
        <childnode refid="21637" relation="include">
        </childnode>
      </node>
      <node id="21635">
        <label>lbann/models/directed_acyclic_graph.hpp</label>
        <link refid="directed__acyclic__graph_8hpp"/>
        <childnode refid="21636" relation="include">
        </childnode>
        <childnode refid="21650" relation="include">
        </childnode>
      </node>
      <node id="21665">
        <label>unordered_set</label>
      </node>
      <node id="21693">
        <label>omp.h</label>
      </node>
      <node id="21659">
        <label>exception</label>
      </node>
      <node id="21697">
        <label>lbann/layers/transform/transform.hpp</label>
        <link refid="transform_8hpp"/>
        <childnode refid="21650" relation="include">
        </childnode>
      </node>
      <node id="21634">
        <label>lbann/models/recurrent.hpp</label>
        <link refid="recurrent_8hpp"/>
        <childnode refid="21635" relation="include">
        </childnode>
      </node>
      <node id="21682">
        <label>random</label>
      </node>
      <node id="21662">
        <label>lbann/weights/initializer.hpp</label>
        <link refid="initializer_8hpp"/>
        <childnode refid="21637" relation="include">
        </childnode>
        <childnode refid="21646" relation="include">
        </childnode>
        <childnode refid="21655" relation="include">
        </childnode>
        <childnode refid="21660" relation="include">
        </childnode>
      </node>
      <node id="21672">
        <label>sys/types.h</label>
      </node>
      <node id="21691">
        <label>lbann/callbacks/callback.hpp</label>
        <link refid="callback_8hpp"/>
        <childnode refid="21637" relation="include">
        </childnode>
        <childnode refid="21651" relation="include">
        </childnode>
        <childnode refid="21636" relation="include">
        </childnode>
        <childnode refid="21650" relation="include">
        </childnode>
      </node>
      <node id="21668">
        <label>lbann/utils/graph.hpp</label>
        <link refid="graph_8hpp"/>
        <childnode refid="21658" relation="include">
        </childnode>
        <childnode refid="21647" relation="include">
        </childnode>
        <childnode refid="21669" relation="include">
        </childnode>
        <childnode refid="21648" relation="include">
        </childnode>
      </node>
      <node id="21642">
        <label>cstdio</label>
      </node>
      <node id="21688">
        <label>lbann/io/data_buffers/partitioned_io_buffer.hpp</label>
        <link refid="partitioned__io__buffer_8hpp"/>
        <childnode refid="21687" relation="include">
        </childnode>
      </node>
      <node id="21656">
        <label>lbann/utils/stack_trace.hpp</label>
        <link refid="stack__trace_8hpp"/>
        <childnode refid="21657" relation="include">
        </childnode>
        <childnode refid="21652" relation="include">
        </childnode>
      </node>
      <node id="21644">
        <label>cxxabi.h</label>
      </node>
      <node id="21655">
        <label>lbann/utils/exception.hpp</label>
        <link refid="exception_8hpp"/>
        <childnode refid="21637" relation="include">
        </childnode>
        <childnode refid="21646" relation="include">
        </childnode>
        <childnode refid="21656" relation="include">
        </childnode>
        <childnode refid="21658" relation="include">
        </childnode>
        <childnode refid="21659" relation="include">
        </childnode>
      </node>
      <node id="21685">
        <label>unistd.h</label>
      </node>
      <node id="21647">
        <label>vector</label>
      </node>
      <node id="21699">
        <label>lbann/layers/transform/split.hpp</label>
        <link refid="split_8hpp"/>
        <childnode refid="21647" relation="include">
        </childnode>
        <childnode refid="21697" relation="include">
        </childnode>
        <childnode refid="21655" relation="include">
        </childnode>
        <childnode refid="21698" relation="include">
        </childnode>
      </node>
      <node id="21646">
        <label>lbann/comm.hpp</label>
        <link refid="comm_8hpp"/>
        <childnode refid="21647" relation="include">
        </childnode>
        <childnode refid="21648" relation="include">
        </childnode>
        <childnode refid="21649" relation="include">
        </childnode>
        <childnode refid="21637" relation="include">
        </childnode>
      </node>
      <node id="21674">
        <label>lbann/objective_functions/objective_function.hpp</label>
        <link refid="objective__function_8hpp"/>
        <childnode refid="21675" relation="include">
        </childnode>
        <childnode refid="21676" relation="include">
        </childnode>
      </node>
      <node id="21670">
        <label>lbann/io/file_io.hpp</label>
        <link refid="file__io_8hpp"/>
        <childnode refid="21671" relation="include">
        </childnode>
        <childnode refid="21672" relation="include">
        </childnode>
        <childnode refid="21673" relation="include">
        </childnode>
      </node>
      <node id="21696">
        <label>lbann/layers/transform/slice.hpp</label>
        <link refid="slice_8hpp"/>
        <childnode refid="21697" relation="include">
        </childnode>
        <childnode refid="21655" relation="include">
        </childnode>
        <childnode refid="21698" relation="include">
        </childnode>
      </node>
      <node id="21664">
        <label>lbann.pb.h</label>
      </node>
      <node id="21641">
        <label>cstdlib</label>
      </node>
      <node id="21678">
        <label>lbann/layers/io/input/generic_input_layer.hpp</label>
        <link refid="generic__input__layer_8hpp"/>
        <childnode refid="21679" relation="include">
        </childnode>
        <childnode refid="21687" relation="include">
        </childnode>
        <childnode refid="21688" relation="include">
        </childnode>
        <childnode refid="21689" relation="include">
        </childnode>
        <childnode refid="21636" relation="include">
        </childnode>
        <childnode refid="21690" relation="include">
        </childnode>
      </node>
      <node id="21658">
        <label>iostream</label>
      </node>
      <node id="21653">
        <label>lbann/optimizers/optimizer.hpp</label>
        <link refid="optimizer_8hpp"/>
        <childnode refid="21654" relation="include">
        </childnode>
        <childnode refid="21637" relation="include">
        </childnode>
        <childnode refid="21646" relation="include">
        </childnode>
        <childnode refid="21655" relation="include">
        </childnode>
        <childnode refid="21660" relation="include">
        </childnode>
        <childnode refid="21661" relation="include">
        </childnode>
        <childnode refid="21652" relation="include">
        </childnode>
        <childnode refid="21665" relation="include">
        </childnode>
      </node>
      <node id="21677">
        <label>unordered_map</label>
      </node>
      <node id="21681">
        <label>lbann/utils/random.hpp</label>
        <link refid="random_8hpp"/>
        <childnode refid="21637" relation="include">
        </childnode>
        <childnode refid="21646" relation="include">
        </childnode>
        <childnode refid="21663" relation="include">
        </childnode>
        <childnode refid="21682" relation="include">
        </childnode>
      </node>
      <node id="21650">
        <label>lbann/layers/layer.hpp</label>
        <link refid="layer_8hpp"/>
        <childnode refid="21637" relation="include">
        </childnode>
        <childnode refid="21646" relation="include">
        </childnode>
        <childnode refid="21651" relation="include">
        </childnode>
        <childnode refid="21653" relation="include">
        </childnode>
        <childnode refid="21655" relation="include">
        </childnode>
        <childnode refid="21660" relation="include">
        </childnode>
        <childnode refid="21666" relation="include">
        </childnode>
        <childnode refid="21663" relation="include">
        </childnode>
        <childnode refid="21664" relation="include">
        </childnode>
        <childnode refid="21652" relation="include">
        </childnode>
        <childnode refid="21647" relation="include">
        </childnode>
      </node>
      <node id="21701">
        <label>lbann/layers/transform/constant.hpp</label>
        <link refid="constant_8hpp"/>
        <childnode refid="21697" relation="include">
        </childnode>
      </node>
      <node id="21667">
        <label>chrono</label>
      </node>
      <node id="21702">
        <label>lbann/layers/transform/dummy.hpp</label>
        <link refid="dummy_8hpp"/>
        <childnode refid="21697" relation="include">
        </childnode>
      </node>
      <node id="21675">
        <label>lbann/objective_functions/objective_function_term.hpp</label>
        <link refid="objective__function__term_8hpp"/>
        <childnode refid="21637" relation="include">
        </childnode>
        <childnode refid="21650" relation="include">
        </childnode>
        <childnode refid="21661" relation="include">
        </childnode>
      </node>
      <node id="21657">
        <label>csignal</label>
      </node>
      <node id="21686">
        <label>lbann/utils/dataset.hpp</label>
        <link refid="dataset_8hpp"/>
        <childnode refid="21680" relation="include">
        </childnode>
      </node>
      <node id="21661">
        <label>lbann/weights/weights.hpp</label>
        <link refid="weights_8hpp"/>
        <childnode refid="21652" relation="include">
        </childnode>
        <childnode refid="21637" relation="include">
        </childnode>
        <childnode refid="21646" relation="include">
        </childnode>
        <childnode refid="21655" relation="include">
        </childnode>
        <childnode refid="21660" relation="include">
        </childnode>
        <childnode refid="21662" relation="include">
        </childnode>
        <childnode refid="21663" relation="include">
        </childnode>
        <childnode refid="21664" relation="include">
        </childnode>
      </node>
      <node id="21680">
        <label>lbann/data_readers/data_reader.hpp</label>
        <link refid="data__reader_8hpp"/>
        <childnode refid="21637" relation="include">
        </childnode>
        <childnode refid="21681" relation="include">
        </childnode>
        <childnode refid="21655" relation="include">
        </childnode>
        <childnode refid="21646" relation="include">
        </childnode>
        <childnode refid="21670" relation="include">
        </childnode>
        <childnode refid="21663" relation="include">
        </childnode>
        <childnode refid="21683" relation="include">
        </childnode>
        <childnode refid="21684" relation="include">
        </childnode>
        <childnode refid="21633" relation="include">
        </childnode>
        <childnode refid="21652" relation="include">
        </childnode>
        <childnode refid="21647" relation="include">
        </childnode>
        <childnode refid="21685" relation="include">
        </childnode>
      </node>
      <node id="21645">
        <label>lbann_config.hpp</label>
      </node>
      <node id="21669">
        <label>set</label>
      </node>
      <node id="21636">
        <label>lbann/models/model.hpp</label>
        <link refid="model_8hpp"/>
        <childnode refid="21637" relation="include">
        </childnode>
        <childnode refid="21646" relation="include">
        </childnode>
        <childnode refid="21650" relation="include">
        </childnode>
        <childnode refid="21651" relation="include">
        </childnode>
        <childnode refid="21668" relation="include">
        </childnode>
        <childnode refid="21670" relation="include">
        </childnode>
        <childnode refid="21663" relation="include">
        </childnode>
        <childnode refid="21674" relation="include">
        </childnode>
        <childnode refid="21676" relation="include">
        </childnode>
        <childnode refid="21661" relation="include">
        </childnode>
        <childnode refid="21653" relation="include">
        </childnode>
        <childnode refid="21664" relation="include">
        </childnode>
        <childnode refid="21647" relation="include">
        </childnode>
        <childnode refid="21652" relation="include">
        </childnode>
        <childnode refid="21677" relation="include">
        </childnode>
      </node>
      <node id="21654">
        <label>lbann/utils/compiler_control.hpp</label>
        <link refid="compiler__control_8hpp"/>
      </node>
      <node id="21633">
        <label>algorithm</label>
      </node>
      <node id="21640">
        <label>lbann/utils/cyg_profile.hpp</label>
        <link refid="cyg__profile_8hpp"/>
        <childnode refid="21641" relation="include">
        </childnode>
        <childnode refid="21642" relation="include">
        </childnode>
        <childnode refid="21643" relation="include">
        </childnode>
        <childnode refid="21644" relation="include">
        </childnode>
      </node>
      <node id="21639">
        <label>lbann/Elemental_extensions.hpp</label>
        <link refid="Elemental__extensions_8hpp"/>
        <childnode refid="21638" relation="include">
        </childnode>
      </node>
      <node id="21695">
        <label>lbann/layers/io/target/generic_target_layer.hpp</label>
        <link refid="generic__target__layer_8hpp"/>
        <childnode refid="21679" relation="include">
        </childnode>
        <childnode refid="21678" relation="include">
        </childnode>
        <childnode refid="21688" relation="include">
        </childnode>
        <childnode refid="21689" relation="include">
        </childnode>
        <childnode refid="21655" relation="include">
        </childnode>
        <childnode refid="21636" relation="include">
        </childnode>
        <childnode refid="21652" relation="include">
        </childnode>
        <childnode refid="21672" relation="include">
        </childnode>
        <childnode refid="21671" relation="include">
        </childnode>
        <childnode refid="21685" relation="include">
        </childnode>
      </node>
      <node id="21694">
        <label>quantizer_impl.hpp</label>
        <link refid="quantizer__impl_8hpp"/>
        <childnode refid="21693" relation="include">
        </childnode>
      </node>
      <node id="21649">
        <label>typeindex</label>
      </node>
      <node id="21643">
        <label>dlfcn.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacelbann">lbann</innernamespace>
    <innernamespace refid="namespacelbann_1_1anonymous__namespace_02recurrent_8cpp_03">lbann::anonymous_namespace{recurrent.cpp}</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2014-2016,<sp/>Lawrence<sp/>Livermore<sp/>National<sp/>Security,<sp/>LLC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Produced<sp/>at<sp/>the<sp/>Lawrence<sp/>Livermore<sp/>National<sp/>Laboratory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Written<sp/>by<sp/>the<sp/>LBANN<sp/>Research<sp/>Team<sp/>(B.<sp/>Van<sp/>Essen,<sp/>et<sp/>al.)<sp/>listed<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>CONTRIBUTORS<sp/>file.<sp/>&lt;lbann-dev@llnl.gov&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LLNL-CODE-697807.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>LBANN:<sp/>Livermore<sp/>Big<sp/>Artificial<sp/>Neural<sp/>Network</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Toolkit.<sp/>For<sp/>details,<sp/>see<sp/>http://software.llnl.gov/LBANN<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://github.com/LLNL/LBANN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;Licensee&quot;);<sp/>you</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implied.<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>license.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>recurrent<sp/>.hpp<sp/>.cpp<sp/>-<sp/>Recurrent<sp/>neural<sp/>network<sp/>models</highlight></codeline>
<codeline lineno="28"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="recurrent_8hpp" kindref="compound">lbann/models/recurrent.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="generic__input__layer_8hpp" kindref="compound">lbann/layers/io/input/generic_input_layer.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="generic__target__layer_8hpp" kindref="compound">lbann/layers/io/target/generic_target_layer.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="slice_8hpp" kindref="compound">lbann/layers/transform/slice.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="split_8hpp" kindref="compound">lbann/layers/transform/split.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="concatenation_8hpp" kindref="compound">lbann/layers/transform/concatenation.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="constant_8hpp" kindref="compound">lbann/layers/transform/constant.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dummy_8hpp" kindref="compound">lbann/layers/transform/dummy.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacelbann" kindref="compound">lbann</ref><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="namespacelbann_1_1anonymous__namespace_02recurrent_8cpp_03" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="namespacelbann_1_1anonymous__namespace_02recurrent_8cpp_03_1a8c76387c2dd531058700ad9a41cd093a" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1_1anonymous__namespace_02recurrent_8cpp_03_1a8c76387c2dd531058700ad9a41cd093a" kindref="member">unroll_input_layer</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unroll_depth,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Layer*&gt;&amp;<sp/>layers,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unordered_map&lt;const<sp/>Layer*,Layer*&gt;&amp;<sp/>prev_step_layer,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unordered_map&lt;const<sp/>Layer*,Layer*&gt;&amp;<sp/>next_step_layer)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>err;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>expect<sp/>first<sp/>layer<sp/>to<sp/>be<sp/>an<sp/>input<sp/>layer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>input<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="classlbann_1_1generic__input__layer" kindref="compound">generic_input_layer</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(layers.front());</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(input<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>&lt;&lt;<sp/>__FILE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>__LINE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>the<sp/>first<sp/>layer<sp/>to<sp/>be<sp/>an<sp/>input<sp/>layer&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(err.str());</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>slice<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>input_dims<sp/>=<sp/>input-&gt;get_neuron_dims();</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>slice_size<sp/>=<sp/>input_dims.front()<sp/>/<sp/>unroll_depth;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>slice_points;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>step<sp/>=<sp/>0;<sp/>step<sp/>&lt;=<sp/>unroll_depth;<sp/>++step)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>slice_points.push_back(slice_size<sp/>*<sp/>step);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>slice<sp/>and<sp/>split<sp/>layer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1Layer" kindref="compound">Layer</ref>*<sp/>slice<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1Layer" kindref="compound">Layer</ref>*<sp/>split<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/><ref refid="file__io_8cpp_1ab048c6f9fcbcfaa57ce68b00263dbebe" kindref="member">comm</ref><sp/>=<sp/>input-&gt;get_comm();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1cudnn_1_1cudnn__manager" kindref="compound">cudnn::cudnn_manager</ref>*<sp/>cudnn<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(input-&gt;get_data_layout())<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="base_8hpp_1a786677cbfb3f5677b4d84f3056eb08dba37d2a3465f7cbf4ab60f4e79944d0638" kindref="member">data_layout::DATA_PARALLEL</ref>:</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>slice<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1slice__layer" kindref="compound">slice_layer&lt;data_layout::DATA_PARALLEL&gt;</ref>(<ref refid="file__io_8cpp_1ab048c6f9fcbcfaa57ce68b00263dbebe" kindref="member">comm</ref>,<sp/>0,<sp/>slice_points,<sp/>cudnn);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>split<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1split__layer" kindref="compound">split_layer&lt;data_layout::DATA_PARALLEL&gt;</ref>(<ref refid="file__io_8cpp_1ab048c6f9fcbcfaa57ce68b00263dbebe" kindref="member">comm</ref>,<sp/>cudnn);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="base_8hpp_1a786677cbfb3f5677b4d84f3056eb08dbac94d7b0e44ab8bdcdad694a673cdeae0" kindref="member">data_layout::MODEL_PARALLEL</ref>:</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>slice<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1slice__layer" kindref="compound">slice_layer&lt;data_layout::MODEL_PARALLEL&gt;</ref>(<ref refid="file__io_8cpp_1ab048c6f9fcbcfaa57ce68b00263dbebe" kindref="member">comm</ref>,<sp/>0,<sp/>slice_points,<sp/>cudnn);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>split<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1split__layer" kindref="compound">split_layer&lt;data_layout::MODEL_PARALLEL&gt;</ref>(<ref refid="file__io_8cpp_1ab048c6f9fcbcfaa57ce68b00263dbebe" kindref="member">comm</ref>,<sp/>cudnn);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>&lt;&lt;<sp/>__FILE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>__LINE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>data<sp/>layout&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(err.str());</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>slice-&gt;<ref refid="classlbann_1_1Layer_1a82d8a038861b0af0d54fbf44ce715839" kindref="member">set_name</ref>(input-&gt;get_name()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_slice&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>split-&gt;<ref refid="classlbann_1_1Layer_1a82d8a038861b0af0d54fbf44ce715839" kindref="member">set_name</ref>(input-&gt;get_name()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_split&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>layers.insert(layers.begin()<sp/>+<sp/>1,<sp/>slice);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>layers.insert(layers.begin()<sp/>+<sp/>2,<sp/>split);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>relationships<sp/>between<sp/>split<sp/>layer<sp/>and<sp/>child<sp/>layers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>child<sp/>:<sp/>input-&gt;get_child_layers())<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>split-&gt;<ref refid="classlbann_1_1Layer_1ace0346ac56fd7ce7b6b44f27f224f35e" kindref="member">add_child_layer</ref>(child);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>child_parents<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classlbann_1_1Layer" kindref="compound">Layer</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(child)-&gt;get_parent_layers();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>std::replace(child_parents.begin(),<sp/>child_parents.end(),</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classlbann_1_1Layer" kindref="compound">Layer</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(input),<sp/>split);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>input-&gt;clear_child_layers();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>relationship<sp/>between<sp/>input<sp/>layer,<sp/>slice<sp/>layer,<sp/>and<sp/>split<sp/>layer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>input-&gt;add_child_layer(slice);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>slice-&gt;<ref refid="classlbann_1_1Layer_1a326668ce624a9bcc719a463820b2e3a4" kindref="member">add_parent_layer</ref>(input);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>slice-&gt;<ref refid="classlbann_1_1Layer_1ace0346ac56fd7ce7b6b44f27f224f35e" kindref="member">add_child_layer</ref>(split);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>split-&gt;<ref refid="classlbann_1_1Layer_1a326668ce624a9bcc719a463820b2e3a4" kindref="member">add_parent_layer</ref>(slice);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Input<sp/>layer<sp/>and<sp/>slice<sp/>layer<sp/>are<sp/>not<sp/>unrolled<sp/>any<sp/>further</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>prev_step_layer[input]<sp/>=<sp/>input;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>prev_step_layer[slice]<sp/>=<sp/>slice;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>next_step_layer[input]<sp/>=<sp/>input;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>next_step_layer[slice]<sp/>=<sp/>slice;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="namespacelbann_1_1anonymous__namespace_02recurrent_8cpp_03_1af04adecd9a62fdcd16ae78b3e95d4bb5" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1_1anonymous__namespace_02recurrent_8cpp_03_1af04adecd9a62fdcd16ae78b3e95d4bb5" kindref="member">unroll_target_layer</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unroll_depth,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Layer*&gt;&amp;<sp/>layers,</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unordered_map&lt;const<sp/>Layer*,Layer*&gt;&amp;<sp/>prev_step_layer,</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unordered_map&lt;const<sp/>Layer*,Layer*&gt;&amp;<sp/>next_step_layer)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>std::stringstream<sp/>err;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>expect<sp/>last<sp/>layer<sp/>to<sp/>be<sp/>a<sp/>target<sp/>layer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>target<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="classlbann_1_1generic__target__layer" kindref="compound">generic_target_layer</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(layers.back());</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(target<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>&lt;&lt;<sp/>__FILE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>__LINE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>the<sp/>last<sp/>layer<sp/>to<sp/>be<sp/>a<sp/>target<sp/>layer&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(err.str());</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>concatenation<sp/>layer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1Layer" kindref="compound">Layer</ref>*<sp/>concat<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/><ref refid="file__io_8cpp_1ab048c6f9fcbcfaa57ce68b00263dbebe" kindref="member">comm</ref><sp/>=<sp/>target-&gt;get_comm();</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(target-&gt;get_data_layout())<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="base_8hpp_1a786677cbfb3f5677b4d84f3056eb08dba37d2a3465f7cbf4ab60f4e79944d0638" kindref="member">data_layout::DATA_PARALLEL</ref>:</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>concat<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1concatenation__layer" kindref="compound">concatenation_layer&lt;data_layout::DATA_PARALLEL&gt;</ref>(<ref refid="file__io_8cpp_1ab048c6f9fcbcfaa57ce68b00263dbebe" kindref="member">comm</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="base_8hpp_1a786677cbfb3f5677b4d84f3056eb08dbac94d7b0e44ab8bdcdad694a673cdeae0" kindref="member">data_layout::MODEL_PARALLEL</ref>:</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>concat<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1concatenation__layer" kindref="compound">concatenation_layer&lt;data_layout::MODEL_PARALLEL&gt;</ref>(<ref refid="file__io_8cpp_1ab048c6f9fcbcfaa57ce68b00263dbebe" kindref="member">comm</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>&lt;&lt;<sp/>__FILE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>__LINE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>data<sp/>layout&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(err.str());</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>concat-&gt;set_name(target-&gt;get_name()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_concat&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>layers.insert(layers.end()<sp/>-<sp/>1,<sp/>concat);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>relationships<sp/>between<sp/>concatenation<sp/>layer<sp/>and<sp/>parent<sp/>layers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>parent<sp/>:<sp/>target-&gt;get_parent_layers())<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>concat-&gt;add_parent_layer(parent);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>parent_children<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classlbann_1_1Layer" kindref="compound">Layer</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(parent)-&gt;get_child_layers();</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>std::replace(parent_children.begin(),<sp/>parent_children.end(),</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classlbann_1_1Layer" kindref="compound">Layer</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(target),<sp/>concat);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>target-&gt;clear_parent_layers();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>relationship<sp/>between<sp/>target<sp/>layer<sp/>and<sp/>concatenation<sp/>layer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>concat-&gt;add_child_layer(target);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>target-&gt;add_parent_layer(concat);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Target<sp/>layer<sp/>and<sp/>concatenation<sp/>layer<sp/>are<sp/>not<sp/>unrolled<sp/>any<sp/>further</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>prev_step_layer[target]<sp/>=<sp/>target;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>prev_step_layer[concat]<sp/>=<sp/>concat;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>next_step_layer[target]<sp/>=<sp/>target;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>next_step_layer[concat]<sp/>=<sp/>concat;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="175" refid="namespacelbann_1_1anonymous__namespace_02recurrent_8cpp_03_1a16733e1fb301c3099a5fe07d703c3782" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1_1anonymous__namespace_02recurrent_8cpp_03_1a16733e1fb301c3099a5fe07d703c3782" kindref="member">add_unrolled_layers</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unroll_depth,</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Layer*&gt;&amp;<sp/>layers,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unordered_map&lt;const<sp/>Layer*,Layer*&gt;&amp;<sp/>prev_step_layer,</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unordered_map&lt;const<sp/>Layer*,Layer*&gt;&amp;<sp/>next_step_layer)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Unroll<sp/>network<sp/>to<sp/>desired<sp/>depth</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>std::vector&lt;Layer*&gt;<sp/>previous_step(layers.begin()<sp/>+<sp/>2,<sp/>layers.end()<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_step_layers<sp/>=<sp/>previous_step.size();</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>step<sp/>=<sp/>1;<sp/>step<sp/>&lt;<sp/>unroll_depth;<sp/>++step)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>current<sp/>step<sp/>by<sp/>copying<sp/>layers<sp/>from<sp/>previous<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Layer*&gt;<sp/>current_step;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>previous_layer<sp/>:<sp/>previous_step)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>current_layer<sp/>=<sp/>previous_layer-&gt;copy();</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_step.push_back(current_layer);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prev_step_layer[current_layer]<sp/>=<sp/>previous_layer;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>next_step_layer[previous_layer]<sp/>=<sp/>current_layer;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fix<sp/>pointers<sp/>within<sp/>current<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>current_layer<sp/>:<sp/>current_step)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>layer_pointers<sp/>=<sp/>current_layer-&gt;get_layer_pointers();</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>layer_pointer<sp/>:<sp/>layer_pointers)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layer_pointer<sp/>=<sp/>next_step_layer[layer_pointer];</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_layer-&gt;set_layer_pointers(layer_pointers);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>current<sp/>step<sp/>layers<sp/>to<sp/>model</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>layers.insert(layers.end()<sp/>-<sp/>2,<sp/>current_step.begin(),<sp/>current_step.end());</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>previous_step<sp/>=<sp/>current_step;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Rename<sp/>layers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>step<sp/>=<sp/>0;<sp/>step<sp/>&lt;<sp/>unroll_depth;<sp/>++step)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>name_suffix<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;_step&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(step);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>step_start<sp/>=<sp/>2<sp/>+<sp/>step<sp/>*<sp/>num_step_layers;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>step_end<sp/>=<sp/>2<sp/>+<sp/>(step<sp/>+<sp/>1)<sp/>*<sp/>num_step_layers;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>step_start;<sp/>i<sp/>&lt;<sp/>step_end;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>layers[i]-&gt;set_name(layers[i]-&gt;get_name()<sp/>+<sp/>name_suffix);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="227" refid="namespacelbann_1_1anonymous__namespace_02recurrent_8cpp_03_1a50bca1c07c6f3146947b2a0fb5cc815a" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1_1anonymous__namespace_02recurrent_8cpp_03_1a50bca1c07c6f3146947b2a0fb5cc815a" kindref="member">add_placeholder_layers</ref>(std::vector&lt;Layer*&gt;&amp;<sp/>layers,</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unordered_map&lt;const<sp/>Layer*,Layer*&gt;&amp;<sp/>prev_step_layer,</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unordered_map&lt;const<sp/>Layer*,Layer*&gt;&amp;<sp/>next_step_layer)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>std::unordered_map&lt;const<sp/>Layer*,bool&gt;<sp/>is_visited;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>std::vector&lt;Layer*&gt;<sp/>input_placeholders,<sp/>output_placeholders;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>l<sp/>:<sp/>layers)<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>constant<sp/>layers<sp/>as<sp/>input<sp/>placeholders</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>parent<sp/>:<sp/>l-&gt;get_parent_layers())<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_visited[parent]<sp/>&amp;&amp;<sp/>prev_step_layer[parent]<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parent-&gt;get_num_neurons()<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>err;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>&lt;&lt;<sp/>__FILE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>__LINE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>l-&gt;get_name()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>has<sp/>ambiguous<sp/>neuron<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;dimensions<sp/>since<sp/>it<sp/>depends<sp/>on<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>parent-&gt;get_name()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>which<sp/>does<sp/>not<sp/>have<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;specified<sp/>neuron<sp/>dimensions.<sp/>Consider<sp/>inserting<sp/>a<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;reshape<sp/>layer<sp/>after<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>parent-&gt;get_name()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;to<sp/>explicitly<sp/>specify<sp/>neuron<sp/>dimensions.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(err.str());</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1Layer" kindref="compound">Layer</ref>*<sp/>placeholder<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/><ref refid="file__io_8cpp_1ab048c6f9fcbcfaa57ce68b00263dbebe" kindref="member">comm</ref><sp/>=<sp/>parent-&gt;get_comm();</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(parent-&gt;get_data_layout())<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="base_8hpp_1a786677cbfb3f5677b4d84f3056eb08dba37d2a3465f7cbf4ab60f4e79944d0638" kindref="member">data_layout::DATA_PARALLEL</ref>:</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>placeholder<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1constant__layer" kindref="compound">constant_layer&lt;data_layout::DATA_PARALLEL&gt;</ref>(</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="file__io_8cpp_1ab048c6f9fcbcfaa57ce68b00263dbebe" kindref="member">comm</ref>,</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataType(0),</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent-&gt;get_neuron_dims()</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="base_8hpp_1a786677cbfb3f5677b4d84f3056eb08dbac94d7b0e44ab8bdcdad694a673cdeae0" kindref="member">data_layout::MODEL_PARALLEL</ref>:</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>placeholder<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1constant__layer" kindref="compound">constant_layer&lt;data_layout::MODEL_PARALLEL&gt;</ref>(</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="file__io_8cpp_1ab048c6f9fcbcfaa57ce68b00263dbebe" kindref="member">comm</ref>,</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataType(0),</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent-&gt;get_neuron_dims()</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>err;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>&lt;&lt;<sp/>__FILE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>__LINE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>data<sp/>layout&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(err.str());</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>placeholder-&gt;set_name(parent-&gt;get_name()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_input_placeholder&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>placeholder-&gt;add_child_layer(l);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_placeholders.push_back(placeholder);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev_step_layer[parent]<sp/>=<sp/>placeholder;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_step_layer[placeholder]<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classlbann_1_1Layer" kindref="compound">Layer</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(parent);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Visit<sp/>layer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>is_visited[l]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>dummy<sp/>layers<sp/>as<sp/>output<sp/>placeholders</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>child<sp/>:<sp/>l-&gt;get_child_layers())<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_visited[child]<sp/>&amp;&amp;<sp/>next_step_layer[child]<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1Layer" kindref="compound">Layer</ref>*<sp/>placeholder<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/><ref refid="file__io_8cpp_1ab048c6f9fcbcfaa57ce68b00263dbebe" kindref="member">comm</ref><sp/>=<sp/>child-&gt;get_comm();</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(child-&gt;get_data_layout())<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="base_8hpp_1a786677cbfb3f5677b4d84f3056eb08dba37d2a3465f7cbf4ab60f4e79944d0638" kindref="member">data_layout::DATA_PARALLEL</ref>:</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>placeholder<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1dummy__layer" kindref="compound">dummy_layer&lt;data_layout::DATA_PARALLEL&gt;</ref>(<ref refid="file__io_8cpp_1ab048c6f9fcbcfaa57ce68b00263dbebe" kindref="member">comm</ref>);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="base_8hpp_1a786677cbfb3f5677b4d84f3056eb08dbac94d7b0e44ab8bdcdad694a673cdeae0" kindref="member">data_layout::MODEL_PARALLEL</ref>:</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>placeholder<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1dummy__layer" kindref="compound">dummy_layer&lt;data_layout::MODEL_PARALLEL&gt;</ref>(<ref refid="file__io_8cpp_1ab048c6f9fcbcfaa57ce68b00263dbebe" kindref="member">comm</ref>);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>err;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>&lt;&lt;<sp/>__FILE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>__LINE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>data<sp/>layout&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(err.str());</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>placeholder-&gt;<ref refid="classlbann_1_1Layer_1a82d8a038861b0af0d54fbf44ce715839" kindref="member">set_name</ref>(child-&gt;get_name()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_output_placeholder&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>placeholder-&gt;<ref refid="classlbann_1_1Layer_1a326668ce624a9bcc719a463820b2e3a4" kindref="member">add_parent_layer</ref>(l);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_placeholders.push_back(placeholder);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_step_layer[child]<sp/>=<sp/>placeholder;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev_step_layer[placeholder]<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classlbann_1_1Layer" kindref="compound">Layer</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(child);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>placeholder<sp/>layers<sp/>to<sp/>model</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>layers.insert(layers.begin()<sp/>+<sp/>2,</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_placeholders.begin(),</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_placeholders.end());</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>layers.insert(layers.end()<sp/>-<sp/>2,</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_placeholders.begin(),</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_placeholders.end());</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="326" refid="namespacelbann_1_1anonymous__namespace_02recurrent_8cpp_03_1a12a6f96a1c15c91218169bf7157cd800" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1_1anonymous__namespace_02recurrent_8cpp_03_1a12a6f96a1c15c91218169bf7157cd800" kindref="member">setup_unrolled_layer_pointers</ref>(std::vector&lt;Layer*&gt;&amp;<sp/>layers,</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::unordered_map&lt;const<sp/>Layer*,Layer*&gt;&amp;<sp/>prev_step_layer,</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::unordered_map&lt;const<sp/>Layer*,Layer*&gt;&amp;<sp/>next_step_layer)<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>std::unordered_map&lt;const<sp/>Layer*,bool&gt;<sp/>is_visited;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>l<sp/>:<sp/>layers)<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>parent<sp/>:<sp/>l-&gt;get_parent_layers())<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_visited[parent])<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent<sp/>=<sp/>prev_step_layer.at(parent);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>is_visited[l]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>child<sp/>:<sp/>l-&gt;get_child_layers())<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_visited[child])<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child<sp/>=<sp/>next_step_layer.at(child);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="349" refid="classlbann_1_1recurrent__model_1ac1d3118a1642bd460c9cc9617a592a0b" refkind="member"><highlight class="normal"><ref refid="classlbann_1_1recurrent__model_1ac1d3118a1642bd460c9cc9617a592a0b" kindref="member">recurrent_model::recurrent_model</ref>(<ref refid="classlbann_1_1lbann__comm" kindref="compound">lbann_comm</ref><sp/>*<ref refid="file__io_8cpp_1ab048c6f9fcbcfaa57ce68b00263dbebe" kindref="member">comm</ref>,</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mini_batch_size,</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1objective__function" kindref="compound">objective_function</ref><sp/>*obj_fn,</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1optimizer" kindref="compound">optimizer</ref><sp/>*default_optimizer,</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unroll_depth)</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>:<sp/><ref refid="classlbann_1_1directed__acyclic__graph__model" kindref="compound">directed_acyclic_graph_model</ref>(comm,</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mini_batch_size,</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj_fn,</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default_optimizer)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1recurrent__model_1a71eb93ebf3411a5c170f6570c93e3cca" kindref="member">m_unroll_depth</ref><sp/>=<sp/>std::max(unroll_depth,<sp/>1);</highlight></codeline>
<codeline lineno="359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361" refid="classlbann_1_1recurrent__model_1ac89ddfa607e5cb6b940eb389ebbce6f6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1recurrent__model_1ac89ddfa607e5cb6b940eb389ebbce6f6" kindref="member">recurrent_model::setup_layer_topology</ref>()<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>parent/child<sp/>relationships<sp/>are<sp/>reciprocated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>l<sp/>:<sp/><ref refid="classlbann_1_1model_1a0229fc226ec163d1411548446104569d" kindref="member">m_layers</ref>)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>parent<sp/>:<sp/>l-&gt;get_parent_layers())<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classlbann_1_1Layer" kindref="compound">Layer</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(parent)-&gt;add_child_layer(l);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>child<sp/>:<sp/>l-&gt;get_child_layers())<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classlbann_1_1Layer" kindref="compound">Layer</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(child)-&gt;add_parent_layer(l);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Unroll<sp/>layers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_layers.size()<sp/>&lt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>err;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>&lt;&lt;<sp/>__FILE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>__LINE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>the<sp/>first<sp/>layer<sp/>to<sp/>be<sp/>an<sp/>input<sp/>layer<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;and<sp/>the<sp/>last<sp/>to<sp/>be<sp/>a<sp/>target<sp/>layer&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(err.str());</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1recurrent__model_1ac728773d3de0cefb9390231dc176dca4" kindref="member">m_previous_step_layer</ref>.clear();</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1recurrent__model_1a426829f7fa36b112b4b91393c1657ddd" kindref="member">m_next_step_layer</ref>.clear();</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><ref refid="namespacelbann_1_1anonymous__namespace_02recurrent_8cpp_03_1a8c76387c2dd531058700ad9a41cd093a" kindref="member">unroll_input_layer</ref>(<ref refid="classlbann_1_1recurrent__model_1a71eb93ebf3411a5c170f6570c93e3cca" kindref="member">m_unroll_depth</ref>,<sp/>m_layers,<sp/><ref refid="classlbann_1_1recurrent__model_1ac728773d3de0cefb9390231dc176dca4" kindref="member">m_previous_step_layer</ref>,<sp/><ref refid="classlbann_1_1recurrent__model_1a426829f7fa36b112b4b91393c1657ddd" kindref="member">m_next_step_layer</ref>);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><ref refid="namespacelbann_1_1anonymous__namespace_02recurrent_8cpp_03_1af04adecd9a62fdcd16ae78b3e95d4bb5" kindref="member">unroll_target_layer</ref>(<ref refid="classlbann_1_1recurrent__model_1a71eb93ebf3411a5c170f6570c93e3cca" kindref="member">m_unroll_depth</ref>,<sp/>m_layers,<sp/><ref refid="classlbann_1_1recurrent__model_1ac728773d3de0cefb9390231dc176dca4" kindref="member">m_previous_step_layer</ref>,<sp/><ref refid="classlbann_1_1recurrent__model_1a426829f7fa36b112b4b91393c1657ddd" kindref="member">m_next_step_layer</ref>);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><ref refid="namespacelbann_1_1anonymous__namespace_02recurrent_8cpp_03_1a16733e1fb301c3099a5fe07d703c3782" kindref="member">add_unrolled_layers</ref>(<ref refid="classlbann_1_1recurrent__model_1a71eb93ebf3411a5c170f6570c93e3cca" kindref="member">m_unroll_depth</ref>,<sp/>m_layers,<sp/><ref refid="classlbann_1_1recurrent__model_1ac728773d3de0cefb9390231dc176dca4" kindref="member">m_previous_step_layer</ref>,<sp/><ref refid="classlbann_1_1recurrent__model_1a426829f7fa36b112b4b91393c1657ddd" kindref="member">m_next_step_layer</ref>);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><ref refid="namespacelbann_1_1anonymous__namespace_02recurrent_8cpp_03_1a50bca1c07c6f3146947b2a0fb5cc815a" kindref="member">add_placeholder_layers</ref>(m_layers,<sp/><ref refid="classlbann_1_1recurrent__model_1ac728773d3de0cefb9390231dc176dca4" kindref="member">m_previous_step_layer</ref>,<sp/><ref refid="classlbann_1_1recurrent__model_1a426829f7fa36b112b4b91393c1657ddd" kindref="member">m_next_step_layer</ref>);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><ref refid="namespacelbann_1_1anonymous__namespace_02recurrent_8cpp_03_1a12a6f96a1c15c91218169bf7157cd800" kindref="member">setup_unrolled_layer_pointers</ref>(m_layers,<sp/><ref refid="classlbann_1_1recurrent__model_1ac728773d3de0cefb9390231dc176dca4" kindref="member">m_previous_step_layer</ref>,<sp/><ref refid="classlbann_1_1recurrent__model_1a426829f7fa36b112b4b91393c1657ddd" kindref="member">m_next_step_layer</ref>);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>unrolled<sp/>topology<sp/>is<sp/>a<sp/>DAG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1model_1a7b3e2a643c658dcaa7478d2568f29784" kindref="member">directed_acyclic_graph_model::setup_layer_topology</ref>();</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395" refid="classlbann_1_1recurrent__model_1a712dabb1c1e90f6e268b42f6abaedd93" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1recurrent__model_1a712dabb1c1e90f6e268b42f6abaedd93" kindref="member">recurrent_model::setup_layers</ref>()<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;<ref refid="classlbann_1_1model_1a0229fc226ec163d1411548446104569d" kindref="member">m_layers</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>l<sp/>=<sp/><ref refid="classlbann_1_1model_1a0229fc226ec163d1411548446104569d" kindref="member">m_layers</ref>[i];</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>slice<sp/>points<sp/>for<sp/>the<sp/>inserted<sp/>slice<sp/>layer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>slice_points;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>input_dims<sp/>=<sp/><ref refid="classlbann_1_1model_1a0229fc226ec163d1411548446104569d" kindref="member">m_layers</ref>[0]-&gt;get_neuron_dims();</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>slice_size<sp/>=<sp/>input_dims[0]<sp/>/<sp/><ref refid="classlbann_1_1recurrent__model_1a71eb93ebf3411a5c170f6570c93e3cca" kindref="member">m_unroll_depth</ref>;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>step<sp/>=<sp/>0;<sp/>step<sp/>&lt;=<sp/><ref refid="classlbann_1_1recurrent__model_1a71eb93ebf3411a5c170f6570c93e3cca" kindref="member">m_unroll_depth</ref>;<sp/>++step)<sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slice_points.push_back(slice_size<sp/>*<sp/>step);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>slice_dp<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="classlbann_1_1slice__layer" kindref="compound">slice_layer&lt;data_layout::DATA_PARALLEL&gt;</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(l);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>slice_mp<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="classlbann_1_1slice__layer" kindref="compound">slice_layer&lt;data_layout::MODEL_PARALLEL&gt;</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(l);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(slice_dp<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slice_dp-&gt;<ref refid="classlbann_1_1slice__layer_1a5c02b2a15355be051f93e72f3b2803ce" kindref="member">get_slice_points</ref>()<sp/>=<sp/>slice_points;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(slice_mp<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slice_mp-&gt;<ref refid="classlbann_1_1slice__layer_1a5c02b2a15355be051f93e72f3b2803ce" kindref="member">get_slice_points</ref>()<sp/>=<sp/>slice_points;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(slice_dp<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>slice_mp<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>err;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>&lt;&lt;<sp/>__FILE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>__LINE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>the<sp/>second<sp/>layer<sp/>to<sp/>be<sp/>a<sp/>slice<sp/>layer,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;but<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>l-&gt;get_name()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>l-&gt;get_type();</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(err.str());</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Corresponding<sp/>weights<sp/>in<sp/>different<sp/>steps<sp/>share<sp/>weights</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>prev_step_layer<sp/>=<sp/><ref refid="classlbann_1_1recurrent__model_1ac728773d3de0cefb9390231dc176dca4" kindref="member">m_previous_step_layer</ref>[l];</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prev_step_layer<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>w<sp/>=<sp/>prev_step_layer-&gt;get_weights();</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!w.empty())<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l-&gt;set_weights(w);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>layer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>l-&gt;set_model(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>l-&gt;setup();</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>l-&gt;check_setup();</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1model_1a0eabaf2b2f829fd5db3dfd26df420df0" kindref="member">m_comm</ref>-&gt;<ref refid="classlbann_1_1lbann__comm_1a1ef526486183a29feadca9bef096a534" kindref="member">am_world_master</ref>())<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/><ref refid="classlbann_1_1model_1ab173fd93a80a2980059ff292c308cbf5" kindref="member">print_layer_description</ref>(l)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="444"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>lbann</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/mckinney27/doxy-testbed/lbann/src/models/recurrent.cpp"/>
  </compounddef>
</doxygen>
