<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="cv__process__patches_8cpp" kind="file" language="C++">
    <compoundname>cv_process_patches.cpp</compoundname>
    <includes refid="cv__process__patches_8hpp" local="yes">lbann/data_readers/cv_process_patches.hpp</includes>
    <includes local="no">limits</includes>
    <incdepgraph>
      <node id="18869">
        <label>cv_process.hpp</label>
        <link refid="cv__process_8hpp"/>
        <childnode refid="18870" relation="include">
        </childnode>
        <childnode refid="18874" relation="include">
        </childnode>
        <childnode refid="18886" relation="include">
        </childnode>
        <childnode refid="18887" relation="include">
        </childnode>
        <childnode refid="18891" relation="include">
        </childnode>
        <childnode refid="18892" relation="include">
        </childnode>
        <childnode refid="18893" relation="include">
        </childnode>
        <childnode refid="18895" relation="include">
        </childnode>
        <childnode refid="18897" relation="include">
        </childnode>
        <childnode refid="18898" relation="include">
        </childnode>
      </node>
      <node id="18895">
        <label>cv_mean_extractor.hpp</label>
        <link refid="cv__mean__extractor_8hpp"/>
        <childnode refid="18870" relation="include">
        </childnode>
        <childnode refid="18896" relation="include">
        </childnode>
      </node>
      <node id="18898">
        <label>limits</label>
      </node>
      <node id="18899">
        <label>patchworks/patchworks_patch_descriptor.hpp</label>
        <link refid="patchworks__patch__descriptor_8hpp"/>
        <childnode refid="18872" relation="include">
        </childnode>
      </node>
      <node id="18877">
        <label>El.hpp</label>
      </node>
      <node id="18884">
        <label>lbann/utils/mild_exception.hpp</label>
        <link refid="mild__exception_8hpp"/>
        <childnode refid="18885" relation="include">
        </childnode>
      </node>
      <node id="18876">
        <label>lbann/base.hpp</label>
        <link refid="base_8hpp"/>
        <childnode refid="18877" relation="include">
        </childnode>
        <childnode refid="18878" relation="include">
        </childnode>
        <childnode refid="18879" relation="include">
        </childnode>
        <childnode refid="18872" relation="include">
        </childnode>
      </node>
      <node id="18873">
        <label>opencv_extensions.hpp</label>
        <link refid="opencv__extensions_8hpp"/>
      </node>
      <node id="18891">
        <label>cv_colorizer.hpp</label>
        <link refid="cv__colorizer_8hpp"/>
        <childnode refid="18870" relation="include">
        </childnode>
      </node>
      <node id="18890">
        <label>string</label>
      </node>
      <node id="18886">
        <label>cv_subtractor.hpp</label>
        <link refid="cv__subtractor_8hpp"/>
        <childnode refid="18870" relation="include">
        </childnode>
        <childnode refid="18876" relation="include">
        </childnode>
      </node>
      <node id="18888">
        <label>ostream</label>
      </node>
      <node id="18867">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/data_readers/cv_process_patches.cpp</label>
        <link refid="cv__process__patches_8cpp"/>
        <childnode refid="18868" relation="include">
        </childnode>
        <childnode refid="18898" relation="include">
        </childnode>
      </node>
      <node id="18875">
        <label>typeinfo</label>
      </node>
      <node id="18881">
        <label>cstdio</label>
      </node>
      <node id="18892">
        <label>cv_decolorizer.hpp</label>
        <link refid="cv__decolorizer_8hpp"/>
        <childnode refid="18872" relation="include">
        </childnode>
        <childnode refid="18870" relation="include">
        </childnode>
      </node>
      <node id="18883">
        <label>cxxabi.h</label>
      </node>
      <node id="18894">
        <label>utility</label>
      </node>
      <node id="18880">
        <label>cstdlib</label>
      </node>
      <node id="18871">
        <label>opencv.hpp</label>
        <link refid="opencv_8hpp"/>
        <childnode refid="18872" relation="include">
        </childnode>
      </node>
      <node id="18885">
        <label>iostream</label>
      </node>
      <node id="18868">
        <label>lbann/data_readers/cv_process_patches.hpp</label>
        <link refid="cv__process__patches_8hpp"/>
        <childnode refid="18869" relation="include">
        </childnode>
        <childnode refid="18899" relation="include">
        </childnode>
        <childnode refid="18898" relation="include">
        </childnode>
      </node>
      <node id="18874">
        <label>cv_normalizer.hpp</label>
        <link refid="cv__normalizer_8hpp"/>
        <childnode refid="18875" relation="include">
        </childnode>
        <childnode refid="18870" relation="include">
        </childnode>
        <childnode refid="18876" relation="include">
        </childnode>
        <childnode refid="18884" relation="include">
        </childnode>
      </node>
      <node id="18870">
        <label>cv_transform.hpp</label>
        <link refid="cv__transform_8hpp"/>
        <childnode refid="18871" relation="include">
        </childnode>
        <childnode refid="18873" relation="include">
        </childnode>
      </node>
      <node id="18887">
        <label>cv_augmenter.hpp</label>
        <link refid="cv__augmenter_8hpp"/>
        <childnode refid="18870" relation="include">
        </childnode>
        <childnode refid="18885" relation="include">
        </childnode>
        <childnode refid="18888" relation="include">
        </childnode>
        <childnode refid="18889" relation="include">
        </childnode>
        <childnode refid="18890" relation="include">
        </childnode>
      </node>
      <node id="18893">
        <label>cv_cropper.hpp</label>
        <link refid="cv__cropper_8hpp"/>
        <childnode refid="18870" relation="include">
        </childnode>
        <childnode refid="18894" relation="include">
        </childnode>
        <childnode refid="18888" relation="include">
        </childnode>
      </node>
      <node id="18872">
        <label>lbann_config.hpp</label>
      </node>
      <node id="18896">
        <label>type_traits</label>
      </node>
      <node id="18879">
        <label>lbann/utils/cyg_profile.hpp</label>
        <link refid="cyg__profile_8hpp"/>
        <childnode refid="18880" relation="include">
        </childnode>
        <childnode refid="18881" relation="include">
        </childnode>
        <childnode refid="18882" relation="include">
        </childnode>
        <childnode refid="18883" relation="include">
        </childnode>
      </node>
      <node id="18889">
        <label>cstring</label>
      </node>
      <node id="18878">
        <label>lbann/Elemental_extensions.hpp</label>
        <link refid="Elemental__extensions_8hpp"/>
        <childnode refid="18877" relation="include">
        </childnode>
      </node>
      <node id="18897">
        <label>memory</label>
      </node>
      <node id="18882">
        <label>dlfcn.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2014-2016,<sp/>Lawrence<sp/>Livermore<sp/>National<sp/>Security,<sp/>LLC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Produced<sp/>at<sp/>the<sp/>Lawrence<sp/>Livermore<sp/>National<sp/>Laboratory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Written<sp/>by<sp/>the<sp/>LBANN<sp/>Research<sp/>Team<sp/>(B.<sp/>Van<sp/>Essen,<sp/>et<sp/>al.)<sp/>listed<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>CONTRIBUTORS<sp/>file.<sp/>&lt;lbann-dev@llnl.gov&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LLNL-CODE-697807.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>LBANN:<sp/>Livermore<sp/>Big<sp/>Artificial<sp/>Neural<sp/>Network</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Toolkit.<sp/>For<sp/>details,<sp/>see<sp/>http://software.llnl.gov/LBANN<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://github.com/LLNL/LBANN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;Licensee&quot;);<sp/>you</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implied.<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>license.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cv_process_patches<sp/>.cpp<sp/>.hpp<sp/>-<sp/>structure<sp/>that<sp/>defines<sp/>the<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>on<sp/>patches<sp/>extracted<sp/>from<sp/>an<sp/>image<sp/>in<sp/>the<sp/>opencv<sp/>format</highlight></codeline>
<codeline lineno="29"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cv__process__patches_8hpp" kindref="compound">lbann/data_readers/cv_process_patches.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>std::numeric_limits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LBANN_HAS_OPENCV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacelbann" kindref="compound">lbann</ref><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal">cv_process_patches::cv_process_patches()</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>:<sp/>cv_process(),<sp/>m_self_label(false),</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>m_when_to_extract(std::numeric_limits&lt;unsigned<sp/>int&gt;::<ref refid="base_8hpp_1ac47a6ee5278a53898222a48639a2bf39a2ffe4e77325d9a7152f7086ea7aa5114" kindref="member">max</ref>())<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal">cv_process_patches::cv_process_patches(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>self_label)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>:<sp/>cv_process(),<sp/>m_self_label(self_label),</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>m_when_to_extract(std::numeric_limits&lt;unsigned<sp/>int&gt;::<ref refid="base_8hpp_1ac47a6ee5278a53898222a48639a2bf39a2ffe4e77325d9a7152f7086ea7aa5114" kindref="member">max</ref>())<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">cv_process_patches::cv_process_patches(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cv_process_patches&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>:<sp/>cv_process(rhs),<sp/>m_pd(rhs.m_pd),<sp/>m_self_label(rhs.m_self_label),</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>m_when_to_extract(rhs.m_when_to_extract)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">cv_process_patches::cv_process_patches(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cv_transform::cv_flipping<sp/>flip_code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>tosplit)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>:<sp/>cv_process(flip_code,<sp/>tosplit),<sp/>m_self_label(false),</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>m_when_to_extract(std::numeric_limits&lt;unsigned<sp/>int&gt;::<ref refid="base_8hpp_1ac47a6ee5278a53898222a48639a2bf39a2ffe4e77325d9a7152f7086ea7aa5114" kindref="member">max</ref>())<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal">cv_process_patches&amp;<sp/>cv_process_patches::operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cv_process_patches&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>&amp;rhs)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>cv_process::operator=(rhs);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>m_pd<sp/>=<sp/>rhs.m_pd;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>m_self_label<sp/>=<sp/>rhs.m_self_label;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>m_when_to_extract<sp/>=<sp/>rhs.m_when_to_extract;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cv_process_patches::set_patch_descriptor(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>patchworks::patch_descriptor&amp;<sp/>pd,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>when_to_extract)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>m_pd<sp/>=<sp/>pd;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>m_self_label<sp/>=<sp/>m_pd.is_self_labeling();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>m_when_to_extract<sp/>=<sp/>when_to_extract;</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cv_process_patches::preprocess(<ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">cv::Mat</ref>&amp;<sp/>image,<sp/>std::vector&lt;cv::Mat&gt;&amp;<sp/>patches)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>patches.clear();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>ok<sp/>=<sp/>cv_process::preprocess(image,<sp/>0u,<sp/>m_when_to_extract);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>ok<sp/>=<sp/>ok<sp/>&amp;&amp;<sp/>m_pd.extract_patches(image,<sp/>patches);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0u;<sp/>ok<sp/>&amp;&amp;<sp/>(i<sp/>&lt;<sp/>patches.size());<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/>cv_process::preprocess(patches[i],<sp/>m_when_to_extract);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ok;</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal">std::string<sp/>cv_process_patches::get_description()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>std::stringstream<sp/>os;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>when_to_extract<sp/>=<sp/>((m_when_to_extract<sp/>&gt;<sp/>m_transforms.size())?</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_transforms.size()<sp/>:<sp/>m_when_to_extract);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>when_exactly<sp/>=<sp/>((when_to_extract<sp/>==<sp/>0u)?</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;at<sp/>the<sp/>beginning&quot;</highlight><highlight class="normal"><sp/>:<sp/>(</highlight><highlight class="stringliteral">&quot;after<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>m_transforms[when_to_extract-1]-&gt;get_name()));</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>os<sp/>&lt;&lt;<sp/>cv_process::get_description();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>self-labeling:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_self_label<sp/>&lt;&lt;<sp/>std::endl</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>extract<sp/>patches<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>when_exactly<sp/>&lt;&lt;<sp/>std::endl</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>m_pd<sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.str();</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>of<sp/>namespace<sp/>lbann</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>LBANN_HAS_OPENCV</highlight></codeline>
    </programlisting>
    <location file="/Users/mckinney27/doxy-testbed/lbann/src/data_readers/cv_process_patches.cpp"/>
  </compounddef>
</doxygen>
