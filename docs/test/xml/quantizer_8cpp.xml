<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="quantizer_8cpp" kind="file" language="C++">
    <compoundname>quantizer.cpp</compoundname>
    <includes local="no">algorithm</includes>
    <includes refid="quantizer_8hpp" local="yes">lbann/utils/quantizer.hpp</includes>
    <includes refid="random_8hpp" local="yes">lbann/utils/random.hpp</includes>
    <includes local="no">cmath</includes>
    <includes local="no">omp.h</includes>
    <incdepgraph>
      <node id="25747">
        <label>lbann/utils/quantizer.hpp</label>
        <link refid="quantizer_8hpp"/>
        <childnode refid="25748" relation="include">
        </childnode>
        <childnode refid="25749" relation="include">
        </childnode>
        <childnode refid="25758" relation="include">
        </childnode>
        <childnode refid="25762" relation="include">
        </childnode>
        <childnode refid="25764" relation="include">
        </childnode>
        <childnode refid="25770" relation="include">
        </childnode>
        <childnode refid="25771" relation="include">
        </childnode>
      </node>
      <node id="25773">
        <label>lbann/io/persist.hpp</label>
        <link refid="persist_8hpp"/>
        <childnode refid="25749" relation="include">
        </childnode>
        <childnode refid="25750" relation="include">
        </childnode>
      </node>
      <node id="25750">
        <label>El.hpp</label>
      </node>
      <node id="25749">
        <label>lbann/base.hpp</label>
        <link refid="base_8hpp"/>
        <childnode refid="25750" relation="include">
        </childnode>
        <childnode refid="25751" relation="include">
        </childnode>
        <childnode refid="25752" relation="include">
        </childnode>
        <childnode refid="25757" relation="include">
        </childnode>
      </node>
      <node id="25775">
        <label>cmath</label>
      </node>
      <node id="25767">
        <label>string</label>
      </node>
      <node id="25762">
        <label>lbann/utils/timer.hpp</label>
        <link refid="timer_8hpp"/>
        <childnode refid="25763" relation="include">
        </childnode>
      </node>
      <node id="25760">
        <label>map</label>
      </node>
      <node id="25770">
        <label>omp.h</label>
      </node>
      <node id="25769">
        <label>exception</label>
      </node>
      <node id="25774">
        <label>random</label>
      </node>
      <node id="25754">
        <label>cstdio</label>
      </node>
      <node id="25765">
        <label>lbann/utils/stack_trace.hpp</label>
        <link refid="stack__trace_8hpp"/>
        <childnode refid="25766" relation="include">
        </childnode>
        <childnode refid="25767" relation="include">
        </childnode>
      </node>
      <node id="25756">
        <label>cxxabi.h</label>
      </node>
      <node id="25764">
        <label>lbann/utils/exception.hpp</label>
        <link refid="exception_8hpp"/>
        <childnode refid="25749" relation="include">
        </childnode>
        <childnode refid="25758" relation="include">
        </childnode>
        <childnode refid="25765" relation="include">
        </childnode>
        <childnode refid="25768" relation="include">
        </childnode>
        <childnode refid="25769" relation="include">
        </childnode>
      </node>
      <node id="25759">
        <label>vector</label>
      </node>
      <node id="25758">
        <label>lbann/comm.hpp</label>
        <link refid="comm_8hpp"/>
        <childnode refid="25759" relation="include">
        </childnode>
        <childnode refid="25760" relation="include">
        </childnode>
        <childnode refid="25761" relation="include">
        </childnode>
        <childnode refid="25749" relation="include">
        </childnode>
      </node>
      <node id="25753">
        <label>cstdlib</label>
      </node>
      <node id="25768">
        <label>iostream</label>
      </node>
      <node id="25748">
        <label>unordered_map</label>
      </node>
      <node id="25772">
        <label>lbann/utils/random.hpp</label>
        <link refid="random_8hpp"/>
        <childnode refid="25749" relation="include">
        </childnode>
        <childnode refid="25758" relation="include">
        </childnode>
        <childnode refid="25773" relation="include">
        </childnode>
        <childnode refid="25774" relation="include">
        </childnode>
      </node>
      <node id="25763">
        <label>chrono</label>
      </node>
      <node id="25745">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/utils/quantizer.cpp</label>
        <link refid="quantizer_8cpp"/>
        <childnode refid="25746" relation="include">
        </childnode>
        <childnode refid="25747" relation="include">
        </childnode>
        <childnode refid="25772" relation="include">
        </childnode>
        <childnode refid="25775" relation="include">
        </childnode>
        <childnode refid="25770" relation="include">
        </childnode>
      </node>
      <node id="25766">
        <label>csignal</label>
      </node>
      <node id="25757">
        <label>lbann_config.hpp</label>
      </node>
      <node id="25746">
        <label>algorithm</label>
      </node>
      <node id="25752">
        <label>lbann/utils/cyg_profile.hpp</label>
        <link refid="cyg__profile_8hpp"/>
        <childnode refid="25753" relation="include">
        </childnode>
        <childnode refid="25754" relation="include">
        </childnode>
        <childnode refid="25755" relation="include">
        </childnode>
        <childnode refid="25756" relation="include">
        </childnode>
      </node>
      <node id="25751">
        <label>lbann/Elemental_extensions.hpp</label>
        <link refid="Elemental__extensions_8hpp"/>
        <childnode refid="25750" relation="include">
        </childnode>
      </node>
      <node id="25771">
        <label>quantizer_impl.hpp</label>
        <link refid="quantizer__impl_8hpp"/>
        <childnode refid="25770" relation="include">
        </childnode>
      </node>
      <node id="25761">
        <label>typeindex</label>
      </node>
      <node id="25755">
        <label>dlfcn.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacelbann">lbann</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2014-2016,<sp/>Lawrence<sp/>Livermore<sp/>National<sp/>Security,<sp/>LLC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Produced<sp/>at<sp/>the<sp/>Lawrence<sp/>Livermore<sp/>National<sp/>Laboratory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Written<sp/>by<sp/>the<sp/>LBANN<sp/>Research<sp/>Team<sp/>(B.<sp/>Van<sp/>Essen,<sp/>et<sp/>al.)<sp/>listed<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>CONTRIBUTORS<sp/>file.<sp/>&lt;lbann-dev@llnl.gov&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LLNL-CODE-697807.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>LBANN:<sp/>Livermore<sp/>Big<sp/>Artificial<sp/>Neural<sp/>Network</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Toolkit.<sp/>For<sp/>details,<sp/>see<sp/>http://software.llnl.gov/LBANN<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://github.com/LLNL/LBANN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;Licensee&quot;);<sp/>you</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implied.<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>license.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>lbann_quantizer<sp/>.hpp<sp/>.cpp<sp/>-<sp/>Quantization<sp/>of<sp/>matrices</highlight></codeline>
<codeline lineno="28"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="quantizer_8hpp" kindref="compound">lbann/utils/quantizer.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="random_8hpp" kindref="compound">lbann/utils/random.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;omp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacelbann" kindref="compound">lbann</ref><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="classlbann_1_1lbann__quantizer_1a430cd47f333c678d2cb77f4ab2693914" refkind="member"><highlight class="normal"><ref refid="classlbann_1_1lbann__quantizer_1a430cd47f333c678d2cb77f4ab2693914" kindref="member">lbann_quantizer::lbann_quantizer</ref>()<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1lbann__quantizer_1aee1ea46e3191ad25fd310938eaf5a2e0" kindref="member">reset_counters</ref>();</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="classlbann_1_1lbann__quantizer_1ac0cc07008ff963949c2cb7b91786c61c" refkind="member"><highlight class="normal"><ref refid="classlbann_1_1lbann__quantizer_1ac0cc07008ff963949c2cb7b91786c61c" kindref="member">lbann_quantizer::~lbann_quantizer</ref>()<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="classlbann_1_1lbann__quantizer_1a4dd4696cbbfd93c73e5fb3c40fcb16c3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__quantizer_1a4dd4696cbbfd93c73e5fb3c40fcb16c3" kindref="member">lbann_quantizer::onebit_quantize</ref>(</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>mat,<sp/><ref refid="classlbann_1_1lbann__quantizer_1a399f3f8c393b6021b43e95d1ce6ea28c" kindref="member">QuantizedMatrix</ref>&amp;<sp/>qmat,<sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>qerror,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sample)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>up<sp/>the<sp/>quantized<sp/>matrix.<sp/>(+2<sp/>for<sp/>the<sp/>averages.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Int<sp/>qheight<sp/>=<sp/><ref refid="classlbann_1_1lbann__quantizer_1aa1541b9afa60250dbd570acbbe98242f" kindref="member">get_onebit_quantized_matrix_height</ref>(mat);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Int<sp/>qwidth<sp/>=<sp/>mat.Width();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>qmat.Resize(qheight,<sp/>qwidth);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Int<sp/>width<sp/>=<sp/>mat.Width();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Int<sp/>height<sp/>=<sp/>mat.Height();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Int<sp/>ldim<sp/>=<sp/>mat.LDim();</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Int<sp/>qmat_ldim<sp/>=<sp/>qmat.LDim();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType<sp/>*__restrict__<sp/>mat_buf<sp/>=<sp/>mat.LockedBuffer();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>DataType<sp/>*__restrict__<sp/>qerror_buf<sp/>=<sp/>qerror.Buffer();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1lbann__quantizer_1afcda642ff1b44d31eec910909c3d013e" kindref="member">qtype</ref><sp/>*__restrict__<sp/>qmat_buf<sp/>=<sp/>qmat.Buffer();</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#pragma<sp/>omp<sp/>parallel<sp/>for<sp/>schedule(static)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(El::Int<sp/>col<sp/>=<sp/>0;<sp/>col<sp/>&lt;<sp/>width;<sp/>++col)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>compute<sp/>the<sp/>positive<sp/>and<sp/>negative<sp/>column<sp/>averages.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>DataType<sp/>pos_sum<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>DataType<sp/>neg_sum<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>El::Unsigned<sp/>num_pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>El::Unsigned<sp/>num_neg<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(height<sp/>&lt;=<sp/><ref refid="classlbann_1_1lbann__quantizer_1a8e25785452736c54861a69207a48252d" kindref="member">NUM_ONEBIT_SAMPLES</ref><sp/>||<sp/>!sample)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(El::Int<sp/>row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>height;<sp/>++row)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Int<sp/>pos<sp/>=<sp/>row<sp/>+<sp/>col<sp/>*<sp/>ldim;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType<sp/>val<sp/>=<sp/>mat_buf[pos]<sp/>+<sp/>qerror_buf[pos];</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>&gt;=<sp/>0.0f)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos_sum<sp/>+=<sp/>val;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++num_pos;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>neg_sum<sp/>+=<sp/>val;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++num_neg;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Randomly<sp/>sample<sp/>NUM_ONEBIT_SAMPLES<sp/>to<sp/>approximate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelbann_1af16616ffa6a3616836eabadd6ce837ec" kindref="member">fast_rng_gen</ref>&amp;<sp/>gen<sp/>=<sp/><ref refid="namespacelbann_1ae6ce9c2fdec6f81803f6b1a6555c31c5" kindref="member">get_fast_generator</ref>();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(El::Int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classlbann_1_1lbann__quantizer_1a8e25785452736c54861a69207a48252d" kindref="member">NUM_ONEBIT_SAMPLES</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Int<sp/>pos<sp/>=<sp/><ref refid="namespacelbann_1a557aaed6267e7aaf583a75149e9c670c" kindref="member">fast_rand_int</ref>(gen,<sp/>height);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType<sp/>val<sp/>=<sp/>mat_buf[pos]<sp/>+<sp/>qerror_buf[pos];</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>&gt;=<sp/>0.0f)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos_sum<sp/>+=<sp/>val;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++num_pos;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>neg_sum<sp/>+=<sp/>val;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++num_neg;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>DataType<sp/>avg_pos<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_pos<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>avg_pos<sp/>=<sp/>pos_sum<sp/>/<sp/>num_pos;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>DataType<sp/>avg_neg<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_neg<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>avg_neg<sp/>=<sp/>neg_sum<sp/>/<sp/>num_neg;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>the<sp/>averages.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>memcpy<sp/>so<sp/>that<sp/>we<sp/>don&apos;t<sp/>violate<sp/>aliasing<sp/>rules.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1lbann__quantizer_1afcda642ff1b44d31eec910909c3d013e" kindref="member">qtype</ref><sp/>tmp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;tmp,<sp/>&amp;avg_pos,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(avg_pos));</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>qmat.Set(0,<sp/>col,<sp/>tmp);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;tmp,<sp/>&amp;avg_neg,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(avg_neg));</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>qmat.Set(1,<sp/>col,<sp/>tmp);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>quantize<sp/>the<sp/>column,<sp/>NUM_BITS<sp/>entries<sp/>at<sp/>a<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>El::Int<sp/>qrow<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(El::Int<sp/>row_chunk<sp/>=<sp/>0;<sp/>row_chunk<sp/>&lt;<sp/>height;<sp/>row_chunk<sp/>+=<sp/><ref refid="classlbann_1_1lbann__quantizer_1a33ea17392f53b90e91aea1ffb7e11d68" kindref="member">NUM_BITS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1lbann__quantizer_1ac8b63c86fc871e248ce20c7af19a7fad" kindref="member">uqtype</ref><sp/>q<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1lbann__quantizer_1ac8b63c86fc871e248ce20c7af19a7fad" kindref="member">uqtype</ref><sp/>bit<sp/>=<sp/>0;<sp/>bit<sp/>&lt;<sp/><ref refid="classlbann_1_1lbann__quantizer_1a33ea17392f53b90e91aea1ffb7e11d68" kindref="member">NUM_BITS</ref>;<sp/>++bit)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>El::Int<sp/>row<sp/>=<sp/>row_chunk<sp/>+<sp/>bit;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(row<sp/>&gt;=<sp/>height)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Int<sp/>pos<sp/>=<sp/>row<sp/>+<sp/>col<sp/>*<sp/>ldim;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType<sp/>val<sp/>=<sp/>mat_buf[pos]<sp/>+<sp/>qerror_buf[pos];</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>&gt;=<sp/>0.0f)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>|=<sp/><ref refid="classlbann_1_1lbann__quantizer_1ac8b63c86fc871e248ce20c7af19a7fad" kindref="member">uqtype</ref>(1)<sp/>&lt;&lt;<sp/>bit;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qerror_buf[pos]<sp/>=<sp/>val<sp/>-<sp/>avg_pos;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qerror_buf[pos]<sp/>=<sp/>val<sp/>-<sp/>avg_neg;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qmat_buf[qrow<sp/>+<sp/>col<sp/>*<sp/>qmat_ldim]<sp/>=<sp/>(<ref refid="classlbann_1_1lbann__quantizer_1afcda642ff1b44d31eec910909c3d013e" kindref="member">qtype</ref>)<sp/>q;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++qrow;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135" refid="classlbann_1_1lbann__quantizer_1a9eeb89150026bf4b7bea15bffdba10d3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__quantizer_1a4dd4696cbbfd93c73e5fb3c40fcb16c3" kindref="member">lbann_quantizer::onebit_quantize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="base_8hpp_1a0fab5387556805cfeac3e7e567bf66c5" kindref="member">DistMat</ref>&amp;<sp/>mat,<sp/><ref refid="classlbann_1_1lbann__quantizer_1a399f3f8c393b6021b43e95d1ce6ea28c" kindref="member">QuantizedMatrix</ref>&amp;<sp/>qmat,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>qerror,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sample)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1lbann__quantizer_1a4dd4696cbbfd93c73e5fb3c40fcb16c3" kindref="member">onebit_quantize</ref>(mat.LockedMatrix(),<sp/>qmat,<sp/>qerror,<sp/>sample);</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140" refid="classlbann_1_1lbann__quantizer_1ad5592daa122b40c275cce3dc93bba41e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__quantizer_1ad5592daa122b40c275cce3dc93bba41e" kindref="member">lbann_quantizer::onebit_unquantize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__quantizer_1a399f3f8c393b6021b43e95d1ce6ea28c" kindref="member">QuantizedMatrix</ref>&amp;<sp/>qmat,<sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>mat)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Int<sp/>width<sp/>=<sp/>mat.Width();</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Int<sp/>height<sp/>=<sp/>mat.Height();</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Int<sp/>ldim<sp/>=<sp/>mat.LDim();</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Int<sp/>qmat_ldim<sp/>=<sp/>qmat.LDim();</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__quantizer_1afcda642ff1b44d31eec910909c3d013e" kindref="member">qtype</ref><sp/>*__restrict__<sp/>qmat_buf<sp/>=<sp/>qmat.LockedBuffer();</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>DataType<sp/>*__restrict__<sp/>mat_buf<sp/>=<sp/>mat.Buffer();</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#pragma<sp/>omp<sp/>parallel<sp/>for<sp/>schedule(static)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(El::Int<sp/>col<sp/>=<sp/>0;<sp/>col<sp/>&lt;<sp/>width;<sp/>++col)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>El::Int<sp/>qrow<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>the<sp/>averages.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1lbann__quantizer_1afcda642ff1b44d31eec910909c3d013e" kindref="member">qtype</ref><sp/>tmp<sp/>=<sp/>qmat.Get(0,<sp/>col);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>DataType<sp/>avg_pos;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;avg_pos,<sp/>&amp;tmp,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(avg_pos));</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>qmat.Get(1,<sp/>col);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>DataType<sp/>avg_neg;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;avg_neg,<sp/>&amp;tmp,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(avg_neg));</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unquantize<sp/>this<sp/>column.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(El::Int<sp/>row_chunk<sp/>=<sp/>0;<sp/>row_chunk<sp/>&lt;<sp/>height;<sp/>row_chunk<sp/>+=<sp/><ref refid="classlbann_1_1lbann__quantizer_1a33ea17392f53b90e91aea1ffb7e11d68" kindref="member">NUM_BITS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>q<sp/>=<sp/>(<ref refid="classlbann_1_1lbann__quantizer_1ac8b63c86fc871e248ce20c7af19a7fad" kindref="member">uqtype</ref>)<sp/>qmat_buf[qrow<sp/>+<sp/>col<sp/>*<sp/>qmat_ldim];</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bit<sp/>=<sp/>0;<sp/>bit<sp/>&lt;<sp/><ref refid="classlbann_1_1lbann__quantizer_1a33ea17392f53b90e91aea1ffb7e11d68" kindref="member">NUM_BITS</ref>;<sp/>++bit)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>El::Int<sp/>row<sp/>=<sp/>row_chunk<sp/>+<sp/>bit;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(row<sp/>&gt;=<sp/>height)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_buf[row<sp/>+<sp/>col<sp/>*<sp/>ldim]<sp/>=<sp/>(q<sp/>&gt;&gt;<sp/>bit)<sp/>&amp;<sp/>0x1<sp/>?<sp/>avg_pos<sp/>:<sp/>avg_neg;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++qrow;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172" refid="classlbann_1_1lbann__quantizer_1afc7a47fb5a5e87a09f2913a46a2bacf7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__quantizer_1ad5592daa122b40c275cce3dc93bba41e" kindref="member">lbann_quantizer::onebit_unquantize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__quantizer_1a399f3f8c393b6021b43e95d1ce6ea28c" kindref="member">QuantizedMatrix</ref>&amp;<sp/>qmat,</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="base_8hpp_1a0fab5387556805cfeac3e7e567bf66c5" kindref="member">DistMat</ref>&amp;<sp/>mat)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1lbann__quantizer_1ad5592daa122b40c275cce3dc93bba41e" kindref="member">onebit_unquantize</ref>(qmat,<sp/>mat.Matrix());</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177" refid="classlbann_1_1lbann__quantizer_1a879cea8464408b8265be9e55edd83b2c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__quantizer_1a879cea8464408b8265be9e55edd83b2c" kindref="member">lbann_quantizer::onebit_unquantize_add</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__quantizer_1a399f3f8c393b6021b43e95d1ce6ea28c" kindref="member">QuantizedMatrix</ref>&amp;<sp/>qmat,</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>mat)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Int<sp/>width<sp/>=<sp/>mat.Width();</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Int<sp/>height<sp/>=<sp/>mat.Height();</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Int<sp/>ldim<sp/>=<sp/>mat.LDim();</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Int<sp/>qmat_ldim<sp/>=<sp/>qmat.LDim();</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__quantizer_1afcda642ff1b44d31eec910909c3d013e" kindref="member">qtype</ref><sp/>*__restrict__<sp/>qmat_buf<sp/>=<sp/>qmat.LockedBuffer();</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>DataType<sp/>*__restrict__<sp/>mat_buf<sp/>=<sp/>mat.Buffer();</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#pragma<sp/>omp<sp/>parallel<sp/>for<sp/>schedule(static)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(El::Int<sp/>col<sp/>=<sp/>0;<sp/>col<sp/>&lt;<sp/>width;<sp/>++col)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>El::Int<sp/>qrow<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>the<sp/>averages.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1lbann__quantizer_1afcda642ff1b44d31eec910909c3d013e" kindref="member">qtype</ref><sp/>tmp<sp/>=<sp/>qmat.Get(0,<sp/>col);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>DataType<sp/>avg_pos;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;avg_pos,<sp/>&amp;tmp,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(avg_pos));</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>qmat.Get(1,<sp/>col);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>DataType<sp/>avg_neg;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;avg_neg,<sp/>&amp;tmp,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(avg_neg));</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unquantize<sp/>this<sp/>column.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(El::Int<sp/>row_chunk<sp/>=<sp/>0;<sp/>row_chunk<sp/>&lt;<sp/>height;<sp/>row_chunk<sp/>+=<sp/><ref refid="classlbann_1_1lbann__quantizer_1a33ea17392f53b90e91aea1ffb7e11d68" kindref="member">NUM_BITS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>q<sp/>=<sp/>(<ref refid="classlbann_1_1lbann__quantizer_1ac8b63c86fc871e248ce20c7af19a7fad" kindref="member">uqtype</ref>)<sp/>qmat_buf[qrow<sp/>+<sp/>col<sp/>*<sp/>qmat_ldim];</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bit<sp/>=<sp/>0;<sp/>bit<sp/>&lt;<sp/><ref refid="classlbann_1_1lbann__quantizer_1a33ea17392f53b90e91aea1ffb7e11d68" kindref="member">NUM_BITS</ref>;<sp/>++bit)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>El::Int<sp/>row<sp/>=<sp/>row_chunk<sp/>+<sp/>bit;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(row<sp/>&gt;=<sp/>height)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_buf[row<sp/>+<sp/>col<sp/>*<sp/>ldim]<sp/>+=<sp/>(q<sp/>&gt;&gt;<sp/>bit)<sp/>&amp;<sp/>0x1<sp/>?<sp/>avg_pos<sp/>:<sp/>avg_neg;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++qrow;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210" refid="classlbann_1_1lbann__quantizer_1a4b326de1ca5b7eba6415b6f42f83335b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__quantizer_1a4b326de1ca5b7eba6415b6f42f83335b" kindref="member">lbann_quantizer::intermodel_sum_onebit_quantized</ref>(</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1lbann__comm" kindref="compound">lbann_comm</ref><sp/>*<ref refid="file__io_8cpp_1ab048c6f9fcbcfaa57ce68b00263dbebe" kindref="member">comm</ref>,<sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>mat,<sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>qerror)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>qerror.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(qerror.Height()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>qerror.Resize(mat.Height(),<sp/>mat.Width(),<sp/>mat.LDim());</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>Zero(qerror);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>std::vector&lt;QuantizedMatrix&gt;<sp/>qmats(4);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>send_transform<sp/>=</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>[&amp;qerror,<sp/>&amp;qmats,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">]<sp/>(<ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>to_trans,<sp/>El::IR<sp/>h,<sp/>El::IR<sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>count,</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>const_data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>call_idx)<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>to_send<sp/>=<sp/>to_trans(h,<sp/>w);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>to_send_qerr<sp/>=<sp/>qerror(h,<sp/>w);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1lbann__quantizer_1a399f3f8c393b6021b43e95d1ce6ea28c" kindref="member">QuantizedMatrix</ref>&amp;<sp/>qmat<sp/>=<sp/>qmats[call_idx];</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1lbann__quantizer_1a4dd4696cbbfd93c73e5fb3c40fcb16c3" kindref="member">onebit_quantize</ref>(to_send,<sp/>qmat,<sp/>to_send_qerr);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>count<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="classlbann_1_1lbann__quantizer_1afcda642ff1b44d31eec910909c3d013e" kindref="member">qtype</ref>)<sp/>*<sp/>qmat.Height()<sp/>*<sp/>qmat.Width();</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!const_data)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Need<sp/>to<sp/>accumulate<sp/>local<sp/>errors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1lbann__quantizer_1ad5592daa122b40c275cce3dc93bba41e" kindref="member">onebit_unquantize</ref>(qmat,<sp/>to_send);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint8_t<sp/>*)<sp/>qmat.Buffer();</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>recv_transform<sp/>=</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]<sp/>(uint8_t<sp/>*recv_buf,<sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>accum)<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1lbann__quantizer_1a399f3f8c393b6021b43e95d1ce6ea28c" kindref="member">QuantizedMatrix</ref><sp/>recv_mat;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>recv_mat.LockedAttach(</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1lbann__quantizer_1aa1541b9afa60250dbd570acbbe98242f" kindref="member">get_onebit_quantized_matrix_height</ref>(accum),<sp/>accum.Width(),</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="classlbann_1_1lbann__quantizer_1afcda642ff1b44d31eec910909c3d013e" kindref="member">qtype</ref><sp/>*)<sp/>recv_buf,<sp/><ref refid="classlbann_1_1lbann__quantizer_1aa1541b9afa60250dbd570acbbe98242f" kindref="member">get_onebit_quantized_matrix_height</ref>(accum));</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1lbann__quantizer_1ad5592daa122b40c275cce3dc93bba41e" kindref="member">onebit_unquantize</ref>(recv_mat,<sp/>accum);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="classlbann_1_1lbann__quantizer_1afcda642ff1b44d31eec910909c3d013e" kindref="member">qtype</ref>)<sp/>*<sp/>recv_mat.Height()<sp/>*<sp/>recv_mat.Width();</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>recv_apply_transform<sp/>=</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]<sp/>(uint8_t<sp/>*recv_buf,<sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>accum,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_local)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_local)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref><sp/>recv_mat;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>recv_mat.LockedAttach(accum.Height(),<sp/>accum.Width(),</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(DataType<sp/>*)<sp/>recv_buf,<sp/>accum.LDim());</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>accum<sp/>+=<sp/>recv_mat;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(DataType)<sp/>*<sp/>recv_mat.Height()<sp/>*<sp/>recv_mat.Width();</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1lbann__quantizer_1a399f3f8c393b6021b43e95d1ce6ea28c" kindref="member">QuantizedMatrix</ref><sp/>recv_mat;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>recv_mat.LockedAttach(<ref refid="classlbann_1_1lbann__quantizer_1aa1541b9afa60250dbd570acbbe98242f" kindref="member">get_onebit_quantized_matrix_height</ref>(accum),</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>accum.Width(),<sp/>(<ref refid="classlbann_1_1lbann__quantizer_1afcda642ff1b44d31eec910909c3d013e" kindref="member">qtype</ref><sp/>*)<sp/>recv_buf,</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1lbann__quantizer_1aa1541b9afa60250dbd570acbbe98242f" kindref="member">get_onebit_quantized_matrix_height</ref>(accum));</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1lbann__quantizer_1a879cea8464408b8265be9e55edd83b2c" kindref="member">onebit_unquantize_add</ref>(recv_mat,<sp/>accum);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="classlbann_1_1lbann__quantizer_1afcda642ff1b44d31eec910909c3d013e" kindref="member">qtype</ref>)<sp/>*<sp/>recv_mat.Height()<sp/>*<sp/>recv_mat.Width();</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><ref refid="structlbann_1_1lbann__comm_1_1allreduce__options" kindref="compound">lbann_comm::allreduce_options</ref><sp/>opts;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>opts.<ref refid="structlbann_1_1lbann__comm_1_1allreduce__options_1a4b3cd4eb74dd5a49ee3ffafa2edc1607" kindref="member">max_reduces</ref><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>comm-&gt;<ref refid="classlbann_1_1lbann__comm_1a502bd724f9fb27f0e899306c69a3ec47" kindref="member">intermodel_allreduce</ref>(</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>mat,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="classlbann_1_1lbann__quantizer_1afcda642ff1b44d31eec910909c3d013e" kindref="member">qtype</ref>)<sp/>*<sp/><ref refid="classlbann_1_1lbann__quantizer_1aa1541b9afa60250dbd570acbbe98242f" kindref="member">get_onebit_quantized_matrix_height</ref>(mat)<sp/>*<sp/>mat.Width(),</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;uint8_t<sp/>*(Mat&amp;,<sp/>El::IR,<sp/>El::IR,<sp/>int&amp;,<sp/>bool,<sp/>int)&gt;(send_transform),</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(uint8_t<sp/>*,<sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;)&gt;(recv_transform),</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(uint8_t<sp/>*,<sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)&gt;(recv_apply_transform),</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>opts);</highlight></codeline>
<codeline lineno="266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268" refid="classlbann_1_1lbann__quantizer_1af24e00e26e157f102f3cef547de40ae1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__quantizer_1a4b326de1ca5b7eba6415b6f42f83335b" kindref="member">lbann_quantizer::intermodel_sum_onebit_quantized</ref>(</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1lbann__comm" kindref="compound">lbann_comm</ref><sp/>*<ref refid="file__io_8cpp_1ab048c6f9fcbcfaa57ce68b00263dbebe" kindref="member">comm</ref>,<sp/><ref refid="base_8hpp_1a0fab5387556805cfeac3e7e567bf66c5" kindref="member">DistMat</ref>&amp;<sp/>mat,<sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>qerror)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1lbann__quantizer_1a4b326de1ca5b7eba6415b6f42f83335b" kindref="member">intermodel_sum_onebit_quantized</ref>(comm,<sp/>mat.Matrix(),<sp/>qerror);</highlight></codeline>
<codeline lineno="271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273" refid="classlbann_1_1lbann__quantizer_1a00106e69ea8a6dfe9e9a91c75b845bcd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__quantizer_1a00106e69ea8a6dfe9e9a91c75b845bcd" kindref="member">lbann_quantizer::threshold_quantize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>mat,<sp/><ref refid="classlbann_1_1lbann__quantizer_1a85ea8e298c2975b4f802855278406aa7" kindref="member">ThreshQuantized</ref>&amp;<sp/>quant,</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>qerror,<sp/>DataType<sp/>pos_thresh,</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>DataType<sp/>neg_thresh,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>delta)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Int<sp/>ldim<sp/>=<sp/>mat.LDim();</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Int<sp/>width<sp/>=<sp/>mat.Width();</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Int<sp/>height<sp/>=<sp/>mat.Height();</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ldim<sp/>!=<sp/>qerror.LDim())<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ldims<sp/>don&apos;t<sp/>match!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType<sp/>*__restrict__<sp/>mat_buf<sp/>=<sp/>mat.LockedBuffer();</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>DataType<sp/>*__restrict__<sp/>qerror_buf<sp/>=<sp/>qerror.Buffer();</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>std::vector&lt;ThreshQuantized&gt;<sp/>thread_qs(omp_get_max_threads());</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(delta)<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>El::Unsigned<sp/>prev_pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(El::Int<sp/>col<sp/>=<sp/>0;<sp/>col<sp/>&lt;<sp/>width;<sp/>++col)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(El::Int<sp/>row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>height;<sp/>++row)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Unsigned<sp/>pos<sp/>=<sp/>row<sp/>+<sp/>col<sp/>*<sp/>ldim;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType<sp/>val<sp/>=<sp/>mat_buf[pos]<sp/>+<sp/>qerror_buf[pos];</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>&gt;=<sp/>pos_thresh)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qerror_buf[pos]<sp/>=<sp/>val<sp/>-<sp/>pos_thresh;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Delta<sp/>encode<sp/>pos.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quant.emplace_back(((pos<sp/>-<sp/>prev_pos)<sp/>&lt;&lt;<sp/>1)<sp/>|<sp/>1);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev_pos<sp/>=<sp/>pos;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>&lt;=<sp/>neg_thresh)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qerror_buf[pos]<sp/>=<sp/>val<sp/>-<sp/>neg_thresh;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quant.emplace_back((pos<sp/>-<sp/>prev_pos)<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev_pos<sp/>=<sp/>pos;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qerror_buf[pos]<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>parallel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid<sp/>=<sp/>omp_get_thread_num();</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>for<sp/>schedule(static)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(El::Int<sp/>col<sp/>=<sp/>0;<sp/>col<sp/>&lt;<sp/>width;<sp/>++col)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(El::Int<sp/>row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>height;<sp/>++row)<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Unsigned<sp/>pos<sp/>=<sp/>row<sp/>+<sp/>col<sp/>*<sp/>ldim;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType<sp/>val<sp/>=<sp/>mat_buf[pos]<sp/>+<sp/>qerror_buf[pos];</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>&gt;=<sp/>pos_thresh)<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qerror_buf[pos]<sp/>=<sp/>val<sp/>-<sp/>pos_thresh;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread_qs[tid].emplace_back((pos<sp/>&lt;&lt;<sp/>1)<sp/>|<sp/>1);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>&lt;=<sp/>neg_thresh)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qerror_buf[pos]<sp/>=<sp/>val<sp/>-<sp/>neg_thresh;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread_qs[tid].emplace_back(pos<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qerror_buf[pos]<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>the<sp/>temporary<sp/>vectors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>thread_q<sp/>:<sp/>thread_qs)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>quant.insert(quant.end(),<sp/>thread_q.begin(),<sp/>thread_q.end());</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333" refid="classlbann_1_1lbann__quantizer_1ae9949af6bec1e95adf5a32ba9bb4afd8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__quantizer_1a00106e69ea8a6dfe9e9a91c75b845bcd" kindref="member">lbann_quantizer::threshold_quantize</ref>(</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="base_8hpp_1a0fab5387556805cfeac3e7e567bf66c5" kindref="member">DistMat</ref>&amp;<sp/>mat,<sp/><ref refid="classlbann_1_1lbann__quantizer_1a85ea8e298c2975b4f802855278406aa7" kindref="member">ThreshQuantized</ref>&amp;<sp/>q,<sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>qerror,<sp/>DataType<sp/>pos_thresh,</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>DataType<sp/>neg_thresh,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>delta)<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1lbann__quantizer_1a00106e69ea8a6dfe9e9a91c75b845bcd" kindref="member">threshold_quantize</ref>(mat.LockedMatrix(),<sp/>q,<sp/>qerror,<sp/>pos_thresh,<sp/>neg_thresh,</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delta);</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340" refid="classlbann_1_1lbann__quantizer_1a0f5f3b0149715ab59202b8884a87c7d5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__quantizer_1a0f5f3b0149715ab59202b8884a87c7d5" kindref="member">lbann_quantizer::threshold_unquantize</ref>(</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__quantizer_1a85ea8e298c2975b4f802855278406aa7" kindref="member">ThreshQuantized</ref>&amp;<sp/>quant,<sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>mat,<sp/>DataType<sp/>pos_thresh,</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>DataType<sp/>neg_thresh,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>delta)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>DataType<sp/>*__restrict__<sp/>buf<sp/>=<sp/>mat.Buffer();</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(delta)<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>El::Unsigned<sp/>prev_pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(El::Unsigned<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>quant.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__quantizer_1ac8b63c86fc871e248ce20c7af19a7fad" kindref="member">uqtype</ref><sp/>q<sp/>=<sp/>quant[i];</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Unsigned<sp/>pos<sp/>=<sp/>(q<sp/>&gt;&gt;<sp/>1)<sp/>+<sp/>prev_pos;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prev_pos<sp/>=<sp/>pos;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(q<sp/>&amp;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf[pos]<sp/>=<sp/>pos_thresh;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf[pos]<sp/>=<sp/>neg_thresh;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>parallel<sp/>for<sp/>schedule(static)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(El::Unsigned<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>quant.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__quantizer_1ac8b63c86fc871e248ce20c7af19a7fad" kindref="member">uqtype</ref><sp/>q<sp/>=<sp/>quant[i];</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Unsigned<sp/>pos<sp/>=<sp/>q<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(q<sp/>&amp;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf[pos]<sp/>=<sp/>pos_thresh;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf[pos]<sp/>=<sp/>neg_thresh;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370" refid="classlbann_1_1lbann__quantizer_1a2324bba3cbb6c0d3e51bbe21555e7f1a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__quantizer_1a0f5f3b0149715ab59202b8884a87c7d5" kindref="member">lbann_quantizer::threshold_unquantize</ref>(</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__quantizer_1a85ea8e298c2975b4f802855278406aa7" kindref="member">ThreshQuantized</ref>&amp;<sp/>quant,<sp/><ref refid="base_8hpp_1a0fab5387556805cfeac3e7e567bf66c5" kindref="member">DistMat</ref>&amp;<sp/>mat,<sp/>DataType<sp/>pos_thresh,</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>DataType<sp/>neg_thresh,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>delta)<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1lbann__quantizer_1a0f5f3b0149715ab59202b8884a87c7d5" kindref="member">threshold_unquantize</ref>(quant,<sp/>mat.Matrix(),<sp/>pos_thresh,<sp/>neg_thresh,<sp/>delta);</highlight></codeline>
<codeline lineno="374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376" refid="classlbann_1_1lbann__quantizer_1ab12b432ba2901347b025e8b6ec40a3c6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__quantizer_1ab12b432ba2901347b025e8b6ec40a3c6" kindref="member">lbann_quantizer::threshold_unquantize_apply</ref>(</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__quantizer_1a85ea8e298c2975b4f802855278406aa7" kindref="member">ThreshQuantized</ref>&amp;<sp/>quant,<sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>mat,<sp/>DataType<sp/>pos_thresh,</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>DataType<sp/>neg_thresh,<sp/>std::vector&lt;El::Unsigned&gt;&amp;<sp/>positions,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>delta)<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>general<sp/>note<sp/>on<sp/>positions<sp/>that<sp/>I&apos;m<sp/>putting<sp/>here<sp/>because<sp/>I&apos;m<sp/>not<sp/>sure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>where<sp/>else<sp/>to:<sp/>Using<sp/>a<sp/>vector<sp/>admits<sp/>the<sp/>possibility<sp/>that<sp/>we<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>duplicate<sp/>entries.<sp/>This<sp/>could<sp/>be<sp/>fixed<sp/>by<sp/>using<sp/>an<sp/>unordered_set,<sp/>but<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>I<sp/>benchmarked<sp/>this,<sp/>it<sp/>increased<sp/>our<sp/>runtime<sp/>by<sp/>~5<sp/>times.<sp/>Having<sp/>duplicate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>entries<sp/>should<sp/>not<sp/>change<sp/>the<sp/>final<sp/>result:<sp/>it<sp/>means<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>threshold_quantize_apply<sp/>may<sp/>quantize<sp/>the<sp/>same<sp/>entry<sp/>multiple<sp/>times,<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>final<sp/>unquantize<sp/>is<sp/>not<sp/>an<sp/>_apply,<sp/>and<sp/>so<sp/>will<sp/>just<sp/>set<sp/>that<sp/>entry<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>same<sp/>value<sp/>multiple<sp/>times.<sp/>We<sp/>send<sp/>some<sp/>extra<sp/>data,<sp/>but<sp/>the<sp/>overhead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>small.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>DataType<sp/>*__restrict__<sp/>buf<sp/>=<sp/>mat.Buffer();</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(delta)<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>El::Unsigned<sp/>prev_pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(El::Unsigned<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>quant.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__quantizer_1ac8b63c86fc871e248ce20c7af19a7fad" kindref="member">uqtype</ref><sp/>q<sp/>=<sp/>quant[i];</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Unsigned<sp/>pos<sp/>=<sp/>(q<sp/>&gt;&gt;<sp/>1)<sp/>+<sp/>prev_pos;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prev_pos<sp/>=<sp/>pos;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>positions.emplace_back(pos);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(q<sp/>&amp;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf[pos]<sp/>+=<sp/>pos_thresh;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf[pos]<sp/>+=<sp/>neg_thresh;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(El::Unsigned<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>quant.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__quantizer_1ac8b63c86fc871e248ce20c7af19a7fad" kindref="member">uqtype</ref><sp/>q<sp/>=<sp/>quant[i];</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Unsigned<sp/>pos<sp/>=<sp/>q<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>positions.emplace_back(pos);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(q<sp/>&amp;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf[pos]<sp/>+=<sp/>pos_thresh;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf[pos]<sp/>+=<sp/>neg_thresh;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal">}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416" refid="classlbann_1_1lbann__quantizer_1a2bcdf31781bf72bbe63940ea0d92990f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__quantizer_1a2bcdf31781bf72bbe63940ea0d92990f" kindref="member">lbann_quantizer::threshold_quantize_apply</ref>(</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>mat,<sp/><ref refid="classlbann_1_1lbann__quantizer_1a85ea8e298c2975b4f802855278406aa7" kindref="member">ThreshQuantized</ref>&amp;<sp/>quant,<sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>qerror,<sp/>DataType<sp/>pos_thresh,</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>DataType<sp/>neg_thresh,<sp/>std::vector&lt;El::Unsigned&gt;&amp;<sp/>positions,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>delta)<sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType<sp/>*__restrict__<sp/>mat_buf<sp/>=<sp/>mat.LockedBuffer();</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>DataType<sp/>*__restrict__<sp/>qerror_buf<sp/>=<sp/>qerror.Buffer();</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(delta)<sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Need<sp/>to<sp/>sort<sp/>so<sp/>positions<sp/>are<sp/>in<sp/>order,<sp/>otherwise<sp/>our<sp/>delta<sp/>encoding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>doesn&apos;t<sp/>work.<sp/>(Could<sp/>be<sp/>solved<sp/>by<sp/>adding<sp/>stops,<sp/>but<sp/>maybe<sp/>not<sp/>worth<sp/>it.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort(positions.begin(),<sp/>positions.end());</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>El::Unsigned<sp/>prev_pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>pos<sp/>:<sp/>positions)<sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType<sp/>val<sp/>=<sp/>mat_buf[pos]<sp/>+<sp/>qerror_buf[pos];</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>&gt;=<sp/>pos_thresh)<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qerror_buf[pos]<sp/>=<sp/>val<sp/>-<sp/>pos_thresh;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quant.emplace_back(((pos<sp/>-<sp/>prev_pos)<sp/>&lt;&lt;<sp/>1)<sp/>|<sp/>1);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev_pos<sp/>=<sp/>pos;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>&lt;=<sp/>neg_thresh)<sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qerror_buf[pos]<sp/>=<sp/>val<sp/>-<sp/>neg_thresh;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quant.emplace_back((pos<sp/>-<sp/>prev_pos)<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev_pos<sp/>=<sp/>pos;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qerror_buf[pos]<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>pos<sp/>:<sp/>positions)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType<sp/>val<sp/>=<sp/>mat_buf[pos]<sp/>+<sp/>qerror_buf[pos];</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>&gt;=<sp/>pos_thresh)<sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quant.emplace_back((pos<sp/>&lt;&lt;<sp/>1)<sp/>|<sp/>1);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qerror_buf[pos]<sp/>=<sp/>val<sp/>-<sp/>pos_thresh;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>&lt;=<sp/>neg_thresh)<sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quant.emplace_back(pos<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qerror_buf[pos]<sp/>=<sp/>val<sp/>-<sp/>neg_thresh;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qerror_buf[pos]<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal">}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456" refid="classlbann_1_1lbann__quantizer_1a0bd572557675705c5e080b92d74b02ae" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__quantizer_1a0bd572557675705c5e080b92d74b02ae" kindref="member">lbann_quantizer::intermodel_sum_threshold_quantized</ref>(</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1lbann__comm" kindref="compound">lbann_comm</ref><sp/>*<ref refid="file__io_8cpp_1ab048c6f9fcbcfaa57ce68b00263dbebe" kindref="member">comm</ref>,<sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>mat,<sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>qerror,<sp/>DataType<sp/>pos_thresh,</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>DataType<sp/>neg_thresh)<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Temporarily<sp/>not<sp/>supported<sp/>until<sp/>threshold<sp/>quantization<sp/>is<sp/>updated<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>upper<sp/>bounds<sp/>on<sp/>its<sp/>send<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight><highlight class="stringliteral">&quot;Threshold<sp/>quantized<sp/>allreduce<sp/>not<sp/>supported&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464" refid="classlbann_1_1lbann__quantizer_1ac2afc78996f35d90b5d0462292a1a2e3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__quantizer_1a0bd572557675705c5e080b92d74b02ae" kindref="member">lbann_quantizer::intermodel_sum_threshold_quantized</ref>(</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1lbann__comm" kindref="compound">lbann_comm</ref><sp/>*<ref refid="file__io_8cpp_1ab048c6f9fcbcfaa57ce68b00263dbebe" kindref="member">comm</ref>,<sp/><ref refid="base_8hpp_1a0fab5387556805cfeac3e7e567bf66c5" kindref="member">DistMat</ref>&amp;<sp/>mat,<sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>qerror,<sp/>DataType<sp/>pos_thresh,</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>DataType<sp/>neg_thresh)<sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1lbann__quantizer_1a0bd572557675705c5e080b92d74b02ae" kindref="member">intermodel_sum_threshold_quantized</ref>(comm,<sp/>mat.Matrix(),<sp/>qerror,<sp/>pos_thresh,</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>neg_thresh);</highlight></codeline>
<codeline lineno="469"><highlight class="normal">}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471" refid="classlbann_1_1lbann__quantizer_1a87e856d8bf5e8a678a39cdb8f547dfd9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__quantizer_1a87e856d8bf5e8a678a39cdb8f547dfd9" kindref="member">lbann_quantizer::intermodel_sum_adaptive_quantized</ref>(</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1lbann__comm" kindref="compound">lbann_comm</ref><sp/>*<ref refid="file__io_8cpp_1ab048c6f9fcbcfaa57ce68b00263dbebe" kindref="member">comm</ref>,<sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>mat,<sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>qerror,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>proportion)<sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Select<sp/>which<sp/>algorithm<sp/>to<sp/>use<sp/>based<sp/>on<sp/>the<sp/>size<sp/>of<sp/>mat.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Multiply<sp/>at<sp/>64<sp/>bits<sp/>to<sp/>avoid<sp/>overflows.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mat_size<sp/>=<sp/>((size_t)<sp/>mat.Height())<sp/>*<sp/>((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>mat.Width());</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>signed<sp/>version<sp/>because<sp/>we<sp/>need<sp/>one<sp/>bit<sp/>for<sp/>the<sp/>quantized<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mat_size<sp/>&gt;<sp/>std::numeric_limits&lt;int32_t&gt;::max())<sp/>{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>intermodel_sum_adaptive_quantized_impl&lt;uint64_t,<sp/>uint64_t&gt;(</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="file__io_8cpp_1ab048c6f9fcbcfaa57ce68b00263dbebe" kindref="member">comm</ref>,<sp/>mat,<sp/>qerror,<sp/>proportion);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>whether<sp/>we<sp/>can<sp/>use<sp/>16-bit<sp/>row<sp/>indices.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>the<sp/>column<sp/>type<sp/>(at<sp/>compile<sp/>time)<sp/>based<sp/>upon<sp/>DataType.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>colT<sp/>=<sp/>std::conditional&lt;sizeof(DataType)<sp/>&lt;=<sp/>4,<sp/>uint32_t,<sp/>uint64_t&gt;::type;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mat.Height()<sp/>&gt;<sp/>std::numeric_limits&lt;int16_t&gt;::max())<sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>intermodel_sum_adaptive_quantized_impl&lt;colT,<sp/>uint32_t&gt;(</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="file__io_8cpp_1ab048c6f9fcbcfaa57ce68b00263dbebe" kindref="member">comm</ref>,<sp/>mat,<sp/>qerror,<sp/>proportion);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>intermodel_sum_adaptive_quantized_impl&lt;colT,<sp/>uint16_t&gt;(</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="file__io_8cpp_1ab048c6f9fcbcfaa57ce68b00263dbebe" kindref="member">comm</ref>,<sp/>mat,<sp/>qerror,<sp/>proportion);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="normal">}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494" refid="classlbann_1_1lbann__quantizer_1aa2d4e5b9bc90f8feaaa32f3fc4183d10" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__quantizer_1a87e856d8bf5e8a678a39cdb8f547dfd9" kindref="member">lbann_quantizer::intermodel_sum_adaptive_quantized</ref>(</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1lbann__comm" kindref="compound">lbann_comm</ref><sp/>*<ref refid="file__io_8cpp_1ab048c6f9fcbcfaa57ce68b00263dbebe" kindref="member">comm</ref>,<sp/><ref refid="base_8hpp_1a0fab5387556805cfeac3e7e567bf66c5" kindref="member">DistMat</ref>&amp;<sp/>mat,<sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>qerror,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>proportion)<sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1lbann__quantizer_1a87e856d8bf5e8a678a39cdb8f547dfd9" kindref="member">intermodel_sum_adaptive_quantized</ref>(comm,<sp/>mat.Matrix(),<sp/>qerror,</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>proportion);</highlight></codeline>
<codeline lineno="498"><highlight class="normal">}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500" refid="classlbann_1_1lbann__quantizer_1aa5aabc1cb4163e95aee993d9b37b9b32" refkind="member"><highlight class="normal"><ref refid="structlbann_1_1lbann__quantizer_1_1adaptive__thresholds" kindref="compound">lbann_quantizer::adaptive_thresholds</ref><sp/><ref refid="classlbann_1_1lbann__quantizer_1aa5aabc1cb4163e95aee993d9b37b9b32" kindref="member">lbann_quantizer::proportion_threshold</ref>(</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>mat,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>qerror,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>proportion,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sample)<sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>proportion_start<sp/>=<sp/><ref refid="namespacelbann_1a478d36031ff0659893c4322cd856157f" kindref="member">get_time</ref>();</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/>std::vector&lt;DataType&gt;<sp/>entries;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Int<sp/>height<sp/>=<sp/>mat.Height();</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Int<sp/>width<sp/>=<sp/>mat.Width();</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Int<sp/>ldim<sp/>=<sp/>mat.LDim();</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType<sp/>*__restrict__<sp/>mat_buf<sp/>=<sp/>mat.LockedBuffer();</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType<sp/>*__restrict__<sp/>qerror_buf<sp/>=<sp/>qerror.LockedBuffer();</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Bail<sp/>out<sp/>if<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(width<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>0.0f,<sp/>0.0f<sp/>};</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(width<sp/>*<sp/>height<sp/>&lt;=<sp/><ref refid="classlbann_1_1lbann__quantizer_1a7745dbc282bebe812ff5523a4b3df3f2" kindref="member">NUM_THRESHOLD_SAMPLES</ref><sp/>||<sp/>!sample)<sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>entire<sp/>matrix<sp/>into<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>entries.reserve(width<sp/>*<sp/>height);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(El::Int<sp/>col<sp/>=<sp/>0;<sp/>col<sp/>&lt;<sp/>width;<sp/>++col)<sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Int<sp/>col_offset<sp/>=<sp/>col<sp/>*<sp/>ldim;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(El::Int<sp/>row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>height;<sp/>++row)<sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Unsigned<sp/>pos<sp/>=<sp/>row<sp/>+<sp/>col_offset;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entries.emplace_back(mat_buf[pos]<sp/>+<sp/>qerror_buf[pos]);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Randomly<sp/>sample<sp/>entries<sp/>to<sp/>approximate<sp/>everything.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>entries.reserve(<ref refid="classlbann_1_1lbann__quantizer_1a7745dbc282bebe812ff5523a4b3df3f2" kindref="member">NUM_THRESHOLD_SAMPLES</ref>);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelbann_1af16616ffa6a3616836eabadd6ce837ec" kindref="member">fast_rng_gen</ref>&amp;<sp/>gen<sp/>=<sp/><ref refid="namespacelbann_1ae6ce9c2fdec6f81803f6b1a6555c31c5" kindref="member">get_fast_generator</ref>();</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;El::Unsigned&gt;<sp/>poses(<ref refid="classlbann_1_1lbann__quantizer_1a7745dbc282bebe812ff5523a4b3df3f2" kindref="member">NUM_THRESHOLD_SAMPLES</ref>);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(El::Unsigned<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classlbann_1_1lbann__quantizer_1a7745dbc282bebe812ff5523a4b3df3f2" kindref="member">NUM_THRESHOLD_SAMPLES</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Unsigned<sp/>pos<sp/>=<sp/><ref refid="namespacelbann_1a557aaed6267e7aaf583a75149e9c670c" kindref="member">fast_rand_int</ref>(gen,<sp/>height)<sp/>+<sp/><ref refid="namespacelbann_1a557aaed6267e7aaf583a75149e9c670c" kindref="member">fast_rand_int</ref>(gen,<sp/>width)<sp/>*<sp/>ldim;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>__builtin_prefetch(&amp;mat_buf[pos]);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>__builtin_prefetch(&amp;qerror_buf[pos]);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>poses[i]<sp/>=<sp/>pos;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(El::Unsigned<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classlbann_1_1lbann__quantizer_1a7745dbc282bebe812ff5523a4b3df3f2" kindref="member">NUM_THRESHOLD_SAMPLES</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Unsigned<sp/>pos<sp/>=<sp/>poses[i];</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entries.emplace_back(mat_buf[pos]<sp/>+<sp/>qerror_buf[pos]);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>the<sp/>number<sp/>of<sp/>entries<sp/>to<sp/>keep.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>El::Int<sp/>num_to_keep<sp/>=<sp/>std::max(1,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>entries.size()<sp/>/<sp/>proportion);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>the<sp/>threshold<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>finds<sp/>the<sp/>num_to_keep&apos;th<sp/>value<sp/>if<sp/>sample<sp/>were<sp/>sorted<sp/>by<sp/>magnitude</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>assigns<sp/>it<sp/>to<sp/>the<sp/>appropriate<sp/>threshold,<sp/>then<sp/>checks<sp/>the<sp/>upper<sp/>portion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>partially-sorted<sp/>vector<sp/>to<sp/>find<sp/>the<sp/>other<sp/>threshold.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>the<sp/>case<sp/>that<sp/>the<sp/>threshold<sp/>would<sp/>be<sp/>0,<sp/>it<sp/>is<sp/>instead<sp/>a<sp/>small<sp/>non-zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>DataType<sp/>pos_thresh<sp/>=<sp/>std::numeric_limits&lt;DataType&gt;::max();</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>DataType<sp/>neg_thresh<sp/>=<sp/>-std::numeric_limits&lt;DataType&gt;::max();</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>entries.begin()<sp/>+<sp/>(entries.size()<sp/>-<sp/>num_to_keep);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>std::nth_element(entries.begin(),<sp/>i,<sp/>entries.end(),</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>[]<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::abs(a)<sp/>&lt;<sp/>std::abs(b);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*i<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>pos_thresh<sp/>=<sp/>*i;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(++i;<sp/>i<sp/>&lt;<sp/>entries.end();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>largest<sp/>(closest<sp/>to<sp/>0)<sp/>negative<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*i<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>neg_thresh<sp/>=<sp/>std::max(neg_thresh,<sp/>*i);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*i<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>neg_thresh<sp/>=<sp/>*i;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(++i;<sp/>i<sp/>&lt;<sp/>entries.end();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>smallest<sp/>(closest<sp/>to<sp/>0)<sp/>positive<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*i<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos_thresh<sp/>=<sp/>std::min(pos_thresh,<sp/>*i);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>are<sp/>no<sp/>values<sp/>of<sp/>a<sp/>sign,<sp/>select<sp/>threshold<sp/>such<sp/>that<sp/>none<sp/>are<sp/>sent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos_thresh<sp/>==<sp/>std::numeric_limits&lt;DataType&gt;::max())<sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>pos_thresh<sp/>=<sp/>-neg_thresh;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(neg_thresh<sp/>==<sp/>-std::numeric_limits&lt;DataType&gt;::max())<sp/>{</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>neg_thresh<sp/>=<sp/>-pos_thresh;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1lbann__quantizer_1a6bd266728f578df0c86fc2e493742cc1" kindref="member">proportion_time</ref><sp/>+=<sp/><ref refid="namespacelbann_1a478d36031ff0659893c4322cd856157f" kindref="member">get_time</ref>()<sp/>-<sp/>proportion_start;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>pos_thresh,<sp/>neg_thresh<sp/>};</highlight></codeline>
<codeline lineno="580"><highlight class="normal">}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582" refid="classlbann_1_1lbann__quantizer_1af77beca5905ff8601ca9b8231a2a16e0" refkind="member"><highlight class="normal"><ref refid="structlbann_1_1lbann__quantizer_1_1adaptive__reconstructions" kindref="compound">lbann_quantizer::adaptive_reconstructions</ref><sp/><ref refid="classlbann_1_1lbann__quantizer_1af77beca5905ff8601ca9b8231a2a16e0" kindref="member">lbann_quantizer::col_reconstruction</ref>(</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>mat,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>qerror,<sp/>El::Int<sp/>col,</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlbann_1_1lbann__quantizer_1_1adaptive__thresholds" kindref="compound">adaptive_thresholds</ref><sp/>threshes,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sample)<sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>DataType<sp/>pos_sum<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>El::Unsigned<sp/>pos_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>DataType<sp/>neg_sum<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/>El::Unsigned<sp/>neg_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>LBANN_QUANTIZER_TERNARY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>DataType<sp/>zero_sum<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>El::Unsigned<sp/>zero_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Int<sp/>height<sp/>=<sp/>mat.Height();</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Int<sp/>col_offset<sp/>=<sp/>col<sp/>*<sp/>mat.LDim();</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType<sp/>*__restrict__<sp/>mat_buf<sp/>=<sp/>mat.LockedBuffer();</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType<sp/>*__restrict__<sp/>qerror_buf<sp/>=<sp/>qerror.LockedBuffer();</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(height<sp/>&lt;=<sp/><ref refid="classlbann_1_1lbann__quantizer_1a10667e56db4218aac3912c6bae28fc41" kindref="member">NUM_RECON_SAMPLES</ref><sp/>||<sp/>!sample)<sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(El::Int<sp/>row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>height;<sp/>++row)<sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Unsigned<sp/>pos<sp/>=<sp/>row<sp/>+<sp/>col_offset;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType<sp/>val<sp/>=<sp/>mat_buf[pos]<sp/>+<sp/>qerror_buf[pos];</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>&gt;=<sp/>threshes.<ref refid="structlbann_1_1lbann__quantizer_1_1adaptive__thresholds_1a6f6aee51ed629c2ab68666d577189bb9" kindref="member">pos_thresh</ref>)<sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos_sum<sp/>+=<sp/>val;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++pos_count;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>&lt;=<sp/>threshes.<ref refid="structlbann_1_1lbann__quantizer_1_1adaptive__thresholds_1a4626553695545cf0783c3f7302f92fbf" kindref="member">neg_thresh</ref>)<sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>neg_sum<sp/>+=<sp/>val;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++neg_count;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>LBANN_QUANTIZER_TERNARY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zero_sum<sp/>+=<sp/>val;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++zero_count;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Randomly<sp/>sample<sp/>entries<sp/>to<sp/>approximate<sp/>the<sp/>means.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelbann_1af16616ffa6a3616836eabadd6ce837ec" kindref="member">fast_rng_gen</ref>&amp;<sp/>gen<sp/>=<sp/><ref refid="namespacelbann_1ae6ce9c2fdec6f81803f6b1a6555c31c5" kindref="member">get_fast_generator</ref>();</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_pow2<sp/>=<sp/>!(height<sp/>&amp;<sp/>(height<sp/>-<sp/>1));<sp/><sp/></highlight><highlight class="comment">//<sp/>Assumes<sp/>height<sp/>!=<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;El::Unsigned&gt;<sp/>poses(<ref refid="classlbann_1_1lbann__quantizer_1a10667e56db4218aac3912c6bae28fc41" kindref="member">NUM_RECON_SAMPLES</ref>);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_pow2)<sp/>{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(El::Unsigned<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classlbann_1_1lbann__quantizer_1a10667e56db4218aac3912c6bae28fc41" kindref="member">NUM_RECON_SAMPLES</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Unsigned<sp/>pos<sp/>=<sp/><ref refid="namespacelbann_1a2fe8cea17a147566b73260f557b51006" kindref="member">fast_rand_int_pow2</ref>(gen,<sp/>height)<sp/>+<sp/>col_offset;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__builtin_prefetch(&amp;mat_buf[pos]);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__builtin_prefetch(&amp;qerror_buf[pos]);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>poses[i]<sp/>=<sp/>pos;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(El::Unsigned<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classlbann_1_1lbann__quantizer_1a10667e56db4218aac3912c6bae28fc41" kindref="member">NUM_RECON_SAMPLES</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Unsigned<sp/>pos<sp/>=<sp/><ref refid="namespacelbann_1a557aaed6267e7aaf583a75149e9c670c" kindref="member">fast_rand_int</ref>(gen,<sp/>height)<sp/>+<sp/>col_offset;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__builtin_prefetch(&amp;mat_buf[pos]);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__builtin_prefetch(&amp;qerror_buf[pos]);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>poses[i]<sp/>=<sp/>pos;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(El::Unsigned<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classlbann_1_1lbann__quantizer_1a10667e56db4218aac3912c6bae28fc41" kindref="member">NUM_RECON_SAMPLES</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//const<sp/>unsigned<sp/>pos<sp/>=<sp/>row_dist(gen)<sp/>+<sp/>col_offset;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Unsigned<sp/>pos<sp/>=<sp/>poses[i];</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType<sp/>val<sp/>=<sp/>mat_buf[pos]<sp/>+<sp/>qerror_buf[pos];</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>&gt;=<sp/>threshes.<ref refid="structlbann_1_1lbann__quantizer_1_1adaptive__thresholds_1a6f6aee51ed629c2ab68666d577189bb9" kindref="member">pos_thresh</ref>)<sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos_sum<sp/>+=<sp/>val;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++pos_count;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>&lt;=<sp/>threshes.<ref refid="structlbann_1_1lbann__quantizer_1_1adaptive__thresholds_1a4626553695545cf0783c3f7302f92fbf" kindref="member">neg_thresh</ref>)<sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>neg_sum<sp/>+=<sp/>val;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++neg_count;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>LBANN_QUANTIZER_TERNARY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zero_sum<sp/>+=<sp/>val;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++zero_count;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>means.<sp/>Use<sp/>the<sp/>thresholds<sp/>as<sp/>initial<sp/>values<sp/>in<sp/>case<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sampling<sp/>does<sp/>not<sp/>include<sp/>any<sp/>positive<sp/>or<sp/>negative<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>DataType<sp/>pos_recon<sp/>=<sp/>threshes.<ref refid="structlbann_1_1lbann__quantizer_1_1adaptive__thresholds_1a6f6aee51ed629c2ab68666d577189bb9" kindref="member">pos_thresh</ref>;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>DataType<sp/>neg_recon<sp/>=<sp/>threshes.<ref refid="structlbann_1_1lbann__quantizer_1_1adaptive__thresholds_1a4626553695545cf0783c3f7302f92fbf" kindref="member">neg_thresh</ref>;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>LBANN_QUANTIZER_TERNARY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>DataType<sp/>zero_recon<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos_count<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>pos_recon<sp/>=<sp/>pos_sum<sp/>/<sp/>pos_count;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(neg_count<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>neg_recon<sp/>=<sp/>neg_sum<sp/>/<sp/>neg_count;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>LBANN_QUANTIZER_TERNARY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(zero_count<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>zero_recon<sp/>=<sp/>zero_sum<sp/>/<sp/>zero_count;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>pos_recon,<sp/>neg_recon,<sp/>zero_recon<sp/>};</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>pos_recon,<sp/>neg_recon<sp/>};</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal">}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>lbann</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/quantizer.cpp"/>
  </compounddef>
</doxygen>
