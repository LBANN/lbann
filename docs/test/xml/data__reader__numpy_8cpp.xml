<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="data__reader__numpy_8cpp" kind="file" language="C++">
    <compoundname>data_reader_numpy.cpp</compoundname>
    <includes refid="data__reader__numpy_8hpp" local="yes">lbann/data_readers/data_reader_numpy.hpp</includes>
    <includes local="no">cstdio</includes>
    <includes local="no">string</includes>
    <includes local="no">unordered_set</includes>
    <includes local="no">cnpy.h</includes>
    <incdepgraph>
      <node id="19850">
        <label>sys/stat.h</label>
      </node>
      <node id="19853">
        <label>lbann/data_readers/image_preprocessor.hpp</label>
        <link refid="image__preprocessor_8hpp"/>
        <childnode refid="19835" relation="include">
        </childnode>
        <childnode refid="19827" relation="include">
        </childnode>
      </node>
      <node id="19841">
        <label>lbann/io/persist.hpp</label>
        <link refid="persist_8hpp"/>
        <childnode refid="19827" relation="include">
        </childnode>
        <childnode refid="19828" relation="include">
        </childnode>
      </node>
      <node id="19828">
        <label>El.hpp</label>
      </node>
      <node id="19827">
        <label>lbann/base.hpp</label>
        <link refid="base_8hpp"/>
        <childnode refid="19828" relation="include">
        </childnode>
        <childnode refid="19829" relation="include">
        </childnode>
        <childnode refid="19830" relation="include">
        </childnode>
        <childnode refid="19835" relation="include">
        </childnode>
      </node>
      <node id="19854">
        <label>cassert</label>
      </node>
      <node id="19852">
        <label>fcntl.h</label>
      </node>
      <node id="19824">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/data_readers/data_reader_numpy.cpp</label>
        <link refid="data__reader__numpy_8cpp"/>
        <childnode refid="19825" relation="include">
        </childnode>
        <childnode refid="19832" relation="include">
        </childnode>
        <childnode refid="19846" relation="include">
        </childnode>
        <childnode refid="19858" relation="include">
        </childnode>
        <childnode refid="19857" relation="include">
        </childnode>
      </node>
      <node id="19846">
        <label>string</label>
      </node>
      <node id="19839">
        <label>map</label>
      </node>
      <node id="19858">
        <label>unordered_set</label>
      </node>
      <node id="19825">
        <label>lbann/data_readers/data_reader_numpy.hpp</label>
        <link refid="data__reader__numpy_8hpp"/>
        <childnode refid="19826" relation="include">
        </childnode>
        <childnode refid="19857" relation="include">
        </childnode>
      </node>
      <node id="19848">
        <label>exception</label>
      </node>
      <node id="19842">
        <label>random</label>
      </node>
      <node id="19851">
        <label>sys/types.h</label>
      </node>
      <node id="19832">
        <label>cstdio</label>
      </node>
      <node id="19844">
        <label>lbann/utils/stack_trace.hpp</label>
        <link refid="stack__trace_8hpp"/>
        <childnode refid="19845" relation="include">
        </childnode>
        <childnode refid="19846" relation="include">
        </childnode>
      </node>
      <node id="19834">
        <label>cxxabi.h</label>
      </node>
      <node id="19843">
        <label>lbann/utils/exception.hpp</label>
        <link refid="exception_8hpp"/>
        <childnode refid="19827" relation="include">
        </childnode>
        <childnode refid="19837" relation="include">
        </childnode>
        <childnode refid="19844" relation="include">
        </childnode>
        <childnode refid="19847" relation="include">
        </childnode>
        <childnode refid="19848" relation="include">
        </childnode>
      </node>
      <node id="19856">
        <label>unistd.h</label>
      </node>
      <node id="19838">
        <label>vector</label>
      </node>
      <node id="19837">
        <label>lbann/comm.hpp</label>
        <link refid="comm_8hpp"/>
        <childnode refid="19838" relation="include">
        </childnode>
        <childnode refid="19839" relation="include">
        </childnode>
        <childnode refid="19840" relation="include">
        </childnode>
        <childnode refid="19827" relation="include">
        </childnode>
      </node>
      <node id="19849">
        <label>lbann/io/file_io.hpp</label>
        <link refid="file__io_8hpp"/>
        <childnode refid="19850" relation="include">
        </childnode>
        <childnode refid="19851" relation="include">
        </childnode>
        <childnode refid="19852" relation="include">
        </childnode>
      </node>
      <node id="19831">
        <label>cstdlib</label>
      </node>
      <node id="19847">
        <label>iostream</label>
      </node>
      <node id="19836">
        <label>lbann/utils/random.hpp</label>
        <link refid="random_8hpp"/>
        <childnode refid="19827" relation="include">
        </childnode>
        <childnode refid="19837" relation="include">
        </childnode>
        <childnode refid="19841" relation="include">
        </childnode>
        <childnode refid="19842" relation="include">
        </childnode>
      </node>
      <node id="19845">
        <label>csignal</label>
      </node>
      <node id="19826">
        <label>data_reader.hpp</label>
        <link refid="data__reader_8hpp"/>
        <childnode refid="19827" relation="include">
        </childnode>
        <childnode refid="19836" relation="include">
        </childnode>
        <childnode refid="19843" relation="include">
        </childnode>
        <childnode refid="19837" relation="include">
        </childnode>
        <childnode refid="19849" relation="include">
        </childnode>
        <childnode refid="19841" relation="include">
        </childnode>
        <childnode refid="19853" relation="include">
        </childnode>
        <childnode refid="19854" relation="include">
        </childnode>
        <childnode refid="19855" relation="include">
        </childnode>
        <childnode refid="19846" relation="include">
        </childnode>
        <childnode refid="19838" relation="include">
        </childnode>
        <childnode refid="19856" relation="include">
        </childnode>
      </node>
      <node id="19835">
        <label>lbann_config.hpp</label>
      </node>
      <node id="19855">
        <label>algorithm</label>
      </node>
      <node id="19830">
        <label>lbann/utils/cyg_profile.hpp</label>
        <link refid="cyg__profile_8hpp"/>
        <childnode refid="19831" relation="include">
        </childnode>
        <childnode refid="19832" relation="include">
        </childnode>
        <childnode refid="19833" relation="include">
        </childnode>
        <childnode refid="19834" relation="include">
        </childnode>
      </node>
      <node id="19857">
        <label>cnpy.h</label>
      </node>
      <node id="19829">
        <label>lbann/Elemental_extensions.hpp</label>
        <link refid="Elemental__extensions_8hpp"/>
        <childnode refid="19828" relation="include">
        </childnode>
      </node>
      <node id="19840">
        <label>typeindex</label>
      </node>
      <node id="19833">
        <label>dlfcn.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacelbann">lbann</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2014-2016,<sp/>Lawrence<sp/>Livermore<sp/>National<sp/>Security,<sp/>LLC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Produced<sp/>at<sp/>the<sp/>Lawrence<sp/>Livermore<sp/>National<sp/>Laboratory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Written<sp/>by<sp/>the<sp/>LBANN<sp/>Research<sp/>Team<sp/>(B.<sp/>Van<sp/>Essen,<sp/>et<sp/>al.)<sp/>listed<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>CONTRIBUTORS<sp/>file.<sp/>&lt;lbann-dev@llnl.gov&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LLNL-CODE-697807.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>LBANN:<sp/>Livermore<sp/>Big<sp/>Artificial<sp/>Neural<sp/>Network</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Toolkit.<sp/>For<sp/>details,<sp/>see<sp/>http://software.llnl.gov/LBANN<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://github.com/LLNL/LBANN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;Licensee&quot;);<sp/>you</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implied.<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>license.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>data_reader_numpy<sp/>.hpp<sp/>.cpp<sp/>-<sp/>generic_data_reader<sp/>class<sp/>for<sp/>numpy<sp/>dataset</highlight></codeline>
<codeline lineno="28"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="data__reader__numpy_8hpp" kindref="compound">lbann/data_readers/data_reader_numpy.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cnpy.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacelbann" kindref="compound">lbann</ref><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="classlbann_1_1numpy__reader_1a77718f4e8fad1e74289e5d446587ba83" refkind="member"><highlight class="normal"><ref refid="classlbann_1_1numpy__reader_1a77718f4e8fad1e74289e5d446587ba83" kindref="member">numpy_reader::numpy_reader</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>shuffle)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>:<sp/><ref refid="classlbann_1_1generic__data__reader" kindref="compound">generic_data_reader</ref>(shuffle),<sp/>m_num_samples(0),</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>m_num_features(0)<sp/>{}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="classlbann_1_1numpy__reader_1a815062116605538898e9289ce2ec55ef" refkind="member"><highlight class="normal"><ref refid="classlbann_1_1numpy__reader_1a77718f4e8fad1e74289e5d446587ba83" kindref="member">numpy_reader::numpy_reader</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1numpy__reader" kindref="compound">numpy_reader</ref>&amp;<sp/>other)<sp/>:</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1generic__data__reader" kindref="compound">generic_data_reader</ref>(other),</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1numpy__reader_1a5e0d81c07c950a2d81645566a2ccd965" kindref="member">m_num_samples</ref>(other.<ref refid="classlbann_1_1numpy__reader_1a5e0d81c07c950a2d81645566a2ccd965" kindref="member">m_num_samples</ref>),</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1numpy__reader_1aef25f95077f565fa9616ec353b93f675" kindref="member">m_num_features</ref>(other.<ref refid="classlbann_1_1numpy__reader_1aef25f95077f565fa9616ec353b93f675" kindref="member">m_num_features</ref>),</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1numpy__reader_1ab311c3567e1ecc1770a4bc299ab0a3e2" kindref="member">m_num_labels</ref>(other.<ref refid="classlbann_1_1numpy__reader_1ab311c3567e1ecc1770a4bc299ab0a3e2" kindref="member">m_num_labels</ref>),</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1numpy__reader_1a0e8caa5609e706bf909b78c4c35377b8" kindref="member">m_has_labels</ref>(other.<ref refid="classlbann_1_1numpy__reader_1a0e8caa5609e706bf909b78c4c35377b8" kindref="member">m_has_labels</ref>),</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1numpy__reader_1a7567338be86dff81afece19d031a942d" kindref="member">m_has_responses</ref>(other.<ref refid="classlbann_1_1numpy__reader_1a7567338be86dff81afece19d031a942d" kindref="member">m_has_responses</ref>),</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1numpy__reader_1a6d43a1eae0fedb6fa237b24cef8f37fa" kindref="member">m_data</ref>(other.<ref refid="classlbann_1_1numpy__reader_1a6d43a1eae0fedb6fa237b24cef8f37fa" kindref="member">m_data</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="classlbann_1_1numpy__reader_1acaa3bec8f120bd5a905219378f663cda" refkind="member"><highlight class="normal"><ref refid="classlbann_1_1numpy__reader" kindref="compound">numpy_reader</ref>&amp;<sp/><ref refid="classlbann_1_1numpy__reader_1acaa3bec8f120bd5a905219378f663cda" kindref="member">numpy_reader::operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1numpy__reader" kindref="compound">numpy_reader</ref>&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1aec7e626e6efa2a4bf23f931e2ef8f607" kindref="member">generic_data_reader::operator=</ref>(other);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1numpy__reader_1a5e0d81c07c950a2d81645566a2ccd965" kindref="member">m_num_samples</ref><sp/>=<sp/>other.<ref refid="classlbann_1_1numpy__reader_1a5e0d81c07c950a2d81645566a2ccd965" kindref="member">m_num_samples</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1numpy__reader_1aef25f95077f565fa9616ec353b93f675" kindref="member">m_num_features</ref><sp/>=<sp/>other.<ref refid="classlbann_1_1numpy__reader_1aef25f95077f565fa9616ec353b93f675" kindref="member">m_num_features</ref>;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1numpy__reader_1ab311c3567e1ecc1770a4bc299ab0a3e2" kindref="member">m_num_labels</ref><sp/>=<sp/>other.<ref refid="classlbann_1_1numpy__reader_1ab311c3567e1ecc1770a4bc299ab0a3e2" kindref="member">m_num_labels</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1numpy__reader_1a0e8caa5609e706bf909b78c4c35377b8" kindref="member">m_has_labels</ref><sp/>=<sp/>other.<ref refid="classlbann_1_1numpy__reader_1a0e8caa5609e706bf909b78c4c35377b8" kindref="member">m_has_labels</ref>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1numpy__reader_1a7567338be86dff81afece19d031a942d" kindref="member">m_has_responses</ref><sp/>=<sp/>other.<ref refid="classlbann_1_1numpy__reader_1a7567338be86dff81afece19d031a942d" kindref="member">m_has_responses</ref>;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1numpy__reader_1a6d43a1eae0fedb6fa237b24cef8f37fa" kindref="member">m_data</ref><sp/>=<sp/>other.<ref refid="classlbann_1_1numpy__reader_1a6d43a1eae0fedb6fa237b24cef8f37fa" kindref="member">m_data</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="classlbann_1_1numpy__reader_1aafc34d19b30845d54175911d143349de" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1numpy__reader_1aafc34d19b30845d54175911d143349de" kindref="member">numpy_reader::load</ref>()<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>std::string<sp/>infile<sp/>=<sp/><ref refid="classlbann_1_1generic__data__reader_1a56664e1b43f3fe923cf6d652f14b40a9" kindref="member">get_data_filename</ref>();</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>the<sp/>file<sp/>exists.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>std::ifstream<sp/>ifs(infile);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ifs)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string{}<sp/>+<sp/>__FILE__<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(__LINE__)<sp/>+</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>numpy_reader::load()<sp/>-<sp/>can&apos;t<sp/>open<sp/>file<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>infile);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>ifs.close();</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1numpy__reader_1a6d43a1eae0fedb6fa237b24cef8f37fa" kindref="member">m_data</ref><sp/>=<sp/>cnpy::npy_load(infile);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1numpy__reader_1a5e0d81c07c950a2d81645566a2ccd965" kindref="member">m_num_samples</ref><sp/>=<sp/><ref refid="classlbann_1_1numpy__reader_1a6d43a1eae0fedb6fa237b24cef8f37fa" kindref="member">m_data</ref>.shape[0];</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1numpy__reader_1aef25f95077f565fa9616ec353b93f675" kindref="member">m_num_features</ref><sp/>=<sp/>std::accumulate(</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1numpy__reader_1a6d43a1eae0fedb6fa237b24cef8f37fa" kindref="member">m_data</ref>.shape.begin()<sp/>+<sp/>1,<sp/><ref refid="classlbann_1_1numpy__reader_1a6d43a1eae0fedb6fa237b24cef8f37fa" kindref="member">m_data</ref>.shape.end(),<sp/>(unsigned)<sp/>1,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>std::multiplies&lt;unsigned&gt;());</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>we<sp/>understand<sp/>the<sp/>word<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(<ref refid="classlbann_1_1numpy__reader_1a6d43a1eae0fedb6fa237b24cef8f37fa" kindref="member">m_data</ref>.word_size<sp/>==<sp/>4<sp/>||<sp/><ref refid="classlbann_1_1numpy__reader_1a6d43a1eae0fedb6fa237b24cef8f37fa" kindref="member">m_data</ref>.word_size<sp/>==<sp/>8))<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;numpy_reader:<sp/>word<sp/>size<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(<ref refid="classlbann_1_1numpy__reader_1a6d43a1eae0fedb6fa237b24cef8f37fa" kindref="member">m_data</ref>.word_size)<sp/>+</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>supported&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Fortran<sp/>order<sp/>not<sp/>yet<sp/>supported.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1numpy__reader_1a6d43a1eae0fedb6fa237b24cef8f37fa" kindref="member">m_data</ref>.fortran_order)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;numpy_reader:<sp/>fortran<sp/>order<sp/>not<sp/>supported&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>currently<sp/>support<sp/>both<sp/>labels<sp/>and<sp/>responses.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1numpy__reader_1a0e8caa5609e706bf909b78c4c35377b8" kindref="member">m_has_labels</ref><sp/>&amp;&amp;<sp/><ref refid="classlbann_1_1numpy__reader_1a7567338be86dff81afece19d031a942d" kindref="member">m_has_responses</ref>)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;numpy_reader:<sp/>labels<sp/>and<sp/>responses<sp/>not<sp/>supported<sp/>at<sp/>same<sp/>time&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1numpy__reader_1a0e8caa5609e706bf909b78c4c35377b8" kindref="member">m_has_labels</ref>)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Shift<sp/>feature<sp/>count<sp/>because<sp/>the<sp/>last<sp/>becomes<sp/>the<sp/>label.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1numpy__reader_1aef25f95077f565fa9616ec353b93f675" kindref="member">m_num_features</ref><sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>number<sp/>of<sp/>label<sp/>classes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_set&lt;int&gt;<sp/>label_classes;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classlbann_1_1numpy__reader_1a5e0d81c07c950a2d81645566a2ccd965" kindref="member">m_num_samples</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1numpy__reader_1a6d43a1eae0fedb6fa237b24cef8f37fa" kindref="member">m_data</ref>.word_size<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<ref refid="namespacelbann_1_1cnpy__utils_1a9ac86d96ccb1f8b4b2ea16441738781f" kindref="member">data</ref><sp/>=<sp/><ref refid="classlbann_1_1numpy__reader_1a6d43a1eae0fedb6fa237b24cef8f37fa" kindref="member">m_data</ref>.data&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;()<sp/>+<sp/>i*(<ref refid="classlbann_1_1numpy__reader_1aef25f95077f565fa9616ec353b93f675" kindref="member">m_num_features</ref>+1);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>label_classes.insert((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>data[<ref refid="classlbann_1_1numpy__reader_1aef25f95077f565fa9616ec353b93f675" kindref="member">m_num_features</ref>+1]);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1numpy__reader_1a6d43a1eae0fedb6fa237b24cef8f37fa" kindref="member">m_data</ref>.word_size<sp/>==<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<ref refid="namespacelbann_1_1cnpy__utils_1a9ac86d96ccb1f8b4b2ea16441738781f" kindref="member">data</ref><sp/>=<sp/><ref refid="classlbann_1_1numpy__reader_1a6d43a1eae0fedb6fa237b24cef8f37fa" kindref="member">m_data</ref>.data&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;()<sp/>+<sp/>i*(<ref refid="classlbann_1_1numpy__reader_1aef25f95077f565fa9616ec353b93f675" kindref="member">m_num_features</ref>+1);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>label_classes.insert((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>data[<ref refid="classlbann_1_1numpy__reader_1aef25f95077f565fa9616ec353b93f675" kindref="member">m_num_features</ref>+1]);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sanity<sp/>checks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>minmax<sp/>=<sp/>std::minmax_element(label_classes.begin(),<sp/>label_classes.end());</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*minmax.first<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;numpy_reader:<sp/>classes<sp/>are<sp/>not<sp/>indexed<sp/>from<sp/>0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*minmax.second<sp/>!=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>label_classes.size()<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;numpy_reader:<sp/>label<sp/>classes<sp/>are<sp/>not<sp/>contiguous&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1numpy__reader_1ab311c3567e1ecc1770a4bc299ab0a3e2" kindref="member">m_num_labels</ref><sp/>=<sp/>label_classes.size();</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1numpy__reader_1a7567338be86dff81afece19d031a942d" kindref="member">m_has_responses</ref>)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Last<sp/>feature<sp/>becomes<sp/>the<sp/>response.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1numpy__reader_1aef25f95077f565fa9616ec353b93f675" kindref="member">m_num_features</ref><sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>indices.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1aaab6aeff67ffff1c689336851fec2c57" kindref="member">m_shuffled_indices</ref>.clear();</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1aaab6aeff67ffff1c689336851fec2c57" kindref="member">m_shuffled_indices</ref>.resize(<ref refid="classlbann_1_1numpy__reader_1a5e0d81c07c950a2d81645566a2ccd965" kindref="member">m_num_samples</ref>);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>std::iota(<ref refid="classlbann_1_1generic__data__reader_1aaab6aeff67ffff1c689336851fec2c57" kindref="member">m_shuffled_indices</ref>.begin(),<sp/><ref refid="classlbann_1_1generic__data__reader_1aaab6aeff67ffff1c689336851fec2c57" kindref="member">m_shuffled_indices</ref>.end(),<sp/>0);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1aa28fdeeb6af492540f507e49adff5d6c" kindref="member">select_subset_of_data</ref>();</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="classlbann_1_1numpy__reader_1ab08dc207eaae7c7f5a70e602da3c1be0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1numpy__reader_1ab08dc207eaae7c7f5a70e602da3c1be0" kindref="member">numpy_reader::fetch_datum</ref>(<ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>X,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data_id,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mb_idx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>features_size<sp/>=<sp/><ref refid="classlbann_1_1numpy__reader_1aef25f95077f565fa9616ec353b93f675" kindref="member">m_num_features</ref>;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1numpy__reader_1a0e8caa5609e706bf909b78c4c35377b8" kindref="member">m_has_labels</ref><sp/>||<sp/><ref refid="classlbann_1_1numpy__reader_1a7567338be86dff81afece19d031a942d" kindref="member">m_has_responses</ref>)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>features_size<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1numpy__reader_1a6d43a1eae0fedb6fa237b24cef8f37fa" kindref="member">m_data</ref>.word_size<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<ref refid="namespacelbann_1_1cnpy__utils_1a9ac86d96ccb1f8b4b2ea16441738781f" kindref="member">data</ref><sp/>=<sp/><ref refid="classlbann_1_1numpy__reader_1a6d43a1eae0fedb6fa237b24cef8f37fa" kindref="member">m_data</ref>.data&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;()<sp/>+<sp/>data_id<sp/>*<sp/>features_size;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="classlbann_1_1numpy__reader_1aef25f95077f565fa9616ec353b93f675" kindref="member">m_num_features</ref>;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>X(j,<sp/>mb_idx)<sp/>=<sp/>data[j];</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1numpy__reader_1a6d43a1eae0fedb6fa237b24cef8f37fa" kindref="member">m_data</ref>.word_size<sp/>==<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<ref refid="namespacelbann_1_1cnpy__utils_1a9ac86d96ccb1f8b4b2ea16441738781f" kindref="member">data</ref><sp/>=<sp/><ref refid="classlbann_1_1numpy__reader_1a6d43a1eae0fedb6fa237b24cef8f37fa" kindref="member">m_data</ref>.data&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;()<sp/>+<sp/>data_id<sp/>*<sp/>features_size;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="classlbann_1_1numpy__reader_1aef25f95077f565fa9616ec353b93f675" kindref="member">m_num_features</ref>;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>X(j,<sp/>mb_idx)<sp/>=<sp/>data[j];</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152" refid="classlbann_1_1numpy__reader_1a67691517fc4da98ca95dfc934e847067" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1numpy__reader_1a67691517fc4da98ca95dfc934e847067" kindref="member">numpy_reader::fetch_label</ref>(<ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>Y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data_id,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mb_idx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classlbann_1_1numpy__reader_1a0e8caa5609e706bf909b78c4c35377b8" kindref="member">m_has_labels</ref>)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight><highlight class="stringliteral">&quot;numpy_reader:<sp/>do<sp/>not<sp/>have<sp/>labels&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>label<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1numpy__reader_1a6d43a1eae0fedb6fa237b24cef8f37fa" kindref="member">m_data</ref>.word_size<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<ref refid="namespacelbann_1_1cnpy__utils_1a9ac86d96ccb1f8b4b2ea16441738781f" kindref="member">data</ref><sp/>=<sp/><ref refid="classlbann_1_1numpy__reader_1a6d43a1eae0fedb6fa237b24cef8f37fa" kindref="member">m_data</ref>.data&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;()<sp/>+<sp/>data_id*(<ref refid="classlbann_1_1numpy__reader_1aef25f95077f565fa9616ec353b93f675" kindref="member">m_num_features</ref>+1);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>label<sp/>=<sp/>(int)<sp/>data[<ref refid="classlbann_1_1numpy__reader_1aef25f95077f565fa9616ec353b93f675" kindref="member">m_num_features</ref>+1];</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1numpy__reader_1a6d43a1eae0fedb6fa237b24cef8f37fa" kindref="member">m_data</ref>.word_size<sp/>==<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<ref refid="namespacelbann_1_1cnpy__utils_1a9ac86d96ccb1f8b4b2ea16441738781f" kindref="member">data</ref><sp/>=<sp/><ref refid="classlbann_1_1numpy__reader_1a6d43a1eae0fedb6fa237b24cef8f37fa" kindref="member">m_data</ref>.data&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;()<sp/>+<sp/>data_id*(<ref refid="classlbann_1_1numpy__reader_1aef25f95077f565fa9616ec353b93f675" kindref="member">m_num_features</ref>+1);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>label<sp/>=<sp/>(int)<sp/>data[<ref refid="classlbann_1_1numpy__reader_1aef25f95077f565fa9616ec353b93f675" kindref="member">m_num_features</ref>+1];</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>Y(label,<sp/>mb_idx)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168" refid="classlbann_1_1numpy__reader_1ad7c3a680426ffcf467d74ba3a5e6eb20" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1numpy__reader_1ad7c3a680426ffcf467d74ba3a5e6eb20" kindref="member">numpy_reader::fetch_response</ref>(<ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>Y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data_id,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mb_idx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classlbann_1_1numpy__reader_1a7567338be86dff81afece19d031a942d" kindref="member">m_has_responses</ref>)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight><highlight class="stringliteral">&quot;numpy_reader:<sp/>do<sp/>not<sp/>have<sp/>responses&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>response<sp/>=<sp/>DataType(0);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1numpy__reader_1a6d43a1eae0fedb6fa237b24cef8f37fa" kindref="member">m_data</ref>.word_size<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<ref refid="namespacelbann_1_1cnpy__utils_1a9ac86d96ccb1f8b4b2ea16441738781f" kindref="member">data</ref><sp/>=<sp/><ref refid="classlbann_1_1numpy__reader_1a6d43a1eae0fedb6fa237b24cef8f37fa" kindref="member">m_data</ref>.data&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;()<sp/>+<sp/>data_id*(<ref refid="classlbann_1_1numpy__reader_1aef25f95077f565fa9616ec353b93f675" kindref="member">m_num_features</ref>+1);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>response<sp/>=<sp/>(DataType)<sp/>data[<ref refid="classlbann_1_1numpy__reader_1aef25f95077f565fa9616ec353b93f675" kindref="member">m_num_features</ref>+1];</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1numpy__reader_1a6d43a1eae0fedb6fa237b24cef8f37fa" kindref="member">m_data</ref>.word_size<sp/>==<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<ref refid="namespacelbann_1_1cnpy__utils_1a9ac86d96ccb1f8b4b2ea16441738781f" kindref="member">data</ref><sp/>=<sp/><ref refid="classlbann_1_1numpy__reader_1a6d43a1eae0fedb6fa237b24cef8f37fa" kindref="member">m_data</ref>.data&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;()<sp/>+<sp/>data_id*(<ref refid="classlbann_1_1numpy__reader_1aef25f95077f565fa9616ec353b93f675" kindref="member">m_num_features</ref>+1);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>response<sp/>=<sp/>(DataType)<sp/>data[<ref refid="classlbann_1_1numpy__reader_1aef25f95077f565fa9616ec353b93f675" kindref="member">m_num_features</ref>+1];</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>Y(0,<sp/>mb_idx)<sp/>=<sp/>response;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>lbann</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/mckinney27/doxy-testbed/lbann/src/data_readers/data_reader_numpy.cpp"/>
  </compounddef>
</doxygen>
