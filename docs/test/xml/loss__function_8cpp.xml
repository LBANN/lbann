<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="loss__function_8cpp" kind="file" language="C++">
    <compoundname>loss_function.cpp</compoundname>
    <includes refid="loss__function_8hpp" local="yes">lbann/objective_functions/loss_functions/loss_function.hpp</includes>
    <includes refid="model_8hpp" local="yes">lbann/models/model.hpp</includes>
    <incdepgraph>
      <node id="22214">
        <label>sys/stat.h</label>
      </node>
      <node id="22191">
        <label>lbann/utils/summary.hpp</label>
        <link refid="summary_8hpp"/>
        <childnode refid="22192" relation="include">
        </childnode>
        <childnode refid="22188" relation="include">
        </childnode>
        <childnode refid="22177" relation="include">
        </childnode>
        <childnode refid="22187" relation="include">
        </childnode>
      </node>
      <node id="22234">
        <label>lbann/utils/quantizer.hpp</label>
        <link refid="quantizer_8hpp"/>
        <childnode refid="22231" relation="include">
        </childnode>
        <childnode refid="22177" relation="include">
        </childnode>
        <childnode refid="22187" relation="include">
        </childnode>
        <childnode refid="22206" relation="include">
        </childnode>
        <childnode refid="22195" relation="include">
        </childnode>
        <childnode refid="22235" relation="include">
        </childnode>
        <childnode refid="22236" relation="include">
        </childnode>
      </node>
      <node id="22217">
        <label>lbann/data_readers/image_preprocessor.hpp</label>
        <link refid="image__preprocessor_8hpp"/>
        <childnode refid="22185" relation="include">
        </childnode>
        <childnode refid="22177" relation="include">
        </childnode>
      </node>
      <node id="22175">
        <label>lbann/objective_functions/loss_functions/loss_function.hpp</label>
        <link refid="loss__function_8hpp"/>
        <childnode refid="22176" relation="include">
        </childnode>
        <childnode refid="22208" relation="include">
        </childnode>
      </node>
      <node id="22203">
        <label>lbann/io/persist.hpp</label>
        <link refid="persist_8hpp"/>
        <childnode refid="22177" relation="include">
        </childnode>
        <childnode refid="22178" relation="include">
        </childnode>
      </node>
      <node id="22178">
        <label>El.hpp</label>
      </node>
      <node id="22177">
        <label>lbann/base.hpp</label>
        <link refid="base_8hpp"/>
        <childnode refid="22178" relation="include">
        </childnode>
        <childnode refid="22179" relation="include">
        </childnode>
        <childnode refid="22180" relation="include">
        </childnode>
        <childnode refid="22185" relation="include">
        </childnode>
      </node>
      <node id="22225">
        <label>lbann/io/data_buffers/distributed_io_buffer.hpp</label>
        <link refid="distributed__io__buffer_8hpp"/>
        <childnode refid="22223" relation="include">
        </childnode>
      </node>
      <node id="22232">
        <label>lbann/callbacks/callback_imcomm.hpp</label>
        <link refid="callback__imcomm_8hpp"/>
        <childnode refid="22188" relation="include">
        </childnode>
        <childnode refid="22205" relation="include">
        </childnode>
        <childnode refid="22231" relation="include">
        </childnode>
        <childnode refid="22233" relation="include">
        </childnode>
        <childnode refid="22234" relation="include">
        </childnode>
      </node>
      <node id="22218">
        <label>cassert</label>
      </node>
      <node id="22216">
        <label>fcntl.h</label>
      </node>
      <node id="22230">
        <label>lbann/metrics/metric.hpp</label>
        <link refid="metric_8hpp"/>
        <childnode refid="22177" relation="include">
        </childnode>
        <childnode refid="22187" relation="include">
        </childnode>
        <childnode refid="22195" relation="include">
        </childnode>
        <childnode refid="22203" relation="include">
        </childnode>
      </node>
      <node id="22209">
        <label>lbann/layers/io/io_layer.hpp</label>
        <link refid="io__layer_8hpp"/>
        <childnode refid="22186" relation="include">
        </childnode>
        <childnode refid="22210" relation="include">
        </childnode>
        <childnode refid="22221" relation="include">
        </childnode>
        <childnode refid="22203" relation="include">
        </childnode>
        <childnode refid="22195" relation="include">
        </childnode>
        <childnode refid="22192" relation="include">
        </childnode>
        <childnode refid="22215" relation="include">
        </childnode>
        <childnode refid="22214" relation="include">
        </childnode>
        <childnode refid="22220" relation="include">
        </childnode>
        <childnode refid="22182" relation="include">
        </childnode>
      </node>
      <node id="22192">
        <label>string</label>
      </node>
      <node id="22223">
        <label>lbann/io/data_buffers/generic_io_buffer.hpp</label>
        <link refid="generic__io__buffer_8hpp"/>
        <childnode refid="22177" relation="include">
        </childnode>
        <childnode refid="22187" relation="include">
        </childnode>
        <childnode refid="22210" relation="include">
        </childnode>
      </node>
      <node id="22200">
        <label>lbann/utils/cudnn_wrapper.hpp</label>
        <link refid="cudnn__wrapper_8hpp"/>
        <childnode refid="22188" relation="include">
        </childnode>
        <childnode refid="22177" relation="include">
        </childnode>
        <childnode refid="22187" relation="include">
        </childnode>
        <childnode refid="22195" relation="include">
        </childnode>
      </node>
      <node id="22206">
        <label>lbann/utils/timer.hpp</label>
        <link refid="timer_8hpp"/>
        <childnode refid="22207" relation="include">
        </childnode>
      </node>
      <node id="22189">
        <label>map</label>
      </node>
      <node id="22205">
        <label>unordered_set</label>
      </node>
      <node id="22235">
        <label>omp.h</label>
      </node>
      <node id="22199">
        <label>exception</label>
      </node>
      <node id="22212">
        <label>random</label>
      </node>
      <node id="22202">
        <label>lbann/weights/initializer.hpp</label>
        <link refid="initializer_8hpp"/>
        <childnode refid="22177" relation="include">
        </childnode>
        <childnode refid="22187" relation="include">
        </childnode>
        <childnode refid="22195" relation="include">
        </childnode>
        <childnode refid="22200" relation="include">
        </childnode>
      </node>
      <node id="22215">
        <label>sys/types.h</label>
      </node>
      <node id="22233">
        <label>lbann/callbacks/callback.hpp</label>
        <link refid="callback_8hpp"/>
        <childnode refid="22177" relation="include">
        </childnode>
        <childnode refid="22191" relation="include">
        </childnode>
        <childnode refid="22226" relation="include">
        </childnode>
        <childnode refid="22186" relation="include">
        </childnode>
      </node>
      <node id="22227">
        <label>lbann/utils/graph.hpp</label>
        <link refid="graph_8hpp"/>
        <childnode refid="22198" relation="include">
        </childnode>
        <childnode refid="22188" relation="include">
        </childnode>
        <childnode refid="22228" relation="include">
        </childnode>
        <childnode refid="22189" relation="include">
        </childnode>
      </node>
      <node id="22182">
        <label>cstdio</label>
      </node>
      <node id="22224">
        <label>lbann/io/data_buffers/partitioned_io_buffer.hpp</label>
        <link refid="partitioned__io__buffer_8hpp"/>
        <childnode refid="22223" relation="include">
        </childnode>
      </node>
      <node id="22196">
        <label>lbann/utils/stack_trace.hpp</label>
        <link refid="stack__trace_8hpp"/>
        <childnode refid="22197" relation="include">
        </childnode>
        <childnode refid="22192" relation="include">
        </childnode>
      </node>
      <node id="22184">
        <label>cxxabi.h</label>
      </node>
      <node id="22195">
        <label>lbann/utils/exception.hpp</label>
        <link refid="exception_8hpp"/>
        <childnode refid="22177" relation="include">
        </childnode>
        <childnode refid="22187" relation="include">
        </childnode>
        <childnode refid="22196" relation="include">
        </childnode>
        <childnode refid="22198" relation="include">
        </childnode>
        <childnode refid="22199" relation="include">
        </childnode>
      </node>
      <node id="22220">
        <label>unistd.h</label>
      </node>
      <node id="22188">
        <label>vector</label>
      </node>
      <node id="22187">
        <label>lbann/comm.hpp</label>
        <link refid="comm_8hpp"/>
        <childnode refid="22188" relation="include">
        </childnode>
        <childnode refid="22189" relation="include">
        </childnode>
        <childnode refid="22190" relation="include">
        </childnode>
        <childnode refid="22177" relation="include">
        </childnode>
      </node>
      <node id="22229">
        <label>lbann/objective_functions/objective_function.hpp</label>
        <link refid="objective__function_8hpp"/>
        <childnode refid="22176" relation="include">
        </childnode>
        <childnode refid="22230" relation="include">
        </childnode>
      </node>
      <node id="22213">
        <label>lbann/io/file_io.hpp</label>
        <link refid="file__io_8hpp"/>
        <childnode refid="22214" relation="include">
        </childnode>
        <childnode refid="22215" relation="include">
        </childnode>
        <childnode refid="22216" relation="include">
        </childnode>
      </node>
      <node id="22174">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/objective_functions/loss_functions/loss_function.cpp</label>
        <link refid="loss__function_8cpp"/>
        <childnode refid="22175" relation="include">
        </childnode>
        <childnode refid="22226" relation="include">
        </childnode>
      </node>
      <node id="22204">
        <label>lbann.pb.h</label>
      </node>
      <node id="22181">
        <label>cstdlib</label>
      </node>
      <node id="22222">
        <label>lbann/layers/io/input/generic_input_layer.hpp</label>
        <link refid="generic__input__layer_8hpp"/>
        <childnode refid="22209" relation="include">
        </childnode>
        <childnode refid="22223" relation="include">
        </childnode>
        <childnode refid="22224" relation="include">
        </childnode>
        <childnode refid="22225" relation="include">
        </childnode>
        <childnode refid="22226" relation="include">
        </childnode>
        <childnode refid="22232" relation="include">
        </childnode>
      </node>
      <node id="22198">
        <label>iostream</label>
      </node>
      <node id="22193">
        <label>lbann/optimizers/optimizer.hpp</label>
        <link refid="optimizer_8hpp"/>
        <childnode refid="22194" relation="include">
        </childnode>
        <childnode refid="22177" relation="include">
        </childnode>
        <childnode refid="22187" relation="include">
        </childnode>
        <childnode refid="22195" relation="include">
        </childnode>
        <childnode refid="22200" relation="include">
        </childnode>
        <childnode refid="22201" relation="include">
        </childnode>
        <childnode refid="22192" relation="include">
        </childnode>
        <childnode refid="22205" relation="include">
        </childnode>
      </node>
      <node id="22231">
        <label>unordered_map</label>
      </node>
      <node id="22211">
        <label>lbann/utils/random.hpp</label>
        <link refid="random_8hpp"/>
        <childnode refid="22177" relation="include">
        </childnode>
        <childnode refid="22187" relation="include">
        </childnode>
        <childnode refid="22203" relation="include">
        </childnode>
        <childnode refid="22212" relation="include">
        </childnode>
      </node>
      <node id="22186">
        <label>lbann/layers/layer.hpp</label>
        <link refid="layer_8hpp"/>
        <childnode refid="22177" relation="include">
        </childnode>
        <childnode refid="22187" relation="include">
        </childnode>
        <childnode refid="22191" relation="include">
        </childnode>
        <childnode refid="22193" relation="include">
        </childnode>
        <childnode refid="22195" relation="include">
        </childnode>
        <childnode refid="22200" relation="include">
        </childnode>
        <childnode refid="22206" relation="include">
        </childnode>
        <childnode refid="22203" relation="include">
        </childnode>
        <childnode refid="22204" relation="include">
        </childnode>
        <childnode refid="22192" relation="include">
        </childnode>
        <childnode refid="22188" relation="include">
        </childnode>
      </node>
      <node id="22207">
        <label>chrono</label>
      </node>
      <node id="22176">
        <label>lbann/objective_functions/objective_function_term.hpp</label>
        <link refid="objective__function__term_8hpp"/>
        <childnode refid="22177" relation="include">
        </childnode>
        <childnode refid="22186" relation="include">
        </childnode>
        <childnode refid="22201" relation="include">
        </childnode>
      </node>
      <node id="22197">
        <label>csignal</label>
      </node>
      <node id="22221">
        <label>lbann/utils/dataset.hpp</label>
        <link refid="dataset_8hpp"/>
        <childnode refid="22210" relation="include">
        </childnode>
      </node>
      <node id="22201">
        <label>lbann/weights/weights.hpp</label>
        <link refid="weights_8hpp"/>
        <childnode refid="22192" relation="include">
        </childnode>
        <childnode refid="22177" relation="include">
        </childnode>
        <childnode refid="22187" relation="include">
        </childnode>
        <childnode refid="22195" relation="include">
        </childnode>
        <childnode refid="22200" relation="include">
        </childnode>
        <childnode refid="22202" relation="include">
        </childnode>
        <childnode refid="22203" relation="include">
        </childnode>
        <childnode refid="22204" relation="include">
        </childnode>
      </node>
      <node id="22210">
        <label>lbann/data_readers/data_reader.hpp</label>
        <link refid="data__reader_8hpp"/>
        <childnode refid="22177" relation="include">
        </childnode>
        <childnode refid="22211" relation="include">
        </childnode>
        <childnode refid="22195" relation="include">
        </childnode>
        <childnode refid="22187" relation="include">
        </childnode>
        <childnode refid="22213" relation="include">
        </childnode>
        <childnode refid="22203" relation="include">
        </childnode>
        <childnode refid="22217" relation="include">
        </childnode>
        <childnode refid="22218" relation="include">
        </childnode>
        <childnode refid="22219" relation="include">
        </childnode>
        <childnode refid="22192" relation="include">
        </childnode>
        <childnode refid="22188" relation="include">
        </childnode>
        <childnode refid="22220" relation="include">
        </childnode>
      </node>
      <node id="22185">
        <label>lbann_config.hpp</label>
      </node>
      <node id="22228">
        <label>set</label>
      </node>
      <node id="22226">
        <label>lbann/models/model.hpp</label>
        <link refid="model_8hpp"/>
        <childnode refid="22177" relation="include">
        </childnode>
        <childnode refid="22187" relation="include">
        </childnode>
        <childnode refid="22186" relation="include">
        </childnode>
        <childnode refid="22191" relation="include">
        </childnode>
        <childnode refid="22227" relation="include">
        </childnode>
        <childnode refid="22213" relation="include">
        </childnode>
        <childnode refid="22203" relation="include">
        </childnode>
        <childnode refid="22229" relation="include">
        </childnode>
        <childnode refid="22230" relation="include">
        </childnode>
        <childnode refid="22201" relation="include">
        </childnode>
        <childnode refid="22193" relation="include">
        </childnode>
        <childnode refid="22204" relation="include">
        </childnode>
        <childnode refid="22188" relation="include">
        </childnode>
        <childnode refid="22192" relation="include">
        </childnode>
        <childnode refid="22231" relation="include">
        </childnode>
      </node>
      <node id="22194">
        <label>lbann/utils/compiler_control.hpp</label>
        <link refid="compiler__control_8hpp"/>
      </node>
      <node id="22219">
        <label>algorithm</label>
      </node>
      <node id="22180">
        <label>lbann/utils/cyg_profile.hpp</label>
        <link refid="cyg__profile_8hpp"/>
        <childnode refid="22181" relation="include">
        </childnode>
        <childnode refid="22182" relation="include">
        </childnode>
        <childnode refid="22183" relation="include">
        </childnode>
        <childnode refid="22184" relation="include">
        </childnode>
      </node>
      <node id="22179">
        <label>lbann/Elemental_extensions.hpp</label>
        <link refid="Elemental__extensions_8hpp"/>
        <childnode refid="22178" relation="include">
        </childnode>
      </node>
      <node id="22208">
        <label>lbann/layers/io/target/generic_target_layer.hpp</label>
        <link refid="generic__target__layer_8hpp"/>
        <childnode refid="22209" relation="include">
        </childnode>
        <childnode refid="22222" relation="include">
        </childnode>
        <childnode refid="22224" relation="include">
        </childnode>
        <childnode refid="22225" relation="include">
        </childnode>
        <childnode refid="22195" relation="include">
        </childnode>
        <childnode refid="22226" relation="include">
        </childnode>
        <childnode refid="22192" relation="include">
        </childnode>
        <childnode refid="22215" relation="include">
        </childnode>
        <childnode refid="22214" relation="include">
        </childnode>
        <childnode refid="22220" relation="include">
        </childnode>
      </node>
      <node id="22236">
        <label>quantizer_impl.hpp</label>
        <link refid="quantizer__impl_8hpp"/>
        <childnode refid="22235" relation="include">
        </childnode>
      </node>
      <node id="22190">
        <label>typeindex</label>
      </node>
      <node id="22183">
        <label>dlfcn.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacelbann">lbann</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2014-2016,<sp/>Lawrence<sp/>Livermore<sp/>National<sp/>Security,<sp/>LLC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Produced<sp/>at<sp/>the<sp/>Lawrence<sp/>Livermore<sp/>National<sp/>Laboratory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Written<sp/>by<sp/>the<sp/>LBANN<sp/>Research<sp/>Team<sp/>(B.<sp/>Van<sp/>Essen,<sp/>et<sp/>al.)<sp/>listed<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>CONTRIBUTORS<sp/>file.<sp/>&lt;lbann-dev@llnl.gov&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LLNL-CODE-697807.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>LBANN:<sp/>Livermore<sp/>Big<sp/>Artificial<sp/>Neural<sp/>Network</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Toolkit.<sp/>For<sp/>details,<sp/>see<sp/>http://software.llnl.gov/LBANN<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://github.com/LLNL/LBANN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;Licensee&quot;);<sp/>you</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implied.<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>license.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="loss__function_8hpp" kindref="compound">lbann/objective_functions/loss_functions/loss_function.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="model_8hpp" kindref="compound">lbann/models/model.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacelbann" kindref="compound">lbann</ref><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="classlbann_1_1loss__function_1a0c5745e661c59e3e5496888d233c07cf" refkind="member"><highlight class="normal"><ref refid="classlbann_1_1loss__function_1a0c5745e661c59e3e5496888d233c07cf" kindref="member">loss_function::loss_function</ref>(<ref refid="base_8hpp_1a3266f5ac18504bbadea983c109566867" kindref="member">EvalType</ref><sp/>scale_factor)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>:<sp/><ref refid="classlbann_1_1objective__function__term" kindref="compound">objective_function_term</ref>(scale_factor),</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>m_gradient(nullptr)<sp/>{}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="classlbann_1_1loss__function_1aaebcff849004392decc9850c4c75ead5" refkind="member"><highlight class="normal"><ref refid="classlbann_1_1loss__function_1a0c5745e661c59e3e5496888d233c07cf" kindref="member">loss_function::loss_function</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1loss__function" kindref="compound">loss_function</ref>&amp;<sp/>other)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>:<sp/><ref refid="classlbann_1_1objective__function__term" kindref="compound">objective_function_term</ref>(other),</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1loss__function_1ac6ac9f8f2cef7a4daa1b282dba914975" kindref="member">m_gradient</ref>(other.<ref refid="classlbann_1_1loss__function_1ac6ac9f8f2cef7a4daa1b282dba914975" kindref="member">m_gradient</ref>)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1loss__function_1ac6ac9f8f2cef7a4daa1b282dba914975" kindref="member">m_gradient</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{<sp/><ref refid="classlbann_1_1loss__function_1ac6ac9f8f2cef7a4daa1b282dba914975" kindref="member">m_gradient</ref><sp/>=<sp/><ref refid="classlbann_1_1loss__function_1ac6ac9f8f2cef7a4daa1b282dba914975" kindref="member">m_gradient</ref>-&gt;Copy();<sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="classlbann_1_1loss__function_1ab882c642619ea4285b61e735d84e401c" refkind="member"><highlight class="normal"><ref refid="classlbann_1_1loss__function" kindref="compound">loss_function</ref>&amp;<sp/><ref refid="classlbann_1_1loss__function_1ab882c642619ea4285b61e735d84e401c" kindref="member">loss_function::operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1loss__function" kindref="compound">loss_function</ref>&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1objective__function__term_1a8bbac194d96a854d5841817b67b63334" kindref="member">objective_function_term::operator=</ref>(other);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1loss__function_1ac6ac9f8f2cef7a4daa1b282dba914975" kindref="member">m_gradient</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>other.<ref refid="classlbann_1_1loss__function_1ac6ac9f8f2cef7a4daa1b282dba914975" kindref="member">m_gradient</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/><ref refid="classlbann_1_1loss__function_1ac6ac9f8f2cef7a4daa1b282dba914975" kindref="member">m_gradient</ref>-&gt;DistData()<sp/>==<sp/>other.<ref refid="classlbann_1_1loss__function_1ac6ac9f8f2cef7a4daa1b282dba914975" kindref="member">m_gradient</ref>-&gt;DistData())<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>El::Copy(*other.<ref refid="classlbann_1_1loss__function_1ac6ac9f8f2cef7a4daa1b282dba914975" kindref="member">m_gradient</ref>,<sp/>*<ref refid="classlbann_1_1loss__function_1ac6ac9f8f2cef7a4daa1b282dba914975" kindref="member">m_gradient</ref>);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1loss__function_1ac6ac9f8f2cef7a4daa1b282dba914975" kindref="member">m_gradient</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1loss__function_1ac6ac9f8f2cef7a4daa1b282dba914975" kindref="member">m_gradient</ref>;<sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1loss__function_1ac6ac9f8f2cef7a4daa1b282dba914975" kindref="member">m_gradient</ref><sp/>=<sp/>other.<ref refid="classlbann_1_1loss__function_1ac6ac9f8f2cef7a4daa1b282dba914975" kindref="member">m_gradient</ref>;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1loss__function_1ac6ac9f8f2cef7a4daa1b282dba914975" kindref="member">m_gradient</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{<sp/><ref refid="classlbann_1_1loss__function_1ac6ac9f8f2cef7a4daa1b282dba914975" kindref="member">m_gradient</ref><sp/>=<sp/><ref refid="classlbann_1_1loss__function_1ac6ac9f8f2cef7a4daa1b282dba914975" kindref="member">m_gradient</ref>-&gt;Copy();<sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="classlbann_1_1loss__function_1a21c59d9c3db798c330ff8297f6374747" refkind="member"><highlight class="normal"><ref refid="classlbann_1_1loss__function_1a21c59d9c3db798c330ff8297f6374747" kindref="member">loss_function::~loss_function</ref>()<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1loss__function_1ac6ac9f8f2cef7a4daa1b282dba914975" kindref="member">m_gradient</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1loss__function_1ac6ac9f8f2cef7a4daa1b282dba914975" kindref="member">m_gradient</ref>;<sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="classlbann_1_1loss__function_1a9ef5356468c892c2c0221f8acd6b5471" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1loss__function_1a9ef5356468c892c2c0221f8acd6b5471" kindref="member">loss_function::set_target_layer</ref>(<ref refid="classlbann_1_1generic__target__layer" kindref="compound">generic_target_layer</ref><sp/>*layer)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1objective__function__term_1a9269cf0a237eacd1e220ba2739f44334" kindref="member">m_layers</ref>.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1objective__function__term_1a9269cf0a237eacd1e220ba2739f44334" kindref="member">m_layers</ref>[0]<sp/>=<sp/>layer;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1objective__function__term_1a9269cf0a237eacd1e220ba2739f44334" kindref="member">m_layers</ref>.push_back(layer);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="classlbann_1_1loss__function_1a17a3629e8519c4215ad776a0c7b522ae" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1loss__function_1a17a3629e8519c4215ad776a0c7b522ae" kindref="member">loss_function::setup</ref>(<ref refid="classlbann_1_1model" kindref="compound">model</ref>&amp;<sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1objective__function__term_1a6c8dbdf18aac8676098189fb7b178e91" kindref="member">objective_function_term::setup</ref>(m);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>loss<sp/>function<sp/>has<sp/>one<sp/>target<sp/>layer<sp/>and<sp/>no<sp/>weights</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>if<sp/>target<sp/>layer<sp/>is<sp/>not<sp/>specified,<sp/>choose<sp/>the<sp/>latest<sp/>target</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>layer<sp/>in<sp/>the<sp/>model.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1objective__function__term_1a9269cf0a237eacd1e220ba2739f44334" kindref="member">m_layers</ref>.size()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>err;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>&lt;&lt;<sp/>__FILE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>__LINE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;attempted<sp/>to<sp/>setup<sp/>loss<sp/>function<sp/>with<sp/>invalid<sp/>number<sp/>of<sp/>target<sp/>layers<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(expected<sp/>1,<sp/>found<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classlbann_1_1objective__function__term_1a9269cf0a237eacd1e220ba2739f44334" kindref="member">m_layers</ref>.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(err.str());</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1objective__function__term_1a9269cf0a237eacd1e220ba2739f44334" kindref="member">m_layers</ref>.empty())<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Layer*&gt;<sp/>layers<sp/>=<sp/>m.<ref refid="classlbann_1_1model_1ae14f4b2cc8882b3739d4aeb25d9e73c9" kindref="member">get_layers</ref>();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>layers.size()<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dynamic_cast&lt;generic_target_layer*&gt;(layers[i])<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1objective__function__term_1a9269cf0a237eacd1e220ba2739f44334" kindref="member">m_layers</ref>.push_back(layers[i]);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1objective__function__term_1a9269cf0a237eacd1e220ba2739f44334" kindref="member">m_layers</ref>.size()<sp/>!=<sp/>1</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="classlbann_1_1generic__target__layer" kindref="compound">generic_target_layer</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classlbann_1_1objective__function__term_1a9269cf0a237eacd1e220ba2739f44334" kindref="member">m_layers</ref>[0])<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>err;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>&lt;&lt;<sp/>__FILE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>__LINE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;could<sp/>not<sp/>setup<sp/>loss<sp/>function<sp/>with<sp/>target<sp/>layer&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(err.str());</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1objective__function__term_1a1d601c29153ae9cb54c585887608f2bf" kindref="member">m_weights</ref>.size()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>err;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>&lt;&lt;<sp/>__FILE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>__LINE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;attempted<sp/>to<sp/>setup<sp/>loss<sp/>function<sp/>with<sp/>invalid<sp/>number<sp/>of<sp/>weights<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(expected<sp/>0,<sp/>found<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classlbann_1_1objective__function__term_1a1d601c29153ae9cb54c585887608f2bf" kindref="member">m_weights</ref>.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(err.str());</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>gradient<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*target<sp/>=<sp/>(<ref refid="classlbann_1_1generic__target__layer" kindref="compound">generic_target_layer</ref>*)<sp/><ref refid="classlbann_1_1objective__function__term_1a9269cf0a237eacd1e220ba2739f44334" kindref="member">m_layers</ref>[0];</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref>&amp;<sp/>ground_truth<sp/>=<sp/>target-&gt;get_ground_truth();</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1loss__function_1ac6ac9f8f2cef7a4daa1b282dba914975" kindref="member">m_gradient</ref><sp/>=<sp/>ground_truth.Construct(ground_truth.Grid(),</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ground_truth.Root());</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>El::Zeros(*<ref refid="classlbann_1_1loss__function_1ac6ac9f8f2cef7a4daa1b282dba914975" kindref="member">m_gradient</ref>,<sp/>ground_truth.Height(),<sp/>ground_truth.Width());</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="classlbann_1_1loss__function_1a90f4126b0b4d47838ef3cc154c6d9705" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1loss__function_1a90f4126b0b4d47838ef3cc154c6d9705" kindref="member">loss_function::start_evaluation</ref>()<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*target<sp/>=<sp/>(<ref refid="classlbann_1_1generic__target__layer" kindref="compound">generic_target_layer</ref>*)<sp/><ref refid="classlbann_1_1objective__function__term_1a9269cf0a237eacd1e220ba2739f44334" kindref="member">m_layers</ref>[0];</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref>&amp;<sp/><ref refid="base_8hpp_1a2781a159088df64ed7d47cc91c4dc0a8ac41b9ec75e920b610e8907e066074b30" kindref="member">prediction</ref><sp/>=<sp/>target-&gt;get_prediction();</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref>&amp;<sp/>ground_truth<sp/>=<sp/>target-&gt;get_ground_truth();</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1loss__function_1a0bbe41060d788dc7a29f3737761a6f7d" kindref="member">start_evaluate_compute</ref>(prediction,<sp/>ground_truth);</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="classlbann_1_1loss__function_1a5264d3e71125b7ce8694f73bf25662f7" refkind="member"><highlight class="normal"><ref refid="base_8hpp_1a3266f5ac18504bbadea983c109566867" kindref="member">EvalType</ref><sp/><ref refid="classlbann_1_1loss__function_1a5264d3e71125b7ce8694f73bf25662f7" kindref="member">loss_function::finish_evaluation</ref>()<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1objective__function__term_1a59a544b8ff0455ed5091de3bf0d81c3c" kindref="member">m_scale_factor</ref><sp/>==<sp/><ref refid="base_8hpp_1a3266f5ac18504bbadea983c109566867" kindref="member">EvalType</ref>(0))<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="base_8hpp_1a3266f5ac18504bbadea983c109566867" kindref="member">EvalType</ref>(0);<sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*target<sp/>=<sp/>(<ref refid="classlbann_1_1generic__target__layer" kindref="compound">generic_target_layer</ref>*)<sp/><ref refid="classlbann_1_1objective__function__term_1a9269cf0a237eacd1e220ba2739f44334" kindref="member">m_layers</ref>[0];</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref>&amp;<sp/><ref refid="base_8hpp_1a2781a159088df64ed7d47cc91c4dc0a8ac41b9ec75e920b610e8907e066074b30" kindref="member">prediction</ref><sp/>=<sp/>target-&gt;get_prediction();</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref>&amp;<sp/>ground_truth<sp/>=<sp/>target-&gt;get_ground_truth();</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1objective__function__term_1a59a544b8ff0455ed5091de3bf0d81c3c" kindref="member">m_scale_factor</ref><sp/>*<sp/><ref refid="classlbann_1_1loss__function_1a3ea8553a4e9c75477d7d4fc533c4d4fd" kindref="member">finish_evaluate_compute</ref>(prediction,<sp/>ground_truth);</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="classlbann_1_1loss__function_1adbd03ef952ee1055e3dd98f06d33324f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1loss__function_1adbd03ef952ee1055e3dd98f06d33324f" kindref="member">loss_function::differentiate</ref>()<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1objective__function__term_1a59a544b8ff0455ed5091de3bf0d81c3c" kindref="member">m_scale_factor</ref><sp/>==<sp/><ref refid="base_8hpp_1a3266f5ac18504bbadea983c109566867" kindref="member">EvalType</ref>(0))<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*target<sp/>=<sp/>(<ref refid="classlbann_1_1generic__target__layer" kindref="compound">generic_target_layer</ref>*)<sp/><ref refid="classlbann_1_1objective__function__term_1a9269cf0a237eacd1e220ba2739f44334" kindref="member">m_layers</ref>[0];</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref>&amp;<sp/><ref refid="base_8hpp_1a2781a159088df64ed7d47cc91c4dc0a8ac41b9ec75e920b610e8907e066074b30" kindref="member">prediction</ref><sp/>=<sp/>target-&gt;get_prediction();</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref>&amp;<sp/>ground_truth<sp/>=<sp/>target-&gt;get_ground_truth();</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>El::Zeros(*<ref refid="classlbann_1_1loss__function_1ac6ac9f8f2cef7a4daa1b282dba914975" kindref="member">m_gradient</ref>,<sp/>prediction.Height(),<sp/>prediction.Width());</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1loss__function_1aefccc2b4f5a02664002d12630cf369e7" kindref="member">differentiate_compute</ref>(prediction,<sp/>ground_truth,<sp/>*<ref refid="classlbann_1_1loss__function_1ac6ac9f8f2cef7a4daa1b282dba914975" kindref="member">m_gradient</ref>);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>target-&gt;add_to_error_signal(*<ref refid="classlbann_1_1loss__function_1ac6ac9f8f2cef7a4daa1b282dba914975" kindref="member">m_gradient</ref>,<sp/>DataType(<ref refid="classlbann_1_1objective__function__term_1a59a544b8ff0455ed5091de3bf0d81c3c" kindref="member">m_scale_factor</ref>));</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="classlbann_1_1loss__function_1ac44929838f3c3f0a34e1532530422dad" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1loss__function_1ac44929838f3c3f0a34e1532530422dad" kindref="member">loss_function::save_to_checkpoint_shared</ref>(<ref refid="classlbann_1_1persist" kindref="compound">persist</ref>&amp;<sp/>p)<sp/><sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>l_name[512];</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(l_name,<sp/></highlight><highlight class="stringliteral">&quot;objfunc_gradient&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>p.<ref refid="classlbann_1_1persist_1a9170de652405d86d9ba9b3793f8781c6" kindref="member">write_distmat</ref>(<ref refid="namespacelbann_1adee41f31f15f3906cbdcce4a1417eb56a61b3a8faa9c1091806675c230a9abe64" kindref="member">persist_type::train</ref>,<sp/>l_name,<sp/>(<ref refid="base_8hpp_1a0fab5387556805cfeac3e7e567bf66c5" kindref="member">DistMat</ref><sp/>*)<ref refid="classlbann_1_1loss__function_1ac6ac9f8f2cef7a4daa1b282dba914975" kindref="member">m_gradient</ref>);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147" refid="classlbann_1_1loss__function_1ae948babd62a110e2407271f24dcaec1b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1loss__function_1ae948babd62a110e2407271f24dcaec1b" kindref="member">loss_function::load_from_checkpoint_shared</ref>(<ref refid="classlbann_1_1persist" kindref="compound">persist</ref>&amp;<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>l_name[512];</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(l_name,<sp/></highlight><highlight class="stringliteral">&quot;objfunc_gradient.bin&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>p.<ref refid="classlbann_1_1persist_1aa98be93f33b510e5b506b61de6bd79bd" kindref="member">read_distmat</ref>(<ref refid="namespacelbann_1adee41f31f15f3906cbdcce4a1417eb56a61b3a8faa9c1091806675c230a9abe64" kindref="member">persist_type::train</ref>,<sp/>l_name,<sp/>(<ref refid="base_8hpp_1a0fab5387556805cfeac3e7e567bf66c5" kindref="member">DistMat</ref><sp/>*)<ref refid="classlbann_1_1loss__function_1ac6ac9f8f2cef7a4daa1b282dba914975" kindref="member">m_gradient</ref>);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>lbann</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/mckinney27/doxy-testbed/lbann/src/objective_functions/loss_functions/loss_function.cpp"/>
  </compounddef>
</doxygen>
