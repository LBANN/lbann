<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="random_8cpp" kind="file" language="C++">
    <compoundname>random.cpp</compoundname>
    <includes local="no">omp.h</includes>
    <includes refid="random_8hpp" local="yes">lbann/utils/random.hpp</includes>
    <incdepgraph>
      <node id="25793">
        <label>lbann/io/persist.hpp</label>
        <link refid="persist_8hpp"/>
        <childnode refid="25780" relation="include">
        </childnode>
        <childnode refid="25781" relation="include">
        </childnode>
      </node>
      <node id="25781">
        <label>El.hpp</label>
      </node>
      <node id="25780">
        <label>lbann/base.hpp</label>
        <link refid="base_8hpp"/>
        <childnode refid="25781" relation="include">
        </childnode>
        <childnode refid="25782" relation="include">
        </childnode>
        <childnode refid="25783" relation="include">
        </childnode>
        <childnode refid="25788" relation="include">
        </childnode>
      </node>
      <node id="25791">
        <label>map</label>
      </node>
      <node id="25778">
        <label>omp.h</label>
      </node>
      <node id="25794">
        <label>random</label>
      </node>
      <node id="25785">
        <label>cstdio</label>
      </node>
      <node id="25787">
        <label>cxxabi.h</label>
      </node>
      <node id="25790">
        <label>vector</label>
      </node>
      <node id="25789">
        <label>lbann/comm.hpp</label>
        <link refid="comm_8hpp"/>
        <childnode refid="25790" relation="include">
        </childnode>
        <childnode refid="25791" relation="include">
        </childnode>
        <childnode refid="25792" relation="include">
        </childnode>
        <childnode refid="25780" relation="include">
        </childnode>
      </node>
      <node id="25784">
        <label>cstdlib</label>
      </node>
      <node id="25779">
        <label>lbann/utils/random.hpp</label>
        <link refid="random_8hpp"/>
        <childnode refid="25780" relation="include">
        </childnode>
        <childnode refid="25789" relation="include">
        </childnode>
        <childnode refid="25793" relation="include">
        </childnode>
        <childnode refid="25794" relation="include">
        </childnode>
      </node>
      <node id="25777">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/utils/random.cpp</label>
        <link refid="random_8cpp"/>
        <childnode refid="25778" relation="include">
        </childnode>
        <childnode refid="25779" relation="include">
        </childnode>
      </node>
      <node id="25788">
        <label>lbann_config.hpp</label>
      </node>
      <node id="25783">
        <label>lbann/utils/cyg_profile.hpp</label>
        <link refid="cyg__profile_8hpp"/>
        <childnode refid="25784" relation="include">
        </childnode>
        <childnode refid="25785" relation="include">
        </childnode>
        <childnode refid="25786" relation="include">
        </childnode>
        <childnode refid="25787" relation="include">
        </childnode>
      </node>
      <node id="25782">
        <label>lbann/Elemental_extensions.hpp</label>
        <link refid="Elemental__extensions_8hpp"/>
        <childnode refid="25781" relation="include">
        </childnode>
      </node>
      <node id="25792">
        <label>typeindex</label>
      </node>
      <node id="25786">
        <label>dlfcn.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceanonymous__namespace_02random_8cpp_03">anonymous_namespace{random.cpp}</innernamespace>
    <innernamespace refid="namespacelbann">lbann</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2014-2016,<sp/>Lawrence<sp/>Livermore<sp/>National<sp/>Security,<sp/>LLC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Produced<sp/>at<sp/>the<sp/>Lawrence<sp/>Livermore<sp/>National<sp/>Laboratory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Written<sp/>by<sp/>the<sp/>LBANN<sp/>Research<sp/>Team<sp/>(B.<sp/>Van<sp/>Essen,<sp/>et<sp/>al.)<sp/>listed<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>CONTRIBUTORS<sp/>file.<sp/>&lt;lbann-dev@llnl.gov&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LLNL-CODE-697807.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>LBANN:<sp/>Livermore<sp/>Big<sp/>Artificial<sp/>Neural<sp/>Network</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Toolkit.<sp/>For<sp/>details,<sp/>see<sp/>http://software.llnl.gov/LBANN<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://github.com/LLNL/LBANN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;Licensee&quot;);<sp/>you</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implied.<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>license.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;omp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="random_8hpp" kindref="compound">lbann/utils/random.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="namespaceanonymous__namespace_02random_8cpp_03" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__ICC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><ref refid="namespacelbann_1aab7fa584bac85b9085aa8b8c5a888356" kindref="member">lbann::rng_gen</ref><sp/><ref refid="namespaceanonymous__namespace_02random_8cpp_03_1a83826c4b587d1825f13b833be6fe047f" kindref="member">generator</ref>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>omp<sp/>threadprivate(generator)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><ref refid="namespacelbann_1af16616ffa6a3616836eabadd6ce837ec" kindref="member">lbann::fast_rng_gen</ref><sp/><ref refid="namespaceanonymous__namespace_02random_8cpp_03_1a349f572cec05cd0e2469b799774a8602" kindref="member">fast_generator</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>omp<sp/>threadprivate(fast_generator)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><ref refid="namespacelbann_1aab7fa584bac85b9085aa8b8c5a888356" kindref="member">lbann::rng_gen</ref><sp/><ref refid="namespaceanonymous__namespace_02random_8cpp_03_1ac1d3d0259f3e9c9b75e9701ae727d16e" kindref="member">data_seq_generator</ref>;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>omp<sp/>threadprivate(data_seq_generator)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Random<sp/>number<sp/>generator,<sp/>file-visible<sp/>only.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Defined<sp/>like<sp/>this<sp/>to<sp/>work<sp/>around<sp/>a<sp/>GCC<sp/>problem<sp/>with<sp/>threadprivate<sp/>objects:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://stackoverflow.com/questions/23552077/how-to-define-a-object-or-struct-as-threadprivate-in-openmp/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1aab7fa584bac85b9085aa8b8c5a888356" kindref="member">lbann::rng_gen</ref><sp/><ref refid="namespaceanonymous__namespace_02random_8cpp_03_1a83826c4b587d1825f13b833be6fe047f" kindref="member">generator</ref>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>omp<sp/>threadprivate(generator)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="namespaceanonymous__namespace_02random_8cpp_03_1a83826c4b587d1825f13b833be6fe047f" refkind="member"><highlight class="normal"><ref refid="namespacelbann_1aab7fa584bac85b9085aa8b8c5a888356" kindref="member">lbann::rng_gen</ref><sp/><ref refid="namespaceanonymous__namespace_02random_8cpp_03_1a83826c4b587d1825f13b833be6fe047f" kindref="member">generator</ref>;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1af16616ffa6a3616836eabadd6ce837ec" kindref="member">lbann::fast_rng_gen</ref><sp/><ref refid="namespaceanonymous__namespace_02random_8cpp_03_1a349f572cec05cd0e2469b799774a8602" kindref="member">fast_generator</ref>;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>omp<sp/>threadprivate(fast_generator)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="namespaceanonymous__namespace_02random_8cpp_03_1a349f572cec05cd0e2469b799774a8602" refkind="member"><highlight class="normal"><ref refid="namespacelbann_1af16616ffa6a3616836eabadd6ce837ec" kindref="member">lbann::fast_rng_gen</ref><sp/><ref refid="namespaceanonymous__namespace_02random_8cpp_03_1a349f572cec05cd0e2469b799774a8602" kindref="member">fast_generator</ref>;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1aab7fa584bac85b9085aa8b8c5a888356" kindref="member">lbann::rng_gen</ref><sp/><ref refid="namespaceanonymous__namespace_02random_8cpp_03_1ac1d3d0259f3e9c9b75e9701ae727d16e" kindref="member">data_seq_generator</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>omp<sp/>threadprivate(data_seq_generator)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="namespaceanonymous__namespace_02random_8cpp_03_1ac1d3d0259f3e9c9b75e9701ae727d16e" refkind="member"><highlight class="normal"><ref refid="namespacelbann_1aab7fa584bac85b9085aa8b8c5a888356" kindref="member">lbann::rng_gen</ref><sp/><ref refid="namespaceanonymous__namespace_02random_8cpp_03_1ac1d3d0259f3e9c9b75e9701ae727d16e" kindref="member">data_seq_generator</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacelbann" kindref="compound">lbann</ref><sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="namespacelbann_1a4fea7ba21017b49d1e34394b4c20c764" refkind="member"><highlight class="normal"><ref refid="namespacelbann_1aab7fa584bac85b9085aa8b8c5a888356" kindref="member">rng_gen</ref>&amp;<sp/><ref refid="namespacelbann_1a4fea7ba21017b49d1e34394b4c20c764" kindref="member">get_generator</ref>()<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><ref refid="namespaceanonymous__namespace_02random_8cpp_03_1a83826c4b587d1825f13b833be6fe047f" kindref="member">return ::generator</ref>;</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="namespacelbann_1ae6ce9c2fdec6f81803f6b1a6555c31c5" refkind="member"><highlight class="normal"><ref refid="namespacelbann_1af16616ffa6a3616836eabadd6ce837ec" kindref="member">fast_rng_gen</ref>&amp;<sp/><ref refid="namespacelbann_1ae6ce9c2fdec6f81803f6b1a6555c31c5" kindref="member">get_fast_generator</ref>()<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><ref refid="namespaceanonymous__namespace_02random_8cpp_03_1a349f572cec05cd0e2469b799774a8602" kindref="member">return ::fast_generator</ref>;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="namespacelbann_1aba9d11cb3a739cd84e7234ceeb32d098" refkind="member"><highlight class="normal"><ref refid="namespacelbann_1aab7fa584bac85b9085aa8b8c5a888356" kindref="member">rng_gen</ref>&amp;<sp/><ref refid="namespacelbann_1aba9d11cb3a739cd84e7234ceeb32d098" kindref="member">get_data_seq_generator</ref>()<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><ref refid="namespaceanonymous__namespace_02random_8cpp_03_1ac1d3d0259f3e9c9b75e9701ae727d16e" kindref="member">return ::data_seq_generator</ref>;</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="namespacelbann_1af68acf5b249e5360289d4c6a7bfa8985" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1af68acf5b249e5360289d4c6a7bfa8985" kindref="member">save_rng_to_checkpoint_shared</ref>(<ref refid="classlbann_1_1persist" kindref="compound">persist</ref>&amp;<sp/>p){</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>std::string<sp/>rng_name;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>rng_name<sp/>=<sp/>std::string(p.<ref refid="classlbann_1_1persist_1a17c2b08ec1815aba6d3eae6502397bb1" kindref="member">m_checkpoint_dir</ref>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/rng_seq_generator&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>std::ofstream<sp/>rng_seq(rng_name);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>rng_seq<sp/>&lt;&lt;<sp/><ref refid="namespaceanonymous__namespace_02random_8cpp_03_1ac1d3d0259f3e9c9b75e9701ae727d16e" kindref="member">::data_seq_generator</ref>;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>rng_name<sp/>=<sp/>std::string(p.<ref refid="classlbann_1_1persist_1a17c2b08ec1815aba6d3eae6502397bb1" kindref="member">m_checkpoint_dir</ref>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/rng_generator&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>std::ofstream<sp/><ref refid="classlbann_1_1rng" kindref="compound">rng</ref>(rng_name);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>rng<sp/>&lt;&lt;<sp/><ref refid="namespaceanonymous__namespace_02random_8cpp_03_1a83826c4b587d1825f13b833be6fe047f" kindref="member">::generator</ref>;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>rng_name<sp/>=<sp/>std::string(p.<ref refid="classlbann_1_1persist_1a17c2b08ec1815aba6d3eae6502397bb1" kindref="member">m_checkpoint_dir</ref>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/rng_fast_generator&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>std::ofstream<sp/>rng_fast(rng_name);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>rng_fast<sp/>&lt;&lt;<sp/><ref refid="namespaceanonymous__namespace_02random_8cpp_03_1a349f572cec05cd0e2469b799774a8602" kindref="member">::fast_generator</ref>;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="namespacelbann_1ab76114a0e8cc90c28bcb9e7d01eec89a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1ab76114a0e8cc90c28bcb9e7d01eec89a" kindref="member">load_rng_from_checkpoint_shared</ref>(<ref refid="classlbann_1_1persist" kindref="compound">persist</ref>&amp;<sp/>p){</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>std::string<sp/>rng_name;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>rng_name<sp/>=<sp/>std::string(p.<ref refid="classlbann_1_1persist_1a17c2b08ec1815aba6d3eae6502397bb1" kindref="member">m_checkpoint_dir</ref>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/rng_seq_generator&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>std::ifstream<sp/>rng_seq(rng_name);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>rng_seq<sp/>&gt;&gt;<sp/><ref refid="namespaceanonymous__namespace_02random_8cpp_03_1ac1d3d0259f3e9c9b75e9701ae727d16e" kindref="member">::data_seq_generator</ref>;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>rng_name<sp/>=<sp/>std::string(p.<ref refid="classlbann_1_1persist_1a17c2b08ec1815aba6d3eae6502397bb1" kindref="member">m_checkpoint_dir</ref>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/rng_generator&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>std::ifstream<sp/><ref refid="classlbann_1_1rng" kindref="compound">rng</ref>(rng_name);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>rng<sp/>&gt;&gt;<sp/><ref refid="namespaceanonymous__namespace_02random_8cpp_03_1a83826c4b587d1825f13b833be6fe047f" kindref="member">::generator</ref>;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>rng_name<sp/>=<sp/>std::string(p.<ref refid="classlbann_1_1persist_1a17c2b08ec1815aba6d3eae6502397bb1" kindref="member">m_checkpoint_dir</ref>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/rng_fast_generator&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>std::ifstream<sp/>rng_fast(rng_name);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>rng_fast<sp/>&gt;&gt;<sp/><ref refid="namespaceanonymous__namespace_02random_8cpp_03_1a349f572cec05cd0e2469b799774a8602" kindref="member">::fast_generator</ref>;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="namespacelbann_1acef152f20e422b3aea1a3c1691a533ac" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1acef152f20e422b3aea1a3c1691a533ac" kindref="member">init_random</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seed,<sp/><ref refid="classlbann_1_1lbann__comm" kindref="compound">lbann_comm</ref><sp/>*<ref refid="file__io_8cpp_1ab048c6f9fcbcfaa57ce68b00263dbebe" kindref="member">comm</ref>)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seed<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Seed<sp/>every<sp/>OpenMP<sp/>thread,<sp/>if<sp/>present.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>Threadprivate<sp/>OMP<sp/>variables<sp/>don&apos;t<sp/>work<sp/>with<sp/>dynamic<sp/>threads.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_OPENMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>parallel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelbann_1a4fea7ba21017b49d1e34394b4c20c764" kindref="member">get_generator</ref>().seed((seed<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>omp_get_thread_num());</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelbann_1ae6ce9c2fdec6f81803f6b1a6555c31c5" kindref="member">get_fast_generator</ref>().seed((seed<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>omp_get_thread_num());</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelbann_1a4fea7ba21017b49d1e34394b4c20c764" kindref="member">get_generator</ref>().seed(seed);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelbann_1ae6ce9c2fdec6f81803f6b1a6555c31c5" kindref="member">get_fast_generator</ref>().seed(seed);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LBANN_SET_EL_RNG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comm<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>El::Generator().seed(seed<sp/>^<sp/>comm-&gt;<ref refid="classlbann_1_1lbann__comm_1a789453454468a3b70de768537c50ca52" kindref="member">get_rank_in_model</ref>());</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>El::Generator().seed(seed<sp/>^<sp/>El::mpi::Rank(El::mpi::COMM_WORLD));</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Seed<sp/>with<sp/>a<sp/>random<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>std::random_device<sp/>rd;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>rand_val<sp/>=<sp/>rd();</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_OPENMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>parallel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelbann_1a4fea7ba21017b49d1e34394b4c20c764" kindref="member">get_generator</ref>().seed((rand_val<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>omp_get_thread_num());</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelbann_1ae6ce9c2fdec6f81803f6b1a6555c31c5" kindref="member">get_fast_generator</ref>().seed((rand_val<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>omp_get_thread_num());</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelbann_1a4fea7ba21017b49d1e34394b4c20c764" kindref="member">get_generator</ref>().seed(rand_val);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelbann_1ae6ce9c2fdec6f81803f6b1a6555c31c5" kindref="member">get_fast_generator</ref>().seed(rand_val);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LBANN_SET_EL_RNG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>El::Generator().seed(rand_val);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147" refid="namespacelbann_1a8987701a637ff0e678114aa77e9c4d40" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1a8987701a637ff0e678114aa77e9c4d40" kindref="member">init_data_seq_random</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seed)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seed<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Seed<sp/>with<sp/>a<sp/>random<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>std::random_device<sp/>rd;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>rd();</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Seed<sp/>every<sp/>OpenMP<sp/>thread,<sp/>if<sp/>present.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>Threadprivate<sp/>OMP<sp/>variables<sp/>don&apos;t<sp/>work<sp/>with<sp/>dynamic<sp/>threads.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_OPENMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#pragma<sp/>omp<sp/>parallel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelbann_1aba9d11cb3a739cd84e7234ceeb32d098" kindref="member">get_data_seq_generator</ref>().seed(seed);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><ref refid="namespacelbann_1aba9d11cb3a739cd84e7234ceeb32d098" kindref="member">get_data_seq_generator</ref>().seed(seed);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166" refid="namespacelbann_1abd116f95f55d0e29d9a0cc386139c4b4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1abd116f95f55d0e29d9a0cc386139c4b4" kindref="member">gaussian_fill</ref>(<ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref>&amp;<sp/>mat,<sp/>El::Int<sp/>m,<sp/>El::Int<sp/>n,<sp/>DataType<sp/>mean,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataType<sp/>stddev)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LBANN_PARALLEL_RANDOM_MATRICES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>El::Gaussian(mat,<sp/>m,<sp/>n,<sp/>mean,<sp/>stddev);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><ref refid="namespacelbann_1a2f40602f0503f9737325bb267e5c4dcc" kindref="member">gaussian_fill_procdet</ref>(mat,<sp/>m,<sp/>n,<sp/>mean,<sp/>stddev);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>LBANN_PARALLEL_RANDOM_MATRICES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175" refid="namespacelbann_1ae8bc674a3d676391666524b44cbc4068" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1ae8bc674a3d676391666524b44cbc4068" kindref="member">bernoulli_fill</ref>(<ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref>&amp;<sp/>mat,<sp/>El::Int<sp/>m,<sp/>El::Int<sp/>n,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LBANN_PARALLEL_RANDOM_MATRICES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>El::Bernoulli(mat,<sp/>m,<sp/>n,<sp/>p);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><ref refid="namespacelbann_1ad1e3fe84cfa5257be476de3be805064d" kindref="member">bernoulli_fill_procdet</ref>(mat,<sp/>m,<sp/>n,<sp/>p);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>LBANN_PARALLEL_RANDOM_MATRICES<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183" refid="namespacelbann_1a7336c565aa23c1dab784530c581db3d1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1a7336c565aa23c1dab784530c581db3d1" kindref="member">uniform_fill</ref>(<ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref>&amp;<sp/>mat,<sp/>El::Int<sp/>m,<sp/>El::Int<sp/>n,<sp/>DataType<sp/>center,</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataType<sp/>radius)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LBANN_PARALLEL_RANDOM_MATRICES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>El::Uniform(mat,<sp/>m,<sp/>n,<sp/>center,<sp/>radius);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><ref refid="namespacelbann_1a93fc1b42be6ab461e803cb48d58c4d81" kindref="member">uniform_fill_procdet</ref>(mat,<sp/>m,<sp/>n,<sp/>center,<sp/>radius);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>LBANN_PARALLEL_RANDOM_MATRICES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192" refid="namespacelbann_1a2f40602f0503f9737325bb267e5c4dcc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1a2f40602f0503f9737325bb267e5c4dcc" kindref="member">gaussian_fill_procdet</ref>(<ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref>&amp;<sp/>mat,<sp/>El::Int<sp/>m,<sp/>El::Int<sp/>n,<sp/>DataType<sp/>mean,</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataType<sp/>stddev)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>El::Zeros(mat,<sp/>m,<sp/>n);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mat.Grid().Rank()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>mat.Reserve(n<sp/>*<sp/>m);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>gen<sp/>=<sp/><ref refid="namespacelbann_1a4fea7ba21017b49d1e34394b4c20c764" kindref="member">get_generator</ref>();</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>std::normal_distribution&lt;DataType&gt;<sp/>dist(mean,<sp/>stddev);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(El::Int<sp/>col<sp/>=<sp/>0;<sp/>col<sp/>&lt;<sp/>n;<sp/>++col)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(El::Int<sp/>row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>m;<sp/>++row)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat.QueueUpdate(row,<sp/>col,<sp/>dist(gen));</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>mat.ProcessQueues();</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208" refid="namespacelbann_1ad1e3fe84cfa5257be476de3be805064d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1ad1e3fe84cfa5257be476de3be805064d" kindref="member">bernoulli_fill_procdet</ref>(<ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref>&amp;<sp/>mat,<sp/>El::Int<sp/>m,<sp/>El::Int<sp/>n,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>El::Zeros(mat,<sp/>m,<sp/>n);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mat.Grid().Rank()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>mat.Reserve(m<sp/>*<sp/>n);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>gen<sp/>=<sp/><ref refid="namespacelbann_1a4fea7ba21017b49d1e34394b4c20c764" kindref="member">get_generator</ref>();</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>std::bernoulli_distribution<sp/>dist(p);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(El::Int<sp/>col<sp/>=<sp/>0;<sp/>col<sp/>&lt;<sp/>n;<sp/>++col)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(El::Int<sp/>row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>m;<sp/>++row)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat.QueueUpdate(row,<sp/>col,<sp/>dist(gen)<sp/>?<sp/>1.0f<sp/>:<sp/>0.0f);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>mat.ProcessQueues();</highlight></codeline>
<codeline lineno="221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223" refid="namespacelbann_1a93fc1b42be6ab461e803cb48d58c4d81" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1a93fc1b42be6ab461e803cb48d58c4d81" kindref="member">uniform_fill_procdet</ref>(<ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref>&amp;<sp/>mat,<sp/>El::Int<sp/>m,<sp/>El::Int<sp/>n,<sp/>DataType<sp/>center,</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataType<sp/>radius)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>El::Zeros(mat,<sp/>m,<sp/>n);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mat.Grid().Rank()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>mat.Reserve(n<sp/>*<sp/>m);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>gen<sp/>=<sp/><ref refid="namespacelbann_1a4fea7ba21017b49d1e34394b4c20c764" kindref="member">get_generator</ref>();</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uniform_real_distribution&lt;DataType&gt;<sp/>dist(center<sp/>-<sp/>radius,</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>center<sp/>+<sp/>radius);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(El::Int<sp/>col<sp/>=<sp/>0;<sp/>col<sp/>&lt;<sp/>n;<sp/>++col)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(El::Int<sp/>row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>m;<sp/>++row)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat.QueueUpdate(row,<sp/>col,<sp/>dist(gen));</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>mat.ProcessQueues();</highlight></codeline>
<codeline lineno="238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>lbann</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/random.cpp"/>
  </compounddef>
</doxygen>
