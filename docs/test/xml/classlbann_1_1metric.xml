<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classlbann_1_1metric" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>lbann::metric</compoundname>
    <derivedcompoundref refid="classlbann_1_1boolean__accuracy__metric" prot="public" virt="non-virtual">lbann::boolean_accuracy_metric</derivedcompoundref>
    <derivedcompoundref refid="classlbann_1_1boolean__false__negatives__metric" prot="public" virt="non-virtual">lbann::boolean_false_negatives_metric</derivedcompoundref>
    <derivedcompoundref refid="classlbann_1_1boolean__false__positives__metric" prot="public" virt="non-virtual">lbann::boolean_false_positives_metric</derivedcompoundref>
    <derivedcompoundref refid="classlbann_1_1categorical__accuracy__metric" prot="public" virt="non-virtual">lbann::categorical_accuracy_metric</derivedcompoundref>
    <derivedcompoundref refid="classlbann_1_1mean__absolute__deviation__metric" prot="public" virt="non-virtual">lbann::mean_absolute_deviation_metric</derivedcompoundref>
    <derivedcompoundref refid="classlbann_1_1mean__squared__error__metric" prot="public" virt="non-virtual">lbann::mean_squared_error_metric</derivedcompoundref>
    <derivedcompoundref refid="classlbann_1_1pearson__correlation__metric" prot="public" virt="non-virtual">lbann::pearson_correlation_metric</derivedcompoundref>
    <derivedcompoundref refid="classlbann_1_1r2__metric" prot="public" virt="non-virtual">lbann::r2_metric</derivedcompoundref>
    <derivedcompoundref refid="classlbann_1_1top__k__categorical__accuracy__metric" prot="public" virt="non-virtual">lbann::top_k_categorical_accuracy_metric</derivedcompoundref>
    <includes refid="metric_8hpp" local="no">metric.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classlbann_1_1metric_1a547077709911e30c7d070545936c9c85" prot="private" static="no" mutable="no">
        <type><ref refid="classlbann_1_1lbann__comm" kindref="compound">lbann_comm</ref> *</type>
        <definition>lbann_comm* lbann::metric::m_comm</definition>
        <argsstring></argsstring>
        <name>m_comm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LBANN communicator. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/metrics/metric.hpp" line="176" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/metrics/metric.hpp" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlbann_1_1metric_1a2bf6c53efb1b525bfa63a8c3167968d9" prot="private" static="no" mutable="no">
        <type>const <ref refid="classlbann_1_1generic__target__layer" kindref="compound">generic_target_layer</ref> *</type>
        <definition>const generic_target_layer* lbann::metric::m_target_layer</definition>
        <argsstring></argsstring>
        <name>m_target_layer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pointer to target layer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/metrics/metric.hpp" line="179" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/metrics/metric.hpp" bodystart="179" bodyend="-1"/>
        <referencedby refid="classlbann_1_1metric_1a898d23e410297378db2fe9f8d1754fe0" compoundref="metric_8cpp" startline="83" endline="103">setup</referencedby>
        <referencedby refid="classlbann_1_1metric_1ab4e14cb4296c7b47719071b210448dec" compoundref="metric_8cpp" startline="105" endline="126">evaluate</referencedby>
        <referencedby refid="classlbann_1_1metric_1aba7f7a12aeba6619f7b4330e9075f76e" compoundref="metric_8cpp" startline="147" endline="155">get_target_layer</referencedby>
        <referencedby refid="classlbann_1_1metric_1a7f97c998fa64475f9ef7f066237b0695" compoundref="metric_8cpp" startline="157" endline="159">get_layer_pointers</referencedby>
        <referencedby refid="classlbann_1_1metric_1a5de0c336b93f2c03f37f38047d401f99" compoundref="metric_8cpp" startline="161" endline="170">set_layer_pointers</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classlbann_1_1metric_1a9949d8aceedbc113aa2c356046ed73fc" prot="private" static="no" mutable="no">
        <type>std::map&lt; <ref refid="base_8hpp_1a2781a159088df64ed7d47cc91c4dc0a8" kindref="member">execution_mode</ref>, <ref refid="structlbann_1_1metric__statistics" kindref="compound">metric_statistics</ref> &gt;</type>
        <definition>std::map&lt;execution_mode,metric_statistics&gt; lbann::metric::m_statistics</definition>
        <argsstring></argsstring>
        <name>m_statistics</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Metric statistics. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/metrics/metric.hpp" line="182" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/metrics/metric.hpp" bodystart="182" bodyend="-1"/>
        <referencedby refid="classlbann_1_1metric_1ab4e14cb4296c7b47719071b210448dec" compoundref="metric_8cpp" startline="105" endline="126">evaluate</referencedby>
        <referencedby refid="classlbann_1_1metric_1a2926c6b391dc8c3e3d13d0199317c570" compoundref="metric_8cpp" startline="128" endline="137">get_mean_value</referencedby>
        <referencedby refid="classlbann_1_1metric_1a489feb28d318bd8405133f9f8c94cc10" compoundref="metric_8cpp" startline="139" endline="145">get_statistics_num_samples</referencedby>
        <referencedby refid="classlbann_1_1metric_1a9728b02a240dfd9faa61b7dfeb3feede" compoundref="metric_8cpp" startline="172" endline="180">save_to_checkpoint_shared</referencedby>
        <referencedby refid="classlbann_1_1metric_1ab3d1ec8247352467790be036a07cfc2b" compoundref="metric_8cpp" startline="182" endline="198">load_from_checkpoint_shared</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classlbann_1_1metric_1a4c77a1bd1db77e9d837a72128e3d687f" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double lbann::metric::m_evaluate_time</definition>
        <argsstring></argsstring>
        <name>m_evaluate_time</name>
        <initializer>= 0.0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Runtime for the metric evaluation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/metrics/metric.hpp" line="185" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/metrics/metric.hpp" bodystart="185" bodyend="-1"/>
        <referencedby refid="classlbann_1_1metric_1ab4e14cb4296c7b47719071b210448dec" compoundref="metric_8cpp" startline="105" endline="126">evaluate</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classlbann_1_1metric_1a3cd2d4f7dcbf94f70b3b8560a3171d9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>lbann::metric::metric</definition>
        <argsstring>(lbann_comm *comm)</argsstring>
        <name>metric</name>
        <param>
          <type><ref refid="classlbann_1_1lbann__comm" kindref="compound">lbann_comm</ref> *</type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/metrics/metric.hpp" line="95" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/metrics/metric.cpp" bodystart="79" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1metric_1ac2fc993e31fed5298c4e321b315b77a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>lbann::metric::metric</definition>
        <argsstring>(const metric &amp;other)=default</argsstring>
        <name>metric</name>
        <param>
          <type>const <ref refid="classlbann_1_1metric" kindref="compound">metric</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy constructor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/metrics/metric.hpp" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1metric_1a4324342dab4892199a47df1d78b2cef5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classlbann_1_1metric" kindref="compound">metric</ref> &amp;</type>
        <definition>metric&amp; lbann::metric::operator=</definition>
        <argsstring>(const metric &amp;other)=default</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classlbann_1_1metric" kindref="compound">metric</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy assignment operator. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/metrics/metric.hpp" line="100" column="1"/>
        <referencedby refid="classlbann_1_1categorical__accuracy__metric_1a859f8e13d7222c92e32b6751b194ef47" compoundref="categorical__accuracy_8cpp" startline="44" endline="53">lbann::categorical_accuracy_metric::operator=</referencedby>
        <referencedby refid="classlbann_1_1pearson__correlation__metric_1a5b88759076bc2f827b726e1541467b56" compoundref="pearson__correlation_8cpp" startline="65" endline="93">lbann::pearson_correlation_metric::operator=</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1metric_1ae173eae981ed474f125a5462e734802b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual lbann::metric::~metric</definition>
        <argsstring>()=default</argsstring>
        <name>~metric</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/metrics/metric.hpp" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1metric_1a2a4498d41f77da8585552f485caab167" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classlbann_1_1metric" kindref="compound">metric</ref> *</type>
        <definition>virtual metric* lbann::metric::copy</definition>
        <argsstring>() const =0</argsstring>
        <name>copy</name>
        <reimplementedby refid="classlbann_1_1boolean__accuracy__metric_1ae3a97a9ac1caccfe8ac46ad1a0df01a4">copy</reimplementedby>
        <reimplementedby refid="classlbann_1_1pearson__correlation__metric_1a2bb107028c6931a70ed7d886707b4006">copy</reimplementedby>
        <reimplementedby refid="classlbann_1_1boolean__false__positives__metric_1a5d9544f3f4dc7e086cf203f5666a7660">copy</reimplementedby>
        <reimplementedby refid="classlbann_1_1boolean__false__negatives__metric_1abd0e7a6040232d5b6d8b10e79a3208c1">copy</reimplementedby>
        <reimplementedby refid="classlbann_1_1r2__metric_1a2536209f1d575b639ab351854d54f207">copy</reimplementedby>
        <reimplementedby refid="classlbann_1_1mean__squared__error__metric_1a4caa0dfc86361a1c9a91fb64efecfcc9">copy</reimplementedby>
        <reimplementedby refid="classlbann_1_1mean__absolute__deviation__metric_1ad49148043214908a671799bcdd0b120b">copy</reimplementedby>
        <reimplementedby refid="classlbann_1_1categorical__accuracy__metric_1a46ce5b6eb09fecc8b0029fb62ba8cf66">copy</reimplementedby>
        <reimplementedby refid="classlbann_1_1top__k__categorical__accuracy__metric_1a2d93a9bca14d52bda02a58e4c58b800e">copy</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/metrics/metric.hpp" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1metric_1af455d7b6874d3491bc04f0f2ebfcab51" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::string</type>
        <definition>virtual std::string lbann::metric::name</definition>
        <argsstring>() const =0</argsstring>
        <name>name</name>
        <reimplementedby refid="classlbann_1_1boolean__accuracy__metric_1a88edde5abce60809dbaaf034b166b09e">name</reimplementedby>
        <reimplementedby refid="classlbann_1_1pearson__correlation__metric_1a7cbb12e258acdb0cbc4d521dc7163dd6">name</reimplementedby>
        <reimplementedby refid="classlbann_1_1boolean__false__positives__metric_1aa1089643938285ab8c563e5aaccf9652">name</reimplementedby>
        <reimplementedby refid="classlbann_1_1boolean__false__negatives__metric_1a7e7f60e7babfbaad2dce5def175a8fbd">name</reimplementedby>
        <reimplementedby refid="classlbann_1_1r2__metric_1a66f9280c69b9b079d40b70b9c9c43ad9">name</reimplementedby>
        <reimplementedby refid="classlbann_1_1mean__squared__error__metric_1ac5477e6104eaf87fbbe2a13232ee2d9f">name</reimplementedby>
        <reimplementedby refid="classlbann_1_1mean__absolute__deviation__metric_1a6b2f0542a991b632414dc217586db905">name</reimplementedby>
        <reimplementedby refid="classlbann_1_1categorical__accuracy__metric_1a6fea8e495ab4ec4b05546c794468fa12">name</reimplementedby>
        <reimplementedby refid="classlbann_1_1top__k__categorical__accuracy__metric_1a7b49f722f75dabe73c0fc3500d72ef63">name</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a string name for this metric. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/metrics/metric.hpp" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1metric_1a13fd302dec85190b877f7146529e516c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string lbann::metric::get_unit</definition>
        <argsstring>() const</argsstring>
        <name>get_unit</name>
        <reimplementedby refid="classlbann_1_1boolean__accuracy__metric_1abde43253ef54b243f9faa1b1adea0672">get_unit</reimplementedby>
        <reimplementedby refid="classlbann_1_1boolean__false__positives__metric_1ab42b53134f128d26e3df37ca7a3d4cea">get_unit</reimplementedby>
        <reimplementedby refid="classlbann_1_1boolean__false__negatives__metric_1abe2bdb0c15ff481caa234e13fe7df2b9">get_unit</reimplementedby>
        <reimplementedby refid="classlbann_1_1categorical__accuracy__metric_1a9c06851bc233a01b28c346a10d278d99">get_unit</reimplementedby>
        <reimplementedby refid="classlbann_1_1top__k__categorical__accuracy__metric_1a0531d4f199fa61ce448af8c945ff3dfc">get_unit</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a display unit for this metric. Default is an empty string. This is overriden if the metric has units, e.g. &quot;%&quot; or &quot;sec&quot;. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/metrics/metric.hpp" line="112" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/metrics/metric.hpp" bodystart="112" bodyend="112"/>
        <references refid="namespacelbann_1_1anonymous__namespace_02callback__ltfb_8cpp_03_1a2525bf058156612d7847d0754277e4fc" compoundref="callback__ltfb_8cpp" startline="94" endline="104">lbann::anonymous_namespace{callback_ltfb.cpp}::evaluate</references>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1metric_1a898d23e410297378db2fe9f8d1754fe0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void lbann::metric::setup</definition>
        <argsstring>(model &amp;m)</argsstring>
        <name>setup</name>
        <reimplementedby refid="classlbann_1_1pearson__correlation__metric_1a4394c0ebb3cacdcec934e4ae322f9bb6">setup</reimplementedby>
        <reimplementedby refid="classlbann_1_1categorical__accuracy__metric_1a328a63ccc21c31efd511445f5b060960">setup</reimplementedby>
        <param>
          <type><ref refid="classlbann_1_1model" kindref="compound">model</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Setup metric. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/metrics/metric.hpp" line="115" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/metrics/metric.cpp" bodystart="83" bodyend="103"/>
        <references refid="classlbann_1_1metric_1a2bf6c53efb1b525bfa63a8c3167968d9" compoundref="metric_8hpp" startline="179">m_target_layer</references>
        <references refid="classlbann_1_1model_1ae14f4b2cc8882b3739d4aeb25d9e73c9" compoundref="model_8hpp" startline="114" endline="114">lbann::model::get_layers</references>
        <referencedby refid="classlbann_1_1categorical__accuracy__metric_1a328a63ccc21c31efd511445f5b060960" compoundref="categorical__accuracy_8cpp" startline="59" endline="78">lbann::categorical_accuracy_metric::setup</referencedby>
        <referencedby refid="classlbann_1_1pearson__correlation__metric_1a4394c0ebb3cacdcec934e4ae322f9bb6" compoundref="pearson__correlation_8cpp" startline="103" endline="133">lbann::pearson_correlation_metric::setup</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1metric_1ab4e14cb4296c7b47719071b210448dec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="base_8hpp_1a3266f5ac18504bbadea983c109566867" kindref="member">EvalType</ref></type>
        <definition>EvalType lbann::metric::evaluate</definition>
        <argsstring>(execution_mode mode, int mini_batch_size)</argsstring>
        <name>evaluate</name>
        <param>
          <type><ref refid="base_8hpp_1a2781a159088df64ed7d47cc91c4dc0a8" kindref="member">execution_mode</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mini_batch_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Evaluate the metric value. This function takes the model&apos;s current mini-batch size. If multiple models are being trained, the current mini-batch size may be different from the effective mini-batch size. The result is stored in history. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/metrics/metric.hpp" line="123" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/metrics/metric.cpp" bodystart="105" bodyend="126"/>
        <references refid="classlbann_1_1metric_1a2bf6c53efb1b525bfa63a8c3167968d9" compoundref="metric_8hpp" startline="179">m_target_layer</references>
        <references refid="namespacelbann_1a478d36031ff0659893c4322cd856157f" compoundref="timer_8hpp" startline="37" endline="41">lbann::get_time</references>
        <references refid="classlbann_1_1metric_1aab79147ff480675db2e01d7a889a4296">evaluate_compute</references>
        <references refid="classlbann_1_1generic__target__layer_1ac0b88a705256ab06bbba6bbffbc7ebc1" compoundref="generic__target__layer_8hpp" startline="298" endline="298">lbann::generic_target_layer::get_prediction</references>
        <references refid="classlbann_1_1generic__target__layer_1a9cbe476f3e447bc91e2834921ca7da9f" compoundref="generic__target__layer_8hpp" startline="300" endline="300">lbann::generic_target_layer::get_ground_truth</references>
        <references refid="classlbann_1_1metric_1a4c77a1bd1db77e9d837a72128e3d687f" compoundref="metric_8hpp" startline="185">m_evaluate_time</references>
        <references refid="classlbann_1_1metric_1a9949d8aceedbc113aa2c356046ed73fc" compoundref="metric_8hpp" startline="182">m_statistics</references>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1metric_1af7747feb8bc7a5ee039876a70fae1b0c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::metric::reset_statistics</definition>
        <argsstring>()</argsstring>
        <name>reset_statistics</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clear all statistics. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/metrics/metric.hpp" line="127" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/metrics/metric.hpp" bodystart="127" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1metric_1a27a3d8c073b85297b902ba35137926b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::metric::reset_statistics</definition>
        <argsstring>(execution_mode mode)</argsstring>
        <name>reset_statistics</name>
        <param>
          <type><ref refid="base_8hpp_1a2781a159088df64ed7d47cc91c4dc0a8" kindref="member">execution_mode</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clear statistics for an execution mode. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/metrics/metric.hpp" line="129" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/metrics/metric.hpp" bodystart="129" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1metric_1a2926c6b391dc8c3e3d13d0199317c570" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="base_8hpp_1a3266f5ac18504bbadea983c109566867" kindref="member">EvalType</ref></type>
        <definition>EvalType lbann::metric::get_mean_value</definition>
        <argsstring>(execution_mode mode) const</argsstring>
        <name>get_mean_value</name>
        <param>
          <type><ref refid="base_8hpp_1a2781a159088df64ed7d47cc91c4dc0a8" kindref="member">execution_mode</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get mean metric value. If mini-batch sizes are not identical, the mean is over the sample values rather than over the mini-batch mean values. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/metrics/metric.hpp" line="135" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/metrics/metric.cpp" bodystart="128" bodyend="137"/>
        <references refid="classlbann_1_1metric_1a9949d8aceedbc113aa2c356046ed73fc" compoundref="metric_8hpp" startline="182">m_statistics</references>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1metric_1a489feb28d318bd8405133f9f8c94cc10" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lbann::metric::get_statistics_num_samples</definition>
        <argsstring>(execution_mode mode) const</argsstring>
        <name>get_statistics_num_samples</name>
        <param>
          <type><ref refid="base_8hpp_1a2781a159088df64ed7d47cc91c4dc0a8" kindref="member">execution_mode</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get number of samples for statistics. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/metrics/metric.hpp" line="137" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/metrics/metric.cpp" bodystart="139" bodyend="145"/>
        <references refid="classlbann_1_1metric_1a9949d8aceedbc113aa2c356046ed73fc" compoundref="metric_8hpp" startline="182">m_statistics</references>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1metric_1a8367719e2c7816a4c718c049ea97b709" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::metric::set_target_layer</definition>
        <argsstring>(const generic_target_layer *target)</argsstring>
        <name>set_target_layer</name>
        <param>
          <type>const <ref refid="classlbann_1_1generic__target__layer" kindref="compound">generic_target_layer</ref> *</type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set pointer to target layer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/metrics/metric.hpp" line="140" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/metrics/metric.hpp" bodystart="140" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1metric_1aba7f7a12aeba6619f7b4330e9075f76e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classlbann_1_1generic__target__layer" kindref="compound">generic_target_layer</ref> &amp;</type>
        <definition>const generic_target_layer &amp; lbann::metric::get_target_layer</definition>
        <argsstring>() const</argsstring>
        <name>get_target_layer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get target layer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/metrics/metric.hpp" line="142" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/metrics/metric.cpp" bodystart="147" bodyend="155"/>
        <references refid="classlbann_1_1metric_1a2bf6c53efb1b525bfa63a8c3167968d9" compoundref="metric_8hpp" startline="179">m_target_layer</references>
        <referencedby refid="classlbann_1_1categorical__accuracy__metric_1a328a63ccc21c31efd511445f5b060960" compoundref="categorical__accuracy_8cpp" startline="59" endline="78">lbann::categorical_accuracy_metric::setup</referencedby>
        <referencedby refid="classlbann_1_1pearson__correlation__metric_1a4394c0ebb3cacdcec934e4ae322f9bb6" compoundref="pearson__correlation_8cpp" startline="103" endline="133">lbann::pearson_correlation_metric::setup</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1metric_1a7f97c998fa64475f9ef7f066237b0695" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classlbann_1_1Layer" kindref="compound">Layer</ref> * &gt;</type>
        <definition>std::vector&lt; Layer * &gt; lbann::metric::get_layer_pointers</definition>
        <argsstring>() const</argsstring>
        <name>get_layer_pointers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get list of pointers to layers. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/metrics/metric.hpp" line="145" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/metrics/metric.cpp" bodystart="157" bodyend="159"/>
        <references refid="classlbann_1_1metric_1a2bf6c53efb1b525bfa63a8c3167968d9" compoundref="metric_8hpp" startline="179">m_target_layer</references>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1metric_1a5de0c336b93f2c03f37f38047d401f99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::metric::set_layer_pointers</definition>
        <argsstring>(std::vector&lt; Layer *&gt; layers)</argsstring>
        <name>set_layer_pointers</name>
        <param>
          <type>std::vector&lt; <ref refid="classlbann_1_1Layer" kindref="compound">Layer</ref> *&gt;</type>
          <declname>layers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set list of pointers to layers. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/metrics/metric.hpp" line="147" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/metrics/metric.cpp" bodystart="161" bodyend="170"/>
        <references refid="classlbann_1_1metric_1a2bf6c53efb1b525bfa63a8c3167968d9" compoundref="metric_8hpp" startline="179">m_target_layer</references>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1metric_1a686239cad1f25628c9b298f9233cc9f3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double lbann::metric::get_evaluate_time</definition>
        <argsstring>() const</argsstring>
        <name>get_evaluate_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the time spent in evaluation for this metric. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/metrics/metric.hpp" line="150" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/metrics/metric.hpp" bodystart="150" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1metric_1ab93708cd870277eb7865655e075620c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::metric::reset_counters</definition>
        <argsstring>()</argsstring>
        <name>reset_counters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reset timing counters. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/metrics/metric.hpp" line="152" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/metrics/metric.hpp" bodystart="152" bodyend="154"/>
        <references refid="base_8hpp_1a2781a159088df64ed7d47cc91c4dc0a8ac41b9ec75e920b610e8907e066074b30">prediction</references>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1metric_1a9728b02a240dfd9faa61b7dfeb3feede" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool lbann::metric::save_to_checkpoint_shared</definition>
        <argsstring>(persist &amp;p)</argsstring>
        <name>save_to_checkpoint_shared</name>
        <param>
          <type><ref refid="classlbann_1_1persist" kindref="compound">persist</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Save metric state to checkpoint. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/metrics/metric.hpp" line="157" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/metrics/metric.cpp" bodystart="172" bodyend="180"/>
        <references refid="classlbann_1_1persist_1a34eb918a890ab49dcbeedddf27ec1616" compoundref="persist_8hpp" startline="60" endline="62">lbann::persist::get_rank</references>
        <references refid="classlbann_1_1metric_1a9949d8aceedbc113aa2c356046ed73fc" compoundref="metric_8hpp" startline="182">m_statistics</references>
        <references refid="base_8hpp_1a2781a159088df64ed7d47cc91c4dc0a8ac185ddac8b5a8f5aa23c5b80bc12d214">training</references>
        <references refid="base_8hpp_1a2781a159088df64ed7d47cc91c4dc0a8aa617908b172c473cb8e8cda059e55bf0">validation</references>
        <references refid="base_8hpp_1a2781a159088df64ed7d47cc91c4dc0a8aae2b1fca515949e5d54fb22b8ed95575">testing</references>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1metric_1ab3d1ec8247352467790be036a07cfc2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool lbann::metric::load_from_checkpoint_shared</definition>
        <argsstring>(persist &amp;p)</argsstring>
        <name>load_from_checkpoint_shared</name>
        <param>
          <type><ref refid="classlbann_1_1persist" kindref="compound">persist</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load metric state from checkpoint. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/metrics/metric.hpp" line="159" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/metrics/metric.cpp" bodystart="182" bodyend="198"/>
        <references refid="classlbann_1_1persist_1a34eb918a890ab49dcbeedddf27ec1616" compoundref="persist_8hpp" startline="60" endline="62">lbann::persist::get_rank</references>
        <references refid="classlbann_1_1metric_1a9949d8aceedbc113aa2c356046ed73fc" compoundref="metric_8hpp" startline="182">m_statistics</references>
        <references refid="base_8hpp_1a2781a159088df64ed7d47cc91c4dc0a8ac185ddac8b5a8f5aa23c5b80bc12d214">training</references>
        <references refid="base_8hpp_1a2781a159088df64ed7d47cc91c4dc0a8aa617908b172c473cb8e8cda059e55bf0">validation</references>
        <references refid="base_8hpp_1a2781a159088df64ed7d47cc91c4dc0a8aae2b1fca515949e5d54fb22b8ed95575">testing</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classlbann_1_1metric_1aab79147ff480675db2e01d7a889a4296" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="base_8hpp_1a3266f5ac18504bbadea983c109566867" kindref="member">EvalType</ref></type>
        <definition>virtual EvalType lbann::metric::evaluate_compute</definition>
        <argsstring>(const AbsDistMat &amp;prediction, const AbsDistMat &amp;ground_truth)=0</argsstring>
        <name>evaluate_compute</name>
        <reimplementedby refid="classlbann_1_1boolean__accuracy__metric_1acac2d198f516990fe9b87f3abefae635">evaluate_compute</reimplementedby>
        <reimplementedby refid="classlbann_1_1boolean__false__positives__metric_1abb6573a4e32e97316c69ce9fc24214f0">evaluate_compute</reimplementedby>
        <reimplementedby refid="classlbann_1_1boolean__false__negatives__metric_1a598dfc1ee40c4e11f001cbf8899e0e0a">evaluate_compute</reimplementedby>
        <reimplementedby refid="classlbann_1_1r2__metric_1a06c84d7944d1d5be896de6b98950e05e">evaluate_compute</reimplementedby>
        <reimplementedby refid="classlbann_1_1mean__squared__error__metric_1a81a2aa469f965d526a489214b3e73e4f">evaluate_compute</reimplementedby>
        <reimplementedby refid="classlbann_1_1mean__absolute__deviation__metric_1a4096a6f389b2f18ff6c19428313f2969">evaluate_compute</reimplementedby>
        <reimplementedby refid="classlbann_1_1pearson__correlation__metric_1a28453718aa09d609ef5ab157823d8c24">evaluate_compute</reimplementedby>
        <reimplementedby refid="classlbann_1_1top__k__categorical__accuracy__metric_1a3449bdb835e7e5bd7d17cd001fb4ae38">evaluate_compute</reimplementedby>
        <reimplementedby refid="classlbann_1_1categorical__accuracy__metric_1a0ec8c3254569c9f9855675243ac51612">evaluate_compute</reimplementedby>
        <param>
          <type>const <ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref> &amp;</type>
          <declname>prediction</declname>
        </param>
        <param>
          <type>const <ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref> &amp;</type>
          <declname>ground_truth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Computation to evaluate the metric function. This should return the sum of metric values across the mini-batch, not the mean value. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/metrics/metric.hpp" line="167" column="1"/>
        <referencedby refid="classlbann_1_1metric_1ab4e14cb4296c7b47719071b210448dec" compoundref="metric_8cpp" startline="105" endline="126">evaluate</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1metric_1a464120720df6bfdf91bffe353e562964" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classlbann_1_1lbann__comm" kindref="compound">lbann_comm</ref> &amp;</type>
        <definition>lbann_comm&amp; lbann::metric::get_comm</definition>
        <argsstring>()</argsstring>
        <name>get_comm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get LBANN communicator. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/metrics/metric.hpp" line="171" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/metrics/metric.hpp" bodystart="171" bodyend="171"/>
        <referencedby refid="classlbann_1_1boolean__accuracy__metric_1acac2d198f516990fe9b87f3abefae635" compoundref="boolean__accuracy_8cpp" startline="31" endline="53">lbann::boolean_accuracy_metric::evaluate_compute</referencedby>
        <referencedby refid="classlbann_1_1boolean__false__negatives__metric_1a598dfc1ee40c4e11f001cbf8899e0e0a" compoundref="boolean__false__negatives_8cpp" startline="31" endline="53">lbann::boolean_false_negatives_metric::evaluate_compute</referencedby>
        <referencedby refid="classlbann_1_1boolean__false__positives__metric_1abb6573a4e32e97316c69ce9fc24214f0" compoundref="boolean__false__positives_8cpp" startline="31" endline="53">lbann::boolean_false_positives_metric::evaluate_compute</referencedby>
        <referencedby refid="classlbann_1_1categorical__accuracy__metric_1a0ec8c3254569c9f9855675243ac51612" compoundref="categorical__accuracy_8cpp" startline="80" endline="156">lbann::categorical_accuracy_metric::evaluate_compute</referencedby>
        <referencedby refid="classlbann_1_1mean__absolute__deviation__metric_1a4096a6f389b2f18ff6c19428313f2969" compoundref="metrics_2mean__absolute__deviation_8cpp" startline="31" endline="58">lbann::mean_absolute_deviation_metric::evaluate_compute</referencedby>
        <referencedby refid="classlbann_1_1mean__squared__error__metric_1a81a2aa469f965d526a489214b3e73e4f" compoundref="metrics_2mean__squared__error_8cpp" startline="31" endline="58">lbann::mean_squared_error_metric::evaluate_compute</referencedby>
        <referencedby refid="classlbann_1_1pearson__correlation__metric_1a28453718aa09d609ef5ab157823d8c24" compoundref="pearson__correlation_8cpp" startline="135" endline="163">lbann::pearson_correlation_metric::evaluate_compute</referencedby>
        <referencedby refid="classlbann_1_1top__k__categorical__accuracy__metric_1a3449bdb835e7e5bd7d17cd001fb4ae38" compoundref="top__k__categorical__accuracy_8cpp" startline="35" endline="115">lbann::top_k_categorical_accuracy_metric::evaluate_compute</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Abstract base class for metric functions. A metric function can be used to evaluate the performance of a model without affecting the training process. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="1697">
        <label>lbann::metric</label>
        <link refid="classlbann_1_1metric"/>
      </node>
      <node id="1703">
        <label>lbann::mean_squared_error_metric</label>
        <link refid="classlbann_1_1mean__squared__error__metric"/>
        <childnode refid="1697" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1698">
        <label>lbann::boolean_accuracy_metric</label>
        <link refid="classlbann_1_1boolean__accuracy__metric"/>
        <childnode refid="1697" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1700">
        <label>lbann::boolean_false_positives_metric</label>
        <link refid="classlbann_1_1boolean__false__positives__metric"/>
        <childnode refid="1697" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1706">
        <label>lbann::top_k_categorical_accuracy_metric</label>
        <link refid="classlbann_1_1top__k__categorical__accuracy__metric"/>
        <childnode refid="1697" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1699">
        <label>lbann::boolean_false_negatives_metric</label>
        <link refid="classlbann_1_1boolean__false__negatives__metric"/>
        <childnode refid="1697" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1704">
        <label>lbann::pearson_correlation_metric</label>
        <link refid="classlbann_1_1pearson__correlation__metric"/>
        <childnode refid="1697" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1701">
        <label>lbann::categorical_accuracy_metric</label>
        <link refid="classlbann_1_1categorical__accuracy__metric"/>
        <childnode refid="1697" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1702">
        <label>lbann::mean_absolute_deviation_metric</label>
        <link refid="classlbann_1_1mean__absolute__deviation__metric"/>
        <childnode refid="1697" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1705">
        <label>lbann::r2_metric</label>
        <link refid="classlbann_1_1r2__metric"/>
        <childnode refid="1697" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1710">
        <label>lbann::io_layer</label>
        <link refid="classlbann_1_1io__layer"/>
        <childnode refid="1711" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1722">
        <label>lbann::generic_input_layer</label>
        <link refid="classlbann_1_1generic__input__layer"/>
        <childnode refid="1710" relation="public-inheritance">
        </childnode>
        <childnode refid="1723" relation="usage">
          <edgelabel>m_training_dataset</edgelabel>
          <edgelabel>m_validation_dataset</edgelabel>
          <edgelabel>m_testing_dataset</edgelabel>
        </childnode>
        <childnode refid="1719" relation="usage">
          <edgelabel>io_buffer</edgelabel>
        </childnode>
      </node>
      <node id="1709">
        <label>lbann::generic_target_layer</label>
        <link refid="classlbann_1_1generic__target__layer"/>
        <childnode refid="1710" relation="public-inheritance">
        </childnode>
        <childnode refid="1719" relation="usage">
          <edgelabel>io_buffer</edgelabel>
        </childnode>
        <childnode refid="1722" relation="usage">
          <edgelabel>m_paired_input_layer</edgelabel>
        </childnode>
      </node>
      <node id="1712">
        <label>lbann::model</label>
        <link refid="classlbann_1_1model"/>
        <childnode refid="1713" relation="usage">
          <edgelabel>m_default_optimizer</edgelabel>
        </childnode>
        <childnode refid="1708" relation="usage">
          <edgelabel>m_comm</edgelabel>
        </childnode>
        <childnode refid="1718" relation="usage">
          <edgelabel>m_objective_function</edgelabel>
        </childnode>
      </node>
      <node id="1720">
        <label>lbann::fetch_data_functor</label>
        <link refid="classlbann_1_1fetch__data__functor"/>
      </node>
      <node id="1707">
        <label>lbann::metric</label>
        <link refid="classlbann_1_1metric"/>
        <childnode refid="1708" relation="usage">
          <edgelabel>m_comm</edgelabel>
        </childnode>
        <childnode refid="1709" relation="usage">
          <edgelabel>m_target_layer</edgelabel>
        </childnode>
      </node>
      <node id="1713">
        <label>lbann::optimizer</label>
        <link refid="classlbann_1_1optimizer"/>
        <childnode refid="1708" relation="usage">
          <edgelabel>m_comm</edgelabel>
        </childnode>
        <childnode refid="1714" relation="usage">
          <edgelabel>m_cudnn</edgelabel>
        </childnode>
        <childnode refid="1715" relation="usage">
          <edgelabel>m_gradient_allreduce_req</edgelabel>
        </childnode>
        <childnode refid="1716" relation="usage">
          <edgelabel>m_weights</edgelabel>
        </childnode>
      </node>
      <node id="1714">
        <label>lbann::cudnn::cudnn_manager</label>
        <link refid="classlbann_1_1cudnn_1_1cudnn__manager"/>
      </node>
      <node id="1717">
        <label>lbann::weights_initializer</label>
        <link refid="classlbann_1_1weights__initializer"/>
        <childnode refid="1708" relation="usage">
          <edgelabel>m_comm</edgelabel>
        </childnode>
      </node>
      <node id="1723">
        <label>lbann::dataset</label>
        <link refid="classlbann_1_1dataset"/>
      </node>
      <node id="1719">
        <label>lbann::generic_io_buffer</label>
        <link refid="classlbann_1_1generic__io__buffer"/>
        <childnode refid="1720" relation="usage">
          <edgelabel>fetch_data_fn</edgelabel>
        </childnode>
        <childnode refid="1708" relation="usage">
          <edgelabel>m_comm</edgelabel>
        </childnode>
        <childnode refid="1721" relation="usage">
          <edgelabel>update_data_reader_fn</edgelabel>
        </childnode>
      </node>
      <node id="1711">
        <label>lbann::Layer</label>
        <link refid="classlbann_1_1Layer"/>
        <childnode refid="1708" relation="usage">
          <edgelabel>m_comm</edgelabel>
        </childnode>
        <childnode refid="1712" relation="usage">
          <edgelabel>m_model</edgelabel>
        </childnode>
        <childnode refid="1714" relation="usage">
          <edgelabel>m_cudnn</edgelabel>
        </childnode>
      </node>
      <node id="1716">
        <label>lbann::weights</label>
        <link refid="classlbann_1_1weights"/>
        <childnode refid="1713" relation="usage">
          <edgelabel>m_optimizer</edgelabel>
        </childnode>
        <childnode refid="1708" relation="usage">
          <edgelabel>m_comm</edgelabel>
        </childnode>
        <childnode refid="1717" relation="usage">
          <edgelabel>m_initializer</edgelabel>
        </childnode>
        <childnode refid="1714" relation="usage">
          <edgelabel>m_cudnn</edgelabel>
        </childnode>
      </node>
      <node id="1708">
        <label>lbann::lbann_comm</label>
        <link refid="classlbann_1_1lbann__comm"/>
      </node>
      <node id="1715">
        <label>lbann::Al::request</label>
        <link refid="structlbann_1_1Al_1_1request"/>
      </node>
      <node id="1721">
        <label>lbann::update_data_reader_functor</label>
        <link refid="classlbann_1_1update__data__reader__functor"/>
      </node>
      <node id="1718">
        <label>lbann::objective_function</label>
        <link refid="classlbann_1_1objective__function"/>
      </node>
    </collaborationgraph>
    <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/metrics/metric.hpp" line="90" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/metrics/metric.hpp" bodystart="90" bodyend="187"/>
    <listofallmembers>
      <member refid="classlbann_1_1metric_1a2a4498d41f77da8585552f485caab167" prot="public" virt="pure-virtual"><scope>lbann::metric</scope><name>copy</name></member>
      <member refid="classlbann_1_1metric_1ab4e14cb4296c7b47719071b210448dec" prot="public" virt="non-virtual"><scope>lbann::metric</scope><name>evaluate</name></member>
      <member refid="classlbann_1_1metric_1aab79147ff480675db2e01d7a889a4296" prot="protected" virt="pure-virtual"><scope>lbann::metric</scope><name>evaluate_compute</name></member>
      <member refid="classlbann_1_1metric_1a464120720df6bfdf91bffe353e562964" prot="protected" virt="non-virtual"><scope>lbann::metric</scope><name>get_comm</name></member>
      <member refid="classlbann_1_1metric_1a686239cad1f25628c9b298f9233cc9f3" prot="public" virt="non-virtual"><scope>lbann::metric</scope><name>get_evaluate_time</name></member>
      <member refid="classlbann_1_1metric_1a7f97c998fa64475f9ef7f066237b0695" prot="public" virt="non-virtual"><scope>lbann::metric</scope><name>get_layer_pointers</name></member>
      <member refid="classlbann_1_1metric_1a2926c6b391dc8c3e3d13d0199317c570" prot="public" virt="non-virtual"><scope>lbann::metric</scope><name>get_mean_value</name></member>
      <member refid="classlbann_1_1metric_1a489feb28d318bd8405133f9f8c94cc10" prot="public" virt="non-virtual"><scope>lbann::metric</scope><name>get_statistics_num_samples</name></member>
      <member refid="classlbann_1_1metric_1aba7f7a12aeba6619f7b4330e9075f76e" prot="public" virt="non-virtual"><scope>lbann::metric</scope><name>get_target_layer</name></member>
      <member refid="classlbann_1_1metric_1a13fd302dec85190b877f7146529e516c" prot="public" virt="virtual"><scope>lbann::metric</scope><name>get_unit</name></member>
      <member refid="classlbann_1_1metric_1ab3d1ec8247352467790be036a07cfc2b" prot="public" virt="virtual"><scope>lbann::metric</scope><name>load_from_checkpoint_shared</name></member>
      <member refid="classlbann_1_1metric_1a547077709911e30c7d070545936c9c85" prot="private" virt="non-virtual"><scope>lbann::metric</scope><name>m_comm</name></member>
      <member refid="classlbann_1_1metric_1a4c77a1bd1db77e9d837a72128e3d687f" prot="private" virt="non-virtual"><scope>lbann::metric</scope><name>m_evaluate_time</name></member>
      <member refid="classlbann_1_1metric_1a9949d8aceedbc113aa2c356046ed73fc" prot="private" virt="non-virtual"><scope>lbann::metric</scope><name>m_statistics</name></member>
      <member refid="classlbann_1_1metric_1a2bf6c53efb1b525bfa63a8c3167968d9" prot="private" virt="non-virtual"><scope>lbann::metric</scope><name>m_target_layer</name></member>
      <member refid="classlbann_1_1metric_1a3cd2d4f7dcbf94f70b3b8560a3171d9d" prot="public" virt="non-virtual"><scope>lbann::metric</scope><name>metric</name></member>
      <member refid="classlbann_1_1metric_1ac2fc993e31fed5298c4e321b315b77a0" prot="public" virt="non-virtual"><scope>lbann::metric</scope><name>metric</name></member>
      <member refid="classlbann_1_1metric_1af455d7b6874d3491bc04f0f2ebfcab51" prot="public" virt="pure-virtual"><scope>lbann::metric</scope><name>name</name></member>
      <member refid="classlbann_1_1metric_1a4324342dab4892199a47df1d78b2cef5" prot="public" virt="non-virtual"><scope>lbann::metric</scope><name>operator=</name></member>
      <member refid="classlbann_1_1metric_1ab93708cd870277eb7865655e075620c9" prot="public" virt="non-virtual"><scope>lbann::metric</scope><name>reset_counters</name></member>
      <member refid="classlbann_1_1metric_1af7747feb8bc7a5ee039876a70fae1b0c" prot="public" virt="non-virtual"><scope>lbann::metric</scope><name>reset_statistics</name></member>
      <member refid="classlbann_1_1metric_1a27a3d8c073b85297b902ba35137926b4" prot="public" virt="non-virtual"><scope>lbann::metric</scope><name>reset_statistics</name></member>
      <member refid="classlbann_1_1metric_1a9728b02a240dfd9faa61b7dfeb3feede" prot="public" virt="virtual"><scope>lbann::metric</scope><name>save_to_checkpoint_shared</name></member>
      <member refid="classlbann_1_1metric_1a5de0c336b93f2c03f37f38047d401f99" prot="public" virt="non-virtual"><scope>lbann::metric</scope><name>set_layer_pointers</name></member>
      <member refid="classlbann_1_1metric_1a8367719e2c7816a4c718c049ea97b709" prot="public" virt="non-virtual"><scope>lbann::metric</scope><name>set_target_layer</name></member>
      <member refid="classlbann_1_1metric_1a898d23e410297378db2fe9f8d1754fe0" prot="public" virt="virtual"><scope>lbann::metric</scope><name>setup</name></member>
      <member refid="classlbann_1_1metric_1ae173eae981ed474f125a5462e734802b" prot="public" virt="virtual"><scope>lbann::metric</scope><name>~metric</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
