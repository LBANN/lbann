<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classlbann_1_1lbann__callback__checksmall" kind="class" language="C++" prot="public">
    <compoundname>lbann::lbann_callback_checksmall</compoundname>
    <basecompoundref refid="classlbann_1_1lbann__callback" prot="public" virt="non-virtual">lbann::lbann_callback</basecompoundref>
    <includes refid="callback__checksmall_8hpp" local="no">callback_checksmall.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classlbann_1_1lbann__callback__checksmall_1a2c37cd93bca10f6fb42348c2e6b0016e" prot="private" static="no" mutable="no">
        <type>const DataType</type>
        <definition>const DataType lbann::lbann_callback_checksmall::m_threshold</definition>
        <argsstring></argsstring>
        <name>m_threshold</name>
        <initializer>= std::sqrt(std::numeric_limits&lt;DataType&gt;::min())</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Smallest allowable value. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/callbacks/callback_checksmall.hpp" line="65" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/callbacks/callback_checksmall.hpp" bodystart="65" bodyend="-1"/>
        <referencedby refid="classlbann_1_1lbann__callback__checksmall_1afe78f539ba3b2ad3e6ae8c468850052c" compoundref="callback__checksmall_8cpp" startline="77" endline="92">is_good</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classlbann_1_1lbann__callback__checksmall_1a2a5769a9309807f6952212d5ea3a4466" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>lbann::lbann_callback_checksmall::lbann_callback_checksmall</definition>
        <argsstring>()</argsstring>
        <name>lbann_callback_checksmall</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/callbacks/callback_checksmall.hpp" line="49" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/callbacks/callback_checksmall.hpp" bodystart="49" bodyend="49"/>
        <references refid="classlbann_1_1lbann__callback__checksmall_1a9488b223c8ae4beb87a6bd6d01c6d14d">operator=</references>
        <referencedby refid="classlbann_1_1lbann__callback__checksmall_1ae0601cd90b165049063783d4d501ffde" compoundref="callback__checksmall_8hpp" startline="53" endline="55">copy</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1lbann__callback__checksmall_1a8e08286cc2ded6e47297f76fcdbf8f32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>lbann::lbann_callback_checksmall::lbann_callback_checksmall</definition>
        <argsstring>(const lbann_callback_checksmall &amp;)=default</argsstring>
        <name>lbann_callback_checksmall</name>
        <param>
          <type>const <ref refid="classlbann_1_1lbann__callback__checksmall" kindref="compound">lbann_callback_checksmall</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/callbacks/callback_checksmall.hpp" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1lbann__callback__checksmall_1a9488b223c8ae4beb87a6bd6d01c6d14d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classlbann_1_1lbann__callback__checksmall" kindref="compound">lbann_callback_checksmall</ref> &amp;</type>
        <definition>lbann_callback_checksmall&amp; lbann::lbann_callback_checksmall::operator=</definition>
        <argsstring>(const lbann_callback_checksmall &amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classlbann_1_1lbann__callback__checksmall" kindref="compound">lbann_callback_checksmall</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/callbacks/callback_checksmall.hpp" line="51" column="1"/>
        <referencedby refid="classlbann_1_1lbann__callback__checksmall_1a2a5769a9309807f6952212d5ea3a4466" compoundref="callback__checksmall_8hpp" startline="49" endline="49">lbann_callback_checksmall</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1lbann__callback__checksmall_1ae0601cd90b165049063783d4d501ffde" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classlbann_1_1lbann__callback__checksmall" kindref="compound">lbann_callback_checksmall</ref> *</type>
        <definition>lbann_callback_checksmall* lbann::lbann_callback_checksmall::copy</definition>
        <argsstring>() const override</argsstring>
        <name>copy</name>
        <reimplements refid="classlbann_1_1lbann__callback_1a9f545d1269a8c7af335625d049691f26">copy</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/callbacks/callback_checksmall.hpp" line="53" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/callbacks/callback_checksmall.hpp" bodystart="53" bodyend="55"/>
        <references refid="classlbann_1_1lbann__callback__checksmall_1a2a5769a9309807f6952212d5ea3a4466" compoundref="callback__checksmall_8hpp" startline="49" endline="49">lbann_callback_checksmall</references>
        <references refid="classlbann_1_1lbann__callback__checksmall_1a2f50695feb1444145bae251f2e94b721" compoundref="callback__checksmall_8cpp" startline="35" endline="48">on_forward_prop_end</references>
        <references refid="classlbann_1_1lbann__callback__checksmall_1aade56a328c4b9df28c0cd979eed9e5ff" compoundref="callback__checksmall_8cpp" startline="50" endline="62">on_backward_prop_end</references>
        <references refid="classlbann_1_1lbann__callback__checksmall_1a00f1e6ad712638a107667a3e6695a6f0" compoundref="callback__checksmall_8cpp" startline="64" endline="75">on_batch_end</references>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1lbann__callback__checksmall_1a2f50695feb1444145bae251f2e94b721" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void lbann::lbann_callback_checksmall::on_forward_prop_end</definition>
        <argsstring>(model *m, Layer *l) override</argsstring>
        <name>on_forward_prop_end</name>
        <reimplements refid="classlbann_1_1lbann__callback_1a5eff0a59fbce98a981d9cdd0547a3ad5">on_forward_prop_end</reimplements>
        <param>
          <type><ref refid="classlbann_1_1model" kindref="compound">model</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="classlbann_1_1Layer" kindref="compound">Layer</ref> *</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check that activations are good. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/callbacks/callback_checksmall.hpp" line="57" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/callbacks/callback_checksmall.cpp" bodystart="35" bodyend="48"/>
        <references refid="classlbann_1_1Layer_1a1134b1a4385af199d7272c5aa827fa99" compoundref="layer_8cpp" startline="376" endline="378">lbann::Layer::get_activations</references>
        <references refid="classlbann_1_1lbann__callback__checksmall_1afe78f539ba3b2ad3e6ae8c468850052c" compoundref="callback__checksmall_8cpp" startline="77" endline="92">is_good</references>
        <references refid="classlbann_1_1lbann__callback__checksmall_1acbdd897ecbe5a27b59db15ae7662e0f9" compoundref="callback__checksmall_8hpp" startline="62" endline="62">name</references>
        <references refid="classlbann_1_1model_1a9e1cfe449d2f4858a32994f6be0042fb" compoundref="model_8hpp" startline="123" endline="125">lbann::model::get_comm</references>
        <references refid="classlbann_1_1lbann__comm_1a4519335d6772dab3c36517618260d48a" compoundref="comm_8hpp" startline="120" endline="122">lbann::lbann_comm::get_rank_in_world</references>
        <references refid="classlbann_1_1Layer_1a80027550202fa7dbb1dd55fa8a66c84b" compoundref="layer_8hpp" startline="85" endline="85">lbann::Layer::get_name</references>
        <references refid="classlbann_1_1model_1ad0cdcba177434b52dc9c4a97be183a92" compoundref="model_8hpp" startline="132" endline="134">lbann::model::get_cur_step</references>
        <referencedby refid="classlbann_1_1lbann__callback__checksmall_1ae0601cd90b165049063783d4d501ffde" compoundref="callback__checksmall_8hpp" startline="53" endline="55">copy</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1lbann__callback__checksmall_1aade56a328c4b9df28c0cd979eed9e5ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void lbann::lbann_callback_checksmall::on_backward_prop_end</definition>
        <argsstring>(model *m) override</argsstring>
        <name>on_backward_prop_end</name>
        <reimplements refid="classlbann_1_1lbann__callback_1af183624e63ba65e0003fa988f53dee0c">on_backward_prop_end</reimplements>
        <param>
          <type><ref refid="classlbann_1_1model" kindref="compound">model</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check that gradients are good. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/callbacks/callback_checksmall.hpp" line="59" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/callbacks/callback_checksmall.cpp" bodystart="50" bodyend="62"/>
        <references refid="classlbann_1_1model_1ac0a89794f1f51e7c502fff2745c973e6" compoundref="model_8hpp" startline="120" endline="120">lbann::model::get_weights</references>
        <references refid="classlbann_1_1lbann__callback__checksmall_1afe78f539ba3b2ad3e6ae8c468850052c" compoundref="callback__checksmall_8cpp" startline="77" endline="92">is_good</references>
        <references refid="classlbann_1_1optimizer_1a12b7dbc72eb2de78d6ad798b8939f349" compoundref="optimizer_8cpp" startline="124" endline="164">lbann::optimizer::get_gradient</references>
        <references refid="classlbann_1_1lbann__callback__checksmall_1acbdd897ecbe5a27b59db15ae7662e0f9" compoundref="callback__checksmall_8hpp" startline="62" endline="62">name</references>
        <references refid="classlbann_1_1model_1a9e1cfe449d2f4858a32994f6be0042fb" compoundref="model_8hpp" startline="123" endline="125">lbann::model::get_comm</references>
        <references refid="classlbann_1_1lbann__comm_1a4519335d6772dab3c36517618260d48a" compoundref="comm_8hpp" startline="120" endline="122">lbann::lbann_comm::get_rank_in_world</references>
        <references refid="classlbann_1_1model_1ad0cdcba177434b52dc9c4a97be183a92" compoundref="model_8hpp" startline="132" endline="134">lbann::model::get_cur_step</references>
        <referencedby refid="classlbann_1_1lbann__callback__checksmall_1ae0601cd90b165049063783d4d501ffde" compoundref="callback__checksmall_8hpp" startline="53" endline="55">copy</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1lbann__callback__checksmall_1a00f1e6ad712638a107667a3e6695a6f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void lbann::lbann_callback_checksmall::on_batch_end</definition>
        <argsstring>(model *m) override</argsstring>
        <name>on_batch_end</name>
        <reimplements refid="classlbann_1_1lbann__callback_1a895ca577e358601fcae5c04749f60535">on_batch_end</reimplements>
        <param>
          <type><ref refid="classlbann_1_1model" kindref="compound">model</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check that weights are good. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/callbacks/callback_checksmall.hpp" line="61" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/callbacks/callback_checksmall.cpp" bodystart="64" bodyend="75"/>
        <references refid="classlbann_1_1model_1ac0a89794f1f51e7c502fff2745c973e6" compoundref="model_8hpp" startline="120" endline="120">lbann::model::get_weights</references>
        <references refid="classlbann_1_1lbann__callback__checksmall_1afe78f539ba3b2ad3e6ae8c468850052c" compoundref="callback__checksmall_8cpp" startline="77" endline="92">is_good</references>
        <references refid="classlbann_1_1lbann__callback__checksmall_1acbdd897ecbe5a27b59db15ae7662e0f9" compoundref="callback__checksmall_8hpp" startline="62" endline="62">name</references>
        <references refid="classlbann_1_1model_1a9e1cfe449d2f4858a32994f6be0042fb" compoundref="model_8hpp" startline="123" endline="125">lbann::model::get_comm</references>
        <references refid="classlbann_1_1lbann__comm_1a4519335d6772dab3c36517618260d48a" compoundref="comm_8hpp" startline="120" endline="122">lbann::lbann_comm::get_rank_in_world</references>
        <references refid="classlbann_1_1model_1ad0cdcba177434b52dc9c4a97be183a92" compoundref="model_8hpp" startline="132" endline="134">lbann::model::get_cur_step</references>
        <referencedby refid="classlbann_1_1lbann__callback__checksmall_1ae0601cd90b165049063783d4d501ffde" compoundref="callback__checksmall_8hpp" startline="53" endline="55">copy</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlbann_1_1lbann__callback__checksmall_1acbdd897ecbe5a27b59db15ae7662e0f9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string lbann::lbann_callback_checksmall::name</definition>
        <argsstring>() const override</argsstring>
        <name>name</name>
        <reimplements refid="classlbann_1_1lbann__callback_1a7522c7a14f1d6a1ea762cc2d7248eb3a">name</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return this callback&apos;s name. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/callbacks/callback_checksmall.hpp" line="62" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/callbacks/callback_checksmall.hpp" bodystart="62" bodyend="62"/>
        <referencedby refid="classlbann_1_1lbann__callback__checksmall_1a2f50695feb1444145bae251f2e94b721" compoundref="callback__checksmall_8cpp" startline="35" endline="48">on_forward_prop_end</referencedby>
        <referencedby refid="classlbann_1_1lbann__callback__checksmall_1aade56a328c4b9df28c0cd979eed9e5ff" compoundref="callback__checksmall_8cpp" startline="50" endline="62">on_backward_prop_end</referencedby>
        <referencedby refid="classlbann_1_1lbann__callback__checksmall_1a00f1e6ad712638a107667a3e6695a6f0" compoundref="callback__checksmall_8cpp" startline="64" endline="75">on_batch_end</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classlbann_1_1lbann__callback__checksmall_1afe78f539ba3b2ad3e6ae8c468850052c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lbann::lbann_callback_checksmall::is_good</definition>
        <argsstring>(const AbsDistMat &amp;m)</argsstring>
        <name>is_good</name>
        <param>
          <type>const <ref refid="base_8hpp_1a9a697a504ae84010e7439ffec862b470" kindref="member">AbsDistMat</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true if there are no problems with m. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/callbacks/callback_checksmall.hpp" line="67" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/callbacks/callback_checksmall.cpp" bodystart="77" bodyend="92"/>
        <references refid="classlbann_1_1lbann__callback__checksmall_1a2c37cd93bca10f6fb42348c2e6b0016e" compoundref="callback__checksmall_8hpp" startline="65">m_threshold</references>
        <referencedby refid="classlbann_1_1lbann__callback__checksmall_1a2f50695feb1444145bae251f2e94b721" compoundref="callback__checksmall_8cpp" startline="35" endline="48">on_forward_prop_end</referencedby>
        <referencedby refid="classlbann_1_1lbann__callback__checksmall_1aade56a328c4b9df28c0cd979eed9e5ff" compoundref="callback__checksmall_8cpp" startline="50" endline="62">on_backward_prop_end</referencedby>
        <referencedby refid="classlbann_1_1lbann__callback__checksmall_1a00f1e6ad712638a107667a3e6695a6f0" compoundref="callback__checksmall_8cpp" startline="64" endline="75">on_batch_end</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Check matrices for whether they include any very small values to avoid getting denormalized values. Denormalized values can significantly slow floating point computations. Since we often square values, the check is based on the square root of the smallest floating point value. This will kill the rank if such values are discovered. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="1333">
        <label>lbann::lbann_callback</label>
        <link refid="classlbann_1_1lbann__callback"/>
      </node>
      <node id="1332">
        <label>lbann::lbann_callback_checksmall</label>
        <link refid="classlbann_1_1lbann__callback__checksmall"/>
        <childnode refid="1333" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1335">
        <label>lbann::lbann_callback</label>
        <link refid="classlbann_1_1lbann__callback"/>
        <childnode refid="1336" relation="usage">
          <edgelabel>m_summarizer</edgelabel>
        </childnode>
      </node>
      <node id="1336">
        <label>lbann::lbann_summary</label>
        <link refid="classlbann_1_1lbann__summary"/>
      </node>
      <node id="1334">
        <label>lbann::lbann_callback_checksmall</label>
        <link refid="classlbann_1_1lbann__callback__checksmall"/>
        <childnode refid="1335" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/callbacks/callback_checksmall.hpp" line="44" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/include/lbann/callbacks/callback_checksmall.hpp" bodystart="44" bodyend="68"/>
    <listofallmembers>
      <member refid="classlbann_1_1lbann__callback__checksmall_1ae0601cd90b165049063783d4d501ffde" prot="public" virt="virtual"><scope>lbann::lbann_callback_checksmall</scope><name>copy</name></member>
      <member refid="classlbann_1_1lbann__callback_1acec888932129f93ba2a0077192467c9e" prot="public" virt="non-virtual"><scope>lbann::lbann_callback_checksmall</scope><name>get_batch_interval</name></member>
      <member refid="classlbann_1_1lbann__callback__checksmall_1afe78f539ba3b2ad3e6ae8c468850052c" prot="private" virt="non-virtual"><scope>lbann::lbann_callback_checksmall</scope><name>is_good</name></member>
      <member refid="classlbann_1_1lbann__callback_1a679057298a41ddd47f08c157f756c584" prot="public" virt="non-virtual"><scope>lbann::lbann_callback_checksmall</scope><name>lbann_callback</name></member>
      <member refid="classlbann_1_1lbann__callback_1a91d994616b8bf98685ac32939228f96a" prot="public" virt="non-virtual"><scope>lbann::lbann_callback_checksmall</scope><name>lbann_callback</name></member>
      <member refid="classlbann_1_1lbann__callback__checksmall_1a2a5769a9309807f6952212d5ea3a4466" prot="public" virt="non-virtual"><scope>lbann::lbann_callback_checksmall</scope><name>lbann_callback_checksmall</name></member>
      <member refid="classlbann_1_1lbann__callback__checksmall_1a8e08286cc2ded6e47297f76fcdbf8f32" prot="public" virt="non-virtual"><scope>lbann::lbann_callback_checksmall</scope><name>lbann_callback_checksmall</name></member>
      <member refid="classlbann_1_1lbann__callback_1a6126e310e9924398c18ccf76bb91c705" prot="protected" virt="non-virtual"><scope>lbann::lbann_callback_checksmall</scope><name>m_batch_interval</name></member>
      <member refid="classlbann_1_1lbann__callback_1a277d46138184f85f161a8263b8322c76" prot="protected" virt="non-virtual"><scope>lbann::lbann_callback_checksmall</scope><name>m_summarizer</name></member>
      <member refid="classlbann_1_1lbann__callback__checksmall_1a2c37cd93bca10f6fb42348c2e6b0016e" prot="private" virt="non-virtual"><scope>lbann::lbann_callback_checksmall</scope><name>m_threshold</name></member>
      <member refid="classlbann_1_1lbann__callback__checksmall_1acbdd897ecbe5a27b59db15ae7662e0f9" prot="public" virt="virtual"><scope>lbann::lbann_callback_checksmall</scope><name>name</name></member>
      <member refid="classlbann_1_1lbann__callback_1a2c0709a26179d115ff85b7561786ee27" prot="public" virt="virtual"><scope>lbann::lbann_callback_checksmall</scope><name>on_backward_prop_begin</name></member>
      <member refid="classlbann_1_1lbann__callback_1abeb1e486e259fd358332abf1e952f630" prot="public" virt="virtual"><scope>lbann::lbann_callback_checksmall</scope><name>on_backward_prop_begin</name></member>
      <member refid="classlbann_1_1lbann__callback__checksmall_1aade56a328c4b9df28c0cd979eed9e5ff" prot="public" virt="virtual"><scope>lbann::lbann_callback_checksmall</scope><name>on_backward_prop_end</name></member>
      <member refid="classlbann_1_1lbann__callback_1aba03b59c056ace8094095c08e39b9ac4" prot="public" virt="virtual" ambiguityscope="lbann::lbann_callback::"><scope>lbann::lbann_callback_checksmall</scope><name>on_backward_prop_end</name></member>
      <member refid="classlbann_1_1lbann__callback_1a9ecf4e44cd4021cdd687de14c850cc83" prot="public" virt="virtual"><scope>lbann::lbann_callback_checksmall</scope><name>on_batch_begin</name></member>
      <member refid="classlbann_1_1lbann__callback__checksmall_1a00f1e6ad712638a107667a3e6695a6f0" prot="public" virt="virtual"><scope>lbann::lbann_callback_checksmall</scope><name>on_batch_end</name></member>
      <member refid="classlbann_1_1lbann__callback_1a3462e54126adbd0082c22c98d8de5468" prot="public" virt="virtual"><scope>lbann::lbann_callback_checksmall</scope><name>on_batch_evaluate_begin</name></member>
      <member refid="classlbann_1_1lbann__callback_1ad10891b8ab3de74ee1a70e6255e7d58a" prot="public" virt="virtual"><scope>lbann::lbann_callback_checksmall</scope><name>on_batch_evaluate_end</name></member>
      <member refid="classlbann_1_1lbann__callback_1a4ed9498763412a55953fff71ee3a9456" prot="public" virt="virtual"><scope>lbann::lbann_callback_checksmall</scope><name>on_epoch_begin</name></member>
      <member refid="classlbann_1_1lbann__callback_1a1fc71110e7f754bf73c9e0f344a448a5" prot="public" virt="virtual"><scope>lbann::lbann_callback_checksmall</scope><name>on_epoch_end</name></member>
      <member refid="classlbann_1_1lbann__callback_1a4a2cff48a688bb56ed14b8b53344f945" prot="public" virt="virtual"><scope>lbann::lbann_callback_checksmall</scope><name>on_evaluate_forward_prop_begin</name></member>
      <member refid="classlbann_1_1lbann__callback_1a044174864e4981a1dac093d58e8c4d6c" prot="public" virt="virtual"><scope>lbann::lbann_callback_checksmall</scope><name>on_evaluate_forward_prop_begin</name></member>
      <member refid="classlbann_1_1lbann__callback_1a0794f3fb88db6fef53f0e2f235f94424" prot="public" virt="virtual"><scope>lbann::lbann_callback_checksmall</scope><name>on_evaluate_forward_prop_end</name></member>
      <member refid="classlbann_1_1lbann__callback_1ae23c5a61b81dbdfbd79736ac2b6035aa" prot="public" virt="virtual"><scope>lbann::lbann_callback_checksmall</scope><name>on_evaluate_forward_prop_end</name></member>
      <member refid="classlbann_1_1lbann__callback_1a22ed977371173105b4aad3a20b9c59dc" prot="public" virt="virtual"><scope>lbann::lbann_callback_checksmall</scope><name>on_forward_prop_begin</name></member>
      <member refid="classlbann_1_1lbann__callback_1ab96adb1d77180e00fdd668cd381323fd" prot="public" virt="virtual"><scope>lbann::lbann_callback_checksmall</scope><name>on_forward_prop_begin</name></member>
      <member refid="classlbann_1_1lbann__callback__checksmall_1a2f50695feb1444145bae251f2e94b721" prot="public" virt="virtual"><scope>lbann::lbann_callback_checksmall</scope><name>on_forward_prop_end</name></member>
      <member refid="classlbann_1_1lbann__callback_1a79a0bb407852d7b330b74373647ffe46" prot="public" virt="virtual" ambiguityscope="lbann::lbann_callback::"><scope>lbann::lbann_callback_checksmall</scope><name>on_forward_prop_end</name></member>
      <member refid="classlbann_1_1lbann__callback_1a1a9248b305f06419889c1b3b0f0893d8" prot="public" virt="virtual"><scope>lbann::lbann_callback_checksmall</scope><name>on_optimize_begin</name></member>
      <member refid="classlbann_1_1lbann__callback_1a497e750da160e0071ce8864ccc3a1344" prot="public" virt="virtual"><scope>lbann::lbann_callback_checksmall</scope><name>on_optimize_begin</name></member>
      <member refid="classlbann_1_1lbann__callback_1a235195d5fa4461835b861a03a5c0278f" prot="public" virt="virtual"><scope>lbann::lbann_callback_checksmall</scope><name>on_optimize_end</name></member>
      <member refid="classlbann_1_1lbann__callback_1a4653e2903bfd3903709a81eaf7eabc1a" prot="public" virt="virtual"><scope>lbann::lbann_callback_checksmall</scope><name>on_optimize_end</name></member>
      <member refid="classlbann_1_1lbann__callback_1ace7452239c9ad7aa6247e9496adbcffe" prot="public" virt="virtual"><scope>lbann::lbann_callback_checksmall</scope><name>on_phase_end</name></member>
      <member refid="classlbann_1_1lbann__callback_1a716bff45bdc5a88eed09c2231f5bc93a" prot="public" virt="virtual"><scope>lbann::lbann_callback_checksmall</scope><name>on_test_begin</name></member>
      <member refid="classlbann_1_1lbann__callback_1accbad4dd004c1ced33642db6398b2efe" prot="public" virt="virtual"><scope>lbann::lbann_callback_checksmall</scope><name>on_test_end</name></member>
      <member refid="classlbann_1_1lbann__callback_1a7c8f0d211967ccc5219144e92571ab26" prot="public" virt="virtual"><scope>lbann::lbann_callback_checksmall</scope><name>on_train_begin</name></member>
      <member refid="classlbann_1_1lbann__callback_1af28078b0ddaef45124465bef01eefedf" prot="public" virt="virtual"><scope>lbann::lbann_callback_checksmall</scope><name>on_train_end</name></member>
      <member refid="classlbann_1_1lbann__callback_1a2bde303671110519388d9962bc3e5583" prot="public" virt="virtual"><scope>lbann::lbann_callback_checksmall</scope><name>on_validation_begin</name></member>
      <member refid="classlbann_1_1lbann__callback_1adc16e42e5064dc2dc8d84dfbfc1325eb" prot="public" virt="virtual"><scope>lbann::lbann_callback_checksmall</scope><name>on_validation_end</name></member>
      <member refid="classlbann_1_1lbann__callback__checksmall_1a9488b223c8ae4beb87a6bd6d01c6d14d" prot="public" virt="non-virtual"><scope>lbann::lbann_callback_checksmall</scope><name>operator=</name></member>
      <member refid="classlbann_1_1lbann__callback_1a66b0a8c00a273669fa782ece59e8898b" prot="public" virt="non-virtual" ambiguityscope="lbann::lbann_callback::"><scope>lbann::lbann_callback_checksmall</scope><name>operator=</name></member>
      <member refid="classlbann_1_1lbann__callback_1a02d924df2f8ca851578dc76d9015e48d" prot="public" virt="non-virtual"><scope>lbann::lbann_callback_checksmall</scope><name>set_summarizer</name></member>
      <member refid="classlbann_1_1lbann__callback_1aab5086e27d9bb0a7c7ee8ffc1bc58671" prot="public" virt="virtual"><scope>lbann::lbann_callback_checksmall</scope><name>setup</name></member>
      <member refid="classlbann_1_1lbann__callback_1ac91abaec389f8d2547512c45ae587304" prot="public" virt="virtual"><scope>lbann::lbann_callback_checksmall</scope><name>~lbann_callback</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
