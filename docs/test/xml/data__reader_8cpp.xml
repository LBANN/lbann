<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="data__reader_8cpp" kind="file" language="C++">
    <compoundname>data_reader.cpp</compoundname>
    <includes refid="data__reader_8hpp" local="yes">lbann/data_readers/data_reader.hpp</includes>
    <includes refid="generic__data__store_8hpp" local="yes">lbann/data_store/generic_data_store.hpp</includes>
    <includes local="no">omp.h</includes>
    <incdepgraph>
      <node id="19002">
        <label>sys/stat.h</label>
      </node>
      <node id="19005">
        <label>lbann/data_readers/image_preprocessor.hpp</label>
        <link refid="image__preprocessor_8hpp"/>
        <childnode refid="18987" relation="include">
        </childnode>
        <childnode refid="18979" relation="include">
        </childnode>
      </node>
      <node id="19009">
        <label>lbann/data_store/generic_data_store.hpp</label>
        <link refid="generic__data__store_8hpp"/>
        <childnode refid="18979" relation="include">
        </childnode>
        <childnode refid="18989" relation="include">
        </childnode>
        <childnode refid="18990" relation="include">
        </childnode>
        <childnode refid="19010" relation="include">
        </childnode>
      </node>
      <node id="18993">
        <label>lbann/io/persist.hpp</label>
        <link refid="persist_8hpp"/>
        <childnode refid="18979" relation="include">
        </childnode>
        <childnode refid="18980" relation="include">
        </childnode>
      </node>
      <node id="18980">
        <label>El.hpp</label>
      </node>
      <node id="18979">
        <label>lbann/base.hpp</label>
        <link refid="base_8hpp"/>
        <childnode refid="18980" relation="include">
        </childnode>
        <childnode refid="18981" relation="include">
        </childnode>
        <childnode refid="18982" relation="include">
        </childnode>
        <childnode refid="18987" relation="include">
        </childnode>
      </node>
      <node id="19006">
        <label>cassert</label>
      </node>
      <node id="19004">
        <label>fcntl.h</label>
      </node>
      <node id="18998">
        <label>string</label>
      </node>
      <node id="18977">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/data_readers/data_reader.cpp</label>
        <link refid="data__reader_8cpp"/>
        <childnode refid="18978" relation="include">
        </childnode>
        <childnode refid="19009" relation="include">
        </childnode>
        <childnode refid="19011" relation="include">
        </childnode>
      </node>
      <node id="18991">
        <label>map</label>
      </node>
      <node id="19010">
        <label>unordered_set</label>
      </node>
      <node id="19011">
        <label>omp.h</label>
      </node>
      <node id="19000">
        <label>exception</label>
      </node>
      <node id="18994">
        <label>random</label>
      </node>
      <node id="19003">
        <label>sys/types.h</label>
      </node>
      <node id="18984">
        <label>cstdio</label>
      </node>
      <node id="18996">
        <label>lbann/utils/stack_trace.hpp</label>
        <link refid="stack__trace_8hpp"/>
        <childnode refid="18997" relation="include">
        </childnode>
        <childnode refid="18998" relation="include">
        </childnode>
      </node>
      <node id="18986">
        <label>cxxabi.h</label>
      </node>
      <node id="18995">
        <label>lbann/utils/exception.hpp</label>
        <link refid="exception_8hpp"/>
        <childnode refid="18979" relation="include">
        </childnode>
        <childnode refid="18989" relation="include">
        </childnode>
        <childnode refid="18996" relation="include">
        </childnode>
        <childnode refid="18999" relation="include">
        </childnode>
        <childnode refid="19000" relation="include">
        </childnode>
      </node>
      <node id="19008">
        <label>unistd.h</label>
      </node>
      <node id="18990">
        <label>vector</label>
      </node>
      <node id="18989">
        <label>lbann/comm.hpp</label>
        <link refid="comm_8hpp"/>
        <childnode refid="18990" relation="include">
        </childnode>
        <childnode refid="18991" relation="include">
        </childnode>
        <childnode refid="18992" relation="include">
        </childnode>
        <childnode refid="18979" relation="include">
        </childnode>
      </node>
      <node id="19001">
        <label>lbann/io/file_io.hpp</label>
        <link refid="file__io_8hpp"/>
        <childnode refid="19002" relation="include">
        </childnode>
        <childnode refid="19003" relation="include">
        </childnode>
        <childnode refid="19004" relation="include">
        </childnode>
      </node>
      <node id="18983">
        <label>cstdlib</label>
      </node>
      <node id="18999">
        <label>iostream</label>
      </node>
      <node id="18988">
        <label>lbann/utils/random.hpp</label>
        <link refid="random_8hpp"/>
        <childnode refid="18979" relation="include">
        </childnode>
        <childnode refid="18989" relation="include">
        </childnode>
        <childnode refid="18993" relation="include">
        </childnode>
        <childnode refid="18994" relation="include">
        </childnode>
      </node>
      <node id="18997">
        <label>csignal</label>
      </node>
      <node id="18978">
        <label>lbann/data_readers/data_reader.hpp</label>
        <link refid="data__reader_8hpp"/>
        <childnode refid="18979" relation="include">
        </childnode>
        <childnode refid="18988" relation="include">
        </childnode>
        <childnode refid="18995" relation="include">
        </childnode>
        <childnode refid="18989" relation="include">
        </childnode>
        <childnode refid="19001" relation="include">
        </childnode>
        <childnode refid="18993" relation="include">
        </childnode>
        <childnode refid="19005" relation="include">
        </childnode>
        <childnode refid="19006" relation="include">
        </childnode>
        <childnode refid="19007" relation="include">
        </childnode>
        <childnode refid="18998" relation="include">
        </childnode>
        <childnode refid="18990" relation="include">
        </childnode>
        <childnode refid="19008" relation="include">
        </childnode>
      </node>
      <node id="18987">
        <label>lbann_config.hpp</label>
      </node>
      <node id="19007">
        <label>algorithm</label>
      </node>
      <node id="18982">
        <label>lbann/utils/cyg_profile.hpp</label>
        <link refid="cyg__profile_8hpp"/>
        <childnode refid="18983" relation="include">
        </childnode>
        <childnode refid="18984" relation="include">
        </childnode>
        <childnode refid="18985" relation="include">
        </childnode>
        <childnode refid="18986" relation="include">
        </childnode>
      </node>
      <node id="18981">
        <label>lbann/Elemental_extensions.hpp</label>
        <link refid="Elemental__extensions_8hpp"/>
        <childnode refid="18980" relation="include">
        </childnode>
      </node>
      <node id="18992">
        <label>typeindex</label>
      </node>
      <node id="18985">
        <label>dlfcn.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacelbann">lbann</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2014-2016,<sp/>Lawrence<sp/>Livermore<sp/>National<sp/>Security,<sp/>LLC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Produced<sp/>at<sp/>the<sp/>Lawrence<sp/>Livermore<sp/>National<sp/>Laboratory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Written<sp/>by<sp/>the<sp/>LBANN<sp/>Research<sp/>Team<sp/>(B.<sp/>Van<sp/>Essen,<sp/>et<sp/>al.)<sp/>listed<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>CONTRIBUTORS<sp/>file.<sp/>&lt;lbann-dev@llnl.gov&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LLNL-CODE-697807.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>LBANN:<sp/>Livermore<sp/>Big<sp/>Artificial<sp/>Neural<sp/>Network</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Toolkit.<sp/>For<sp/>details,<sp/>see<sp/>http://software.llnl.gov/LBANN<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://github.com/LLNL/LBANN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;Licensee&quot;);<sp/>you</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implied.<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>license.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>lbann_data_reader<sp/>.hpp<sp/>.cpp<sp/>-<sp/>Input<sp/>data<sp/>base<sp/>class<sp/>for<sp/>training,<sp/>testing</highlight></codeline>
<codeline lineno="28"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="data__reader_8hpp" kindref="compound">lbann/data_readers/data_reader.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="generic__data__store_8hpp" kindref="compound">lbann/data_store/generic_data_store.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;omp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacelbann" kindref="compound">lbann</ref><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="classlbann_1_1generic__data__reader_1af1aaa4d1a693974c1b1f1318b6ed60b8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1generic__data__reader_1af1aaa4d1a693974c1b1f1318b6ed60b8" kindref="member">generic_data_reader::shuffle_indices</ref>()<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Shuffle<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1generic__data__reader_1a8039ed9c12a5847f0dcf7dd54b8d2f5b" kindref="member">m_shuffle</ref>)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shuffle(<ref refid="classlbann_1_1generic__data__reader_1aaab6aeff67ffff1c689336851fec2c57" kindref="member">m_shuffled_indices</ref>.begin(),<sp/><ref refid="classlbann_1_1generic__data__reader_1aaab6aeff67ffff1c689336851fec2c57" kindref="member">m_shuffled_indices</ref>.end(),</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelbann_1aba9d11cb3a739cd84e7234ceeb32d098" kindref="member">get_data_seq_generator</ref>());</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="classlbann_1_1generic__data__reader_1a879bb7dcb57a0aa1ef9c5039f5b0efda" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1generic__data__reader_1a879bb7dcb57a0aa1ef9c5039f5b0efda" kindref="member">generic_data_reader::setup</ref>()<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1a77946c4dca753c23f39e9a490eba1229" kindref="member">m_base_offset</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1a58461c39de7e17eafc5b98aec99cbb9b" kindref="member">m_sample_stride</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1a02c4632cc7cad5c3e4062934c41717a0" kindref="member">m_stride_to_next_mini_batch</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1ac46922f2ef4f392bcc7c59c21685a3ff" kindref="member">m_stride_to_last_mini_batch</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1aefd4bc0bf95de1e2500827581acf3536" kindref="member">m_current_mini_batch_idx</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1ab570063483a1f604ca2fc536c3d83de7" kindref="member">m_num_iterations_per_epoch</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1a7cd8fa7b1db9ea3d154a411f36992476" kindref="member">m_global_mini_batch_size</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1a1d6f2d378a3f152e20b3def16f52c003" kindref="member">m_global_last_mini_batch_size</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1acd33b2dbdfd4043ecc62cc13789532a2" kindref="member">m_world_master_mini_batch_adjustment</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>El::Zeros(<ref refid="classlbann_1_1generic__data__reader_1a4ee1a159c74561c15a5e0c267ad3cc6a" kindref="member">m_indices_fetched_per_mb</ref>,<sp/><ref refid="classlbann_1_1generic__data__reader_1a96f87a7d09711ab3eee3940ff2aa36ec" kindref="member">m_mini_batch_size</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1ac6d4a5ba1d4e1134620cddcac343bf59" kindref="member">set_initial_position</ref>();</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1af1aaa4d1a693974c1b1f1318b6ed60b8" kindref="member">shuffle_indices</ref>();</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="classlbann_1_1generic__data__reader_1a46b658ba4f6b746632b683568ab76f77" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1generic__data__reader_1a46b658ba4f6b746632b683568ab76f77" kindref="member">lbann::generic_data_reader::fetch_data</ref>(<ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>X)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nthreads<sp/>=<sp/>omp_get_max_threads();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="classlbann_1_1generic__data__reader_1a2b10538440d784f0f12582a5407acef2" kindref="member">position_valid</ref>())<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string{}<sp/>+<sp/>__FILE__<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(__LINE__)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>generic<sp/>data<sp/>reader<sp/>load<sp/>error:<sp/>!position_valid&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>--<sp/>current<sp/>pos<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(<ref refid="classlbann_1_1generic__data__reader_1a2facf4e410099ac8c1fa586e797ec2e0" kindref="member">m_current_pos</ref>)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>there<sp/>are<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(<ref refid="classlbann_1_1generic__data__reader_1aaab6aeff67ffff1c689336851fec2c57" kindref="member">m_shuffled_indices</ref>.size())<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>indices&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classlbann_1_1generic__data__reader_1ab1d7cac44072bd1f67291c6169414112" kindref="member">m_save_minibatch_indices</ref>)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>parallel<sp/>for<sp/>schedule(static,<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>0;<sp/>t<sp/>&lt;<sp/>nthreads;<sp/>t++)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1ad613f95666b973d8da77773fb34c9b66" kindref="member">preprocess_data_source</ref>(omp_get_thread_num());</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>loaded_batch_size<sp/>=<sp/><ref refid="classlbann_1_1generic__data__reader_1a850e99110dd1e9df2985f09ea196fea8" kindref="member">get_loaded_mini_batch_size</ref>();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end_pos<sp/>=<sp/>std::min(static_cast&lt;size_t&gt;(<ref refid="classlbann_1_1generic__data__reader_1a2facf4e410099ac8c1fa586e797ec2e0" kindref="member">m_current_pos</ref>+loaded_batch_size),</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1aaab6aeff67ffff1c689336851fec2c57" kindref="member">m_shuffled_indices</ref>.size());</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mb_size<sp/>=<sp/>std::min(</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>El::Int{((end_pos<sp/>-<sp/><ref refid="classlbann_1_1generic__data__reader_1a2facf4e410099ac8c1fa586e797ec2e0" kindref="member">m_current_pos</ref>)<sp/>+<sp/><ref refid="classlbann_1_1generic__data__reader_1a58461c39de7e17eafc5b98aec99cbb9b" kindref="member">m_sample_stride</ref><sp/>-<sp/>1)<sp/>/<sp/><ref refid="classlbann_1_1generic__data__reader_1a58461c39de7e17eafc5b98aec99cbb9b" kindref="member">m_sample_stride</ref>},</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>X.Width());</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classlbann_1_1generic__data__reader_1ab1d7cac44072bd1f67291c6169414112" kindref="member">m_save_minibatch_indices</ref>)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>El::Zeros(X,<sp/>X.Height(),<sp/>X.Width());</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>El::Zeros(<ref refid="classlbann_1_1generic__data__reader_1a4ee1a159c74561c15a5e0c267ad3cc6a" kindref="member">m_indices_fetched_per_mb</ref>,<sp/>mb_size,<sp/>1);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1generic__data__reader_1ab1d7cac44072bd1f67291c6169414112" kindref="member">m_save_minibatch_indices</ref>)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1a5048d99a58ccddf4fb170c6face8cf4e" kindref="member">m_my_minibatch_indices</ref>.resize(<ref refid="classlbann_1_1generic__data__reader_1a5048d99a58ccddf4fb170c6face8cf4e" kindref="member">m_my_minibatch_indices</ref>.size()<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>0;<sp/>s<sp/>&lt;<sp/>mb_size;<sp/>s++)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="classlbann_1_1generic__data__reader_1a2facf4e410099ac8c1fa586e797ec2e0" kindref="member">m_current_pos</ref><sp/>+<sp/>(s<sp/>*<sp/><ref refid="classlbann_1_1generic__data__reader_1a58461c39de7e17eafc5b98aec99cbb9b" kindref="member">m_sample_stride</ref>);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1a5048d99a58ccddf4fb170c6face8cf4e" kindref="member">m_my_minibatch_indices</ref>.back().push_back(n);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>parallel<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>0;<sp/>s<sp/>&lt;<sp/>mb_size;<sp/>s++)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Catch<sp/>exceptions<sp/>within<sp/>the<sp/>OpenMP<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="classlbann_1_1generic__data__reader_1a2facf4e410099ac8c1fa586e797ec2e0" kindref="member">m_current_pos</ref><sp/>+<sp/>(s<sp/>*<sp/><ref refid="classlbann_1_1generic__data__reader_1a58461c39de7e17eafc5b98aec99cbb9b" kindref="member">m_sample_stride</ref>);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/><ref refid="classlbann_1_1generic__data__reader_1aaab6aeff67ffff1c689336851fec2c57" kindref="member">m_shuffled_indices</ref>[n];</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>valid<sp/>=<sp/><ref refid="classlbann_1_1generic__data__reader_1a0a3cd87ed4a7057df185e0087f2d21c1" kindref="member">fetch_datum</ref>(X,<sp/>index,<sp/>s,<sp/>omp_get_thread_num());</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!valid)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string{}<sp/>+<sp/>__FILE__<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(__LINE__)<sp/>+</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>generic<sp/>data<sp/>reader<sp/>load<sp/>error:<sp/>datum<sp/>not<sp/>valid&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1a4ee1a159c74561c15a5e0c267ad3cc6a" kindref="member">m_indices_fetched_per_mb</ref>.Set(s,<sp/>0,<sp/>index);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>&amp;<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelbann_1aedccb3bf2d674ccb5573ab9960720731" kindref="member">lbann_report_exception</ref>(e);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::exception&amp;<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>El::ReportException(e);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>parallel<sp/>for<sp/>schedule(static,<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>0;<sp/>t<sp/>&lt;<sp/>nthreads;<sp/>t++)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1a7bbf74725a96235dc1cd20ff440a69bd" kindref="member">postprocess_data_source</ref>(omp_get_thread_num());</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mb_size;</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134" refid="classlbann_1_1generic__data__reader_1a7e624f92e38b0ee4224a6afaaf2acbdb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1generic__data__reader_1a7e624f92e38b0ee4224a6afaaf2acbdb" kindref="member">lbann::generic_data_reader::fetch_labels</ref>(<ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>Y)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="classlbann_1_1generic__data__reader_1a2b10538440d784f0f12582a5407acef2" kindref="member">position_valid</ref>())<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string{}<sp/>+<sp/>__FILE__<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(__LINE__)<sp/>+</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>generic<sp/>data<sp/>reader<sp/>load<sp/>error:<sp/>!position_valid&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>loaded_batch_size<sp/>=<sp/><ref refid="classlbann_1_1generic__data__reader_1a850e99110dd1e9df2985f09ea196fea8" kindref="member">get_loaded_mini_batch_size</ref>();</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end_pos<sp/>=<sp/>std::min(static_cast&lt;size_t&gt;(<ref refid="classlbann_1_1generic__data__reader_1a2facf4e410099ac8c1fa586e797ec2e0" kindref="member">m_current_pos</ref>+loaded_batch_size),</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1aaab6aeff67ffff1c689336851fec2c57" kindref="member">m_shuffled_indices</ref>.size());</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mb_size<sp/>=<sp/>std::min(</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>El::Int{((end_pos<sp/>-<sp/><ref refid="classlbann_1_1generic__data__reader_1a2facf4e410099ac8c1fa586e797ec2e0" kindref="member">m_current_pos</ref>)<sp/>+<sp/><ref refid="classlbann_1_1generic__data__reader_1a58461c39de7e17eafc5b98aec99cbb9b" kindref="member">m_sample_stride</ref><sp/>-<sp/>1)<sp/>/<sp/><ref refid="classlbann_1_1generic__data__reader_1a58461c39de7e17eafc5b98aec99cbb9b" kindref="member">m_sample_stride</ref>},</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>Y.Width());</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>El::Zeros(Y,<sp/>Y.Height(),<sp/>Y.Width());</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>if<sp/>(m_data_store<sp/>!=<sp/>nullptr)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//@todo:<sp/>get<sp/>it<sp/>to<sp/>work,<sp/>then<sp/>add<sp/>omp<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//m_data_store-&gt;fetch_labels(...);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>else<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>parallel<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>0;<sp/>s<sp/>&lt;<sp/>mb_size;<sp/>s++)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Catch<sp/>exceptions<sp/>within<sp/>the<sp/>OpenMP<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="classlbann_1_1generic__data__reader_1a2facf4e410099ac8c1fa586e797ec2e0" kindref="member">m_current_pos</ref><sp/>+<sp/>(s<sp/>*<sp/><ref refid="classlbann_1_1generic__data__reader_1a58461c39de7e17eafc5b98aec99cbb9b" kindref="member">m_sample_stride</ref>);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/><ref refid="classlbann_1_1generic__data__reader_1aaab6aeff67ffff1c689336851fec2c57" kindref="member">m_shuffled_indices</ref>[n];</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>valid<sp/>=<sp/><ref refid="classlbann_1_1generic__data__reader_1a03627408c1d1aa28691d31232fe1dce5" kindref="member">fetch_label</ref>(Y,<sp/>index,<sp/>s,<sp/>omp_get_thread_num());</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!valid)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string{}<sp/>+<sp/>__FILE__<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(__LINE__)<sp/>+</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>generic<sp/>data<sp/>reader<sp/>load<sp/>error:<sp/>label<sp/>not<sp/>valid&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>&amp;<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelbann_1aedccb3bf2d674ccb5573ab9960720731" kindref="member">lbann_report_exception</ref>(e);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::exception&amp;<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>El::ReportException(e);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mb_size;</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179" refid="classlbann_1_1generic__data__reader_1aeaa97d3683add33d1c6d69a769dd6a20" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1generic__data__reader_1aeaa97d3683add33d1c6d69a769dd6a20" kindref="member">lbann::generic_data_reader::fetch_responses</ref>(<ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>Y)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="classlbann_1_1generic__data__reader_1a2b10538440d784f0f12582a5407acef2" kindref="member">position_valid</ref>())<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string{}<sp/>+<sp/>__FILE__<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(__LINE__)<sp/>+</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>generic<sp/>data<sp/>reader<sp/>load<sp/>error:<sp/>!position_valid&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>loaded_batch_size<sp/>=<sp/><ref refid="classlbann_1_1generic__data__reader_1a850e99110dd1e9df2985f09ea196fea8" kindref="member">get_loaded_mini_batch_size</ref>();</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end_pos<sp/>=<sp/>std::min(static_cast&lt;size_t&gt;(<ref refid="classlbann_1_1generic__data__reader_1a2facf4e410099ac8c1fa586e797ec2e0" kindref="member">m_current_pos</ref>+loaded_batch_size),</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1aaab6aeff67ffff1c689336851fec2c57" kindref="member">m_shuffled_indices</ref>.size());</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mb_size<sp/>=<sp/>std::min(</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>El::Int{((end_pos<sp/>-<sp/><ref refid="classlbann_1_1generic__data__reader_1a2facf4e410099ac8c1fa586e797ec2e0" kindref="member">m_current_pos</ref>)<sp/>+<sp/><ref refid="classlbann_1_1generic__data__reader_1a58461c39de7e17eafc5b98aec99cbb9b" kindref="member">m_sample_stride</ref><sp/>-<sp/>1)<sp/>/<sp/><ref refid="classlbann_1_1generic__data__reader_1a58461c39de7e17eafc5b98aec99cbb9b" kindref="member">m_sample_stride</ref>},</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>Y.Width());</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>El::Zeros(Y,<sp/>Y.Height(),<sp/>Y.Width());</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#pragma<sp/>omp<sp/>parallel<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>0;<sp/>s<sp/>&lt;<sp/>mb_size;<sp/>s++)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Catch<sp/>exceptions<sp/>within<sp/>the<sp/>OpenMP<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="classlbann_1_1generic__data__reader_1a2facf4e410099ac8c1fa586e797ec2e0" kindref="member">m_current_pos</ref><sp/>+<sp/>(s<sp/>*<sp/><ref refid="classlbann_1_1generic__data__reader_1a58461c39de7e17eafc5b98aec99cbb9b" kindref="member">m_sample_stride</ref>);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/><ref refid="classlbann_1_1generic__data__reader_1aaab6aeff67ffff1c689336851fec2c57" kindref="member">m_shuffled_indices</ref>[n];</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>valid<sp/>=<sp/><ref refid="classlbann_1_1generic__data__reader_1abe544ea807eed477f3636010d199b574" kindref="member">fetch_response</ref>(Y,<sp/>index,<sp/>s,<sp/>omp_get_thread_num());</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!valid)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string{}<sp/>+<sp/>__FILE__<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(__LINE__)<sp/>+</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>generic<sp/>data<sp/>reader<sp/>load<sp/>error:<sp/>response<sp/>not<sp/>valid&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>&amp;<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelbann_1aedccb3bf2d674ccb5573ab9960720731" kindref="member">lbann_report_exception</ref>(e);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::exception&amp;<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>El::ReportException(e);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mb_size;</highlight></codeline>
<codeline lineno="214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216" refid="classlbann_1_1generic__data__reader_1a8640edf9c71e3b7bee8a8e947c4690fa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1generic__data__reader_1a8640edf9c71e3b7bee8a8e947c4690fa" kindref="member">generic_data_reader::is_data_reader_done</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_active_reader)<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>reader_not_done<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(is_active_reader)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>reader_not_done<sp/>=<sp/>!((<ref refid="classlbann_1_1generic__data__reader_1a2cfc5a3e6de8a8a24d3525ec3ed586fb" kindref="member">m_loaded_mini_batch_idx</ref><sp/>+<sp/><ref refid="classlbann_1_1generic__data__reader_1a73b23a2e7768db4e9e8ba4d9a362163a" kindref="member">m_iteration_stride</ref>)<sp/>&gt;=<sp/><ref refid="classlbann_1_1generic__data__reader_1ab570063483a1f604ca2fc536c3d83de7" kindref="member">m_num_iterations_per_epoch</ref>);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>reader_not_done<sp/>=<sp/>!(<ref refid="classlbann_1_1generic__data__reader_1a2cfc5a3e6de8a8a24d3525ec3ed586fb" kindref="member">m_loaded_mini_batch_idx</ref><sp/>&gt;=<sp/><ref refid="classlbann_1_1generic__data__reader_1ab570063483a1f604ca2fc536c3d83de7" kindref="member">m_num_iterations_per_epoch</ref>);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reader_not_done;</highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226" refid="classlbann_1_1generic__data__reader_1a1d10dec5713fbe60e61b4dc400227ade" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1generic__data__reader_1a1d10dec5713fbe60e61b4dc400227ade" kindref="member">generic_data_reader::update</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_active_reader)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>reader_not_done<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>BVE<sp/>The<sp/>sense<sp/>of<sp/>this<sp/>should<sp/>be<sp/>fixed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1aefd4bc0bf95de1e2500827581acf3536" kindref="member">m_current_mini_batch_idx</ref>++;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(is_active_reader)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1a2facf4e410099ac8c1fa586e797ec2e0" kindref="member">m_current_pos</ref><sp/>=<sp/><ref refid="classlbann_1_1generic__data__reader_1ab11a9eca77ac9018bdab45ead7ef5e13" kindref="member">get_next_position</ref>();</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classlbann_1_1generic__data__reader_1ab1d7cac44072bd1f67291c6169414112" kindref="member">m_save_minibatch_indices</ref>)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>El::Zeros(<ref refid="classlbann_1_1generic__data__reader_1a4ee1a159c74561c15a5e0c267ad3cc6a" kindref="member">m_indices_fetched_per_mb</ref>,<sp/><ref refid="classlbann_1_1generic__data__reader_1a4ee1a159c74561c15a5e0c267ad3cc6a" kindref="member">m_indices_fetched_per_mb</ref>.Height(),<sp/>1);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1a2cfc5a3e6de8a8a24d3525ec3ed586fb" kindref="member">m_loaded_mini_batch_idx</ref><sp/>+=<sp/><ref refid="classlbann_1_1generic__data__reader_1a73b23a2e7768db4e9e8ba4d9a362163a" kindref="member">m_iteration_stride</ref>;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1generic__data__reader_1a2cfc5a3e6de8a8a24d3525ec3ed586fb" kindref="member">m_loaded_mini_batch_idx</ref><sp/>&gt;=<sp/><ref refid="classlbann_1_1generic__data__reader_1ab570063483a1f604ca2fc536c3d83de7" kindref="member">m_num_iterations_per_epoch</ref>)<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>reader_not_done<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<ref refid="classlbann_1_1generic__data__reader_1a2facf4e410099ac8c1fa586e797ec2e0" kindref="member">m_current_pos</ref><sp/>&gt;=<sp/><ref refid="classlbann_1_1generic__data__reader_1aaab6aeff67ffff1c689336851fec2c57" kindref="member">m_shuffled_indices</ref>.size())<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>reader_not_done<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1generic__data__reader_1aefd4bc0bf95de1e2500827581acf3536" kindref="member">m_current_mini_batch_idx</ref><sp/>==<sp/><ref refid="classlbann_1_1generic__data__reader_1ab570063483a1f604ca2fc536c3d83de7" kindref="member">m_num_iterations_per_epoch</ref>)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="classlbann_1_1generic__data__reader_1ab5321bd7c6e83845785753366e6d9e64" kindref="member">get_rank</ref>()<sp/>&lt;<sp/><ref refid="classlbann_1_1generic__data__reader_1a6eb9b8c7c704374a1e49dce87110455e" kindref="member">m_num_parallel_readers</ref>)<sp/>&amp;&amp;<sp/>(<ref refid="classlbann_1_1generic__data__reader_1a2facf4e410099ac8c1fa586e797ec2e0" kindref="member">m_current_pos</ref><sp/>&lt;<sp/>(int)<ref refid="classlbann_1_1generic__data__reader_1aaab6aeff67ffff1c689336851fec2c57" kindref="member">m_shuffled_indices</ref>.size()))<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string{}<sp/>+<sp/>__FILE__<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(__LINE__)</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>generic<sp/>data<sp/>reader<sp/>update<sp/>error:<sp/>the<sp/>epoch<sp/>is<sp/>complete,&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>but<sp/>not<sp/>all<sp/>of<sp/>the<sp/>data<sp/>has<sp/>been<sp/>used<sp/>--<sp/>current<sp/>pos<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(<ref refid="classlbann_1_1generic__data__reader_1a2facf4e410099ac8c1fa586e797ec2e0" kindref="member">m_current_pos</ref>)</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>there<sp/>are<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(<ref refid="classlbann_1_1generic__data__reader_1aaab6aeff67ffff1c689336851fec2c57" kindref="member">m_shuffled_indices</ref>.size())<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>indices&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:<sp/>iteration=&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>std::to_string(<ref refid="classlbann_1_1generic__data__reader_1aefd4bc0bf95de1e2500827581acf3536" kindref="member">m_current_mini_batch_idx</ref>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;C<sp/>[&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>std::to_string(<ref refid="classlbann_1_1generic__data__reader_1a2cfc5a3e6de8a8a24d3525ec3ed586fb" kindref="member">m_loaded_mini_batch_idx</ref>)<sp/>+</highlight><highlight class="stringliteral">&quot;L]<sp/>of<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>std::to_string(<ref refid="classlbann_1_1generic__data__reader_1ab570063483a1f604ca2fc536c3d83de7" kindref="member">m_num_iterations_per_epoch</ref>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>std::to_string(<ref refid="classlbann_1_1generic__data__reader_1a73b23a2e7768db4e9e8ba4d9a362163a" kindref="member">m_iteration_stride</ref>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>index<sp/>stride=&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>std::to_string(<ref refid="classlbann_1_1generic__data__reader_1a02c4632cc7cad5c3e4062934c41717a0" kindref="member">m_stride_to_next_mini_batch</ref>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>std::to_string(<ref refid="classlbann_1_1generic__data__reader_1ac46922f2ef4f392bcc7c59c21685a3ff" kindref="member">m_stride_to_last_mini_batch</ref>));</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classlbann_1_1generic__data__reader_1ab1d7cac44072bd1f67291c6169414112" kindref="member">m_save_minibatch_indices</ref>)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1generic__data__reader_1a8039ed9c12a5847f0dcf7dd54b8d2f5b" kindref="member">m_shuffle</ref>)<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shuffle(<ref refid="classlbann_1_1generic__data__reader_1aaab6aeff67ffff1c689336851fec2c57" kindref="member">m_shuffled_indices</ref>.begin(),<sp/><ref refid="classlbann_1_1generic__data__reader_1aaab6aeff67ffff1c689336851fec2c57" kindref="member">m_shuffled_indices</ref>.end(),</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelbann_1aba9d11cb3a739cd84e7234ceeb32d098" kindref="member">get_data_seq_generator</ref>());</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1ac6d4a5ba1d4e1134620cddcac343bf59" kindref="member">set_initial_position</ref>();</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classlbann_1_1generic__data__reader_1ab1d7cac44072bd1f67291c6169414112" kindref="member">m_save_minibatch_indices</ref>)<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1generic__data__reader_1aefc076b842933a882214f4f709ca49c9" kindref="member">m_data_store</ref>)<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1aefc076b842933a882214f4f709ca49c9" kindref="member">m_data_store</ref>-&gt;<ref refid="classlbann_1_1generic__data__store_1abdf41bf60ba37fa3de49c65c178dc7b0" kindref="member">set_shuffled_indices</ref>(&amp;<ref refid="classlbann_1_1generic__data__reader_1aaab6aeff67ffff1c689336851fec2c57" kindref="member">m_shuffled_indices</ref>);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reader_not_done;</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281" refid="classlbann_1_1generic__data__reader_1a850e99110dd1e9df2985f09ea196fea8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1generic__data__reader_1a850e99110dd1e9df2985f09ea196fea8" kindref="member">generic_data_reader::get_loaded_mini_batch_size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1generic__data__reader_1a2cfc5a3e6de8a8a24d3525ec3ed586fb" kindref="member">m_loaded_mini_batch_idx</ref><sp/>&gt;=<sp/>(<ref refid="classlbann_1_1generic__data__reader_1ab570063483a1f604ca2fc536c3d83de7" kindref="member">m_num_iterations_per_epoch</ref>-1))<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1generic__data__reader_1a241f77b6209de4ae656bc34ad51bb612" kindref="member">m_last_mini_batch_size</ref>;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1generic__data__reader_1a96f87a7d09711ab3eee3940ff2aa36ec" kindref="member">m_mini_batch_size</ref>;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal">}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289" refid="classlbann_1_1generic__data__reader_1aec4624f295e1e3c6c5053838624441a5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1generic__data__reader_1aec4624f295e1e3c6c5053838624441a5" kindref="member">generic_data_reader::get_current_mini_batch_size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1generic__data__reader_1aefd4bc0bf95de1e2500827581acf3536" kindref="member">m_current_mini_batch_idx</ref><sp/>==<sp/>(<ref refid="classlbann_1_1generic__data__reader_1ab570063483a1f604ca2fc536c3d83de7" kindref="member">m_num_iterations_per_epoch</ref>-1))<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1generic__data__reader_1a241f77b6209de4ae656bc34ad51bb612" kindref="member">m_last_mini_batch_size</ref><sp/>+<sp/><ref refid="classlbann_1_1generic__data__reader_1acd33b2dbdfd4043ecc62cc13789532a2" kindref="member">m_world_master_mini_batch_adjustment</ref>;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1generic__data__reader_1a96f87a7d09711ab3eee3940ff2aa36ec" kindref="member">m_mini_batch_size</ref>;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297" refid="classlbann_1_1generic__data__reader_1a3f7114448c6b43a5aac30c002e4bade3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1generic__data__reader_1a3f7114448c6b43a5aac30c002e4bade3" kindref="member">generic_data_reader::get_current_global_mini_batch_size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1generic__data__reader_1aefd4bc0bf95de1e2500827581acf3536" kindref="member">m_current_mini_batch_idx</ref><sp/>==<sp/>(<ref refid="classlbann_1_1generic__data__reader_1ab570063483a1f604ca2fc536c3d83de7" kindref="member">m_num_iterations_per_epoch</ref>-1))<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1generic__data__reader_1a1d6f2d378a3f152e20b3def16f52c003" kindref="member">m_global_last_mini_batch_size</ref>;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1generic__data__reader_1a7cd8fa7b1db9ea3d154a411f36992476" kindref="member">m_global_mini_batch_size</ref>;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="309" refid="classlbann_1_1generic__data__reader_1af80711baa226f8bc370e8e276c49f3c1" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1generic__data__reader_1af80711baa226f8bc370e8e276c49f3c1" kindref="member">generic_data_reader::get_current_world_master_mini_batch_adjustment</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>model_rank)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(model_rank<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/><ref refid="classlbann_1_1generic__data__reader_1aefd4bc0bf95de1e2500827581acf3536" kindref="member">m_current_mini_batch_idx</ref><sp/>==<sp/>(<ref refid="classlbann_1_1generic__data__reader_1ab570063483a1f604ca2fc536c3d83de7" kindref="member">m_num_iterations_per_epoch</ref>-1))<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1generic__data__reader_1acd33b2dbdfd4043ecc62cc13789532a2" kindref="member">m_world_master_mini_batch_adjustment</ref>;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317" refid="classlbann_1_1generic__data__reader_1ab11a9eca77ac9018bdab45ead7ef5e13" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1generic__data__reader_1ab11a9eca77ac9018bdab45ead7ef5e13" kindref="member">generic_data_reader::get_next_position</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="classlbann_1_1generic__data__reader_1aefd4bc0bf95de1e2500827581acf3536" kindref="member">m_current_mini_batch_idx</ref><sp/>+<sp/><ref refid="classlbann_1_1generic__data__reader_1a73b23a2e7768db4e9e8ba4d9a362163a" kindref="member">m_iteration_stride</ref><sp/>-<sp/>1)<sp/>==<sp/>(<ref refid="classlbann_1_1generic__data__reader_1ab570063483a1f604ca2fc536c3d83de7" kindref="member">m_num_iterations_per_epoch</ref>-1))<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1generic__data__reader_1a2facf4e410099ac8c1fa586e797ec2e0" kindref="member">m_current_pos</ref><sp/>+<sp/><ref refid="classlbann_1_1generic__data__reader_1ac46922f2ef4f392bcc7c59c21685a3ff" kindref="member">m_stride_to_last_mini_batch</ref>;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1generic__data__reader_1a2facf4e410099ac8c1fa586e797ec2e0" kindref="member">m_current_pos</ref><sp/>+<sp/><ref refid="classlbann_1_1generic__data__reader_1a02c4632cc7cad5c3e4062934c41717a0" kindref="member">m_stride_to_next_mini_batch</ref>;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328" refid="classlbann_1_1generic__data__reader_1aa28fdeeb6af492540f507e49adff5d6c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1generic__data__reader_1aa28fdeeb6af492540f507e49adff5d6c" kindref="member">generic_data_reader::select_subset_of_data</ref>()<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1ac6ea8dad1e9f0a8c939fd27d2de37e1b" kindref="member">m_num_global_indices</ref><sp/>=<sp/><ref refid="classlbann_1_1generic__data__reader_1aaab6aeff67ffff1c689336851fec2c57" kindref="member">m_shuffled_indices</ref>.size();</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1af1aaa4d1a693974c1b1f1318b6ed60b8" kindref="member">shuffle_indices</ref>();</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count<sp/>=<sp/><ref refid="classlbann_1_1generic__data__reader_1a1e8655cd1883d850566694bcf2ad60ab" kindref="member">get_absolute_sample_count</ref>();</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>use_percent<sp/>=<sp/><ref refid="classlbann_1_1generic__data__reader_1a5853fa5e619b886699954aca6440dd8a" kindref="member">get_use_percent</ref>();</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>==<sp/>0<sp/>and<sp/>use_percent<sp/>==<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string{}<sp/>+<sp/>__FILE__<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(__LINE__)<sp/>+</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>generic_data_reader::select_subset_of_data()<sp/>get_use_percent()<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;and<sp/>get_absolute_sample_count()<sp/>are<sp/>both<sp/>zero;<sp/>exactly<sp/>one<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;must<sp/>be<sp/>zero&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(count<sp/>==<sp/>0<sp/>or<sp/>use_percent<sp/>==<sp/>0.0))<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string{}<sp/>+<sp/>__FILE__<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(__LINE__)<sp/>+</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>generic_data_reader::select_subset_of_data()<sp/>get_use_percent()<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;and<sp/>get_absolute_sample_count()<sp/>are<sp/>both<sp/>non-zero;<sp/>exactly<sp/>one<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;must<sp/>be<sp/>zero&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(count<sp/>&gt;<sp/>static_cast&lt;size_t&gt;(<ref refid="classlbann_1_1generic__data__reader_1adcdb833aff7ce85b0879334b252f357a" kindref="member">get_num_data</ref>()))<sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string{}<sp/>+<sp/>__FILE__<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(__LINE__)<sp/>+</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>generic_data_reader::select_subset_of_data()<sp/>-<sp/>absolute_sample_count=&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::to_string(count)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>&gt;<sp/>get_num_data=&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::to_string(<ref refid="classlbann_1_1generic__data__reader_1adcdb833aff7ce85b0879334b252f357a" kindref="member">get_num_data</ref>()));</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1aaab6aeff67ffff1c689336851fec2c57" kindref="member">m_shuffled_indices</ref>.resize(<ref refid="classlbann_1_1generic__data__reader_1a1e8655cd1883d850566694bcf2ad60ab" kindref="member">get_absolute_sample_count</ref>());</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(use_percent)<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1aaab6aeff67ffff1c689336851fec2c57" kindref="member">m_shuffled_indices</ref>.resize(<ref refid="classlbann_1_1generic__data__reader_1a5853fa5e619b886699954aca6440dd8a" kindref="member">get_use_percent</ref>()*<ref refid="classlbann_1_1generic__data__reader_1adcdb833aff7ce85b0879334b252f357a" kindref="member">get_num_data</ref>());</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>unused<sp/>=<sp/><ref refid="classlbann_1_1generic__data__reader_1ab06058b5fa1d74239998358b02f73132" kindref="member">get_validation_percent</ref>()*<ref refid="classlbann_1_1generic__data__reader_1adcdb833aff7ce85b0879334b252f357a" kindref="member">get_num_data</ref>();<sp/></highlight><highlight class="comment">//get_num_data()<sp/>=<sp/>m_shuffled_indices.size()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>use_me<sp/>=<sp/><ref refid="classlbann_1_1generic__data__reader_1adcdb833aff7ce85b0879334b252f357a" kindref="member">get_num_data</ref>()<sp/>-<sp/>unused;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unused<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1a0bc0ee42e95d23687ddcc30d6c338b19" kindref="member">m_unused_indices</ref>=std::vector&lt;int&gt;(<ref refid="classlbann_1_1generic__data__reader_1aaab6aeff67ffff1c689336851fec2c57" kindref="member">m_shuffled_indices</ref>.begin()<sp/>+<sp/>use_me,<sp/><ref refid="classlbann_1_1generic__data__reader_1aaab6aeff67ffff1c689336851fec2c57" kindref="member">m_shuffled_indices</ref>.end());</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1aaab6aeff67ffff1c689336851fec2c57" kindref="member">m_shuffled_indices</ref>.resize(use_me);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="classlbann_1_1generic__data__reader_1a8039ed9c12a5847f0dcf7dd54b8d2f5b" kindref="member">m_shuffle</ref>)<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort(<ref refid="classlbann_1_1generic__data__reader_1aaab6aeff67ffff1c689336851fec2c57" kindref="member">m_shuffled_indices</ref>.begin(),<sp/><ref refid="classlbann_1_1generic__data__reader_1aaab6aeff67ffff1c689336851fec2c57" kindref="member">m_shuffled_indices</ref>.end());</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort(<ref refid="classlbann_1_1generic__data__reader_1a0bc0ee42e95d23687ddcc30d6c338b19" kindref="member">m_unused_indices</ref>.begin(),<sp/><ref refid="classlbann_1_1generic__data__reader_1a0bc0ee42e95d23687ddcc30d6c338b19" kindref="member">m_unused_indices</ref>.end());</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378" refid="classlbann_1_1generic__data__reader_1afa621af16f1a582b5a22405b79dbe052" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1generic__data__reader_1afa621af16f1a582b5a22405b79dbe052" kindref="member">generic_data_reader::use_unused_index_set</ref>()<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1aaab6aeff67ffff1c689336851fec2c57" kindref="member">m_shuffled_indices</ref>.swap(<ref refid="classlbann_1_1generic__data__reader_1a0bc0ee42e95d23687ddcc30d6c338b19" kindref="member">m_unused_indices</ref>);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1a0bc0ee42e95d23687ddcc30d6c338b19" kindref="member">m_unused_indices</ref>.clear();</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;().swap(<ref refid="classlbann_1_1generic__data__reader_1a0bc0ee42e95d23687ddcc30d6c338b19" kindref="member">m_unused_indices</ref>);<sp/></highlight><highlight class="comment">//<sp/>Trick<sp/>to<sp/>force<sp/>memory<sp/>reallocation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="385" refid="classlbann_1_1generic__data__reader_1a6f49d945610f35335fce4a422a432cc1" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1generic__data__reader_1a6f49d945610f35335fce4a422a432cc1" kindref="member">generic_data_reader::save_to_checkpoint_shared</ref>(<ref refid="classlbann_1_1persist" kindref="compound">persist</ref>&amp;<sp/>p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)<sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>rank<sp/>0<sp/>writes<sp/>the<sp/>training<sp/>state<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p.<ref refid="classlbann_1_1persist_1a34eb918a890ab49dcbeedddf27ec1616" kindref="member">get_rank</ref>()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1a93dddd2276ddc34cc97922ee27c44582" kindref="member">pack_scalars</ref>(p,name);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="394" refid="classlbann_1_1generic__data__reader_1a85119fae17feb8fda32f8a2f40869436" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1generic__data__reader_1a85119fae17feb8fda32f8a2f40869436" kindref="member">lbann::generic_data_reader::load_from_checkpoint_shared</ref>(<ref refid="classlbann_1_1persist" kindref="compound">persist</ref>&amp;<sp/>p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>rank<sp/>0<sp/>reads<sp/>the<sp/>training<sp/>state<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlbann_1_1generic__data__reader_1_1packing__header" kindref="compound">packing_header</ref><sp/>header;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p.<ref refid="classlbann_1_1persist_1a34eb918a890ab49dcbeedddf27ec1616" kindref="member">get_rank</ref>()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1a8de5c2e24d4cc2211145ed5dc37cf228" kindref="member">unpack_scalars</ref>(p,&amp;header,name);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>MPI_Bcast(&amp;header,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(header),<sp/>MPI_BYTE,<sp/>0,<sp/>MPI_COMM_WORLD);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1a3e1c13778c04ca9fa5136ee7ee3893fb" kindref="member">unpack_header</ref>(header);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p.<ref refid="classlbann_1_1persist_1a34eb918a890ab49dcbeedddf27ec1616" kindref="member">get_rank</ref>()<sp/>==0){</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1aaab6aeff67ffff1c689336851fec2c57" kindref="member">m_shuffled_indices</ref>.resize(header.<ref refid="structlbann_1_1generic__data__reader_1_1packing__header_1af894940b23cb11fac4f15faf5b1711f7" kindref="member">data_size</ref>);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1a0bc0ee42e95d23687ddcc30d6c338b19" kindref="member">m_unused_indices</ref>.resize(header.<ref refid="structlbann_1_1generic__data__reader_1_1packing__header_1aa75d4dc948a928a3dc781b8b5b5de9e0" kindref="member">unused_data_size</ref>);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>MPI_Bcast(&amp;<ref refid="classlbann_1_1generic__data__reader_1aaab6aeff67ffff1c689336851fec2c57" kindref="member">m_shuffled_indices</ref>[0],<sp/>header.<ref refid="structlbann_1_1generic__data__reader_1_1packing__header_1af894940b23cb11fac4f15faf5b1711f7" kindref="member">data_size</ref>,<sp/>MPI_INT,<sp/>0,<sp/>MPI_COMM_WORLD);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>MPI_Bcast(&amp;<ref refid="classlbann_1_1generic__data__reader_1a0bc0ee42e95d23687ddcc30d6c338b19" kindref="member">m_unused_indices</ref>[0],<sp/>header.<ref refid="structlbann_1_1generic__data__reader_1_1packing__header_1aa75d4dc948a928a3dc781b8b5b5de9e0" kindref="member">unused_data_size</ref>,<sp/>MPI_INT,<sp/>0,<sp/>MPI_COMM_WORLD);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="409"><highlight class="normal">}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411" refid="classlbann_1_1generic__data__reader_1a94a6db0b62d4c98202ef309eb76b220c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1generic__data__reader_1a94a6db0b62d4c98202ef309eb76b220c" kindref="member">generic_data_reader::set_file_dir</ref>(std::string<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespacelbann_1a02f197bc772ef04f1ac51eb191a02cab" kindref="member">endsWith</ref>(s,<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1a252002ec211d67606b80bc481a27e820" kindref="member">m_file_dir</ref><sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1a252002ec211d67606b80bc481a27e820" kindref="member">m_file_dir</ref><sp/>=<sp/>s<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419" refid="classlbann_1_1generic__data__reader_1ab4c6c2d4ba40ece809ce896828c8ff03" refkind="member"><highlight class="normal">std::string<sp/><ref refid="classlbann_1_1generic__data__reader_1ab4c6c2d4ba40ece809ce896828c8ff03" kindref="member">generic_data_reader::get_file_dir</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1generic__data__reader_1a252002ec211d67606b80bc481a27e820" kindref="member">m_file_dir</ref>;</highlight></codeline>
<codeline lineno="421"><highlight class="normal">}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423" refid="classlbann_1_1generic__data__reader_1a74b7ef4fe0dc7d3a96868ca3b5fbf897" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1generic__data__reader_1a74b7ef4fe0dc7d3a96868ca3b5fbf897" kindref="member">generic_data_reader::set_data_filename</ref>(std::string<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1a2595e254ab2442e8cfc80aa6bdac0c0f" kindref="member">m_data_fn</ref><sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="425"><highlight class="normal">}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427" refid="classlbann_1_1generic__data__reader_1a56664e1b43f3fe923cf6d652f14b40a9" refkind="member"><highlight class="normal">std::string<sp/><ref refid="classlbann_1_1generic__data__reader_1a56664e1b43f3fe923cf6d652f14b40a9" kindref="member">generic_data_reader::get_data_filename</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1generic__data__reader_1a2595e254ab2442e8cfc80aa6bdac0c0f" kindref="member">m_data_fn</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string{}<sp/>+<sp/>__FILE__<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(__LINE__)<sp/>+</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>you<sp/>apparently<sp/>did<sp/>not<sp/>call<sp/>set_data_filename;<sp/>error!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1generic__data__reader_1a2595e254ab2442e8cfc80aa6bdac0c0f" kindref="member">m_data_fn</ref>;</highlight></codeline>
<codeline lineno="434"><highlight class="normal">}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436" refid="classlbann_1_1generic__data__reader_1af45f301cc9adc2f8184b81d8d2600b8f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1generic__data__reader_1af45f301cc9adc2f8184b81d8d2600b8f" kindref="member">generic_data_reader::set_label_filename</ref>(std::string<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1a492d45c107df31b3e241e54d51950746" kindref="member">m_label_fn</ref><sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="438"><highlight class="normal">}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440" refid="classlbann_1_1generic__data__reader_1af0f82d719fcd6e0668414836f2673d5c" refkind="member"><highlight class="normal">std::string<sp/><ref refid="classlbann_1_1generic__data__reader_1af0f82d719fcd6e0668414836f2673d5c" kindref="member">generic_data_reader::get_label_filename</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1generic__data__reader_1a492d45c107df31b3e241e54d51950746" kindref="member">m_label_fn</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string{}<sp/>+<sp/>__FILE__<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(__LINE__)<sp/>+</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>you<sp/>apparently<sp/>did<sp/>not<sp/>call<sp/>set_label_filename;<sp/>error!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1generic__data__reader_1a492d45c107df31b3e241e54d51950746" kindref="member">m_label_fn</ref>;</highlight></codeline>
<codeline lineno="447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449" refid="classlbann_1_1generic__data__reader_1aca4e6c31df0a1579079274bc48fbbf26" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1generic__data__reader_1aca4e6c31df0a1579079274bc48fbbf26" kindref="member">generic_data_reader::set_first_n</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1a51af253029b7daea29bc46cbbef686b3" kindref="member">m_first_n</ref><sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453" refid="classlbann_1_1generic__data__reader_1aa2d83c4ffc58534e0c193b6b9f9fb925" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1generic__data__reader_1aa2d83c4ffc58534e0c193b6b9f9fb925" kindref="member">generic_data_reader::set_absolute_sample_count</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1a462437ed899bc26ebec9ab2091980d0c" kindref="member">m_absolute_sample_count</ref><sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457" refid="classlbann_1_1generic__data__reader_1a1e8655cd1883d850566694bcf2ad60ab" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1generic__data__reader_1a1e8655cd1883d850566694bcf2ad60ab" kindref="member">generic_data_reader::get_absolute_sample_count</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1generic__data__reader_1a462437ed899bc26ebec9ab2091980d0c" kindref="member">m_absolute_sample_count</ref>;</highlight></codeline>
<codeline lineno="459"><highlight class="normal">}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462" refid="classlbann_1_1generic__data__reader_1a18b67bfa426eb4d2c8195d115c4df49f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1generic__data__reader_1a18b67bfa426eb4d2c8195d115c4df49f" kindref="member">generic_data_reader::set_validation_percent</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>&lt;<sp/>0<sp/>or<sp/>s<sp/>&gt;<sp/>1.0)<sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string{}<sp/>+<sp/>__FILE__<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(__LINE__)<sp/>+</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>set_validation_percent()<sp/>-<sp/>must<sp/>be:<sp/>s<sp/>&gt;=<sp/>0,<sp/>s<sp/>&lt;=<sp/>1.0;<sp/>you<sp/>passed:<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::to_string(s));</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1a3e4afbe28634a913f6de9daabf05dc0d" kindref="member">m_validation_percent</ref><sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="470"><highlight class="normal">}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473" refid="classlbann_1_1generic__data__reader_1ab06058b5fa1d74239998358b02f73132" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1generic__data__reader_1ab06058b5fa1d74239998358b02f73132" kindref="member">generic_data_reader::get_validation_percent</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1generic__data__reader_1a3e4afbe28634a913f6de9daabf05dc0d" kindref="member">m_validation_percent</ref>;</highlight></codeline>
<codeline lineno="475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477" refid="classlbann_1_1generic__data__reader_1ae6929a8bd2e59da72a8c2e537f0b2b37" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1generic__data__reader_1ae6929a8bd2e59da72a8c2e537f0b2b37" kindref="member">generic_data_reader::set_use_percent</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>&lt;<sp/>0<sp/>or<sp/>s<sp/>&gt;<sp/>1.0)<sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string{}<sp/>+<sp/>__FILE__<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(__LINE__)<sp/>+</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>set_use_percent()<sp/>-<sp/>must<sp/>be:<sp/>s<sp/>&gt;=<sp/>0,<sp/>s<sp/>&lt;=<sp/>1.0;<sp/>you<sp/>passed:<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::to_string(s));</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1a8b475834bd80e7103c3631d2b061aabc" kindref="member">m_use_percent</ref><sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="485"><highlight class="normal">}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488" refid="classlbann_1_1generic__data__reader_1a5853fa5e619b886699954aca6440dd8a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1generic__data__reader_1a5853fa5e619b886699954aca6440dd8a" kindref="member">generic_data_reader::get_use_percent</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1generic__data__reader_1a8b475834bd80e7103c3631d2b061aabc" kindref="member">m_use_percent</ref>;</highlight></codeline>
<codeline lineno="490"><highlight class="normal">}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492" refid="classlbann_1_1generic__data__reader_1a8b2a09d38512fc11f1b9d572c89100a7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1generic__data__reader_1a8b2a09d38512fc11f1b9d572c89100a7" kindref="member">generic_data_reader::setup_data_store</ref>(<ref refid="classlbann_1_1model" kindref="compound">model</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1aefc076b842933a882214f4f709ca49c9" kindref="member">m_data_store</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="494"><highlight class="normal">}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496" refid="classlbann_1_1generic__data__reader_1a19fd7c4dc234fa09ac7619e47fe18454" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1generic__data__reader_1a19fd7c4dc234fa09ac7619e47fe18454" kindref="member">generic_data_reader::set_save_minibatch_entries</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1ab1d7cac44072bd1f67291c6169414112" kindref="member">m_save_minibatch_indices</ref><sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b)<sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1a5048d99a58ccddf4fb170c6face8cf4e" kindref="member">m_my_minibatch_indices</ref>.reserve(<ref refid="classlbann_1_1generic__data__reader_1a06fb58d1c0b84b8c76f5b4d160751f34" kindref="member">get_num_iterations_per_epoch</ref>());</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal">}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>lbann</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/mckinney27/doxy-testbed/lbann/src/data_readers/data_reader.cpp"/>
  </compounddef>
</doxygen>
