<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="data__reader__mesh_8cpp" kind="file" language="C++">
    <compoundname>data_reader_mesh.cpp</compoundname>
    <includes refid="data__reader__mesh_8hpp" local="yes">lbann/data_readers/data_reader_mesh.hpp</includes>
    <includes refid="glob_8hpp" local="yes">lbann/utils/glob.hpp</includes>
    <incdepgraph>
      <node id="19584">
        <label>sys/stat.h</label>
      </node>
      <node id="19592">
        <label>glob.h</label>
      </node>
      <node id="19587">
        <label>lbann/data_readers/image_preprocessor.hpp</label>
        <link refid="image__preprocessor_8hpp"/>
        <childnode refid="19569" relation="include">
        </childnode>
        <childnode refid="19561" relation="include">
        </childnode>
      </node>
      <node id="19591">
        <label>lbann/utils/glob.hpp</label>
        <link refid="glob_8hpp"/>
        <childnode refid="19592" relation="include">
        </childnode>
        <childnode refid="19572" relation="include">
        </childnode>
        <childnode refid="19580" relation="include">
        </childnode>
        <childnode refid="19577" relation="include">
        </childnode>
      </node>
      <node id="19575">
        <label>lbann/io/persist.hpp</label>
        <link refid="persist_8hpp"/>
        <childnode refid="19561" relation="include">
        </childnode>
        <childnode refid="19562" relation="include">
        </childnode>
      </node>
      <node id="19562">
        <label>El.hpp</label>
      </node>
      <node id="19561">
        <label>lbann/base.hpp</label>
        <link refid="base_8hpp"/>
        <childnode refid="19562" relation="include">
        </childnode>
        <childnode refid="19563" relation="include">
        </childnode>
        <childnode refid="19564" relation="include">
        </childnode>
        <childnode refid="19569" relation="include">
        </childnode>
      </node>
      <node id="19588">
        <label>cassert</label>
      </node>
      <node id="19586">
        <label>fcntl.h</label>
      </node>
      <node id="19580">
        <label>string</label>
      </node>
      <node id="19573">
        <label>map</label>
      </node>
      <node id="19582">
        <label>exception</label>
      </node>
      <node id="19576">
        <label>random</label>
      </node>
      <node id="19585">
        <label>sys/types.h</label>
      </node>
      <node id="19566">
        <label>cstdio</label>
      </node>
      <node id="19578">
        <label>lbann/utils/stack_trace.hpp</label>
        <link refid="stack__trace_8hpp"/>
        <childnode refid="19579" relation="include">
        </childnode>
        <childnode refid="19580" relation="include">
        </childnode>
      </node>
      <node id="19568">
        <label>cxxabi.h</label>
      </node>
      <node id="19577">
        <label>lbann/utils/exception.hpp</label>
        <link refid="exception_8hpp"/>
        <childnode refid="19561" relation="include">
        </childnode>
        <childnode refid="19571" relation="include">
        </childnode>
        <childnode refid="19578" relation="include">
        </childnode>
        <childnode refid="19581" relation="include">
        </childnode>
        <childnode refid="19582" relation="include">
        </childnode>
      </node>
      <node id="19590">
        <label>unistd.h</label>
      </node>
      <node id="19572">
        <label>vector</label>
      </node>
      <node id="19571">
        <label>lbann/comm.hpp</label>
        <link refid="comm_8hpp"/>
        <childnode refid="19572" relation="include">
        </childnode>
        <childnode refid="19573" relation="include">
        </childnode>
        <childnode refid="19574" relation="include">
        </childnode>
        <childnode refid="19561" relation="include">
        </childnode>
      </node>
      <node id="19583">
        <label>lbann/io/file_io.hpp</label>
        <link refid="file__io_8hpp"/>
        <childnode refid="19584" relation="include">
        </childnode>
        <childnode refid="19585" relation="include">
        </childnode>
        <childnode refid="19586" relation="include">
        </childnode>
      </node>
      <node id="19565">
        <label>cstdlib</label>
      </node>
      <node id="19581">
        <label>iostream</label>
      </node>
      <node id="19570">
        <label>lbann/utils/random.hpp</label>
        <link refid="random_8hpp"/>
        <childnode refid="19561" relation="include">
        </childnode>
        <childnode refid="19571" relation="include">
        </childnode>
        <childnode refid="19575" relation="include">
        </childnode>
        <childnode refid="19576" relation="include">
        </childnode>
      </node>
      <node id="19579">
        <label>csignal</label>
      </node>
      <node id="19560">
        <label>data_reader.hpp</label>
        <link refid="data__reader_8hpp"/>
        <childnode refid="19561" relation="include">
        </childnode>
        <childnode refid="19570" relation="include">
        </childnode>
        <childnode refid="19577" relation="include">
        </childnode>
        <childnode refid="19571" relation="include">
        </childnode>
        <childnode refid="19583" relation="include">
        </childnode>
        <childnode refid="19575" relation="include">
        </childnode>
        <childnode refid="19587" relation="include">
        </childnode>
        <childnode refid="19588" relation="include">
        </childnode>
        <childnode refid="19589" relation="include">
        </childnode>
        <childnode refid="19580" relation="include">
        </childnode>
        <childnode refid="19572" relation="include">
        </childnode>
        <childnode refid="19590" relation="include">
        </childnode>
      </node>
      <node id="19569">
        <label>lbann_config.hpp</label>
      </node>
      <node id="19589">
        <label>algorithm</label>
      </node>
      <node id="19564">
        <label>lbann/utils/cyg_profile.hpp</label>
        <link refid="cyg__profile_8hpp"/>
        <childnode refid="19565" relation="include">
        </childnode>
        <childnode refid="19566" relation="include">
        </childnode>
        <childnode refid="19567" relation="include">
        </childnode>
        <childnode refid="19568" relation="include">
        </childnode>
      </node>
      <node id="19563">
        <label>lbann/Elemental_extensions.hpp</label>
        <link refid="Elemental__extensions_8hpp"/>
        <childnode refid="19562" relation="include">
        </childnode>
      </node>
      <node id="19559">
        <label>lbann/data_readers/data_reader_mesh.hpp</label>
        <link refid="data__reader__mesh_8hpp"/>
        <childnode refid="19560" relation="include">
        </childnode>
      </node>
      <node id="19574">
        <label>typeindex</label>
      </node>
      <node id="19558">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/data_readers/data_reader_mesh.cpp</label>
        <link refid="data__reader__mesh_8cpp"/>
        <childnode refid="19559" relation="include">
        </childnode>
        <childnode refid="19591" relation="include">
        </childnode>
      </node>
      <node id="19567">
        <label>dlfcn.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacelbann">lbann</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2014-2016,<sp/>Lawrence<sp/>Livermore<sp/>National<sp/>Security,<sp/>LLC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Produced<sp/>at<sp/>the<sp/>Lawrence<sp/>Livermore<sp/>National<sp/>Laboratory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Written<sp/>by<sp/>the<sp/>LBANN<sp/>Research<sp/>Team<sp/>(B.<sp/>Van<sp/>Essen,<sp/>et<sp/>al.)<sp/>listed<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>CONTRIBUTORS<sp/>file.<sp/>&lt;lbann-dev@llnl.gov&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LLNL-CODE-697807.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>LBANN:<sp/>Livermore<sp/>Big<sp/>Artificial<sp/>Neural<sp/>Network</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Toolkit.<sp/>For<sp/>details,<sp/>see<sp/>http://software.llnl.gov/LBANN<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://github.com/LLNL/LBANN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;Licensee&quot;);<sp/>you</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implied.<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>license.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>data_reader_mesh<sp/>.hpp<sp/>.cpp<sp/>-<sp/>data<sp/>reader<sp/>for<sp/>mesh<sp/>data</highlight></codeline>
<codeline lineno="28"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="data__reader__mesh_8hpp" kindref="compound">lbann/data_readers/data_reader_mesh.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="glob_8hpp" kindref="compound">lbann/utils/glob.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacelbann" kindref="compound">lbann</ref><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="classlbann_1_1mesh__reader_1aa101fb0ec314baedda7b9453de1933b6" refkind="member"><highlight class="normal"><ref refid="classlbann_1_1mesh__reader_1aa101fb0ec314baedda7b9453de1933b6" kindref="member">mesh_reader::mesh_reader</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>shuffle)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>:<sp/><ref refid="classlbann_1_1generic__data__reader" kindref="compound">generic_data_reader</ref>(shuffle)<sp/>{}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="classlbann_1_1mesh__reader_1a445c5a63f82da4d94905a205783dc377" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1mesh__reader_1a445c5a63f82da4d94905a205783dc377" kindref="member">mesh_reader::load</ref>()<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1mesh__reader_1aeb4e0df4e0be56244df5b663e2940d11" kindref="member">m_data_height</ref><sp/>==<sp/>0<sp/>||<sp/><ref refid="classlbann_1_1mesh__reader_1a8e16a565b0afd3097a0b6fe31a94641e" kindref="member">m_data_width</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight><highlight class="stringliteral">&quot;mesh_reader:<sp/>data<sp/>shape<sp/>must<sp/>be<sp/>non-zero&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>total<sp/>number<sp/>of<sp/>samples<sp/>based<sp/>on<sp/>number<sp/>of<sp/>targets.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>matches<sp/>=<sp/><ref refid="namespacelbann_1a840c9f1d5f27bc30d081fb90529889e6" kindref="member">glob</ref>(</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1ab4c6c2d4ba40ece809ce896828c8ff03" kindref="member">get_file_dir</ref>()<sp/>+<sp/><ref refid="classlbann_1_1mesh__reader_1a838ab7976ce9e3d85e727159a7d4720c" kindref="member">m_target_name</ref><sp/>+<sp/><ref refid="classlbann_1_1mesh__reader_1aefadeb4ee1b9202dcadb4625da21c451" kindref="member">m_suffix</ref><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/*.bin&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matches.size()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight><highlight class="stringliteral">&quot;mesh_reader:<sp/>could<sp/>not<sp/>find<sp/>any<sp/>targets&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1mesh__reader_1a93eb02b667d92b912958f8dd1ec8af05" kindref="member">m_num_samples</ref><sp/>=<sp/>matches.size();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>up<sp/>buffers<sp/>to<sp/>load<sp/>data<sp/>into.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1mesh__reader_1a43bcee9494e51c397af690eb0291b168" kindref="member">m_load_bufs</ref>.resize(omp_get_max_threads());</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>buf<sp/>:<sp/><ref refid="classlbann_1_1mesh__reader_1a43bcee9494e51c397af690eb0291b168" kindref="member">m_load_bufs</ref>)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>buf.resize(<ref refid="classlbann_1_1mesh__reader_1aeb4e0df4e0be56244df5b663e2940d11" kindref="member">m_data_height</ref><sp/>*<sp/><ref refid="classlbann_1_1mesh__reader_1a8e16a565b0afd3097a0b6fe31a94641e" kindref="member">m_data_width</ref>);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>up<sp/>the<sp/>format<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::pow(10,<sp/><ref refid="classlbann_1_1mesh__reader_1a43c1aec4b0f635f6f7bf52944ace1883" kindref="member">m_index_length</ref>)<sp/>&lt;=<sp/><ref refid="classlbann_1_1mesh__reader_1a93eb02b667d92b912958f8dd1ec8af05" kindref="member">m_num_samples</ref>)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight><highlight class="stringliteral">&quot;mesh_reader:<sp/>index<sp/>length<sp/>too<sp/>small&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1mesh__reader_1ae30866c8ae510d06eb63264de35917be" kindref="member">m_index_format_str</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;%0&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(<ref refid="classlbann_1_1mesh__reader_1a43c1aec4b0f635f6f7bf52944ace1883" kindref="member">m_index_length</ref>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>up<sp/>to<sp/>record<sp/>flipping<sp/>if<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1mesh__reader_1a0be20898f9c5d9b195587fb5fafc5d5a" kindref="member">m_random_flips</ref>)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1mesh__reader_1aa9301a3dcaf08c03298f696e1430e67a" kindref="member">m_flip_choices</ref>.resize(<ref refid="classlbann_1_1mesh__reader_1a93eb02b667d92b912958f8dd1ec8af05" kindref="member">m_num_samples</ref>);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>indices.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1aaab6aeff67ffff1c689336851fec2c57" kindref="member">m_shuffled_indices</ref>.resize(<ref refid="classlbann_1_1mesh__reader_1a93eb02b667d92b912958f8dd1ec8af05" kindref="member">m_num_samples</ref>);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>std::iota(<ref refid="classlbann_1_1generic__data__reader_1aaab6aeff67ffff1c689336851fec2c57" kindref="member">m_shuffled_indices</ref>.begin(),<sp/><ref refid="classlbann_1_1generic__data__reader_1aaab6aeff67ffff1c689336851fec2c57" kindref="member">m_shuffled_indices</ref>.end(),<sp/>0);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1aa28fdeeb6af492540f507e49adff5d6c" kindref="member">select_subset_of_data</ref>();</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="classlbann_1_1mesh__reader_1a0ed2aa6d5ec6509c15d0cf7d9657df29" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1mesh__reader_1a0ed2aa6d5ec6509c15d0cf7d9657df29" kindref="member">mesh_reader::fetch_datum</ref>(<ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>X,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data_id,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mb_idx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1mesh__reader_1a0be20898f9c5d9b195587fb5fafc5d5a" kindref="member">m_random_flips</ref>)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelbann_1af16616ffa6a3616836eabadd6ce837ec" kindref="member">fast_rng_gen</ref>&amp;<sp/>gen<sp/>=<sp/><ref refid="namespacelbann_1ae6ce9c2fdec6f81803f6b1a6555c31c5" kindref="member">get_fast_generator</ref>();</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uniform_int_distribution&lt;int&gt;<sp/>dist(0,<sp/>1);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1mesh__reader_1aa9301a3dcaf08c03298f696e1430e67a" kindref="member">m_flip_choices</ref>[data_id].first<sp/>=<sp/>dist(gen);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1mesh__reader_1aa9301a3dcaf08c03298f696e1430e67a" kindref="member">m_flip_choices</ref>[data_id].second<sp/>=<sp/>dist(gen);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classlbann_1_1mesh__reader_1a9260add45b0421acb0ab28dd8f6d8cc6" kindref="member">m_channels</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref><sp/>X_view<sp/>=<sp/>El::View(</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>X,<sp/>El::IR(i*<ref refid="classlbann_1_1mesh__reader_1aeb4e0df4e0be56244df5b663e2940d11" kindref="member">m_data_height</ref>*<ref refid="classlbann_1_1mesh__reader_1a8e16a565b0afd3097a0b6fe31a94641e" kindref="member">m_data_width</ref>,<sp/>(i+1)*<ref refid="classlbann_1_1mesh__reader_1aeb4e0df4e0be56244df5b663e2940d11" kindref="member">m_data_height</ref>*m_data_width),</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>El::IR(mb_idx));</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1mesh__reader_1a8cbffa6676c89c44174a7085ea3baeca" kindref="member">load_file</ref>(data_id,<sp/><ref refid="classlbann_1_1mesh__reader_1a9260add45b0421acb0ab28dd8f6d8cc6" kindref="member">m_channels</ref>[i],<sp/>X_view);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="classlbann_1_1mesh__reader_1acc56c299c9ec75506d2780d2098cbe99" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1mesh__reader_1acc56c299c9ec75506d2780d2098cbe99" kindref="member">mesh_reader::fetch_response</ref>(<ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>Y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data_id,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mb_idx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref><sp/>Y_view<sp/>=<sp/>El::View(Y,<sp/>El::ALL,<sp/>El::IR(mb_idx));</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1mesh__reader_1a8cbffa6676c89c44174a7085ea3baeca" kindref="member">load_file</ref>(data_id,<sp/><ref refid="classlbann_1_1mesh__reader_1a838ab7976ce9e3d85e727159a7d4720c" kindref="member">m_target_name</ref>,<sp/>Y_view);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="classlbann_1_1mesh__reader_1a8cbffa6676c89c44174a7085ea3baeca" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1mesh__reader_1a8cbffa6676c89c44174a7085ea3baeca" kindref="member">mesh_reader::load_file</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data_id,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>channel,<sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>mat)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>filename<sp/>=<sp/><ref refid="classlbann_1_1mesh__reader_1a61fd5f3231815ec79eb3cf17070509f9" kindref="member">construct_filename</ref>(channel,<sp/>data_id);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>std::ifstream<sp/>f(filename,<sp/>std::ios::binary);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f.fail())<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight><highlight class="stringliteral">&quot;mesh_reader:<sp/>failed<sp/>to<sp/>open<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>filename);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>into<sp/>a<sp/>local<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>buf<sp/>=<sp/><ref refid="classlbann_1_1mesh__reader_1a43bcee9494e51c397af690eb0291b168" kindref="member">m_load_bufs</ref>[omp_get_thread_num()].data();</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f.read((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>buf,<sp/><ref refid="classlbann_1_1mesh__reader_1aeb4e0df4e0be56244df5b663e2940d11" kindref="member">m_data_height</ref><sp/>*<sp/><ref refid="classlbann_1_1mesh__reader_1a8e16a565b0afd3097a0b6fe31a94641e" kindref="member">m_data_width</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight><highlight class="stringliteral">&quot;mesh_reader:<sp/>failed<sp/>to<sp/>read<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>filename);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_same&lt;float,<sp/>DataType&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Need<sp/>to<sp/>transpose<sp/>from<sp/>row-major<sp/>to<sp/>column-major<sp/>order.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref><sp/>tmp_mat(<ref refid="classlbann_1_1mesh__reader_1a8e16a565b0afd3097a0b6fe31a94641e" kindref="member">m_data_width</ref>,<sp/><ref refid="classlbann_1_1mesh__reader_1aeb4e0df4e0be56244df5b663e2940d11" kindref="member">m_data_height</ref>,<sp/>buf,<sp/><ref refid="classlbann_1_1mesh__reader_1a8e16a565b0afd3097a0b6fe31a94641e" kindref="member">m_data_width</ref>);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref><sp/>mat_reshape(<ref refid="classlbann_1_1mesh__reader_1aeb4e0df4e0be56244df5b663e2940d11" kindref="member">m_data_height</ref>,<sp/><ref refid="classlbann_1_1mesh__reader_1a8e16a565b0afd3097a0b6fe31a94641e" kindref="member">m_data_width</ref>,<sp/>mat.Buffer(),<sp/><ref refid="classlbann_1_1mesh__reader_1aeb4e0df4e0be56244df5b663e2940d11" kindref="member">m_data_height</ref>);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>El::Transpose(tmp_mat,<sp/>mat_reshape);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Flip<sp/>if<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1mesh__reader_1a0be20898f9c5d9b195587fb5fafc5d5a" kindref="member">m_random_flips</ref>)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1mesh__reader_1aa9301a3dcaf08c03298f696e1430e67a" kindref="member">m_flip_choices</ref>[data_id].first)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1mesh__reader_1a8cff71603c2d652f8b000a5dc4c75431" kindref="member">horizontal_flip</ref>(mat_reshape);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1mesh__reader_1aa9301a3dcaf08c03298f696e1430e67a" kindref="member">m_flip_choices</ref>[data_id].second)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1mesh__reader_1a4b578dc1ba067a07748de0977d97b6bc" kindref="member">vertical_flip</ref>(mat_reshape);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Need<sp/>to<sp/>transpose<sp/>and<sp/>convert<sp/>from<sp/>float.<sp/>Not<sp/>yet<sp/>supported.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight><highlight class="stringliteral">&quot;mesh_reader:<sp/>does<sp/>not<sp/>support<sp/>DataType<sp/>!=<sp/>float&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="classlbann_1_1mesh__reader_1a61fd5f3231815ec79eb3cf17070509f9" refkind="member"><highlight class="normal">std::string<sp/><ref refid="classlbann_1_1mesh__reader_1a61fd5f3231815ec79eb3cf17070509f9" kindref="member">mesh_reader::construct_filename</ref>(std::string<sp/>channel,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data_id)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>std::string<sp/>filename<sp/>=<sp/><ref refid="classlbann_1_1generic__data__reader_1ab4c6c2d4ba40ece809ce896828c8ff03" kindref="member">get_file_dir</ref>()<sp/>+<sp/>channel<sp/>+<sp/><ref refid="classlbann_1_1mesh__reader_1aefadeb4ee1b9202dcadb4625da21c451" kindref="member">m_suffix</ref><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>channel;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>idx[<ref refid="classlbann_1_1mesh__reader_1a43c1aec4b0f635f6f7bf52944ace1883" kindref="member">m_index_length</ref><sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>std::snprintf(idx,<sp/><ref refid="classlbann_1_1mesh__reader_1a43c1aec4b0f635f6f7bf52944ace1883" kindref="member">m_index_length</ref><sp/>+<sp/>1,<sp/><ref refid="classlbann_1_1mesh__reader_1ae30866c8ae510d06eb63264de35917be" kindref="member">m_index_format_str</ref>.c_str(),<sp/>data_id);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>filename<sp/>+<sp/>std::string(idx)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.bin&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="classlbann_1_1mesh__reader_1a8cff71603c2d652f8b000a5dc4c75431" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1mesh__reader_1a8cff71603c2d652f8b000a5dc4c75431" kindref="member">mesh_reader::horizontal_flip</ref>(<ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>mat)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Could<sp/>probably<sp/>optimize<sp/>this<sp/>for<sp/>better<sp/>locality.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Int<sp/>height<sp/>=<sp/>mat.Height();</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Int<sp/>width<sp/>=<sp/>mat.Width();</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(El::Int<sp/>row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>height;<sp/>++row)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(El::Int<sp/>col<sp/>=<sp/>0;<sp/>col<sp/>&lt;<sp/>(width<sp/>/<sp/>2);<sp/>++col)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DataType<sp/>tmp<sp/>=<sp/>mat(row,<sp/>col);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mat(row,<sp/>col)<sp/>=<sp/>mat(row,<sp/>width<sp/>-<sp/>col<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mat(row,<sp/>width<sp/>-<sp/>col<sp/>-<sp/>1)<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141" refid="classlbann_1_1mesh__reader_1a4b578dc1ba067a07748de0977d97b6bc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1mesh__reader_1a4b578dc1ba067a07748de0977d97b6bc" kindref="member">mesh_reader::vertical_flip</ref>(<ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>mat)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Could<sp/>probably<sp/>optimize<sp/>this<sp/>for<sp/>better<sp/>locality.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Int<sp/>height<sp/>=<sp/>mat.Height();</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>El::Int<sp/>width<sp/>=<sp/>mat.Width();</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(El::Int<sp/>row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>(height<sp/>/<sp/>2);<sp/>++row)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(El::Int<sp/>col<sp/>=<sp/>0;<sp/>col<sp/>&lt;<sp/>width;<sp/>++col)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DataType<sp/>tmp<sp/>=<sp/>mat(row,<sp/>col);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mat(row,<sp/>col)<sp/>=<sp/>mat(height<sp/>-<sp/>row<sp/>-<sp/>1,<sp/>col);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mat(height<sp/>-<sp/>row<sp/>-<sp/>1,<sp/>col)<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>lbann</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/mckinney27/doxy-testbed/lbann/src/data_readers/data_reader_mesh.cpp"/>
  </compounddef>
</doxygen>
