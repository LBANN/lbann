<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="objective__function_8cpp" kind="file" language="C++">
    <compoundname>objective_function.cpp</compoundname>
    <includes refid="objective__function_8hpp" local="yes">lbann/objective_functions/objective_function.hpp</includes>
    <includes refid="timer_8hpp" local="yes">lbann/utils/timer.hpp</includes>
    <includes local="no">numeric</includes>
    <incdepgraph>
      <node id="22450">
        <label>lbann/utils/summary.hpp</label>
        <link refid="summary_8hpp"/>
        <childnode refid="22451" relation="include">
        </childnode>
        <childnode refid="22447" relation="include">
        </childnode>
        <childnode refid="22436" relation="include">
        </childnode>
        <childnode refid="22446" relation="include">
        </childnode>
      </node>
      <node id="22462">
        <label>lbann/io/persist.hpp</label>
        <link refid="persist_8hpp"/>
        <childnode refid="22436" relation="include">
        </childnode>
        <childnode refid="22437" relation="include">
        </childnode>
      </node>
      <node id="22437">
        <label>El.hpp</label>
      </node>
      <node id="22436">
        <label>lbann/base.hpp</label>
        <link refid="base_8hpp"/>
        <childnode refid="22437" relation="include">
        </childnode>
        <childnode refid="22438" relation="include">
        </childnode>
        <childnode refid="22439" relation="include">
        </childnode>
        <childnode refid="22444" relation="include">
        </childnode>
      </node>
      <node id="22468">
        <label>numeric</label>
      </node>
      <node id="22467">
        <label>lbann/metrics/metric.hpp</label>
        <link refid="metric_8hpp"/>
        <childnode refid="22436" relation="include">
        </childnode>
        <childnode refid="22446" relation="include">
        </childnode>
        <childnode refid="22454" relation="include">
        </childnode>
        <childnode refid="22462" relation="include">
        </childnode>
      </node>
      <node id="22451">
        <label>string</label>
      </node>
      <node id="22459">
        <label>lbann/utils/cudnn_wrapper.hpp</label>
        <link refid="cudnn__wrapper_8hpp"/>
        <childnode refid="22447" relation="include">
        </childnode>
        <childnode refid="22436" relation="include">
        </childnode>
        <childnode refid="22446" relation="include">
        </childnode>
        <childnode refid="22454" relation="include">
        </childnode>
      </node>
      <node id="22465">
        <label>lbann/utils/timer.hpp</label>
        <link refid="timer_8hpp"/>
        <childnode refid="22466" relation="include">
        </childnode>
      </node>
      <node id="22448">
        <label>map</label>
      </node>
      <node id="22464">
        <label>unordered_set</label>
      </node>
      <node id="22458">
        <label>exception</label>
      </node>
      <node id="22461">
        <label>lbann/weights/initializer.hpp</label>
        <link refid="initializer_8hpp"/>
        <childnode refid="22436" relation="include">
        </childnode>
        <childnode refid="22446" relation="include">
        </childnode>
        <childnode refid="22454" relation="include">
        </childnode>
        <childnode refid="22459" relation="include">
        </childnode>
      </node>
      <node id="22441">
        <label>cstdio</label>
      </node>
      <node id="22455">
        <label>lbann/utils/stack_trace.hpp</label>
        <link refid="stack__trace_8hpp"/>
        <childnode refid="22456" relation="include">
        </childnode>
        <childnode refid="22451" relation="include">
        </childnode>
      </node>
      <node id="22443">
        <label>cxxabi.h</label>
      </node>
      <node id="22454">
        <label>lbann/utils/exception.hpp</label>
        <link refid="exception_8hpp"/>
        <childnode refid="22436" relation="include">
        </childnode>
        <childnode refid="22446" relation="include">
        </childnode>
        <childnode refid="22455" relation="include">
        </childnode>
        <childnode refid="22457" relation="include">
        </childnode>
        <childnode refid="22458" relation="include">
        </childnode>
      </node>
      <node id="22447">
        <label>vector</label>
      </node>
      <node id="22446">
        <label>lbann/comm.hpp</label>
        <link refid="comm_8hpp"/>
        <childnode refid="22447" relation="include">
        </childnode>
        <childnode refid="22448" relation="include">
        </childnode>
        <childnode refid="22449" relation="include">
        </childnode>
        <childnode refid="22436" relation="include">
        </childnode>
      </node>
      <node id="22434">
        <label>lbann/objective_functions/objective_function.hpp</label>
        <link refid="objective__function_8hpp"/>
        <childnode refid="22435" relation="include">
        </childnode>
        <childnode refid="22467" relation="include">
        </childnode>
      </node>
      <node id="22463">
        <label>lbann.pb.h</label>
      </node>
      <node id="22440">
        <label>cstdlib</label>
      </node>
      <node id="22457">
        <label>iostream</label>
      </node>
      <node id="22452">
        <label>lbann/optimizers/optimizer.hpp</label>
        <link refid="optimizer_8hpp"/>
        <childnode refid="22453" relation="include">
        </childnode>
        <childnode refid="22436" relation="include">
        </childnode>
        <childnode refid="22446" relation="include">
        </childnode>
        <childnode refid="22454" relation="include">
        </childnode>
        <childnode refid="22459" relation="include">
        </childnode>
        <childnode refid="22460" relation="include">
        </childnode>
        <childnode refid="22451" relation="include">
        </childnode>
        <childnode refid="22464" relation="include">
        </childnode>
      </node>
      <node id="22445">
        <label>lbann/layers/layer.hpp</label>
        <link refid="layer_8hpp"/>
        <childnode refid="22436" relation="include">
        </childnode>
        <childnode refid="22446" relation="include">
        </childnode>
        <childnode refid="22450" relation="include">
        </childnode>
        <childnode refid="22452" relation="include">
        </childnode>
        <childnode refid="22454" relation="include">
        </childnode>
        <childnode refid="22459" relation="include">
        </childnode>
        <childnode refid="22465" relation="include">
        </childnode>
        <childnode refid="22462" relation="include">
        </childnode>
        <childnode refid="22463" relation="include">
        </childnode>
        <childnode refid="22451" relation="include">
        </childnode>
        <childnode refid="22447" relation="include">
        </childnode>
      </node>
      <node id="22466">
        <label>chrono</label>
      </node>
      <node id="22435">
        <label>lbann/objective_functions/objective_function_term.hpp</label>
        <link refid="objective__function__term_8hpp"/>
        <childnode refid="22436" relation="include">
        </childnode>
        <childnode refid="22445" relation="include">
        </childnode>
        <childnode refid="22460" relation="include">
        </childnode>
      </node>
      <node id="22456">
        <label>csignal</label>
      </node>
      <node id="22460">
        <label>lbann/weights/weights.hpp</label>
        <link refid="weights_8hpp"/>
        <childnode refid="22451" relation="include">
        </childnode>
        <childnode refid="22436" relation="include">
        </childnode>
        <childnode refid="22446" relation="include">
        </childnode>
        <childnode refid="22454" relation="include">
        </childnode>
        <childnode refid="22459" relation="include">
        </childnode>
        <childnode refid="22461" relation="include">
        </childnode>
        <childnode refid="22462" relation="include">
        </childnode>
        <childnode refid="22463" relation="include">
        </childnode>
      </node>
      <node id="22433">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/objective_functions/objective_function.cpp</label>
        <link refid="objective__function_8cpp"/>
        <childnode refid="22434" relation="include">
        </childnode>
        <childnode refid="22465" relation="include">
        </childnode>
        <childnode refid="22468" relation="include">
        </childnode>
      </node>
      <node id="22444">
        <label>lbann_config.hpp</label>
      </node>
      <node id="22453">
        <label>lbann/utils/compiler_control.hpp</label>
        <link refid="compiler__control_8hpp"/>
      </node>
      <node id="22439">
        <label>lbann/utils/cyg_profile.hpp</label>
        <link refid="cyg__profile_8hpp"/>
        <childnode refid="22440" relation="include">
        </childnode>
        <childnode refid="22441" relation="include">
        </childnode>
        <childnode refid="22442" relation="include">
        </childnode>
        <childnode refid="22443" relation="include">
        </childnode>
      </node>
      <node id="22438">
        <label>lbann/Elemental_extensions.hpp</label>
        <link refid="Elemental__extensions_8hpp"/>
        <childnode refid="22437" relation="include">
        </childnode>
      </node>
      <node id="22449">
        <label>typeindex</label>
      </node>
      <node id="22442">
        <label>dlfcn.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacelbann">lbann</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2014-2016,<sp/>Lawrence<sp/>Livermore<sp/>National<sp/>Security,<sp/>LLC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Produced<sp/>at<sp/>the<sp/>Lawrence<sp/>Livermore<sp/>National<sp/>Laboratory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Written<sp/>by<sp/>the<sp/>LBANN<sp/>Research<sp/>Team<sp/>(B.<sp/>Van<sp/>Essen,<sp/>et<sp/>al.)<sp/>listed<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>CONTRIBUTORS<sp/>file.<sp/>&lt;lbann-dev@llnl.gov&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LLNL-CODE-697807.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>LBANN:<sp/>Livermore<sp/>Big<sp/>Artificial<sp/>Neural<sp/>Network</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Toolkit.<sp/>For<sp/>details,<sp/>see<sp/>http://software.llnl.gov/LBANN<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://github.com/LLNL/LBANN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;Licensee&quot;);<sp/>you</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implied.<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>license.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="objective__function_8hpp" kindref="compound">lbann/objective_functions/objective_function.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="timer_8hpp" kindref="compound">lbann/utils/timer.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;numeric&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacelbann" kindref="compound">lbann</ref><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="classlbann_1_1objective__function_1a67523a368d2fc31d8be9081139ec0a73" refkind="member"><highlight class="normal"><ref refid="classlbann_1_1objective__function_1a89e96fddff19f13a6d3acafe4394fd65" kindref="member">objective_function::objective_function</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1objective__function" kindref="compound">objective_function</ref>&amp;<sp/>other)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>:<sp/>m_statistics(other.m_statistics),</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>m_evaluation_time(other.m_evaluation_time),</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>m_differentiation_time(other.m_differentiation_time)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1objective__function_1aea9c1f90ba9af1b1330efa2ba6adb5e2" kindref="member">m_terms</ref><sp/>=<sp/>other.<ref refid="classlbann_1_1objective__function_1aea9c1f90ba9af1b1330efa2ba6adb5e2" kindref="member">m_terms</ref>;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>term<sp/>:<sp/><ref refid="classlbann_1_1objective__function_1aea9c1f90ba9af1b1330efa2ba6adb5e2" kindref="member">m_terms</ref>)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>term<sp/>=<sp/>term-&gt;copy();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="classlbann_1_1objective__function_1ab0695b92af6dec63912e5ef0cb81b953" refkind="member"><highlight class="normal"><ref refid="classlbann_1_1objective__function" kindref="compound">objective_function</ref>&amp;<sp/><ref refid="classlbann_1_1objective__function_1ab0695b92af6dec63912e5ef0cb81b953" kindref="member">objective_function::operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1objective__function" kindref="compound">objective_function</ref>&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>term<sp/>:<sp/><ref refid="classlbann_1_1objective__function_1aea9c1f90ba9af1b1330efa2ba6adb5e2" kindref="member">m_terms</ref>)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(term<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>term;<sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>m_terms<sp/>=<sp/>other.<ref refid="classlbann_1_1objective__function_1aea9c1f90ba9af1b1330efa2ba6adb5e2" kindref="member">m_terms</ref>;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>term<sp/>:<sp/>m_terms)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>term<sp/>=<sp/>term-&gt;copy();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1objective__function_1ad5daa18c52374a849c6fbd515bcc1eb1" kindref="member">m_statistics</ref><sp/>=<sp/>other.<ref refid="classlbann_1_1objective__function_1ad5daa18c52374a849c6fbd515bcc1eb1" kindref="member">m_statistics</ref>;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1objective__function_1a9ef17c7204cd371261c9c083d86de91a" kindref="member">m_evaluation_time</ref><sp/>=<sp/>other.<ref refid="classlbann_1_1objective__function_1a9ef17c7204cd371261c9c083d86de91a" kindref="member">m_evaluation_time</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1objective__function_1ae526559f3a530f540a29407ea64bbea6" kindref="member">m_differentiation_time</ref><sp/>=<sp/>other.<ref refid="classlbann_1_1objective__function_1ae526559f3a530f540a29407ea64bbea6" kindref="member">m_differentiation_time</ref>;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="classlbann_1_1objective__function_1a823ebffb8056cb4a9ff0b2af7cf084b4" refkind="member"><highlight class="normal"><ref refid="classlbann_1_1objective__function_1a823ebffb8056cb4a9ff0b2af7cf084b4" kindref="member">objective_function::~objective_function</ref>()<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>term<sp/>:<sp/><ref refid="classlbann_1_1objective__function_1aea9c1f90ba9af1b1330efa2ba6adb5e2" kindref="member">m_terms</ref>)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(term<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>term;<sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="classlbann_1_1objective__function_1ac14bb274978e0a5182122fd179579878" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1objective__function_1ac14bb274978e0a5182122fd179579878" kindref="member">objective_function::setup</ref>(<ref refid="classlbann_1_1model" kindref="compound">model</ref>&amp;<sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1objective__function__term" kindref="compound">objective_function_term</ref><sp/>*term<sp/>:<sp/><ref refid="classlbann_1_1objective__function_1aea9c1f90ba9af1b1330efa2ba6adb5e2" kindref="member">m_terms</ref>)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(term<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>err;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>&lt;&lt;<sp/>__FILE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>__LINE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;a<sp/>term<sp/>in<sp/>the<sp/>objective<sp/>function<sp/>is<sp/>a<sp/>null<sp/>pointer&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(err.str());</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>term-&gt;setup(m);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="classlbann_1_1objective__function_1a3edb6708894d31ec2a014c6eb8a61df2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1objective__function_1a3edb6708894d31ec2a014c6eb8a61df2" kindref="member">objective_function::start_evaluation</ref>(<ref refid="base_8hpp_1a2781a159088df64ed7d47cc91c4dc0a8" kindref="member">execution_mode</ref><sp/>mode,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mini_batch_size)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>start_time<sp/>=<sp/><ref refid="namespacelbann_1a478d36031ff0659893c4322cd856157f" kindref="member">get_time</ref>();</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>term<sp/>:<sp/><ref refid="classlbann_1_1objective__function_1aea9c1f90ba9af1b1330efa2ba6adb5e2" kindref="member">m_terms</ref>)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>term-&gt;start_evaluation();</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1objective__function_1a9ef17c7204cd371261c9c083d86de91a" kindref="member">m_evaluation_time</ref><sp/>+=<sp/><ref refid="namespacelbann_1a478d36031ff0659893c4322cd856157f" kindref="member">get_time</ref>()<sp/>-<sp/>start_time;</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="classlbann_1_1objective__function_1ad35ce9b7daa87d197d00b1762b691a02" refkind="member"><highlight class="normal"><ref refid="base_8hpp_1a3266f5ac18504bbadea983c109566867" kindref="member">EvalType</ref><sp/><ref refid="classlbann_1_1objective__function_1ad35ce9b7daa87d197d00b1762b691a02" kindref="member">objective_function::finish_evaluation</ref>(<ref refid="base_8hpp_1a2781a159088df64ed7d47cc91c4dc0a8" kindref="member">execution_mode</ref><sp/>mode,</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mini_batch_size)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>start_time<sp/>=<sp/><ref refid="namespacelbann_1a478d36031ff0659893c4322cd856157f" kindref="member">get_time</ref>();</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><ref refid="base_8hpp_1a3266f5ac18504bbadea983c109566867" kindref="member">EvalType</ref><sp/>value<sp/>=<sp/><ref refid="base_8hpp_1a3266f5ac18504bbadea983c109566867" kindref="member">EvalType</ref>(0);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>term<sp/>:<sp/><ref refid="classlbann_1_1objective__function_1aea9c1f90ba9af1b1330efa2ba6adb5e2" kindref="member">m_terms</ref>)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>+=<sp/>term-&gt;finish_evaluation();</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1objective__function_1ad5daa18c52374a849c6fbd515bcc1eb1" kindref="member">m_statistics</ref>[mode].add_value(mini_batch_size<sp/>*<sp/>value,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mini_batch_size);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1objective__function_1a9ef17c7204cd371261c9c083d86de91a" kindref="member">m_evaluation_time</ref><sp/>+=<sp/><ref refid="namespacelbann_1a478d36031ff0659893c4322cd856157f" kindref="member">get_time</ref>()<sp/>-<sp/>start_time;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="classlbann_1_1objective__function_1ae8b7314bdc12ba52d270b46a35acd138" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1objective__function_1ae8b7314bdc12ba52d270b46a35acd138" kindref="member">objective_function::differentiate</ref>()<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>start_time<sp/>=<sp/><ref refid="namespacelbann_1a478d36031ff0659893c4322cd856157f" kindref="member">get_time</ref>();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>term<sp/>:<sp/><ref refid="classlbann_1_1objective__function_1aea9c1f90ba9af1b1330efa2ba6adb5e2" kindref="member">m_terms</ref>)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>term-&gt;differentiate();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1objective__function_1ae526559f3a530f540a29407ea64bbea6" kindref="member">m_differentiation_time</ref><sp/>+=<sp/><ref refid="namespacelbann_1a478d36031ff0659893c4322cd856157f" kindref="member">get_time</ref>()<sp/>-<sp/>start_time;</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="classlbann_1_1objective__function_1a7b7f8869bf110846e971fef995db51e1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1objective__function_1a7b7f8869bf110846e971fef995db51e1" kindref="member">objective_function::compute_weight_regularization</ref>()<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>start_time<sp/>=<sp/><ref refid="namespacelbann_1a478d36031ff0659893c4322cd856157f" kindref="member">get_time</ref>();</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>term<sp/>:<sp/><ref refid="classlbann_1_1objective__function_1aea9c1f90ba9af1b1330efa2ba6adb5e2" kindref="member">m_terms</ref>)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>term-&gt;compute_weight_regularization();</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1objective__function_1ae526559f3a530f540a29407ea64bbea6" kindref="member">m_differentiation_time</ref><sp/>+=<sp/><ref refid="namespacelbann_1a478d36031ff0659893c4322cd856157f" kindref="member">get_time</ref>()<sp/>-<sp/>start_time;</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="classlbann_1_1objective__function_1a0aa271e497363e97ba3741292961d47d" refkind="member"><highlight class="normal"><ref refid="base_8hpp_1a3266f5ac18504bbadea983c109566867" kindref="member">EvalType</ref><sp/><ref refid="classlbann_1_1objective__function_1a0aa271e497363e97ba3741292961d47d" kindref="member">objective_function::get_mean_value</ref>(<ref refid="base_8hpp_1a2781a159088df64ed7d47cc91c4dc0a8" kindref="member">execution_mode</ref><sp/>mode)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1objective__function_1ad5daa18c52374a849c6fbd515bcc1eb1" kindref="member">m_statistics</ref>.count(mode)<sp/>==<sp/>0</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/><ref refid="classlbann_1_1objective__function_1ad5daa18c52374a849c6fbd515bcc1eb1" kindref="member">m_statistics</ref>.at(mode).get_num_samples()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>err;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>&lt;&lt;<sp/>__FILE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>__LINE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;attempted<sp/>to<sp/>get<sp/>mean<sp/>objective<sp/>function<sp/>value<sp/>with<sp/>no<sp/>samples<sp/>for<sp/>statistics&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(err.str());</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1objective__function_1ad5daa18c52374a849c6fbd515bcc1eb1" kindref="member">m_statistics</ref>.at(mode).get_mean();</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="classlbann_1_1objective__function_1a19078ce481d321627adfe0151112602e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1objective__function_1a19078ce481d321627adfe0151112602e" kindref="member">objective_function::get_statistics_num_samples</ref>(<ref refid="base_8hpp_1a2781a159088df64ed7d47cc91c4dc0a8" kindref="member">execution_mode</ref><sp/>mode)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1objective__function_1ad5daa18c52374a849c6fbd515bcc1eb1" kindref="member">m_statistics</ref>.count(mode)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1objective__function_1ad5daa18c52374a849c6fbd515bcc1eb1" kindref="member">m_statistics</ref>.at(mode).get_num_samples();</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="classlbann_1_1objective__function_1a1055da2236a7faf79c5a2632f8dfc683" refkind="member"><highlight class="normal">std::vector&lt;Layer*&gt;<sp/><ref refid="classlbann_1_1objective__function_1a1055da2236a7faf79c5a2632f8dfc683" kindref="member">objective_function::get_layer_pointers</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>std::vector&lt;Layer*&gt;<sp/>layers;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1objective__function__term" kindref="compound">objective_function_term</ref><sp/>*term<sp/>:<sp/><ref refid="classlbann_1_1objective__function_1aea9c1f90ba9af1b1330efa2ba6adb5e2" kindref="member">m_terms</ref>)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Layer*&gt;<sp/>term_layers<sp/>=<sp/>term-&gt;get_layer_pointers();</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>layers.insert(layers.end(),<sp/>term_layers.begin(),<sp/>term_layers.end());</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>layers;</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141" refid="classlbann_1_1objective__function_1a0f934e078b55528dd0ec1ec8ad34c73b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1objective__function_1a0f934e078b55528dd0ec1ec8ad34c73b" kindref="member">objective_function::set_layer_pointers</ref>(std::vector&lt;Layer*&gt;<sp/>layers)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>layers.begin();</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1objective__function__term" kindref="compound">objective_function_term</ref><sp/>*term<sp/>:<sp/><ref refid="classlbann_1_1objective__function_1aea9c1f90ba9af1b1330efa2ba6adb5e2" kindref="member">m_terms</ref>)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_layers<sp/>=<sp/>term-&gt;get_layer_pointers().size();</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Layer*&gt;<sp/>term_layers(it,<sp/>it<sp/>+<sp/>num_layers);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>term-&gt;set_layer_pointers(term_layers);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>it<sp/>+=<sp/>num_layers;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>layers.end())<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>err;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>&lt;&lt;<sp/>__FILE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>__LINE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;attempted<sp/>to<sp/>set<sp/>an<sp/>invalid<sp/>number<sp/>of<sp/>layer<sp/>pointers<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(expected<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>it<sp/>-<sp/>layers.begin()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;found<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>layers.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(err.str());</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159" refid="classlbann_1_1objective__function_1a8e37f76e42f6f341ea3592001b3794e5" refkind="member"><highlight class="normal">std::vector&lt;weights*&gt;<sp/><ref refid="classlbann_1_1objective__function_1a8e37f76e42f6f341ea3592001b3794e5" kindref="member">objective_function::get_weights_pointers</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>std::vector&lt;weights*&gt;<sp/>w;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1objective__function__term" kindref="compound">objective_function_term</ref><sp/>*term<sp/>:<sp/><ref refid="classlbann_1_1objective__function_1aea9c1f90ba9af1b1330efa2ba6adb5e2" kindref="member">m_terms</ref>)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;weights*&gt;<sp/>term_weights<sp/>=<sp/>term-&gt;get_weights_pointers();</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>w.insert(w.end(),<sp/>term_weights.begin(),<sp/>term_weights.end());</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>w;</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168" refid="classlbann_1_1objective__function_1a9c3211354ca1cee8a7ba219f4e56e03c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1objective__function_1a9c3211354ca1cee8a7ba219f4e56e03c" kindref="member">objective_function::set_weights_pointers</ref>(std::vector&lt;weights*&gt;<sp/>w)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>w.begin();</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1objective__function__term" kindref="compound">objective_function_term</ref><sp/>*term<sp/>:<sp/><ref refid="classlbann_1_1objective__function_1aea9c1f90ba9af1b1330efa2ba6adb5e2" kindref="member">m_terms</ref>)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_weights<sp/>=<sp/>term-&gt;get_weights_pointers().size();</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;weights*&gt;<sp/>term_weights(it,<sp/>it<sp/>+<sp/>num_weights);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>term-&gt;set_weights_pointers(term_weights);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>it<sp/>+=<sp/>num_weights;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>w.end())<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>err;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>&lt;&lt;<sp/>__FILE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>__LINE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;attempted<sp/>to<sp/>set<sp/>an<sp/>invalid<sp/>number<sp/>of<sp/>weights<sp/>pointers<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(expected<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>it<sp/>-<sp/>w.begin()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;found<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>w.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(err.str());</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186" refid="classlbann_1_1objective__function_1a5c7de99300ce17535648bfcbc3b97aeb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1objective__function_1a5c7de99300ce17535648bfcbc3b97aeb" kindref="member">objective_function::save_to_checkpoint_shared</ref>(<ref refid="classlbann_1_1persist" kindref="compound">lbann::persist</ref>&amp;<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1objective__function__term" kindref="compound">objective_function_term</ref><sp/>*term<sp/>:<sp/><ref refid="classlbann_1_1objective__function_1aea9c1f90ba9af1b1330efa2ba6adb5e2" kindref="member">m_terms</ref>)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>term-&gt;save_to_checkpoint_shared(p);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193" refid="classlbann_1_1objective__function_1a82fec97efbb8c4f68a674d42e0f2faa4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1objective__function_1a82fec97efbb8c4f68a674d42e0f2faa4" kindref="member">objective_function::load_from_checkpoint_shared</ref>(<ref refid="classlbann_1_1persist" kindref="compound">lbann::persist</ref>&amp;<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1objective__function__term" kindref="compound">objective_function_term</ref><sp/>*term<sp/>:<sp/><ref refid="classlbann_1_1objective__function_1aea9c1f90ba9af1b1330efa2ba6adb5e2" kindref="member">m_terms</ref>)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>term-&gt;load_from_checkpoint_shared(p);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>lbann</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/mckinney27/doxy-testbed/lbann/src/objective_functions/objective_function.cpp"/>
  </compounddef>
</doxygen>
