<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacelbann_1_1graph" kind="namespace" language="C++">
    <compoundname>lbann::graph</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacelbann_1_1graph_1a956e9f6f1b842a2ffe5bda9015bbb906" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::graph::print</definition>
        <argsstring>(const std::set&lt; int &gt; &amp;nodes, const std::map&lt; int, std::set&lt; int &gt;&gt; &amp;edges, std::ostream &amp;os)</argsstring>
        <name>print</name>
        <param>
          <type>const std::set&lt; int &gt; &amp;</type>
          <declname>nodes</declname>
        </param>
        <param>
          <type>const std::map&lt; int, std::set&lt; int &gt;&gt; &amp;</type>
          <declname>edges</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
          <defval>std::cout</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Print the nodes and edges of a graph to an output stream. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/graph.cpp" line="37" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/graph.cpp" bodystart="37" bodyend="47"/>
        <references refid="namespacelbann_1_1graph_1ad305e0d104d25d9cb1e63a4b93c0847c" compoundref="graph_8cpp" startline="49" endline="56">get_neighbors</references>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1_1graph_1ad305e0d104d25d9cb1e63a4b93c0847c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::set&lt; int &gt;</type>
        <definition>std::set&lt; int &gt; lbann::graph::get_neighbors</definition>
        <argsstring>(int node, const std::map&lt; int, std::set&lt; int &gt;&gt; &amp;edges)</argsstring>
        <name>get_neighbors</name>
        <param>
          <type>int</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const std::map&lt; int, std::set&lt; int &gt;&gt; &amp;</type>
          <declname>edges</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get nodes adjacent to a given node. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/graph.cpp" line="49" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/graph.cpp" bodystart="49" bodyend="56"/>
        <referencedby refid="namespacelbann_1_1graph_1a956e9f6f1b842a2ffe5bda9015bbb906" compoundref="graph_8cpp" startline="37" endline="47">print</referencedby>
        <referencedby refid="namespacelbann_1_1graph_1ac9c1819b38f8bc514ab24ac8778f840b" compoundref="graph_8cpp" startline="58" endline="68">is_closure</referencedby>
        <referencedby refid="namespacelbann_1_1graph_1a0dd9dcef8bc13481677692347530e328" compoundref="graph_8cpp" startline="70" endline="84">is_topologically_sorted</referencedby>
        <referencedby refid="namespacelbann_1_1graph_1a7cb66f3455c79ca9c959bcf2c36a92eb" compoundref="graph_8cpp" startline="86" endline="127">is_cyclic</referencedby>
        <referencedby refid="namespacelbann_1_1graph_1a53b0b97c3fc0b88f2fffd44f1b951c71" compoundref="graph_8cpp" startline="129" endline="143">transpose</referencedby>
        <referencedby refid="namespacelbann_1_1graph_1a54de9f8e26046c834acfc5436a93b66b" compoundref="graph_8cpp" startline="145" endline="156">induce_subgraph</referencedby>
        <referencedby refid="namespacelbann_1_1graph_1a6cc9ff6e6b9707deaa1c77c3b8eb0b20" compoundref="graph_8cpp" startline="158" endline="183">breadth_first_search</referencedby>
        <referencedby refid="namespacelbann_1_1graph_1a44394207f3566604f867382b10aaf974" compoundref="graph_8cpp" startline="185" endline="219">depth_first_search</referencedby>
        <referencedby refid="namespacelbann_1_1graph_1ae06c3de1931d3786348995d870b792ca" compoundref="graph_8cpp" startline="267" endline="348">condensation</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1_1graph_1ac9c1819b38f8bc514ab24ac8778f840b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lbann::graph::is_closure</definition>
        <argsstring>(const std::set&lt; int &gt; &amp;nodes, const std::map&lt; int, std::set&lt; int &gt;&gt; &amp;edges)</argsstring>
        <name>is_closure</name>
        <param>
          <type>const std::set&lt; int &gt; &amp;</type>
          <declname>nodes</declname>
        </param>
        <param>
          <type>const std::map&lt; int, std::set&lt; int &gt;&gt; &amp;</type>
          <declname>edges</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check whether a graph is a closure. A closure is a set of nodes with no edges to nodes outside the set. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/graph.cpp" line="58" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/graph.cpp" bodystart="58" bodyend="68"/>
        <references refid="namespacelbann_1_1graph_1ad305e0d104d25d9cb1e63a4b93c0847c" compoundref="graph_8cpp" startline="49" endline="56">get_neighbors</references>
        <referencedby refid="namespacelbann_1_1graph_1a0dd9dcef8bc13481677692347530e328" compoundref="graph_8cpp" startline="70" endline="84">is_topologically_sorted</referencedby>
        <referencedby refid="namespacelbann_1_1graph_1a7cb66f3455c79ca9c959bcf2c36a92eb" compoundref="graph_8cpp" startline="86" endline="127">is_cyclic</referencedby>
        <referencedby refid="namespacelbann_1_1graph_1a53b0b97c3fc0b88f2fffd44f1b951c71" compoundref="graph_8cpp" startline="129" endline="143">transpose</referencedby>
        <referencedby refid="namespacelbann_1_1graph_1aeb19a22d8fac402df104ed8d547a10ee" compoundref="graph_8cpp" startline="222" endline="265">topological_sort</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1_1graph_1a0dd9dcef8bc13481677692347530e328" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lbann::graph::is_topologically_sorted</definition>
        <argsstring>(const std::set&lt; int &gt; &amp;nodes, const std::map&lt; int, std::set&lt; int &gt;&gt; &amp;edges)</argsstring>
        <name>is_topologically_sorted</name>
        <param>
          <type>const std::set&lt; int &gt; &amp;</type>
          <declname>nodes</declname>
        </param>
        <param>
          <type>const std::map&lt; int, std::set&lt; int &gt;&gt; &amp;</type>
          <declname>edges</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check whether a graph is topologically sorted. A topologically sorted graph has no edges going from a node to an earlier node. The graph must be a directed acyclic graph. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/graph.cpp" line="70" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/graph.cpp" bodystart="70" bodyend="84"/>
        <references refid="namespacelbann_1_1graph_1ac9c1819b38f8bc514ab24ac8778f840b" compoundref="graph_8cpp" startline="58" endline="68">is_closure</references>
        <references refid="namespacelbann_1_1graph_1ad305e0d104d25d9cb1e63a4b93c0847c" compoundref="graph_8cpp" startline="49" endline="56">get_neighbors</references>
        <referencedby refid="classlbann_1_1sequential__model_1a3801a58530388fb6a8cb3e1c018e827d" compoundref="sequential_8cpp" startline="40" endline="65">lbann::sequential_model::setup_layer_topology</referencedby>
        <referencedby refid="namespacelbann_1_1graph_1a7cb66f3455c79ca9c959bcf2c36a92eb" compoundref="graph_8cpp" startline="86" endline="127">is_cyclic</referencedby>
        <referencedby refid="namespacelbann_1_1graph_1aeb19a22d8fac402df104ed8d547a10ee" compoundref="graph_8cpp" startline="222" endline="265">topological_sort</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1_1graph_1a7cb66f3455c79ca9c959bcf2c36a92eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lbann::graph::is_cyclic</definition>
        <argsstring>(const std::set&lt; int &gt; &amp;nodes, const std::map&lt; int, std::set&lt; int &gt;&gt; &amp;edges)</argsstring>
        <name>is_cyclic</name>
        <param>
          <type>const std::set&lt; int &gt; &amp;</type>
          <declname>nodes</declname>
        </param>
        <param>
          <type>const std::map&lt; int, std::set&lt; int &gt;&gt; &amp;</type>
          <declname>edges</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check whether a directed graph is cyclic. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/graph.cpp" line="86" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/graph.cpp" bodystart="86" bodyend="127"/>
        <references refid="namespacelbann_1_1graph_1ac9c1819b38f8bc514ab24ac8778f840b" compoundref="graph_8cpp" startline="58" endline="68">is_closure</references>
        <references refid="namespacelbann_1_1graph_1a0dd9dcef8bc13481677692347530e328" compoundref="graph_8cpp" startline="70" endline="84">is_topologically_sorted</references>
        <references refid="namespacelbann_1_1graph_1ad305e0d104d25d9cb1e63a4b93c0847c" compoundref="graph_8cpp" startline="49" endline="56">get_neighbors</references>
        <referencedby refid="namespacelbann_1_1graph_1aeb19a22d8fac402df104ed8d547a10ee" compoundref="graph_8cpp" startline="222" endline="265">topological_sort</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1_1graph_1a53b0b97c3fc0b88f2fffd44f1b951c71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; int, std::set&lt; int &gt; &gt;</type>
        <definition>std::map&lt; int, std::set&lt; int &gt; &gt; lbann::graph::transpose</definition>
        <argsstring>(const std::set&lt; int &gt; &amp;nodes, const std::map&lt; int, std::set&lt; int &gt;&gt; &amp;edges)</argsstring>
        <name>transpose</name>
        <param>
          <type>const std::set&lt; int &gt; &amp;</type>
          <declname>nodes</declname>
        </param>
        <param>
          <type>const std::map&lt; int, std::set&lt; int &gt;&gt; &amp;</type>
          <declname>edges</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct the transpose of a graph. Reverses the direction of edges in the graph and returns the new set of edges. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/graph.cpp" line="129" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/graph.cpp" bodystart="129" bodyend="143"/>
        <references refid="namespacelbann_1_1graph_1ac9c1819b38f8bc514ab24ac8778f840b" compoundref="graph_8cpp" startline="58" endline="68">is_closure</references>
        <references refid="namespacelbann_1_1graph_1ad305e0d104d25d9cb1e63a4b93c0847c" compoundref="graph_8cpp" startline="49" endline="56">get_neighbors</references>
        <referencedby refid="namespacelbann_1_1graph_1ae06c3de1931d3786348995d870b792ca" compoundref="graph_8cpp" startline="267" endline="348">condensation</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1_1graph_1a54de9f8e26046c834acfc5436a93b66b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; int, std::set&lt; int &gt; &gt;</type>
        <definition>std::map&lt; int, std::set&lt; int &gt; &gt; lbann::graph::induce_subgraph</definition>
        <argsstring>(const std::set&lt; int &gt; &amp;nodes, const std::map&lt; int, std::set&lt; int &gt;&gt; &amp;edges)</argsstring>
        <name>induce_subgraph</name>
        <param>
          <type>const std::set&lt; int &gt; &amp;</type>
          <declname>nodes</declname>
        </param>
        <param>
          <type>const std::map&lt; int, std::set&lt; int &gt;&gt; &amp;</type>
          <declname>edges</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct an induced subgraph. Removes edges to nodes outside the set of nodes and returns the new set of edges. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/graph.cpp" line="145" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/graph.cpp" bodystart="145" bodyend="156"/>
        <references refid="namespacelbann_1_1graph_1ad305e0d104d25d9cb1e63a4b93c0847c" compoundref="graph_8cpp" startline="49" endline="56">get_neighbors</references>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1_1graph_1a6cc9ff6e6b9707deaa1c77c3b8eb0b20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt; int &gt; lbann::graph::breadth_first_search</definition>
        <argsstring>(int root, const std::map&lt; int, std::set&lt; int &gt;&gt; &amp;edges)</argsstring>
        <name>breadth_first_search</name>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const std::map&lt; int, std::set&lt; int &gt;&gt; &amp;</type>
          <declname>edges</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform a breadth-first search starting from a given root node. The search order is deterministic. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/graph.cpp" line="158" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/graph.cpp" bodystart="158" bodyend="183"/>
        <references refid="namespacelbann_1_1graph_1ad305e0d104d25d9cb1e63a4b93c0847c" compoundref="graph_8cpp" startline="49" endline="56">get_neighbors</references>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1_1graph_1a44394207f3566604f867382b10aaf974" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt; int &gt; lbann::graph::depth_first_search</definition>
        <argsstring>(int root, const std::map&lt; int, std::set&lt; int &gt;&gt; &amp;edges)</argsstring>
        <name>depth_first_search</name>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const std::map&lt; int, std::set&lt; int &gt;&gt; &amp;</type>
          <declname>edges</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform a depth-first search starting from a given root node. A depth-first search post-order is returned. The search order is deterministic. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/graph.cpp" line="185" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/graph.cpp" bodystart="185" bodyend="219"/>
        <references refid="namespacelbann_1_1graph_1ad305e0d104d25d9cb1e63a4b93c0847c" compoundref="graph_8cpp" startline="49" endline="56">get_neighbors</references>
        <referencedby refid="namespacelbann_1_1graph_1aeb19a22d8fac402df104ed8d547a10ee" compoundref="graph_8cpp" startline="222" endline="265">topological_sort</referencedby>
        <referencedby refid="namespacelbann_1_1graph_1ae06c3de1931d3786348995d870b792ca" compoundref="graph_8cpp" startline="267" endline="348">condensation</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1_1graph_1aeb19a22d8fac402df104ed8d547a10ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt; int &gt; lbann::graph::topological_sort</definition>
        <argsstring>(const std::set&lt; int &gt; &amp;nodes, const std::map&lt; int, std::set&lt; int &gt;&gt; &amp;edges)</argsstring>
        <name>topological_sort</name>
        <param>
          <type>const std::set&lt; int &gt; &amp;</type>
          <declname>nodes</declname>
        </param>
        <param>
          <type>const std::map&lt; int, std::set&lt; int &gt;&gt; &amp;</type>
          <declname>edges</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Topologically sort a graph. A topologically sorted graph has no edges going from a node to an earlier node. The sort is deterministic and does not affect graphs that are already topologically sorted. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/graph.cpp" line="222" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/graph.cpp" bodystart="222" bodyend="265"/>
        <references refid="namespacelbann_1_1graph_1ac9c1819b38f8bc514ab24ac8778f840b" compoundref="graph_8cpp" startline="58" endline="68">is_closure</references>
        <references refid="namespacelbann_1_1graph_1a7cb66f3455c79ca9c959bcf2c36a92eb" compoundref="graph_8cpp" startline="86" endline="127">is_cyclic</references>
        <references refid="namespacelbann_1_1graph_1a0dd9dcef8bc13481677692347530e328" compoundref="graph_8cpp" startline="70" endline="84">is_topologically_sorted</references>
        <references refid="namespacelbann_1_1graph_1a44394207f3566604f867382b10aaf974" compoundref="graph_8cpp" startline="185" endline="219">depth_first_search</references>
        <referencedby refid="classlbann_1_1directed__acyclic__graph__model_1a2a70d5719832c481db9fa962f6e5f2bd" compoundref="directed__acyclic__graph_8cpp" startline="41" endline="48">lbann::directed_acyclic_graph_model::setup_layer_execution_order</referencedby>
        <referencedby refid="namespacelbann_1_1graph_1ae06c3de1931d3786348995d870b792ca" compoundref="graph_8cpp" startline="267" endline="348">condensation</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacelbann_1_1graph_1ae06c3de1931d3786348995d870b792ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lbann::graph::condensation</definition>
        <argsstring>(const std::set&lt; int &gt; &amp;nodes, const std::map&lt; int, std::set&lt; int &gt;&gt; &amp;edges, std::map&lt; int, std::set&lt; int &gt;&gt; &amp;components, std::set&lt; int &gt; &amp;condensation_nodes, std::map&lt; int, std::set&lt; int &gt;&gt; &amp;condensation_edges)</argsstring>
        <name>condensation</name>
        <param>
          <type>const std::set&lt; int &gt; &amp;</type>
          <declname>nodes</declname>
        </param>
        <param>
          <type>const std::map&lt; int, std::set&lt; int &gt;&gt; &amp;</type>
          <declname>edges</declname>
        </param>
        <param>
          <type>std::map&lt; int, std::set&lt; int &gt;&gt; &amp;</type>
          <declname>components</declname>
        </param>
        <param>
          <type>std::set&lt; int &gt; &amp;</type>
          <declname>condensation_nodes</declname>
        </param>
        <param>
          <type>std::map&lt; int, std::set&lt; int &gt;&gt; &amp;</type>
          <declname>condensation_edges</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct the condensation of a graph. The condensation of a graph is constructed by determining the strongly connected components, i.e. sets of nodes that are reachable from all nodes in the set, and coalescing them into single nodes. The condensation is a DAG and will be topologically sorted. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/graph.cpp" line="267" column="1" bodyfile="/Users/mckinney27/doxy-testbed/lbann/src/utils/graph.cpp" bodystart="267" bodyend="348"/>
        <references refid="namespacelbann_1_1graph_1a53b0b97c3fc0b88f2fffd44f1b951c71" compoundref="graph_8cpp" startline="129" endline="143">transpose</references>
        <references refid="namespacelbann_1_1graph_1a44394207f3566604f867382b10aaf974" compoundref="graph_8cpp" startline="185" endline="219">depth_first_search</references>
        <references refid="namespacelbann_1_1graph_1ad305e0d104d25d9cb1e63a4b93c0847c" compoundref="graph_8cpp" startline="49" endline="56">get_neighbors</references>
        <references refid="namespacelbann_1_1graph_1aeb19a22d8fac402df104ed8d547a10ee" compoundref="graph_8cpp" startline="222" endline="265">topological_sort</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/mckinney27/doxy-testbed/lbann/src/utils/graph.cpp" line="35" column="1"/>
  </compounddef>
</doxygen>
