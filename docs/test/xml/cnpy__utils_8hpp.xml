<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="cnpy__utils_8hpp" kind="file" language="C++">
    <compoundname>cnpy_utils.hpp</compoundname>
    <includes local="yes">cnpy.h</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes refid="exception_8hpp" local="yes">lbann/utils/exception.hpp</includes>
    <includedby refid="data__reader__jag_8cpp" local="yes">/Users/mckinney27/doxy-testbed/lbann/src/data_readers/data_reader_jag.cpp</includedby>
    <includedby refid="offline__patches__npz_8cpp" local="yes">/Users/mckinney27/doxy-testbed/lbann/src/data_readers/offline_patches_npz.cpp</includedby>
    <includedby refid="cnpy__utils_8cpp" local="yes">/Users/mckinney27/doxy-testbed/lbann/src/utils/cnpy_utils.cpp</includedby>
    <incdepgraph>
      <node id="13960">
        <label>/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/cnpy_utils.hpp</label>
        <link refid="cnpy__utils_8hpp"/>
        <childnode refid="13961" relation="include">
        </childnode>
        <childnode refid="13962" relation="include">
        </childnode>
        <childnode refid="13963" relation="include">
        </childnode>
        <childnode refid="13964" relation="include">
        </childnode>
      </node>
      <node id="13966">
        <label>El.hpp</label>
      </node>
      <node id="13965">
        <label>lbann/base.hpp</label>
        <link refid="base_8hpp"/>
        <childnode refid="13966" relation="include">
        </childnode>
        <childnode refid="13967" relation="include">
        </childnode>
        <childnode refid="13968" relation="include">
        </childnode>
        <childnode refid="13973" relation="include">
        </childnode>
      </node>
      <node id="13962">
        <label>string</label>
      </node>
      <node id="13975">
        <label>map</label>
      </node>
      <node id="13980">
        <label>exception</label>
      </node>
      <node id="13970">
        <label>cstdio</label>
      </node>
      <node id="13977">
        <label>lbann/utils/stack_trace.hpp</label>
        <link refid="stack__trace_8hpp"/>
        <childnode refid="13978" relation="include">
        </childnode>
        <childnode refid="13962" relation="include">
        </childnode>
      </node>
      <node id="13972">
        <label>cxxabi.h</label>
      </node>
      <node id="13964">
        <label>lbann/utils/exception.hpp</label>
        <link refid="exception_8hpp"/>
        <childnode refid="13965" relation="include">
        </childnode>
        <childnode refid="13974" relation="include">
        </childnode>
        <childnode refid="13977" relation="include">
        </childnode>
        <childnode refid="13979" relation="include">
        </childnode>
        <childnode refid="13980" relation="include">
        </childnode>
      </node>
      <node id="13963">
        <label>vector</label>
      </node>
      <node id="13974">
        <label>lbann/comm.hpp</label>
        <link refid="comm_8hpp"/>
        <childnode refid="13963" relation="include">
        </childnode>
        <childnode refid="13975" relation="include">
        </childnode>
        <childnode refid="13976" relation="include">
        </childnode>
        <childnode refid="13965" relation="include">
        </childnode>
      </node>
      <node id="13969">
        <label>cstdlib</label>
      </node>
      <node id="13979">
        <label>iostream</label>
      </node>
      <node id="13978">
        <label>csignal</label>
      </node>
      <node id="13973">
        <label>lbann_config.hpp</label>
      </node>
      <node id="13968">
        <label>lbann/utils/cyg_profile.hpp</label>
        <link refid="cyg__profile_8hpp"/>
        <childnode refid="13969" relation="include">
        </childnode>
        <childnode refid="13970" relation="include">
        </childnode>
        <childnode refid="13971" relation="include">
        </childnode>
        <childnode refid="13972" relation="include">
        </childnode>
      </node>
      <node id="13961">
        <label>cnpy.h</label>
      </node>
      <node id="13967">
        <label>lbann/Elemental_extensions.hpp</label>
        <link refid="Elemental__extensions_8hpp"/>
        <childnode refid="13966" relation="include">
        </childnode>
      </node>
      <node id="13976">
        <label>typeindex</label>
      </node>
      <node id="13971">
        <label>dlfcn.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="13984">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/utils/cnpy_utils.cpp</label>
        <link refid="cnpy__utils_8cpp"/>
      </node>
      <node id="13981">
        <label>/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/cnpy_utils.hpp</label>
        <link refid="cnpy__utils_8hpp"/>
        <childnode refid="13982" relation="include">
        </childnode>
        <childnode refid="13983" relation="include">
        </childnode>
        <childnode refid="13984" relation="include">
        </childnode>
      </node>
      <node id="13982">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/data_readers/data_reader_jag.cpp</label>
        <link refid="data__reader__jag_8cpp"/>
      </node>
      <node id="13983">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/data_readers/offline_patches_npz.cpp</label>
        <link refid="offline__patches__npz_8cpp"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacelbann">lbann</innernamespace>
    <innernamespace refid="namespacelbann_1_1cnpy__utils">lbann::cnpy_utils</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2014-2016,<sp/>Lawrence<sp/>Livermore<sp/>National<sp/>Security,<sp/>LLC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Produced<sp/>at<sp/>the<sp/>Lawrence<sp/>Livermore<sp/>National<sp/>Laboratory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Written<sp/>by<sp/>the<sp/>LBANN<sp/>Research<sp/>Team<sp/>(B.<sp/>Van<sp/>Essen,<sp/>et<sp/>al.)<sp/>listed<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>CONTRIBUTORS<sp/>file.<sp/>&lt;lbann-dev@llnl.gov&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LLNL-CODE-697807.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>LBANN:<sp/>Livermore<sp/>Big<sp/>Artificial<sp/>Neural<sp/>Network</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Toolkit.<sp/>For<sp/>details,<sp/>see<sp/>http://software.llnl.gov/LBANN<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://github.com/LLNL/LBANN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;Licensee&quot;);<sp/>you</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implied.<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>license.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_LBANN_CNPY_UTILS_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_LBANN_CNPY_UTILS_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cnpy.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="exception_8hpp" kindref="compound">lbann/utils/exception.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacelbann" kindref="compound">lbann</ref><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">cnpy_utils<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1_1cnpy__utils_1a39fd207d94d1333e6379c53423b6f1a1" kindref="member">compute_cnpy_array_offset</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cnpy::NpyArray&amp;<sp/>na,<sp/>std::vector&lt;size_t&gt;<sp/>indices);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="52" refid="namespacelbann_1_1cnpy__utils_1a9ac86d96ccb1f8b4b2ea16441738781f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T&amp;<sp/><ref refid="namespacelbann_1_1cnpy__utils_1a9ac86d96ccb1f8b4b2ea16441738781f" kindref="member">data</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cnpy::NpyArray&amp;<sp/>na,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;size_t&gt;<sp/>indices)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>!=<sp/>na.word_size)<sp/>&amp;&amp;<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>!=<sp/>1u))<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight><highlight class="stringliteral">&quot;cnpy_utils::data()<sp/>:<sp/>The<sp/>data<sp/>type<sp/>is<sp/>not<sp/>consistent<sp/>with<sp/>the<sp/>word<sp/>size<sp/>of<sp/>the<sp/>array.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/><ref refid="namespacelbann_1_1cnpy__utils_1a39fd207d94d1333e6379c53423b6f1a1" kindref="member">compute_cnpy_array_offset</ref>(na,<sp/>indices)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>((</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>==<sp/>1u)?<sp/>na.word_size<sp/>:<sp/>1u);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;(*<sp/>na.data_holder)[0])<sp/>+<sp/>offset);</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="67" refid="namespacelbann_1_1cnpy__utils_1a348a4aa859715e5859ddd1a5e3a269c9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T*<sp/><ref refid="namespacelbann_1_1cnpy__utils_1a348a4aa859715e5859ddd1a5e3a269c9" kindref="member">data_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cnpy::NpyArray&amp;<sp/>na,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;size_t&gt;<sp/>indices)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>!=<sp/>na.word_size)<sp/>&amp;&amp;<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>!=<sp/>1u))<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight><highlight class="stringliteral">&quot;cnpy_utils::data_ptr()<sp/>:<sp/>The<sp/>data<sp/>type<sp/>is<sp/>not<sp/>consistent<sp/>with<sp/>the<sp/>word<sp/>size<sp/>of<sp/>the<sp/>array.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/><ref refid="namespacelbann_1_1cnpy__utils_1a39fd207d94d1333e6379c53423b6f1a1" kindref="member">compute_cnpy_array_offset</ref>(na,<sp/>indices)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>((</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>==<sp/>1u)?<sp/>na.word_size<sp/>:<sp/>1u);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(reinterpret_cast&lt;T*&gt;(&amp;(*<sp/>na.data_holder)[0])<sp/>+<sp/>offset);</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="77" refid="namespacelbann_1_1cnpy__utils_1aba43b785d14caa5c5df74674f10f0dd8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="namespacelbann_1_1cnpy__utils_1aba43b785d14caa5c5df74674f10f0dd8" kindref="member">data_ptr&lt;void&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cnpy::NpyArray&amp;<sp/>na,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;size_t&gt;<sp/>indices)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_ptr&lt;uint8_t&gt;(na,<sp/>indices);</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacelbann_1_1cnpy__utils_1ab19ad0a361570b7e78e203c02d6ba13a" kindref="member">shrink_to_fit</ref>(cnpy::NpyArray&amp;<sp/>na,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal">std::string<sp/><ref refid="namespacelbann_1_1cnpy__utils_1a120e5719167d6d20b2a98c4282fd7a50" kindref="member">show_shape</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cnpy::NpyArray&amp;<sp/>na);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>of<sp/>namespace<sp/>cnpy_utils</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>of<sp/>namespace<sp/>lbann</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>_LBANN_CNPY_UTILS_HPP_</highlight></codeline>
    </programlisting>
    <location file="/Users/mckinney27/doxy-testbed/lbann/include/lbann/utils/cnpy_utils.hpp"/>
  </compounddef>
</doxygen>
