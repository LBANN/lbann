<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="data__reader__pilot2__molecular_8cpp" kind="file" language="C++">
    <compoundname>data_reader_pilot2_molecular.cpp</compoundname>
    <includes refid="data__reader__pilot2__molecular_8hpp" local="yes">lbann/data_readers/data_reader_pilot2_molecular.hpp</includes>
    <includes refid="data__store__pilot2__molecular_8hpp" local="yes">lbann/data_store/data_store_pilot2_molecular.hpp</includes>
    <includes refid="options_8hpp" local="yes">lbann/utils/options.hpp</includes>
    <incdepgraph>
      <node id="19886">
        <label>sys/stat.h</label>
      </node>
      <node id="19889">
        <label>lbann/data_readers/image_preprocessor.hpp</label>
        <link refid="image__preprocessor_8hpp"/>
        <childnode refid="19871" relation="include">
        </childnode>
        <childnode refid="19863" relation="include">
        </childnode>
      </node>
      <node id="19895">
        <label>lbann/data_store/generic_data_store.hpp</label>
        <link refid="generic__data__store_8hpp"/>
        <childnode refid="19863" relation="include">
        </childnode>
        <childnode refid="19873" relation="include">
        </childnode>
        <childnode refid="19874" relation="include">
        </childnode>
        <childnode refid="19896" relation="include">
        </childnode>
      </node>
      <node id="19877">
        <label>lbann/io/persist.hpp</label>
        <link refid="persist_8hpp"/>
        <childnode refid="19863" relation="include">
        </childnode>
        <childnode refid="19864" relation="include">
        </childnode>
      </node>
      <node id="19864">
        <label>El.hpp</label>
      </node>
      <node id="19863">
        <label>lbann/base.hpp</label>
        <link refid="base_8hpp"/>
        <childnode refid="19864" relation="include">
        </childnode>
        <childnode refid="19865" relation="include">
        </childnode>
        <childnode refid="19866" relation="include">
        </childnode>
        <childnode refid="19871" relation="include">
        </childnode>
      </node>
      <node id="19890">
        <label>cassert</label>
      </node>
      <node id="19888">
        <label>fcntl.h</label>
      </node>
      <node id="19894">
        <label>lbann/data_store/data_store_pilot2_molecular.hpp</label>
        <link refid="data__store__pilot2__molecular_8hpp"/>
        <childnode refid="19895" relation="include">
        </childnode>
        <childnode refid="19897" relation="include">
        </childnode>
      </node>
      <node id="19882">
        <label>string</label>
      </node>
      <node id="19875">
        <label>map</label>
      </node>
      <node id="19896">
        <label>unordered_set</label>
      </node>
      <node id="19884">
        <label>exception</label>
      </node>
      <node id="19878">
        <label>random</label>
      </node>
      <node id="19887">
        <label>sys/types.h</label>
      </node>
      <node id="19868">
        <label>cstdio</label>
      </node>
      <node id="19880">
        <label>lbann/utils/stack_trace.hpp</label>
        <link refid="stack__trace_8hpp"/>
        <childnode refid="19881" relation="include">
        </childnode>
        <childnode refid="19882" relation="include">
        </childnode>
      </node>
      <node id="19870">
        <label>cxxabi.h</label>
      </node>
      <node id="19879">
        <label>lbann/utils/exception.hpp</label>
        <link refid="exception_8hpp"/>
        <childnode refid="19863" relation="include">
        </childnode>
        <childnode refid="19873" relation="include">
        </childnode>
        <childnode refid="19880" relation="include">
        </childnode>
        <childnode refid="19883" relation="include">
        </childnode>
        <childnode refid="19884" relation="include">
        </childnode>
      </node>
      <node id="19892">
        <label>unistd.h</label>
      </node>
      <node id="19874">
        <label>vector</label>
      </node>
      <node id="19873">
        <label>lbann/comm.hpp</label>
        <link refid="comm_8hpp"/>
        <childnode refid="19874" relation="include">
        </childnode>
        <childnode refid="19875" relation="include">
        </childnode>
        <childnode refid="19876" relation="include">
        </childnode>
        <childnode refid="19863" relation="include">
        </childnode>
      </node>
      <node id="19885">
        <label>lbann/io/file_io.hpp</label>
        <link refid="file__io_8hpp"/>
        <childnode refid="19886" relation="include">
        </childnode>
        <childnode refid="19887" relation="include">
        </childnode>
        <childnode refid="19888" relation="include">
        </childnode>
      </node>
      <node id="19861">
        <label>lbann/data_readers/data_reader_pilot2_molecular.hpp</label>
        <link refid="data__reader__pilot2__molecular_8hpp"/>
        <childnode refid="19862" relation="include">
        </childnode>
        <childnode refid="19893" relation="include">
        </childnode>
      </node>
      <node id="19867">
        <label>cstdlib</label>
      </node>
      <node id="19860">
        <label>/Users/mckinney27/doxy-testbed/lbann/src/data_readers/data_reader_pilot2_molecular.cpp</label>
        <link refid="data__reader__pilot2__molecular_8cpp"/>
        <childnode refid="19861" relation="include">
        </childnode>
        <childnode refid="19894" relation="include">
        </childnode>
        <childnode refid="19898" relation="include">
        </childnode>
      </node>
      <node id="19883">
        <label>iostream</label>
      </node>
      <node id="19897">
        <label>unordered_map</label>
      </node>
      <node id="19872">
        <label>lbann/utils/random.hpp</label>
        <link refid="random_8hpp"/>
        <childnode refid="19863" relation="include">
        </childnode>
        <childnode refid="19873" relation="include">
        </childnode>
        <childnode refid="19877" relation="include">
        </childnode>
        <childnode refid="19878" relation="include">
        </childnode>
      </node>
      <node id="19881">
        <label>csignal</label>
      </node>
      <node id="19898">
        <label>lbann/utils/options.hpp</label>
        <link refid="options_8hpp"/>
        <childnode refid="19883" relation="include">
        </childnode>
        <childnode refid="19875" relation="include">
        </childnode>
        <childnode refid="19874" relation="include">
        </childnode>
        <childnode refid="19882" relation="include">
        </childnode>
      </node>
      <node id="19862">
        <label>data_reader.hpp</label>
        <link refid="data__reader_8hpp"/>
        <childnode refid="19863" relation="include">
        </childnode>
        <childnode refid="19872" relation="include">
        </childnode>
        <childnode refid="19879" relation="include">
        </childnode>
        <childnode refid="19873" relation="include">
        </childnode>
        <childnode refid="19885" relation="include">
        </childnode>
        <childnode refid="19877" relation="include">
        </childnode>
        <childnode refid="19889" relation="include">
        </childnode>
        <childnode refid="19890" relation="include">
        </childnode>
        <childnode refid="19891" relation="include">
        </childnode>
        <childnode refid="19882" relation="include">
        </childnode>
        <childnode refid="19874" relation="include">
        </childnode>
        <childnode refid="19892" relation="include">
        </childnode>
      </node>
      <node id="19871">
        <label>lbann_config.hpp</label>
      </node>
      <node id="19891">
        <label>algorithm</label>
      </node>
      <node id="19866">
        <label>lbann/utils/cyg_profile.hpp</label>
        <link refid="cyg__profile_8hpp"/>
        <childnode refid="19867" relation="include">
        </childnode>
        <childnode refid="19868" relation="include">
        </childnode>
        <childnode refid="19869" relation="include">
        </childnode>
        <childnode refid="19870" relation="include">
        </childnode>
      </node>
      <node id="19893">
        <label>cnpy.h</label>
      </node>
      <node id="19865">
        <label>lbann/Elemental_extensions.hpp</label>
        <link refid="Elemental__extensions_8hpp"/>
        <childnode refid="19864" relation="include">
        </childnode>
      </node>
      <node id="19876">
        <label>typeindex</label>
      </node>
      <node id="19869">
        <label>dlfcn.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacelbann">lbann</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2014-2016,<sp/>Lawrence<sp/>Livermore<sp/>National<sp/>Security,<sp/>LLC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Produced<sp/>at<sp/>the<sp/>Lawrence<sp/>Livermore<sp/>National<sp/>Laboratory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Written<sp/>by<sp/>the<sp/>LBANN<sp/>Research<sp/>Team<sp/>(B.<sp/>Van<sp/>Essen,<sp/>et<sp/>al.)<sp/>listed<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>CONTRIBUTORS<sp/>file.<sp/>&lt;lbann-dev@llnl.gov&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LLNL-CODE-697807.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>LBANN:<sp/>Livermore<sp/>Big<sp/>Artificial<sp/>Neural<sp/>Network</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Toolkit.<sp/>For<sp/>details,<sp/>see<sp/>http://software.llnl.gov/LBANN<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://github.com/LLNL/LBANN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;Licensee&quot;);<sp/>you</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implied.<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>license.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>data_reader_pilot2_molecular<sp/>.hpp<sp/>.cpp<sp/>-<sp/>data<sp/>reader<sp/>for<sp/>Pilot<sp/>2<sp/>molecular<sp/>data</highlight></codeline>
<codeline lineno="28"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="data__reader__pilot2__molecular_8hpp" kindref="compound">lbann/data_readers/data_reader_pilot2_molecular.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="data__store__pilot2__molecular_8hpp" kindref="compound">lbann/data_store/data_store_pilot2_molecular.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="options_8hpp" kindref="compound">lbann/utils/options.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacelbann" kindref="compound">lbann</ref><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="classlbann_1_1pilot2__molecular__reader_1ac883c7e0fcc935bc6573efa3352275ca" refkind="member"><highlight class="normal"><ref refid="classlbann_1_1pilot2__molecular__reader_1ac883c7e0fcc935bc6573efa3352275ca" kindref="member">pilot2_molecular_reader::pilot2_molecular_reader</ref>(</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_neighbors,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_neighborhood,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>shuffle)<sp/>:</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1generic__data__reader" kindref="compound">generic_data_reader</ref>(shuffle),<sp/>m_num_neighbors(num_neighbors),<sp/>m_max_neighborhood(max_neighborhood)<sp/>{}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="classlbann_1_1pilot2__molecular__reader_1a1b5160021a532f5f19897bd2250e3a46" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1a1b5160021a532f5f19897bd2250e3a46" kindref="member">pilot2_molecular_reader::load</ref>()<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>support<sp/>for<sp/>data<sp/>store<sp/>functionality:<sp/>when<sp/>not<sp/>using<sp/>data<sp/>store,<sp/>all<sp/>procs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>load<sp/>the<sp/>data;<sp/>when<sp/>using<sp/>data<sp/>store,<sp/>only<sp/>one<sp/>does<sp/>so</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_mine<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rank<sp/>=<sp/><ref refid="classlbann_1_1generic__data__reader_1ad3976d4b7db2d404dbb87a56c33fd456" kindref="member">m_comm</ref>-&gt;<ref refid="classlbann_1_1lbann__comm_1a789453454468a3b70de768537c50ca52" kindref="member">get_rank_in_model</ref>();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>note:<sp/>when<sp/>support<sp/>for<sp/>merge_samples<sp/>is<sp/>in<sp/>place,<sp/>the<sp/>condition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;get_role()<sp/>==<sp/>&quot;test&quot;<sp/>will<sp/>go<sp/>away.<sp/>For<sp/>now<sp/>we<sp/>need<sp/>it,<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>merge_samples<sp/>will<sp/>break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><ref refid="classoptions" kindref="compound">options</ref><sp/>*opts<sp/>=<sp/><ref refid="classoptions_1a9ecfe9c365269df68a41b961c31ae3f5" kindref="member">options::get</ref>();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opts-&gt;<ref refid="classoptions_1aafb1d2a7ccde0b1bf786230ba4080ecd" kindref="member">has_bool</ref>(</highlight><highlight class="stringliteral">&quot;use_data_store&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>opts-&gt;<ref refid="classoptions_1a99aa190102de33e2aed39723929f9fad" kindref="member">get_bool</ref>(</highlight><highlight class="stringliteral">&quot;use_data_store&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/><ref refid="classlbann_1_1generic__data__reader_1a92982e1b399f37e2ead5aa440883cba5" kindref="member">get_role</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rank<sp/>!=<sp/><ref refid="classlbann_1_1generic__data__reader_1ac4fc0729e7f1240e167fe897df99f950" kindref="member">get_compound_rank</ref>())<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>is_mine<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_mine)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>infile<sp/>=<sp/><ref refid="classlbann_1_1generic__data__reader_1ab4c6c2d4ba40ece809ce896828c8ff03" kindref="member">get_file_dir</ref>()<sp/>+<sp/><ref refid="classlbann_1_1generic__data__reader_1a56664e1b43f3fe923cf6d652f14b40a9" kindref="member">get_data_filename</ref>();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>the<sp/>file<sp/>exists.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ifstream<sp/>ifs(infile);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ifs)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string{}<sp/>+<sp/>__FILE__<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(__LINE__)<sp/>+</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>pilot2_molecular::load()<sp/>-<sp/>can&apos;t<sp/>open<sp/>file<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>infile);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>ifs.close();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>the<sp/>dictionary.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>cnpy::npz_t<sp/>dict<sp/>=<sp/>cnpy::npz_load(infile);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>we<sp/>have<sp/>features<sp/>and<sp/>neighbors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dict.count(</highlight><highlight class="stringliteral">&quot;features&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string{}<sp/>+<sp/>__FILE__<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(__LINE__)<sp/>+</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>pilot2_molecular::load()<sp/>-<sp/>no<sp/>features&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dict.count(</highlight><highlight class="stringliteral">&quot;neighbors&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string{}<sp/>+<sp/>__FILE__<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(__LINE__)<sp/>+</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>pilot2_molecular::load()<sp/>-<sp/>no<sp/>neighbors&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1a6b273890ecd01754e21be87da68b57bc" kindref="member">m_features</ref><sp/>=<sp/>dict[</highlight><highlight class="stringliteral">&quot;features&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1a0d8dc24b8ea66352a4d45a157b3a3c04" kindref="member">m_neighbors</ref><sp/>=<sp/>dict[</highlight><highlight class="stringliteral">&quot;neighbors&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>we<sp/>understand<sp/>the<sp/>word<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(m_features.word_size<sp/>==<sp/>4<sp/>||<sp/>m_features.word_size<sp/>==<sp/>8))<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string{}<sp/>+<sp/>__FILE__<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(__LINE__)<sp/>+</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>pilot2_molecular::load()<sp/>-<sp/>feature<sp/>word<sp/>size<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::to_string(m_features.word_size)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>supported&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(<ref refid="classlbann_1_1pilot2__molecular__reader_1a0d8dc24b8ea66352a4d45a157b3a3c04" kindref="member">m_neighbors</ref>.word_size<sp/>==<sp/>4<sp/>||<sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1a0d8dc24b8ea66352a4d45a157b3a3c04" kindref="member">m_neighbors</ref>.word_size<sp/>==<sp/>8))<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string{}<sp/>+<sp/>__FILE__<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(__LINE__)<sp/>+</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>pilot2_molecular::load()<sp/>-<sp/>neighbor<sp/>word<sp/>size<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::to_string(<ref refid="classlbann_1_1pilot2__molecular__reader_1a0d8dc24b8ea66352a4d45a157b3a3c04" kindref="member">m_neighbors</ref>.word_size)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>supported&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fortran<sp/>data<sp/>order<sp/>not<sp/>supported.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_features.fortran_order)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string{}<sp/>+<sp/>__FILE__<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(__LINE__)<sp/>+</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>pilot2_molecular::load()<sp/>-<sp/>feature<sp/>fortran<sp/>order<sp/>not<sp/>supported&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1pilot2__molecular__reader_1a0d8dc24b8ea66352a4d45a157b3a3c04" kindref="member">m_neighbors</ref>.fortran_order)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1lbann__exception" kindref="compound">lbann_exception</ref>(</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string{}<sp/>+<sp/>__FILE__<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(__LINE__)<sp/>+</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>pilot2_molecular::load()<sp/>-<sp/>neighbor<sp/>fortran<sp/>order<sp/>not<sp/>supported&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Assume<sp/>we<sp/>collapse<sp/>samples<sp/>from<sp/>every<sp/>frame<sp/>into<sp/>one<sp/>set.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1a9db4542fcce68a2a60ad5aad9d211dee" kindref="member">m_num_samples</ref><sp/>=<sp/>m_features.shape[0]<sp/>*<sp/>m_features.shape[1];</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1a1aa5896276d8a0576f7b3c2b955130be" kindref="member">m_num_samples_per_frame</ref><sp/>=<sp/>m_features.shape[1];</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>two<sp/>dimensions<sp/>are<sp/>the<sp/>frame<sp/>and<sp/>the<sp/>sample,<sp/>so<sp/>skip.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1a7fd7dac6f280fd8ef92bd5d2ffc89e36" kindref="member">m_num_features</ref><sp/>=<sp/>std::accumulate(</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_features.shape.begin()<sp/>+<sp/>2,<sp/>m_features.shape.end(),<sp/>(unsigned)<sp/>1,</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::multiplies&lt;unsigned&gt;());</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1a1093a0518b7913c91e9b36679b198948" kindref="member">m_word_size</ref><sp/>=<sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1a0d8dc24b8ea66352a4d45a157b3a3c04" kindref="member">m_neighbors</ref>.word_size;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1ae02769bc68f1e079c740f724ec6bd0c0" kindref="member">m_shape</ref>.resize(3);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1ae02769bc68f1e079c740f724ec6bd0c0" kindref="member">m_shape</ref>[0]<sp/>=<sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1aaf41323e4da85467de398b4ab4b58c2c" kindref="member">m_num_neighbors</ref><sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1ae02769bc68f1e079c740f724ec6bd0c0" kindref="member">m_shape</ref>[1]<sp/>=<sp/>m_features.shape[2];</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1ae02769bc68f1e079c740f724ec6bd0c0" kindref="member">m_shape</ref>[2]<sp/>=<sp/>m_features.shape[3];</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>using<sp/>data<sp/>store,<sp/>need<sp/>to<sp/>bcast<sp/>some<sp/>variable<sp/>to<sp/>all<sp/>procs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classoptions_1a9ecfe9c365269df68a41b961c31ae3f5" kindref="member">options::get</ref>()-&gt;get_bool(</highlight><highlight class="stringliteral">&quot;use_data_store&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>tmp(8);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rank<sp/>==<sp/><ref refid="classlbann_1_1generic__data__reader_1ac4fc0729e7f1240e167fe897df99f950" kindref="member">get_compound_rank</ref>())<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//@todo:<sp/>fix<sp/>if<sp/>we<sp/>have<sp/>floats!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1a0d61b0b65b1998694272a5d2173cbac7" kindref="member">m_neighbors_data_size</ref><sp/>=<sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1a0d8dc24b8ea66352a4d45a157b3a3c04" kindref="member">m_neighbors</ref>.data_holder-&gt;size()<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmp[0]<sp/>=<sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1a9db4542fcce68a2a60ad5aad9d211dee" kindref="member">m_num_samples</ref>;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmp[1]<sp/>=<sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1a1aa5896276d8a0576f7b3c2b955130be" kindref="member">m_num_samples_per_frame</ref>;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmp[2]<sp/>=<sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1a7fd7dac6f280fd8ef92bd5d2ffc89e36" kindref="member">m_num_features</ref>;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmp[3]<sp/>=<sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1aaf41323e4da85467de398b4ab4b58c2c" kindref="member">m_num_neighbors</ref><sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmp[4]<sp/>=<sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1a6b273890ecd01754e21be87da68b57bc" kindref="member">m_features</ref>.shape[2];</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmp[5]<sp/>=<sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1a6b273890ecd01754e21be87da68b57bc" kindref="member">m_features</ref>.shape[3];</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmp[6]<sp/>=<sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1a1093a0518b7913c91e9b36679b198948" kindref="member">m_word_size</ref>;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmp[7]<sp/>=<sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1a0d61b0b65b1998694272a5d2173cbac7" kindref="member">m_neighbors_data_size</ref>;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Bcast(tmp.data(),<sp/>8,<sp/>MPI_INT,<sp/><ref refid="classlbann_1_1generic__data__reader_1ac4fc0729e7f1240e167fe897df99f950" kindref="member">get_compound_rank</ref>(),<sp/><ref refid="classlbann_1_1generic__data__reader_1ad3976d4b7db2d404dbb87a56c33fd456" kindref="member">m_comm</ref>-&gt;<ref refid="classlbann_1_1lbann__comm_1acc06dd4de92e45030d6fbe5984ae58d1" kindref="member">get_model_comm</ref>().comm);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1a9db4542fcce68a2a60ad5aad9d211dee" kindref="member">m_num_samples</ref><sp/>=<sp/>tmp[0];</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1a1aa5896276d8a0576f7b3c2b955130be" kindref="member">m_num_samples_per_frame</ref><sp/>=<sp/>tmp[1];</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1a7fd7dac6f280fd8ef92bd5d2ffc89e36" kindref="member">m_num_features</ref><sp/>=<sp/>tmp[2];</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1ae02769bc68f1e079c740f724ec6bd0c0" kindref="member">m_shape</ref>.resize(3);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1ae02769bc68f1e079c740f724ec6bd0c0" kindref="member">m_shape</ref>[0]<sp/>=<sp/>tmp[3];</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1ae02769bc68f1e079c740f724ec6bd0c0" kindref="member">m_shape</ref>[1]<sp/>=<sp/>tmp[4];</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1ae02769bc68f1e079c740f724ec6bd0c0" kindref="member">m_shape</ref>[2]<sp/>=<sp/>tmp[5];</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1a1093a0518b7913c91e9b36679b198948" kindref="member">m_word_size</ref><sp/>=<sp/>tmp[6];</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1a0d61b0b65b1998694272a5d2173cbac7" kindref="member">m_neighbors_data_size</ref><sp/>=<sp/>tmp[7];</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>indices.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1aaab6aeff67ffff1c689336851fec2c57" kindref="member">m_shuffled_indices</ref>.clear();</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1aaab6aeff67ffff1c689336851fec2c57" kindref="member">m_shuffled_indices</ref>.resize(<ref refid="classlbann_1_1pilot2__molecular__reader_1a9db4542fcce68a2a60ad5aad9d211dee" kindref="member">m_num_samples</ref>);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>std::iota(<ref refid="classlbann_1_1generic__data__reader_1aaab6aeff67ffff1c689336851fec2c57" kindref="member">m_shuffled_indices</ref>.begin(),<sp/><ref refid="classlbann_1_1generic__data__reader_1aaab6aeff67ffff1c689336851fec2c57" kindref="member">m_shuffled_indices</ref>.end(),<sp/>0);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1aa28fdeeb6af492540f507e49adff5d6c" kindref="member">select_subset_of_data</ref>();</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157" refid="classlbann_1_1pilot2__molecular__reader_1a9ad317abcd6f5de777d536f7796a3b12" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1a9ad317abcd6f5de777d536f7796a3b12" kindref="member">pilot2_molecular_reader::fetch_datum</ref>(</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>X,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data_id,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mb_idx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1generic__data__reader_1aefc076b842933a882214f4f709ca49c9" kindref="member">m_data_store</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>*buf;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>jj<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1aefc076b842933a882214f4f709ca49c9" kindref="member">m_data_store</ref>-&gt;<ref refid="classlbann_1_1generic__data__store_1a2abb3d0327b528d36e23fcef9b937798" kindref="member">get_data_buf</ref>(data_id,<sp/>tid,<sp/>buf);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1aaf41323e4da85467de398b4ab4b58c2c" kindref="member">m_num_neighbors</ref>+1;<sp/>idx++)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1a7fd7dac6f280fd8ef92bd5d2ffc89e36" kindref="member">m_num_features</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X(m_num_features<sp/>*<sp/>idx<sp/>+<sp/>i,<sp/>mb_idx)<sp/>=<sp/>(*buf)[jj++];</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//note:<sp/>scale_data<sp/>was<sp/>already<sp/>computed<sp/>by<sp/>the<sp/>data_store</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>frame<sp/>=<sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1ac95223a0829a83a5d400c4d66efdcb93" kindref="member">get_frame</ref>(data_id);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Fetch<sp/>the<sp/>actual<sp/>molecule.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1ae45c583f72e11aeb5d955e2657a9a3e8" kindref="member">fetch_molecule</ref>(X,<sp/>data_id,<sp/>0,<sp/>mb_idx);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Fetch<sp/>the<sp/>neighbors<sp/>-<sp/>note<sp/>that<sp/>the<sp/>offset<sp/>is<sp/>2x<sp/>the<sp/>max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>neighborhood<sp/>size<sp/>to<sp/>accommodate<sp/>the<sp/>top<sp/>and<sp/>bottom<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>bilayer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>neighbor_frame_offset<sp/>=</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>frame<sp/>*<sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1a1aa5896276d8a0576f7b3c2b955130be" kindref="member">m_num_samples_per_frame</ref><sp/>*<sp/>(2<sp/>*<sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1a0c9e71035cf47191002d1b164d056f50" kindref="member">m_max_neighborhood</ref>);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>intra_frame_data_id<sp/>=<sp/>data_id<sp/>-<sp/>frame<sp/>*<sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1a1aa5896276d8a0576f7b3c2b955130be" kindref="member">m_num_samples_per_frame</ref>;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1pilot2__molecular__reader_1a0d8dc24b8ea66352a4d45a157b3a3c04" kindref="member">m_neighbors</ref>.word_size<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*neighbor_data<sp/>=<sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1a0d8dc24b8ea66352a4d45a157b3a3c04" kindref="member">m_neighbors</ref>.data&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;()<sp/>+</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>neighbor_frame_offset<sp/>+<sp/>intra_frame_data_id<sp/>*<sp/>(2<sp/>*<sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1a0c9e71035cf47191002d1b164d056f50" kindref="member">m_max_neighborhood</ref>);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>at<sp/>1<sp/>to<sp/>skip<sp/>self.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1aaf41323e4da85467de398b4ab4b58c2c" kindref="member">m_num_neighbors</ref><sp/>+<sp/>1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>neighbor_id<sp/>=<sp/>neighbor_data[i];</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(neighbor_id<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1ae45c583f72e11aeb5d955e2657a9a3e8" kindref="member">fetch_molecule</ref>(X,<sp/>neighbor_id<sp/>+<sp/>frame<sp/>*<sp/>m_num_samples_per_frame,<sp/>i,</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mb_idx);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1pilot2__molecular__reader_1a0d8dc24b8ea66352a4d45a157b3a3c04" kindref="member">m_neighbors</ref>.word_size<sp/>==<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*neighbor_data<sp/>=<sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1a0d8dc24b8ea66352a4d45a157b3a3c04" kindref="member">m_neighbors</ref>.data&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;()<sp/>+</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>neighbor_frame_offset<sp/>+<sp/>intra_frame_data_id<sp/>*<sp/>(2<sp/>*<sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1a0c9e71035cf47191002d1b164d056f50" kindref="member">m_max_neighborhood</ref>);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>at<sp/>1<sp/>to<sp/>skip<sp/>self.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1aaf41323e4da85467de398b4ab4b58c2c" kindref="member">m_num_neighbors</ref><sp/>+<sp/>1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>neighbor_id<sp/>=<sp/>neighbor_data[i];</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(neighbor_id<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1ae45c583f72e11aeb5d955e2657a9a3e8" kindref="member">fetch_molecule</ref>(X,<sp/>neighbor_id<sp/>+<sp/>frame<sp/>*<sp/>m_num_samples_per_frame,<sp/>i,</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mb_idx);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208" refid="classlbann_1_1pilot2__molecular__reader_1ae45c583f72e11aeb5d955e2657a9a3e8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1ae45c583f72e11aeb5d955e2657a9a3e8" kindref="member">pilot2_molecular_reader::fetch_molecule</ref>(<ref refid="base_8hpp_1a68f11fdc31b62516cb310831bbe54d73" kindref="member">Mat</ref>&amp;<sp/>X,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data_id,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx,</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mb_idx)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>frame<sp/>=<sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1ac95223a0829a83a5d400c4d66efdcb93" kindref="member">get_frame</ref>(data_id);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>offset<sp/>in<sp/>features<sp/>for<sp/>this<sp/>frame.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>frame_offset<sp/>=<sp/>frame<sp/>*<sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1a7fd7dac6f280fd8ef92bd5d2ffc89e36" kindref="member">m_num_features</ref><sp/>*<sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1a1aa5896276d8a0576f7b3c2b955130be" kindref="member">m_num_samples_per_frame</ref>;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>intra_frame_data_id<sp/>=<sp/>data_id<sp/>-<sp/>frame<sp/>*<sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1a1aa5896276d8a0576f7b3c2b955130be" kindref="member">m_num_samples_per_frame</ref>;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1pilot2__molecular__reader_1a6b273890ecd01754e21be87da68b57bc" kindref="member">m_features</ref>.word_size<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<ref refid="namespacelbann_1_1cnpy__utils_1a9ac86d96ccb1f8b4b2ea16441738781f" kindref="member">data</ref><sp/>=<sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1a6b273890ecd01754e21be87da68b57bc" kindref="member">m_features</ref>.data&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;()<sp/>+<sp/>frame_offset<sp/>+</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>intra_frame_data_id<sp/>*<sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1a7fd7dac6f280fd8ef92bd5d2ffc89e36" kindref="member">m_num_features</ref>;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1a7fd7dac6f280fd8ef92bd5d2ffc89e36" kindref="member">m_num_features</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>X(m_num_features<sp/>*<sp/>idx<sp/>+<sp/>i,<sp/>mb_idx)<sp/>=<sp/>scale_data&lt;float&gt;(i,<sp/>data[i]);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1pilot2__molecular__reader_1a6b273890ecd01754e21be87da68b57bc" kindref="member">m_features</ref>.word_size<sp/>==<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<ref refid="namespacelbann_1_1cnpy__utils_1a9ac86d96ccb1f8b4b2ea16441738781f" kindref="member">data</ref><sp/>=<sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1a6b273890ecd01754e21be87da68b57bc" kindref="member">m_features</ref>.data&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;()<sp/>+<sp/>frame_offset<sp/>+</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>intra_frame_data_id<sp/>*<sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1a7fd7dac6f280fd8ef92bd5d2ffc89e36" kindref="member">m_num_features</ref>;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1a7fd7dac6f280fd8ef92bd5d2ffc89e36" kindref="member">m_num_features</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>X(m_num_features<sp/>*<sp/>idx<sp/>+<sp/>i,<sp/>mb_idx)<sp/>=<sp/>scale_data&lt;double&gt;(i,<sp/>data[i]);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229" refid="classlbann_1_1pilot2__molecular__reader_1a0c18335afe5625a7aa8b8275392c0317" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1pilot2__molecular__reader_1a0c18335afe5625a7aa8b8275392c0317" kindref="member">pilot2_molecular_reader::setup_data_store</ref>(<ref refid="classlbann_1_1model" kindref="compound">model</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1generic__data__reader_1aefc076b842933a882214f4f709ca49c9" kindref="member">m_data_store</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1generic__data__reader_1aefc076b842933a882214f4f709ca49c9" kindref="member">m_data_store</ref>;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1aefc076b842933a882214f4f709ca49c9" kindref="member">m_data_store</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classlbann_1_1data__store__pilot2__molecular" kindref="compound">data_store_pilot2_molecular</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlbann_1_1generic__data__reader_1aefc076b842933a882214f4f709ca49c9" kindref="member">m_data_store</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlbann_1_1generic__data__reader_1aefc076b842933a882214f4f709ca49c9" kindref="member">m_data_store</ref>-&gt;<ref refid="classlbann_1_1generic__data__store_1a1cff17def02ee21b6ca0befeb04bb582" kindref="member">setup</ref>();</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>lbann</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/mckinney27/doxy-testbed/lbann/src/data_readers/data_reader_pilot2_molecular.cpp"/>
  </compounddef>
</doxygen>
