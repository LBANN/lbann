.. role:: python(code)
          :language: python

.. role:: c(code)
          :language: c

.. _summarize-images-callback:

============================================================
Summarize Images Callback
============================================================

The purpose of this callback is to output images into an event
file at the end of each epoch, according to the specified
intervals. The images in the event file are displayed using
`Tensorboard <https://www.tensorflow.org/tensorboard>`_. The
callback can be used to display categorized images or images
generated by an autoencoder.

---------------------------------------------
Callback Options Overview
---------------------------------------------

+ :ref:`Strategy<strategy>`

    - :ref:`Track sample IDs<track-sample-ids>`

      * :ref:`Input layer name<input-layer-name>`

      * :ref:`Number of tracked images<num-tracked-images>`

      .. raw:: html

         <br>

    - :ref:`Categorical Accuracy<categorical-accuracy>`

      * :ref:`Categorical accuracy layer name<accuracy-layer-name>`

      * :ref:`Image selection criteria<selection-criteria>`

      * :ref:`Number of images per epoch<num-images-per-epoch>`

+ :ref:`Image source layer<image-source-layer>`

+ :ref:`Epoch interval<epoch-interval>`

+ :ref:`Image format<image-format>`

---------------------------------------------
Callback Option Details
---------------------------------------------

.. _strategy:

+ **Strategy**

  Pointer to the categorical accuracy or the track-sample-ids
  strategy.

    .. _track-sample-ids:

    - Track Sample IDs

      This strategy is ideally suited to generative applications,
      allowing users to track fixed samples' progress throughout
      training.

      .. note:: *There is currenly no built in way to print the
                original images from the images pulled from the
                reconstruction layer. To print images from the input
                layer, add the summarize images callback a second
                time, and pass the input layer in as the image source
                layer.*

      .. _input-layer-name:

      * Input layer name

        String to specify the name of the input layer with the
        original images.

        .. code-block:: c

           std::string input_layer_name

      .. _num-tracked-images:

      * Number of tracked images

        Integer to set the number of images to track. The default
        value is 10.

        .. code-block:: c

           size_t num_images = 10

    .. _categorical-accuracy:

    - Categorical Accuracy

      This strategy is used to view a snapshot of images in the
      dataset being used in the training session. It can display a
      given number of images based on the criteria *matched correct
      category*, *did not match correct category*, or *all images*.

      Each epoch, all images that match the selected criteria are
      outputted until the specified number of images is reached, or
      there are no more images that match the criteria.

       .. _accuracy-layer-name:

       * Categorical accuracy layer name

         String to specify the name of the categorical accuracy layer.
         Defined in the Python front end.

         .. code-block:: c

            std::string cat_accuracy_layer_name

       .. _selection-criteria:

       * Image selection criteria

         Criteria for selecting images to output: correct (MATCH),
         incorrect (NOMATCH), or all images (ALL).

         .. note:: *In Python front end, enum values from
                   'lbann.CategoricalAccuracyStrategy.MatchType'
                   must be used. The options are 'NOMATCH',
                   'MATCH', or 'ALL'. The default value is
                   'NOMATCH'.*

         .. code-block:: c

            MatchType match_type=NOMATCH

       .. _num-images-per-epoch:

       * Number of images per epoch

         Number of images to output per epoch. The default value is 10.

         .. code-block:: c

            size_t num_images=10

.. _image-source-layer:

+ **Image source layer name**

  String to specify which layer to pull images from. Defined in the
  Python Front end.

  .. note:: *For the track-sample-ids strategy, the image source layer
            must be the reconstruction layer or the dropout layer.*

  .. code-block:: c

     std::string img_source_layer_name

.. _epoch-interval:

+ **Epoch interval**

  Integer that sets the frequency to output images. The default value
  is 1, i.e., per every 1 epoch.

  .. code-block:: c

     uint64_t interval = 1

.. _image-format:

+ **Image format**

  String to specify the image format. The default is .jpg.

  .. code-block:: c

     std::string img_format = ".jpg"

---------------------------------------------
Examples Using Summarize Images Callback
---------------------------------------------

~~~~~~~~~~~~~~~~~~~~~~~~~
Python front end
~~~~~~~~~~~~~~~~~~~~~~~~~

+ Track Sample IDs Strategy

  .. code-block:: python

     # Set up image selection strategy
     img_strategy = lbann.TrackSampleIDsStrategy(
                     input_layer_name="input",
                     num_tracked_images=10)

     # Pass parameters to callback
     summarize_images = lbann.CallbackSummarizeImages(
                         selection_strategy=img_strategy,
                         image_source_layer_name="reconstruction",
                         epoch_interval=5,
                         img_format=".jpg")

     # Optional- Output original image from input layer once using
     #           a high epoch interval
     summarize_input_layer = lbann.CallbackSummarizeImages(
                              selection_strategy=img_strategy,
                              image_source_layer_name="input",
                              epoch_interval=10000)

+ Categorical Accuracy Strategy

  .. code-block:: python


     # Set up categorical accuracy layer
     accuracy = lbann.CategoricalAccuracy(prediction_scores, labels)

     # Set up image selection criteria
     match_type = lbann.CategoricalAccuracyStrategy.MatchType

     # Set up image selection strategy
     img_strategy = lbann.CategoricalAccuracyStrategy(
                     cat_accuracy_layer_name=accuracy.name,
                     match_type.NOMATCH,
                     num_images=10)

     # Pass parameters to callback
     summarize_images = lbann.CallbackSummarizeImages(
                         selection_strategy=img_strategy,
                         image_source_layer_name=images.name,
                         epoch_interval=5,
                         img_format=".jpg")

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Profobuf (Advanced)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

+ Track Sample IDs

.. code-block:: guess

   callback {
     summarize_images {
       selection_strategy {
         track_sample_ids {
           input_layer_name: "input"
           num_tracked_images: 10
         }
         image_source_layer_name: "reconstruction"
         epoch_interval: 1
         img_format: ".jpg"
       }
     }
   }

+ Categorical Accuracy Strategy

.. code-block:: guess

   # Set up categorical accuracy layer
   layer {
    parents: "prob label"
    name: "accuracy"
    data_layout: "data_parallel"
    categorical_accuracy {}
   }

   # Set up callback
   callback {
     summarize_images {
       selection_strategy {
         categorical_accuracy {
           cat_accuracy_layer_name: "accuracy"
           num_images: 10
         }
         image_source_layer_name: "images"
         epoch_interval: 1
         img_format: ".jpg"
       }
     }
   }
