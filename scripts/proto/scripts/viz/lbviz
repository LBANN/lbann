#!/usr/bin/env python3

from sys import *
import os
import pprint
from graphviz import Digraph
import google.protobuf.text_format as txtf

from lbann.proto import lbann_pb2
from lbann.viz import getGraphFromPrototext
from lbann.viz.properties import Properties

usage = '''
usage: %s model_fn.prototext [output=<string>] [format=<string>] [prop=<string>] [full=1] [brief=1] [ranksep=<double>]

where: "output" is the output file basename; default is "graph"

       "format" refers to the output file; default is pdf, so the default
       output file is "graph.pdf" You can find a list of other formats at:
       http://www.graphviz.org/content/output-formats or just try your
       favorite (gif, png, jpg, etc) -- it's probably supported!
       Note: some formats may take a while to render, so be patient.

       "prop" is the name of the properties file; default is "properties.txt"
       in the same directory of lbviz.
       The properties file is a simple text file that lists colors and
       shapes for the various layer types

       if "full=1" is present, all layer attributes are printed (e.g,
       num_neurons, has_bias, etc). The default is to print only the
       layer type and layer name

       if "brief=1", only the nodes' layer types are printed

       use "ranksep=<double> to increase of decrease the verticle distance
       between nodes. Hint: start with "ranksep=.75" and adjust up or down
       from there

note: the ordering of the optional params doesn't matter

note: in addition to the output file, an intermediate file called
      'graph.dot' will be written
''' % argv[0]

#=====================================================================

if len(argv) < 2 :
  print(usage)
  exit(9)

#parse cmd line
output_fn = "graph"
output_format = "pdf"
prop_fn = None
full = False
brief = False
ranksep=0
for j in range(2, len(argv)) :
  t = argv[j].split('=')
  if t[0] == 'output' :
    output_fn = t[1]
  elif t[0] == 'format' :
    output_format = t[1]
  elif t[0] == 'prop' :
    prop_fn = t[1]
  elif t[0] == 'full' :
    full = True
  elif t[0] == 'brief' :
    brief = True
  elif t[0] == 'ranksep' :
    ranksep = float(t[1])
  else :
    print('badly formed or unknown cmd line option:', argv[j])
    print('================================================================')
    print()
    print(usage)
    exit(9)

#load properties database
props = Properties(prop_fn) if prop_fn is not None else None

with open(argv[1], "r") as f:
  s = f.read().strip()

pb = lbann_pb2.LbannPB()
txtf.Merge(s, pb)

print(pb.model)

g = getGraphFromPrototext(
  pb.model,
  output_format,
  props,
  full,
  brief,
  ranksep)

g.render("out")
