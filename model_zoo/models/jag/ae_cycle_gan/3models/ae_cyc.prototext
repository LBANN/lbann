#Combines encoder portion ae with cycgan models for inference (forward prediction) in output space.
model {
  name: "ae_cycgan_model"
  shareable_training_data_reader:false
  serialize_io: true
  data_layout: "data_parallel"
  mini_batch_size: 256
  block_size: 256
  num_epochs: 1
  num_parallel_readers: 0
  procs_per_trainer: 0

  ###################################################
  # Objective function
  ###################################################

  objective_function {
    layer_term { layer: "binary_cross_entropy" }
    #layer_term { layer: "kl_divergence" }
    l2_weight_regularization {
      scale_factor: 1e-4
    }
  }

  ###################################################
  # Metrics
  ###################################################

  metric {
    layer_metric {
      name: "mean squared error"
      layer: "mean_squared_error"
    }
  }
  ###################################################
  # Callbacks
  ###################################################
  callback {
    print {
      interval: 1
    }
  }
  callback { timer {} }
 # callback {
 #   save_images {
 #     image_prefix: "vae_fcn_images_"
 #     image_format: "jpg"
 #   }
 # }

  ###################################################
  # start of layers
  ###################################################

  ######################
  # Data
  ######################
  #Layer from cycle GAN
  layer {
    input {
      target_mode: "N/A"
    }
    name: "data"
    data_layout: "data_parallel"
    parents: " "
  }
  layer {
    name: "slice_data"
    data_layout: "data_parallel"
    parents: "data"
    children: "image_data_id param_data_id"
    slice {
      #slice_points: "0 16384 16389"
      get_slice_points_from_reader: "independent"
    }
  }
  layer {
    identity {
    }
    name: "image_data_id"
    data_layout: "data_parallel"
    parents: "slice_data"
  }
  layer {
    identity {
    }
    name: "param_data_id"
    data_layout: "data_parallel"
    parents: "slice_data"
  }
  layer {
    fully_connected {
      num_neurons: 64
      #num_neurons: 256
      has_bias: true
    }
    name: "gen1fc1"
    data_layout: "data_parallel"
    weights: "gen1fc1linearity gen1fc1bias"
    parents: "param_data_id"
  }
  layer {
    relu {
    }
    name: "gen1relu1_1"
    data_layout: "data_parallel"
    parents: "gen1fc1"
  }
  layer {
    fully_connected {
      #num_neurons: 2048
      num_neurons: 512
      has_bias: true
    }
    name: "gen1fc2"
    data_layout: "data_parallel"
    weights: "gen1fc2linearity gen1fc2bias"
    parents: "gen1relu1_1"
  }
  layer {
    relu {
    }
    name: "gen1relu2_1"
    data_layout: "data_parallel"
    parents: "gen1fc2"
  }
  layer {
    dropout {
      keep_prob: 0.8
    }
    name: "gen1dropout1_1"
    data_layout: "data_parallel"
    parents: "gen1relu2_1"
  }
  layer {
    fully_connected {
      #num_neurons: 8192
      num_neurons: 2048
      has_bias: true
    }
    name: "gen1fc3"
    data_layout: "data_parallel"
    weights: "gen1fc3linearity"
    parents: "gen1dropout1_1"
  }
  layer {
    relu {
    }
    name: "gen1relu3_1"
    data_layout: "data_parallel"
    parents: "gen1fc3"
  }
  layer {
    fully_connected {
      #num_neurons: 16384
      #latent_dim
      num_neurons: 20
      has_bias: true
    }
    name: "gen1fc4"
    data_layout: "data_parallel"
    weights: "gen1fc4linearity"
    parents: "gen1relu3_1"
  }

  weights {
    name: "gen1fc1linearity"
    he_normal_initializer {
    }
  }
  weights {
    name: "gen1fc2linearity"
    he_normal_initializer {
    }
  }
  weights {
    name: "gen1fc3linearity"
    he_normal_initializer {
    }
  }
  weights {
    name: "gen1fc4linearity"
    he_normal_initializer {
    }
  }

  ######################
  # Encoder
  ######################
  #Encoder not really used here
  # encode1
  layer {
    parents: "image_data_id"
    name: "encode1"
    data_layout: "data_parallel"
    fully_connected {
      num_neurons: 256
      weight_initialization: "he_normal"
      has_bias: true
    }
  }
  layer {
    parents: "encode1"
    name: "encode1_elu"
    data_layout: "data_parallel"
    device_allocation: "cpu"
    elu {}
  }
  layer {
    parents: "encode1_elu"
    name: "encode1_dropout"
    data_layout: "data_parallel"
    dropout {
      keep_prob: 0.95
    }
  }

  # encode2
  layer {
    parents: "encode1_dropout"
    name: "encode2"
    data_layout: "data_parallel"
    fully_connected {
      num_neurons: 256
      weight_initialization: "he_normal"
      has_bias: true
    }
  }
  layer {
    parents: "encode2"
    name: "encode2_tanh"
    data_layout: "data_parallel"
    tanh {}
  }
  layer {
    parents: "encode2_tanh"
    name: "encode2_dropout"
    data_layout: "data_parallel"
    dropout {
      keep_prob: 0.95
    }
  }

  # encode3
  layer {
    parents: "encode2_dropout"
    name: "encode3"
    data_layout: "data_parallel"
    fully_connected {
      num_neurons: 256
      weight_initialization: "he_normal"
      has_bias: true
    }
  }
  layer {
    parents: "encode3"
    name: "encode3_tanh"
    data_layout: "data_parallel"
    tanh {}
  }
  layer {
    parents: "encode3_tanh"
    name: "encode3_dropout"
    data_layout: "data_parallel"
    dropout {
      keep_prob: 0.95
    }
  }

  ######################
  # Latent space
  ######################

  layer {
    parents: "encode3_dropout"
    name: "z_mean"
    data_layout: "data_parallel"
    fully_connected {
      num_neurons:20
      weight_initialization: "glorot_normal"
      has_bias: true
    }
  }
  #layer {
  #  parents: "sample_exp sample_noise"
  #  name: "sample_exp_noise"
  #  data_layout: "data_parallel"
  #  hadamard {}
  #}
  layer {
  #  parents: "z_mean sample_exp_noise"
    parents: "z_mean"
    name: "image_data_dummy"
    data_layout: "data_parallel"
  #  sum {}
    identity {}
  }
  ####output of encoder not used, dangling
  ######################
  # Decoder
  ######################

  # decode3
  layer {
    #parents: "sample"
    parents: "gen1fc4"
    name: "decode3"
    data_layout: "data_parallel"
    fully_connected {
      num_neurons: 256
      weight_initialization: "he_normal"
      has_bias: true
    }
  }
  layer {
    parents: "decode3"
    name: "decode3_tanh"
    data_layout: "data_parallel"
    tanh {}
  }
  layer {
    parents: "decode3_tanh"
    name: "decode3_dropout"
    data_layout: "data_parallel"
    dropout {
      keep_prob: 0.95
    }
  }

  # decode2
  layer {
    parents: "decode3_dropout"
    name: "decode2"
    data_layout: "data_parallel"
    fully_connected {
      num_neurons: 256
      weight_initialization: "he_normal"
      has_bias: true
    }
  }
  layer {
    parents: "decode2"
    name: "decode2_tanh"
    data_layout: "data_parallel"
    tanh {}
  }
  layer {
    parents: "decode2_tanh"
    name: "decode2_dropout"
    data_layout: "data_parallel"
    dropout {
      keep_prob: 0.95
    }
  }

  # decode1
  layer {
    parents: "decode2_dropout"
    name: "decode1"
    data_layout: "data_parallel"
    fully_connected {
      num_neurons: 256
      weight_initialization: "he_normal"
      has_bias: true
    }
  }
  layer {
    parents: "decode1"
    name: "decode1_elu"
    data_layout: "data_parallel"
    device_allocation: "cpu"
    elu {
    }
  }
  layer {
    parents: "decode1_elu"
    name: "decode1_dropout"
    data_layout: "data_parallel"
    dropout {
      keep_prob: 0.95
    }
  }

  # decode0
  layer {
    parents: "decode1_dropout"
    name: "decode0"
    data_layout: "data_parallel"
    #num_neurons_from_data_reader: true
    fully_connected {
      weight_initialization: "glorot_normal"
      #num_neurons: 16384
      get_slice_points_from_reader: "independent"
      get_num_neurons_of_slice_from_reader: [ 1 ]
      has_bias: true
    }
  }
  layer {
    parents: "decode0"
    name: "sigmoid"
    data_layout: "data_parallel"
    sigmoid {}
  }

  ######################
  # Reconstruction
  ######################

  layer {
    parents: "sigmoid"
    name: "reconstruction"
    data_layout: "model_parallel"
    split {}
  }
  layer {
    parents: "reconstruction image_data_id"
    name: "binary_cross_entropy"
    data_layout: "model_parallel"
    #binary_cross_entropy {}
    mean_squared_error {}
  }
  layer {
    parents: "reconstruction image_data_id"
    name: "mean_squared_error"
    data_layout: "model_parallel"
    mean_squared_error {}
  }

  ####For metric, loss per individual sample
  layer {
    name: "fw_out_loss"
    data_layout: "model_parallel"
    parents: "param_data_id mean_squared_error"
    concatenation {
    }
  }
  callback {
    dump_outputs {
      #directory:"/p/lscratchh/jacobs32/EuroViz/fw_out_loss/"
      directory:"fw_out_loss/"
      layers: "fw_out_loss"
      execution_modes: "test"
    }
  }
  callback {
    save_model {
      dir: "model"
      disable_save_after_training: true
    }
  }
  ###################################################
  # end of layers
  ###################################################
}
