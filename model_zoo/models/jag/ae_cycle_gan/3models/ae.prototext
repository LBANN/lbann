#Example taken from: https://lc.llnl.gov/bitbucket/users/jjayaram/repos/deep-latent-spaces/browse/codes/dev/VAE-FCN/vae_fcn.py and
#https://lc.llnl.gov/bitbucket/users/jjayaram/repos/deep-latent-spaces/browse/codes/dev/VAE-FCN/run_vae.py
#Timestamp 02/26/2018 8:45AM
model {
  name: "ae_model"
  shareable_training_data_reader:false
  serialize_background_io: true
  data_layout: "data_parallel"
  mini_batch_size: 256
  block_size: 256
  num_epochs:4
  num_parallel_readers: 0
  procs_per_model: 0

  ###################################################
  # Objective function
  ###################################################

  objective_function {
    layer_term { layer: "binary_cross_entropy" }
    #layer_term { layer: "kl_divergence" }
    l2_weight_regularization {
      scale_factor: 1e-4
    }
  }

  ###################################################
  # Metrics
  ###################################################

  metric {
    layer_metric {
      name: "mean squared error"
      layer: "mean_squared_error"
    }
  }

  ###################################################
  # Callbacks
  ###################################################
  callback {
    print {
      interval: 1
    }
  }
  callback { timer {} }
  #callback {
  #    dump_activations{
      #basename: "/usr/workspace/wsa/jacobs32/github.saj.lbann/dump_acts_ae/"
  #    basename: "/usr/workspace/wsa/jacobs32/centralized-lbann/EuroViz/"
  #    interval: 1
  #    layer_names: "image_data_dummy sigmoid"
  #    layer_names: "reconstruction"
  #  }
  #}
  #callback {
  #  save_images {
  #    image_prefix: "vae_fcn_images_"
  #    image_format: "jpg"
  #  }
  #}

  ###################################################
  # start of layers
  ###################################################

  ######################
  # Data
  ######################
  #layer {
  #  name: "data"
  #  children: "encode1 reconstruction"
  #  data_layout: "data_parallel"
  #  input {
  #    io_buffer: "distributed"
  #    target_mode: "reconstruction"
  #  }
  #}

  layer {
    input {
      io_buffer: "partitioned"
      target_mode: "N/A"
    }
    name: "data"
    data_layout: "data_parallel"
    parents: " "
  }
  layer {
    name: "slice_data"
    data_layout: "data_parallel"
    parents: "data"
    children: "image_data_dummy param_data_id"
    slice {
      #slice_points: "0 16384 16389"
      get_slice_points_from_reader: "independent"
    }
  }
  layer {
    identity {
    }
    name: "image_data_dummy"
    data_layout: "data_parallel"
    parents: "slice_data"
  }
  layer {
    identity {
    }
    name: "param_data_id"
    data_layout: "data_parallel"
    parents: "slice_data"
  }
  ######################
  # Encoder
  ######################

  # encode1
  layer {
    #parents: "data"
    parents: "image_data_dummy"
    name: "encode1"
    data_layout: "data_parallel"
    fully_connected {
      num_neurons: 256
      weight_initialization: "he_normal"
      has_bias: true
    }
  }
  layer {
    parents: "encode1"
    name: "encode1_elu"
    data_layout: "data_parallel"
    device_allocation: "cpu"
    elu {}
  }
  layer {
    parents: "encode1_elu"
    name: "encode1_dropout"
    data_layout: "data_parallel"
    dropout {
      keep_prob: 0.95
    }
  }

  # encode2
  layer {
    parents: "encode1_dropout"
    name: "encode2"
    data_layout: "data_parallel"
    fully_connected {
      num_neurons: 256
      weight_initialization: "he_normal"
      has_bias: true
    }
  }
  layer {
    parents: "encode2"
    name: "encode2_tanh"
    data_layout: "data_parallel"
    tanh {}
  }
  layer {
    parents: "encode2_tanh"
    name: "encode2_dropout"
    data_layout: "data_parallel"
    dropout {
      keep_prob: 0.95
    }
  }

  # encode3
  layer {
    parents: "encode2_dropout"
    name: "encode3"
    data_layout: "data_parallel"
    fully_connected {
      num_neurons: 256
      weight_initialization: "he_normal"
      has_bias: true
    }
  }
  layer {
    parents: "encode3"
    name: "encode3_tanh"
    data_layout: "data_parallel"
    tanh {}
  }
  layer {
    parents: "encode3_tanh"
    name: "encode3_dropout"
    data_layout: "data_parallel"
    dropout {
      keep_prob: 0.95
    }
  }

  ######################
  # Latent space
  ######################

  layer {
    parents: "encode3_dropout"
    name: "z_mean"
    data_layout: "data_parallel"
    fully_connected {
      num_neurons:20
      weight_initialization: "glorot_normal"
      has_bias: true
    }
  }
  layer {
    #parents: "z_mean sample_exp_noise"
    parents: "z_mean"
    name: "sample"
    data_layout: "data_parallel"
    #sum {}
    identity {}
  }

  ######################
  # Decoder
  ######################

  # decode3
  layer {
    parents: "sample"
    name: "decode3"
    data_layout: "data_parallel"
    fully_connected {
      num_neurons: 256
      weight_initialization: "he_normal"
      has_bias: true
    }
  }
  layer {
    parents: "decode3"
    name: "decode3_tanh"
    data_layout: "data_parallel"
    tanh {}
  }
  layer {
    parents: "decode3_tanh"
    name: "decode3_dropout"
    data_layout: "data_parallel"
    dropout {
      keep_prob: 0.95
    }
  }

  # decode2
  layer {
    parents: "decode3_dropout"
    name: "decode2"
    data_layout: "data_parallel"
    fully_connected {
      num_neurons: 256
      weight_initialization: "he_normal"
      has_bias: true
    }
  }
  layer {
    parents: "decode2"
    name: "decode2_tanh"
    data_layout: "data_parallel"
    tanh {}
  }
  layer {
    parents: "decode2_tanh"
    name: "decode2_dropout"
    data_layout: "data_parallel"
    dropout {
      keep_prob: 0.95
    }
  }

  # decode1
  layer {
    parents: "decode2_dropout"
    name: "decode1"
    data_layout: "data_parallel"
    fully_connected {
      num_neurons: 256
      weight_initialization: "he_normal"
      has_bias: true
    }
  }
  layer {
    parents: "decode1"
    name: "decode1_elu"
    data_layout: "data_parallel"
    device_allocation: "cpu"
    elu {
    }
  }
  layer {
    parents: "decode1_elu"
    name: "decode1_dropout"
    data_layout: "data_parallel"
    dropout {
      keep_prob: 0.95
    }
  }

  # decode0
  layer {
    parents: "decode1_dropout"
    name: "decode0"
    data_layout: "data_parallel"
    #num_neurons_from_data_reader: true
    fully_connected {
      weight_initialization: "glorot_normal"
      #num_neurons: 16384
      get_slice_points_from_reader: "independent"
      get_num_neurons_of_slice_from_reader: [ 1 ]
      has_bias: true
    }
  }
  layer {
    parents: "decode0"
    name: "sigmoid"
    data_layout: "data_parallel"
    sigmoid {}
  }
  ######################
  # Reconstruction
  ######################

  layer {
    parents: "sigmoid"
    name: "reconstruction"
    data_layout: "model_parallel"
    split {}
  }
  layer {
    parents: "reconstruction image_data_dummy"
    name: "binary_cross_entropy"
    data_layout: "model_parallel"
    #binary_cross_entropy {}
    mean_squared_error {}
  }
  layer {
    parents: "reconstruction image_data_dummy"
    name: "mean_squared_error"
    data_layout: "model_parallel"
    mean_squared_error {}
  }
  ####For metric, loss per individual sample
  layer {
    name: "ae_err"
    data_layout: "model_parallel"
    parents: "param_data_id mean_squared_error"
    concatenation {
    }
  }
  callback {
    dump_outputs {
     # prefix:"/p/lscratchh/brainusr/jacobs32/EuroViz/ae_loss/"
     # #prefix:"/p/gpfs1/jacobs32/EuroViz3/ae_loss/"
      prefix:"ae_loss/"
      layers: "ae_err"
      execution_modes: "test"
    }
  }
  ###################################################
  # end of layers
  ###################################################
}
