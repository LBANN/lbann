model {
  name: "cycgan_model"
  shareable_training_data_reader:false
  serialize_background_io: true
  procs_per_model:0
  objective_function {
    l2_weight_regularization {
      scale_factor: 0.0001
    }
    layer_term {
      scale_factor: 1.0
      layer: "disc1_real_bce"
    }
    layer_term {
      scale_factor: 1.0
      layer: "disc1_fake_bce"
    }
    layer_term {
      scale_factor: 0.05
      layer: "g_adv1_bce"
    }
    layer_term {
      scale_factor: 0.025
      layer: "l_l2_y"
    }
    layer_term {
      scale_factor: 1.0
      layer: "disc1_inv_real_bce"
    }
    layer_term {
      scale_factor: 1.0
      layer: "disc1_inv_fake_bce"
    }
    layer_term {
      scale_factor: 0.05
      layer: "g_inv_adv1_bce"
    }
    layer_term {
      scale_factor: 0.025
      layer: "l_l2_x"
    }
  }
  num_epochs: 4
  super_steps: 10
  metric {
    layer_metric {
      layer: "l_l2_y"
    }
  }
  data_layout: "data_parallel"
  layer {
    input {
      io_buffer: "partitioned"
      data_set_per_model: true
      target_mode: "N/A"
    }
    name: "data"
    data_layout: "data_parallel"
    parents: " "
  }
  layer {
    name: "zero"
    data_layout: "data_parallel"
    constant {
      value: 0.0
      num_neurons: "1"
    }
  }
  layer {
    name: "one"
    data_layout: "data_parallel"
    constant {
      value: 1.0
      num_neurons: "1"
    }
  }
  layer {
    name: "slice_data"
    data_layout: "data_parallel"
    parents: "data"
    #children: "image_data_dummy param_data_id"
    children: "image_data_id param_data_id"
    slice {
      #slice_points: "0 2500 2511"
      get_slice_points_from_reader: "independent"
    }
  }
  layer {
    identity {
    }
    #name: "image_data_dummy"
    name: "image_data_id"
    data_layout: "data_parallel"
    parents: "slice_data"
  }
  layer {
    identity {
    }
    name: "param_data_id"
    data_layout: "data_parallel"
    parents: "slice_data"
  }
########Data space end here
  ######################
  # Encoder from VAE
  ######################

  # encode1
  layer {
    #parents: "data"
    parents: "image_data_id"
    name: "encode1"
    freeze: true
    data_layout: "data_parallel"
    fully_connected {
      num_neurons: 256
      has_bias: true
    }
  }
  layer {
    parents: "encode1"
    name: "encode1_elu"
    data_layout: "data_parallel"
    device_allocation: "cpu"
    elu {}
  }
  layer {
    parents: "encode1_elu"
    name: "encode1_dropout"
    data_layout: "data_parallel"
    dropout {
      keep_prob: 0.95
    }
  }

  # encode2
  layer {
    parents: "encode1_dropout"
    name: "encode2"
    freeze: true
    data_layout: "data_parallel"
    fully_connected {
      num_neurons: 256
      has_bias: true
    }
  }
  layer {
    parents: "encode2"
    name: "encode2_tanh"
    data_layout: "data_parallel"
    tanh {}
  }
  layer {
    parents: "encode2_tanh"
    name: "encode2_dropout"
    data_layout: "data_parallel"
    dropout {
      keep_prob: 0.95
    }
  }

  # encode3
  layer {
    parents: "encode2_dropout"
    name: "encode3"
    freeze: true
    data_layout: "data_parallel"
    fully_connected {
      num_neurons: 256
      has_bias: true
    }
  }
  layer {
    parents: "encode3"
    name: "encode3_tanh"
    data_layout: "data_parallel"
    tanh {}
  }
  layer {
    parents: "encode3_tanh"
    name: "encode3_dropout"
    data_layout: "data_parallel"
    dropout {
      keep_prob: 0.95
    }
  }

  ######################
  # Latent space
  ######################

  layer {
    parents: "encode3_dropout"
    name: "z_mean"
    freeze: true
    data_layout: "data_parallel"
    fully_connected {
      num_neurons:20
      has_bias: true
    }
  }
  layer {
    #parents: "z_mean sample_exp_noise"
    parents: "z_mean"
    #name: "sample"
    ###This is actually sample in latent space, call image_data_dummy for legacy
    name: "image_data_dummy"
    data_layout: "data_parallel"
    #sum {}
    identity {}
  }
  #####VAE Encoder ends here, sample feeds/replaces image data dummy
  layer {
    fully_connected {
      num_neurons: 64
      has_bias: true
    }
    name: "gen1fc1"
    data_layout: "data_parallel"
    #weights: "gen1fc1linearity"
    parents: "param_data_id"
  }
  layer {
    relu {
    }
    name: "gen1relu1"
    data_layout: "data_parallel"
    parents: "gen1fc1"
  }
  layer {
    fully_connected {
      num_neurons: 512
      has_bias: true
    }
    name: "gen1fc2"
    data_layout: "data_parallel"
    #weights: "gen1fc2linearity"
    parents: "gen1relu1"
  }
  layer {
    relu {
    }
    name: "gen1relu2"
    data_layout: "data_parallel"
    parents: "gen1fc2"
  }
  #layer {
  #  dropout {
  #    keep_prob: 0.8
  #  }
  #  name: "gen1dropout1"
  #  data_layout: "data_parallel"
  #  parents: "gen1relu2"
  #}
  layer {
    fully_connected {
      num_neurons: 2048
      has_bias: true
    }
    name: "gen1fc3"
    data_layout: "data_parallel"
    #weights: "gen1fc3linearity"
    #parents: "gen1dropout1"
    parents: "gen1relu2"
  }
  layer {
    relu {
    }
    name: "gen1relu3"
    data_layout: "data_parallel"
    parents: "gen1fc3"
  }
  layer {
    fully_connected {
      #num_neurons: 2500
      #get_slice_points_from_reader: "independent"
      #get_num_neurons_of_slice_from_reader: [ 1 ]
      #replace image_dim with latent_dim
      num_neurons: 20
      has_bias: true
    }
    name: "gen1fc4"
    data_layout: "data_parallel"
    #weights: "gen1fc4linearity"
    parents: "gen1relu3"
  }
  #concat latenty sample (image_data_dummy) and param
  layer {
    name: "concat_latent_sample_n_param"
    data_layout: "data_parallel"
    parents: "image_data_dummy param_data_id"
    concatenation {
    }
  }
  layer {
    fully_connected {
      num_neurons: 512
      has_bias: true
    }
    name: "d1fc1_real"
    data_layout: "data_parallel"
    weights: "d1fc1linearity d1fc1bias"
    #parents: "data"
    parents: "concat_latent_sample_n_param"
  }
  layer {
    relu {
    }
    name: "d1relu1_real"
    data_layout: "data_parallel"
    parents: "d1fc1_real"
  }
  layer {
    fully_connected {
      num_neurons: 64
      has_bias: true
    }
    name: "d1fc2_real"
    data_layout: "data_parallel"
    weights: "d1fc2linearity d1fc2bias"
    parents: "d1relu1_real"
  }
  layer {
    relu {
    }
    name: "d1relu2_real"
    data_layout: "data_parallel"
    parents: "d1fc2_real"
  }
  layer {
    fully_connected {
      num_neurons: 1
      has_bias: true
    }
    name: "d1fc3_real"
    data_layout: "data_parallel"
    weights: "d1fc3linearity d1fc3bias"
    parents: "d1relu2_real"
  }
  layer {
    name: "concat_gsample_n_param"
    data_layout: "data_parallel"
    parents: "gen1fc4 param_data_id"
    children: "d1_stop_gradient d2_dummy"
    concatenation {
    }
  }
  layer {
    name: "d1_stop_gradient"
    data_layout: "data_parallel"
    parents: "concat_gsample_n_param"
    stop_gradient {
    }
  }
  layer {
    fully_connected {
      num_neurons: 512
      has_bias: true
    }
    name: "d1fc1_fake"
    data_layout: "data_parallel"
    weights: "d1fc1linearity d1fc1bias"
    parents: "d1_stop_gradient"
  }
  layer {
    relu {
    }
    name: "d1relu1_fake"
    data_layout: "data_parallel"
    parents: "d1fc1_fake"
  }
  layer {
    fully_connected {
      num_neurons: 64
      has_bias: true
    }
    name: "d1fc2_fake"
    data_layout: "data_parallel"
    weights: "d1fc2linearity d1fc2bias"
    parents: "d1relu1_fake"
  }
  layer {
    relu {
    }
    name: "d1relu2_fake"
    data_layout: "data_parallel"
    parents: "d1fc2_fake"
  }
  layer {
    fully_connected {
      num_neurons: 1
      has_bias: true
    }
    name: "d1fc3_fake"
    data_layout: "data_parallel"
    weights: "d1fc3linearity d1fc3bias"
    parents: "d1relu2_fake"
  }
  layer {
    sigmoid_binary_cross_entropy {
    }
    name: "disc1_real_bce"
    data_layout: "data_parallel"
    parents: "d1fc3_real one"
  }
  layer {
    sigmoid_binary_cross_entropy {
    }
    name: "disc1_fake_bce"
    data_layout: "data_parallel"
    parents: "d1fc3_fake zero"
  }
  layer {
    identity {
    }
    name: "d2_dummy"
    data_layout: "data_parallel"
    parents: "concat_gsample_n_param"
  }
  layer {
    freeze: true
    fully_connected {
      num_neurons: 512
      has_bias: true
    }
    name: "d2fc1"
    data_layout: "data_parallel"
    parents: "d2_dummy"
  }
  layer {
    relu {
    }
    name: "d2relu1"
    data_layout: "data_parallel"
    parents: "d2fc1"
  }
  layer {
    freeze: true
    fully_connected {
      num_neurons: 64
      has_bias: true
    }
    name: "d2fc2"
    data_layout: "data_parallel"
    parents: "d2relu1"
  }
  layer {
    relu {
    }
    name: "d2relu2"
    data_layout: "data_parallel"
    parents: "d2fc2"
  }
  layer {
    freeze: true
    fully_connected {
      num_neurons: 1
      has_bias: true
    }
    name: "d2fc3"
    data_layout: "data_parallel"
    parents: "d2relu2"
  }
  layer {
    sigmoid_binary_cross_entropy {
    }
    name: "g_adv1_bce"
    data_layout: "data_parallel"
    parents: "d2fc3 one"
  }
  layer {
    name: "gsample_minus_y"
    data_layout: "data_parallel"
    parents: "gen1fc4 image_data_dummy"
    weighted_sum {
      scaling_factors: "1 -1"
    }
  }
  layer {
    name: "l_l2_y"
    data_layout: "data_parallel"
    l2_norm2 {
    }
    parents: "gsample_minus_y"
  }
  layer {
    fully_connected {
      num_neurons: 64
      has_bias: true
    }
    name: "gen2fc1"
    data_layout: "data_parallel"
    #weights: "gen2fc1linearity"
    parents: "image_data_dummy"
  }
  layer {
    relu {
    }
    name: "gen2relu1"
    data_layout: "data_parallel"
    parents: "gen2fc1"
  }
  layer {
    fully_connected {
      num_neurons: 512
      has_bias: true
    }
    name: "gen2fc2"
    data_layout: "data_parallel"
    #weights: "gen2fc2linearity"
    parents: "gen2relu1"
  }
  layer {
    relu {
    }
    name: "gen2relu2"
    data_layout: "data_parallel"
    parents: "gen2fc2"
  }
  layer {
    fully_connected {
      num_neurons: 2048
      has_bias: true
    }
    name: "gen2fc3"
    data_layout: "data_parallel"
    #weights: "gen2fc3linearity"
    parents: "gen2relu2"
  }
  layer {
    relu {
    }
    name: "gen2relu3"
    data_layout: "data_parallel"
    parents: "gen2fc3"
  }
  layer {
    fully_connected {
      #num_neurons: 11
      get_slice_points_from_reader: "independent"
      get_num_neurons_of_slice_from_reader: [ 2 ]
      has_bias: true
    }
    name: "gen2fc4"
    data_layout: "data_parallel"
    #weights: "gen2fc4linearity"
    parents: "gen2relu3"
  }
  layer {
    name: "concat_param_n_img"
    data_layout: "data_parallel"
    parents: "param_data_id image_data_dummy"
    concatenation {
    }
  }
  layer {
    fully_connected {
      num_neurons: 512
      has_bias: true
    }
    name: "d1_invfc1_real"
    data_layout: "data_parallel"
    weights: "d1_invfc1linearity d1_invfc1bias"
    parents: "concat_param_n_img"
  }
  layer {
    relu {
    }
    name: "d1_invrelu1_real"
    data_layout: "data_parallel"
    parents: "d1_invfc1_real"
  }
  layer {
    fully_connected {
      num_neurons: 64
      has_bias: true
    }
    name: "d1_invfc2_real"
    data_layout: "data_parallel"
    weights: "d1_invfc2linearity d1_invfc2bias"
    parents: "d1_invrelu1_real"
  }
  layer {
    relu {
    }
    name: "d1_invrelu2_real"
    data_layout: "data_parallel"
    parents: "d1_invfc2_real"
  }
  layer {
    fully_connected {
      num_neurons: 1
      has_bias: true
    }
    name: "d1_invfc3_real"
    data_layout: "data_parallel"
    weights: "d1_invfc3linearity d1_invfc3bias"
    parents: "d1_invrelu2_real"
  }
  layer {
    name: "concat_gsample2_n_img"
    data_layout: "data_parallel"
    parents: "gen2fc4 image_data_dummy"
    children: "d1_inv_stop_gradient d2_inv_dummy"
    concatenation {
    }
  }
  layer {
    name: "d1_inv_stop_gradient"
    data_layout: "data_parallel"
    parents: "concat_gsample2_n_img"
    stop_gradient {
    }
  }
  layer {
    fully_connected {
      num_neurons: 512
      has_bias: true
    }
    name: "d1_invfc1_fake"
    data_layout: "data_parallel"
    weights: "d1_invfc1linearity d1_invfc1bias"
    parents: "d1_inv_stop_gradient"
  }
  layer {
    relu {
    }
    name: "d1_invrelu1_fake"
    data_layout: "data_parallel"
    parents: "d1_invfc1_fake"
  }
  layer {
    fully_connected {
      num_neurons: 64
      has_bias: true
    }
    name: "d1_invfc2_fake"
    data_layout: "data_parallel"
    weights: "d1_invfc2linearity d1_invfc2bias"
    parents: "d1_invrelu1_fake"
  }
  layer {
    relu {
    }
    name: "d1_invrelu2_fake"
    data_layout: "data_parallel"
    parents: "d1_invfc2_fake"
  }
  layer {
    fully_connected {
      num_neurons: 1
      has_bias: true
    }
    name: "d1_invfc3_fake"
    data_layout: "data_parallel"
    weights: "d1_invfc3linearity d1_invfc3bias"
    parents: "d1_invrelu2_fake"
  }
  layer {
    sigmoid_binary_cross_entropy {
    }
    name: "disc1_inv_real_bce"
    data_layout: "data_parallel"
    parents: "d1_invfc3_real one"
  }
  layer {
    sigmoid_binary_cross_entropy {
    }
    name: "disc1_inv_fake_bce"
    data_layout: "data_parallel"
    parents: "d1_invfc3_fake zero"
  }
  layer {
    identity {
    }
    name: "d2_inv_dummy"
    data_layout: "data_parallel"
    parents: "concat_gsample2_n_img"
  }
  layer {
    freeze: true
    fully_connected {
      num_neurons: 512
      has_bias: true
    }
    name: "d2_invfc1"
    data_layout: "data_parallel"
    parents: "d2_inv_dummy"
  }
  layer {
    relu {
    }
    name: "d2_invrelu1"
    data_layout: "data_parallel"
    parents: "d2_invfc1"
  }
  layer {
    freeze: true
    fully_connected {
      num_neurons: 64
      has_bias: true
    }
    name: "d2_invfc2"
    data_layout: "data_parallel"
    parents: "d2_invrelu1"
  }
  layer {
    relu {
    }
    name: "d2_invrelu2"
    data_layout: "data_parallel"
    parents: "d2_invfc2"
  }
  layer {
    freeze: true
    fully_connected {
      num_neurons: 1
      has_bias: true
    }
    name: "d2_invfc3"
    data_layout: "data_parallel"
    parents: "d2_invrelu2"
  }
  layer {
    sigmoid_binary_cross_entropy {
    }
    name: "g_inv_adv1_bce"
    data_layout: "data_parallel"
    parents: "d2_invfc3 one"
  }
  layer {
    name: "gsample2_minus_x"
    data_layout: "data_parallel"
    parents: "gen2fc4 param_data_id"
    weighted_sum {
      scaling_factors: "1 -1"
    }
  }
  layer {
    name: "l_l2_x"
    data_layout: "data_parallel"
    l2_norm2 {
    }
    parents: "gsample2_minus_x"
  }
  weights {
    name: "gen1fc1linearity"
    he_normal_initializer {
    }
  }
  weights {
    name: "gen1fc2linearity"
    he_normal_initializer {
    }
  }
  weights {
    name: "gen1fc3linearity"
    he_normal_initializer {
    }
  }
  weights {
    name: "gen1fc4linearity"
    he_normal_initializer {
    }
  }
  weights {
    name: "d1fc1linearity"
    he_normal_initializer {
    }
  }
  weights {
    name: "d1fc1bias"
  }
  weights {
    name: "d1fc2linearity"
    he_normal_initializer {
    }
  }
  weights {
    name: "d1fc2bias"
  }
  weights {
    name: "d1fc3linearity"
    he_normal_initializer {
    }
  }
  weights {
    name: "d1fc3bias"
  }
  weights {
    name: "gen2fc1linearity"
    he_normal_initializer {
    }
  }
  weights {
    name: "gen2fc2linearity"
    he_normal_initializer {
    }
  }
  weights {
    name: "gen2fc3linearity"
    he_normal_initializer {
    }
  }
  weights {
    name: "gen2fc4linearity"
    he_normal_initializer {
    }
  }
  weights {
    name: "d1_invfc1linearity"
    he_normal_initializer {
    }
  }
  weights {
    name: "d1_invfc1bias"
  }
  weights {
    name: "d1_invfc2linearity"
    he_normal_initializer {
    }
  }
  weights {
    name: "d1_invfc2bias"
  }
  weights {
    name: "d1_invfc3linearity"
    he_normal_initializer {
    }
  }
  weights {
    name: "d1_invfc3bias"
  }
  mini_batch_size: 256
  callback {
    print {
      interval: 10
    }
  }
  callback {
    timer {
    }
  }
  callback { gpu_memory_usage {} }
  #callback { debug {} }
  #callback {
  #  summary {
  #    dir: "."
  #    mat_interval: 25
  #  }
  #}
  callback {
    replace_weights {
      source_layers: "d1fc1_real d1fc2_real d1fc3_real d1_invfc1_real d1_invfc2_real d1_invfc3_real"
      destination_layers: "d2fc1 d2fc2 d2fc3 d2_invfc1 d2_invfc2 d2_invfc3"
      batch_interval: 1
    }
  }
  #callback {
  #  ltfb {
  #    round_size: 100
  #    eval_metrics: "l_l2_y_eval"
  #    increasing_metric_mode: false
  #    weights_tosend: "gen1fc1_linearity_weights gen1fc1_bias_weights gen1fc2_linearity_weights gen1fc2_bias_weights gen1fc3_linearity_weights gen1fc3_bias_weights gen1fc4_linearity_weights gen1fc4_bias_weights gen2fc1_linearity_weights gen2fc1_bias_weights gen2fc2_linearity_weights gen2fc2_bias_weights gen2fc3_linearity_weights gen2fc3_bias_weights gen2fc4_linearity_weights gen2fc4_bias_weights"

   # }
 # }
  block_size: 256
  ####For metric, loss per individual sample
  layer {
    name: "fw_latent_loss"
    data_layout: "model_parallel"
    parents: "param_data_id l_l2_y"
    concatenation {
    }
  }

  callback {
    dump_outputs {
      prefix:"fw_latent_loss/"
      #prefix:"/p/gpfs1/jacobs32/EuroViz3/fw_latent_loss/"
      #layer_names: "image_data_dummy gen1fc4 gsample_minus_y l_l2_y"
      layers: "fw_latent_loss"
      execution_modes: "test"
    }
  }
}
