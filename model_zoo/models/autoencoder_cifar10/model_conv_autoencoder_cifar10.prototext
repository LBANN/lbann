model {
  name: "sequential_model"
  data_layout: "data_parallel"
  mini_batch_size: 128
  block_size: 256
  num_epochs: 10
  num_parallel_readers: 1
  #procs_per_model: 12
  procs_per_model: 0
  disable_cuda: true

  ###################################################
  # Objective function
  ###################################################

  objective_function {
    mean_squared_error {}
    l2_weight_regularization {
      scale_factor: 0.0005
    }
  }

  ###################################################
  # Metrics
  ###################################################

  metric {
    mean_squared_error {}
  }

  ###################################################
  # Callbacks
  ###################################################
  callback {
    print {
      interval: 1
    }
  }
  callback {
    timer {
    }
  }
 # callback {
 #   save_images {
 #     image_prefix: "images_"
 #     image_format: "pgm"
 #   }
 # }

  ###################################################
  # start of layers
  ###################################################

  #######
  # INPUT
  #######
  layer {
    name: "data"
    children: "conv1 reconstruction"
    data_layout: "data_parallel"
    input {
      io_buffer: "distributed"
      target_mode: "reconstruction"
    }
  }

  #############
  # CONVOLUTION 1
  #############
  layer {
    name: "conv1"
    data_layout: "data_parallel"
    convolution {
      num_dims: 2
      num_output_channels: 16
      conv_dims: "3 3"
      conv_pads: "0 0"
      conv_strides: "1 1"
      has_bias: true
      has_vectors: true
    }
  }

  ######
  # RELU 1
  ######
  layer {
    name: "relu1"
    data_layout: "data_parallel"
    relu {
    }
  }

  #########
  # POOLING 1
  #########
  layer {
    name: "pool1"
    data_layout: "data_parallel"
    pooling {
      num_dims: 2
      pool_dims: "2 2"
      pool_pads: "0 0"
      pool_strides: "1 1"
      pool_mode: "max"
      has_vectors: true
    }
  }

  #############
  # CONVOLUTION 2
  #############
  layer {
    name: "conv2"
    data_layout: "data_parallel"
    convolution {
      num_dims: 2
      num_output_channels: 8
      conv_dims: "3 3"
      conv_pads: "0 0"
      conv_strides: "1 1"
      has_bias: true
      has_vectors: true
    }
  }

  ######
  # RELU 2
  ######
  layer {
    name: "relu2"
    data_layout: "data_parallel"
    relu {
    }
  }

  #########
  # POOLING 2
  #########
  layer {
    name: "pool2"
    data_layout: "data_parallel"
    pooling {
      num_dims: 2
      pool_dims: "2 2"
      pool_pads: "0 0"
      pool_strides: "1 1"
      pool_mode: "max"
      has_vectors: true
    }
  }

  #############
  # CONVOLUTION 3
  #############
  layer {
    name: "conv3"
    data_layout: "data_parallel"
    convolution {
      num_dims: 2
      num_output_channels: 8
      conv_dims: "3 3"
      conv_pads: "0 0"
      conv_strides: "1 1"
      has_bias: true
      has_vectors: true
    }
  }

  ######
  # RELU 3
  ######
  layer {
    name: "relu3"
    data_layout: "data_parallel"
    relu {
    }
  }

  #########
  # POOLING 3
  #########
  layer {
    name: "pool3"
    data_layout: "data_parallel"
    pooling {
      num_dims: 2
      pool_dims: "2 2"
      pool_pads: "0 0"
      pool_strides: "1 1"
      pool_mode: "max"
      has_vectors: true
    }
  }

 #########
  # UNPOOLING 3
  #########
  layer {
    name: "unpool3"
    data_layout: "data_parallel"
    unpooling {
      num_dims: 2
      pooling_layer: "pool3"
    }
  }

  #############
  # DECONVOLUTION 3
  #############
  layer {
    name: "deconv3"
    data_layout: "data_parallel"
    deconvolution {
      num_dims: 2
      num_output_channels: 8
      conv_dims: "3 3"
      conv_pads: "0 0"
      conv_strides: "1 1"
      has_bias: true
      has_vectors: true
    }
  }

  ######
  # RELU 4
  ######
  layer {
    name: "relu4"
    data_layout: "data_parallel"
    relu {
    }
  }

  #########
  # UNPOOLING 2
  #########
  layer {
    name: "unpool2"
    data_layout: "data_parallel"
    unpooling {
      num_dims: 2
      pooling_layer: "pool2"
    }
  }

  #############
  # DECONVOLUTION 2
  #############
  layer {
    name: "deconv2"
    data_layout: "data_parallel"
    deconvolution {
      num_dims: 2
      num_output_channels: 16
      conv_dims: "3 3"
      conv_pads: "0 0"
      conv_strides: "1 1"
      has_bias: true
      has_vectors: true
    }
  }

  ######
  # RELU 5
  ######
  layer {
    name: "relu5"
    data_layout: "data_parallel"
    relu {
    }
  }

  #########
  # UNPOOLING 1
  #########
  layer {
    name: "unpool1"
    data_layout: "data_parallel"
    unpooling {
      num_dims: 2
      pooling_layer: "pool1"
    }
  }

  #############
  # DECONVOLUTION 1
  #############
  layer {
    name: "deconv1"
    data_layout: "data_parallel"
    deconvolution {
      num_dims: 2
      num_output_channels: 3
      conv_dims: "3 3"
      conv_pads: "0 0"
      conv_strides: "1 1"
      has_bias: true
      has_vectors: true
    }
  }

  ######
  # RELU 6
  ######
  layer {
    name: "relu6"
    data_layout: "data_parallel"
    relu {
    }
  }


  #################
  # FULLY_CONNECTED decode1
  #################
  layer {
    name: "decode1"
    data_layout: "data_parallel"
    num_neurons_from_data_reader: true
    fully_connected {
      num_neurons: 784
      has_bias: true
    }
  }

  #######
  # SIGMOID sigmoid
  #######
  layer {
    name: "sigmoid"
    data_layout: "data_parallel"
    sigmoid {
    }
  }


  #################
  # RECONSTRUCTION
  #################
  layer {
    name: "reconstruction"
    parents: "sigmoid data"
    data_layout: "data_parallel"
    reconstruction {}
  }

  ###################################################
  # end of layers
  ###################################################
}
