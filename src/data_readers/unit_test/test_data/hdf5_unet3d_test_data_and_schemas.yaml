////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2014-2023, Lawrence Livermore National Security, LLC.
// Produced at the Lawrence Livermore National Laboratory.
// Written by the LBANN Research Team (B. Van Essen, et al.) listed in
// the CONTRIBUTORS file. <lbann-dev@llnl.gov>
//
// LLNL-CODE-697807.
// All rights reserved.
//
// This file is part of LBANN: Livermore Big Artificial Neural Network
// Toolkit. For details, see http://software.llnl.gov/LBANN or
// https://github.com/LLNL/LBANN.
//
// Licensed under the Apache License, Version 2.0 (the "Licensee"); you
// may not use this file except in compliance with the License.  You may
// obtain a copy of the License at:
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the license.
////////////////////////////////////////////////////////////////////////////////

const std::string hdf5_3dunet_2x2x2_data_sample=R"FOO(
 segmentation: [0.0, -7253.0, 16802.0, 1.0, 2.0, -1.0, -2.0, 0.0]
 volume: [0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 0.0, 1.0]
)FOO";

const std::string hdf5_3dunet_2x2x2_data_schema = R"FOO(
segmentation:
  metadata:
    ordering: 0
    dims: [2, 2, 2]
    channels: 1
    layout: "dwhc"
    transpose: "cdhw"
volume:
  metadata:
    ordering: 1
    dims: [2, 2, 2]
    channels: 1
    layout: "dwhc"
    transpose: "cdhw"
)FOO";

const std::string hdf5_3dunet_4x4x4_data_sample=R"FOO(
 segmentation: [1521.0, -6943.0, 12868.0, 8142.0, 10263.0, -3591.0, 6773.0, -3700.0, 16013.0, 10244.0, 16630.0, -6890.0, 7047.0, -2550.0, 1660.0, -4704.0, 12978.0, -1964.0, 16776.0, 7940.0, 12849.0, 11295.0, 8651.0, -3623.0, -6699.0, 15790.0, -2203.0, 15224.0, 14176.0, 13129.0, 12631.0, 9622.0, 6258.0, 13291.0, -4119.0, 13261.0, -2140.0, 15300.0, -2224.0, 15196.0, 15724.0, 3984.0, 14495.0, 15280.0, 3812.0, -2963.0, 15829.0, 14615.0, 15680.0, 8531.0, -1899.0, 14763.0, -2835.0, 6426.0, 8505.0, -3695.0, 16416.0, 16698.0, 16802.0, 13928.0, -7253.0, 16802.0, -7253.0, 16802.0]
 volume: [0.0,	1.0,	2.0,	1.0,	0.0,	2.0,	0.0,	1.0,	2.0,	0.0,	1.0,	1.0,	2.0,	0.0,	2.0,	1.0,	0.0,	1.0,	2.0,	2.0,	1.0,	0.0,	1.0,	2.0,	0.0,	1.0,	1.0,	2.0,	0.0,	2.0,	2.0,	1.0,	0.0,	1.0,	2.0,	0.0,	1.0,	1.0,	2.0,	1.0,	0.0,	2.0,	0.0,	1.0,	2.0,	1.0,	1.0,	0.0,	2.0,	1.0,	2.0,	0.0,	0.0,	1.0,	1.0,	2.0,	0.0,	2.0,	1.0,	0.0,	0.0,	2.0,	1.0,	0.0]
)FOO";

const std::string hdf5_3dunet_4x4x4_data_schema = R"FOO(
segmentation:
  metadata:
    ordering: 0
    dims: [4, 4, 4]
    channels: 1
    layout: "dwhc"
    transpose: "cdhw"
volume:
  metadata:
    ordering: 1
    dims: [4, 4, 4]
    channels: 1
    layout: "dwhc"
    transpose: "cdhw"
)FOO";

const std::string hdf5_3dunet_experiment_schema = R"FOO(
segmentation:
  metadata:
    pack: "samples"
    coerce: "int"
volume:
  metadata:
    pack: "volume"
    coerce: "int"
)FOO";
