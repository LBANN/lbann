################################################################################
## Copyright (c) 2014-2023, Lawrence Livermore National Security, LLC.
## Produced at the Lawrence Livermore National Laboratory.
## Written by the LBANN Research Team (B. Van Essen, et al.) listed in
## the CONTRIBUTORS file. <lbann-dev@llnl.gov>
##
## LLNL-CODE-697807.
## All rights reserved.
##
## This file is part of LBANN: Livermore Big Artificial Neural Network
## Toolkit. For details, see http://software.llnl.gov/LBANN or
## https://github.com/LLNL/LBANN.
##
## Licensed under the Apache License, Version 2.0 (the "Licensee"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at:
##
## http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
## implied. See the License for the specific language governing
## permissions and limitations under the license.
################################################################################

# Variables for LBANN CI.
.lbann-base-vars:
  variables:
    # This is based on the assumption that each runner will only ever
    # be able to run one pipeline on a given cluster at one time.
    SPACK_ENV_BASE_NAME: gitlab${SPACK_ENV_BASE_NAME_MODIFIER}-${CI_COMMIT_BRANCH}-${GITLAB_USER_LOGIN}-${SYSTEM_NAME}${SPACK_ENV_BASE_NAME_EXTENSION}-${CI_RUNNER_SHORT_TOKEN}

    # This variable is the name used to identify the job in the Slurm
    # queue. We need this to be able to access the correct jobid.
    JOB_NAME: ${CI_PROJECT_NAME}_${CI_PIPELINE_ID}${JOB_NAME_SUFFIX}

    # This is needed to ensure that we run as lbannusr.
    LLNL_SERVICE_USER: lbannusr

    # Catch2 output.
    # This directory is a pipeline-unique dumping ground for any
    # output files that would be hard to track down later. (In
    # particular, I ran a few tests where some stages had multiple
    # "spack-build-*" directories, so they were reporting dozens of
    # xml files of Catch2 output (there should be 17 -- 1 seq, 8 mpi,
    # 8 mpi-fs). Since the "*" there is a hash that's not computable
    # in this file, we cannot specify it correctly in an "artifacts"
    # section. So we just create our own results cache with known
    # name.
    #
    # NOTE: directories specified in a pipeline file are relative to
    # ${CI_PROJECT_DIR}. Therefore, shell scripts should be sure of
    # their working directory before attempting to use this as a
    # relative path. Alternatively, they should prefix
    # ${CI_PROJECT_DIR} and use absolute paths (absolute paths are not
    # allowed in pipeline files either, which is why this is not an
    # absolute path).
    RESULTS_DIR: results-${CI_PIPELINE_ID}

    # This needs to be imported here, too. Failure to do so causes
    # problems if it's not set.
    LBANN_CI_RUN_WEEKLY: ${LBANN_CI_RUN_WEEKLY}

    # Preserve any spack-build-* directories to allow for faster testing
    GIT_CLEAN_FLAGS: -ffdx
#    GIT_CLEAN_FLAGS: -ffdx -e spack-build-* -e builds/* -e LBANN_*.cmake -e LBANN_*_setup_build_tools.sh
  before_script:
    - export SPACK_USER_CACHE_PATH=${SPACK_USER_CACHE_PATH}
    - echo "SPACK_USER_CACHE_PATH=${SPACK_USER_CACHE_PATH}"

# Load the spack shell integration and load the environment.
.uses spack environment:
  before_script:
    - export SPACK_USER_CACHE_PATH=${SPACK_USER_CACHE_PATH}
    - source ${HOME}/${SPACK_REPO}/share/spack/setup-env.sh
    - source spack-ci-env-name.sh
    - ml use ${LBANN_MODFILES_DIR}
    - ml load lbann
    - echo "$(which lbann)"

.setup_spack:
  script:
    - export BUILD_TASKS=$(($(nproc) + 2))
    - echo "SPACK_REPO=${HOME}/${SPACK_REPO}"
    - export GITLAB_SUFFIX=`basename ${CI_BUILDS_DIR}`
    - export SPACK_ENV_NAME=${SPACK_ENV_BASE_NAME}-${GITLAB_SUFFIX}
    - source ${HOME}/${SPACK_REPO}/share/spack/setup-env.sh
    # Use a bit of redirection to properly interpret the WITH_CLEAN_BUILD flag
    - export SPACK_DEPS_FLAG_TRUE=${WITH_CLEAN_BUILD:+-d}
    - export SPACK_DEPS_FLAG=${SPACK_DEPS_FLAG_TRUE:--r}
    - export CLEAN_BUILD_FLAG=${WITH_CLEAN_BUILD:+--clean-build}

.setup_lbann:
  script:
    - export LBANN_BUILD_LABEL="lbann_${SYSTEM_NAME}_${SPACK_ENV_NAME}-${SPACK_ARCH_TARGET}"
    - export LBANN_BUILD_PARENT_DIR="${CI_PROJECT_DIR}/builds/${LBANN_BUILD_LABEL}"
    - export LBANN_BUILD_DIR="${LBANN_BUILD_PARENT_DIR}/build"
    - export LBANN_INSTALL_DIR="${LBANN_BUILD_PARENT_DIR}/install"
    - export LBANN_MODFILES_DIR="${LBANN_INSTALL_DIR}/etc/modulefiles"
    - echo "LBANN_BUILD_LABEL=${LBANN_BUILD_LABEL}"
    - echo "LBANN_BUILD_PARENT_DIR=${LBANN_BUILD_PARENT_DIR}"
    - echo "LBANN_BUILD_DIR=${LBANN_BUILD_DIR}"
    - echo "LBANN_INSTALL_DIR=${LBANN_INSTALL_DIR}"
    - echo "LBANN_MODFILES_DIR=${LBANN_MODFILES_DIR}"
    - ml use ${LBANN_MODFILES_DIR}
    - ml load lbann
    - echo "Using LBANN binary $(which lbann)"
    - echo "export SPACK_ENV_NAME=${SPACK_ENV_NAME}" > spack-ci-env-name.sh
    - echo "export SPACK_ARCH=${SPACK_ARCH}" >> spack-ci-env-name.sh
    - echo "export SPACK_ARCH_TARGET=${SPACK_ARCH_TARGET}" >> spack-ci-env-name.sh
    - echo "export LBANN_BUILD_PARENT_DIR=${LBANN_BUILD_PARENT_DIR}" >> spack-ci-env-name.sh
    - echo "export LBANN_MODFILES_DIR=${LBANN_MODFILES_DIR}" >> spack-ci-env-name.sh

.cleanup old build objects:
  rules:
    - exists:
      - spack-ci-env-name.sh
  script:
    - echo "== CLEAN BUILD DIRECTORY =="
    - source spack-ci-env-name.sh
    - echo "== CLEANING ${LBANN_BUILD_PARENT_DIR}/build =="
    - cmake --build ${LBANN_BUILD_PARENT_DIR}/build --target clean

# Cleanup the pipeline's Spack environment.
# Switching over to reusing Spack environments for each feature branch so don't remove them immediately
# Cleanup any build directories and spack environments older than 5 days since last use
.cleanup old spack environment:
  script:
    - echo "== CLEAN CI =="
    - !reference [.cleanup old build objects, script]
    - echo "== REMOVING BUILD RESOURCES =="
    - find ${CI_PROJECT_DIR}/builds -maxdepth 1 -mtime +2 -name "lbann_*" -type d -print -exec rm -r {} \;
    - find ${CI_PROJECT_DIR} -maxdepth 1 -mtime +2 -name "LBANN_*_setup_build_tools.sh" -type f -print -exec rm {} \;
    - find ${CI_PROJECT_DIR} -maxdepth 1 -mtime +2 -name "LBANN_*.cmake" -type f -print -exec rm {} \;
    - find ${CI_PROJECT_DIR} -maxdepth 2 -mtime +2 -type d -path "*/builds/lbann_*" -print -exec rm -r {} \;
    - echo "== REMOVING OLD BUILD RESOURCES =="
    - source ${HOME}/${SPACK_REPO}/share/spack/setup-env.sh
    - find ${CI_PROJECT_DIR} -maxdepth 1 -mtime +5 -name "spack-build-*" -type d -exec rm -r {} \;
    - find ${HOME}/${SPACK_REPO}/var/spack/environments/ -maxdepth 1 -mtime +5 -type d -exec basename {} \; | xargs -r spack env rm --yes-to-all
  allow_failure: true

.lbann-artifacts:
  artifacts:
    paths:
      - spack-*.txt
      - spack-ci-env-name.sh
      - LBANN_${SYSTEM_NAME}_${SPACK_ENV_BASE_NAME}-*${CI_CONCURRENT_ID}-*.cmake
      - LBANN_${SYSTEM_NAME}_${SPACK_ENV_BASE_NAME}-*${CI_CONCURRENT_ID}-*_setup_build_tools.sh
      - builds/lbann_${SYSTEM_NAME}_${SPACK_ENV_BASE_NAME}-*${CI_CONCURRENT_ID}-*/install/*
      - builds/lbann_${SYSTEM_NAME}_${SPACK_ENV_BASE_NAME}-*${CI_CONCURRENT_ID}-*/*.sh
      - builds/lbann_${SYSTEM_NAME}_${SPACK_ENV_BASE_NAME}-*${CI_CONCURRENT_ID}-*/*.cmake
      - builds/lbann_${SYSTEM_NAME}_${SPACK_ENV_BASE_NAME}-*${CI_CONCURRENT_ID}-*/build/CMakeCache.txt
      - builds/lbann_${SYSTEM_NAME}_${SPACK_ENV_BASE_NAME}-*${CI_CONCURRENT_ID}-*/build/build.ninja
      - ${RESULTS_DIR}/*
    exclude:
      - builds/lbann_${SYSTEM_NAME}_${SPACK_ENV_BASE_NAME}-*${CI_CONCURRENT_ID}-*/build/**/*.o
      - builds/lbann_${SYSTEM_NAME}_${SPACK_ENV_BASE_NAME}-*${CI_CONCURRENT_ID}-*/build/unit_test/*

.lbann-test-rules:
  rules:
    - if: $JOB_NAME_SUFFIX == "_distconv"
      when: never
    - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME == $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME

# .check_allocation:
#   script:
#     - |
#       if [ $FF_USE_NEW_BASH_EVAL_STRATEGY ]; then
#         echo "== Using the new eval strategy =="
#       else
#         echo "== Using the old eval strategy =="
#       fi
#     - |
#       if [ $FF_ENABLE_BASH_EXIT_CODE_CHECK ]; then
#         echo "== Enable BASH exit code check =="
#       else
#         echo "== Not checking the exit code =="
#       fi
#     - |
#       if [ -z "${JOB_ID}" ]; then
#         echo "== GITLAB FAILED TO GET ALLOCATION - BAIL =="
#         exit 42
#       else
#         echo "== CI JOB RUNNING WITH JOB_ID = $JOB_ID =="
#       fi
